{"question_id": "348196-52", "query": "Create list `instancelist` containing 29 objects of type MyClass", "retrieval": "python.library.functions#isinstance    python isinstance: Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual) subclass thereof. If object is not an object of the given type, the function always returns False. If classinfo is a tuple of type objects (or recursively, other such tuples), return True if object is an instance of any of the types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised.    python.library.stdtypes#class.__subclasses__    python class __subclasses__: Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order. Example    python.library.functions#object    python object: Return a new featureless object. object is a base for all classes. It has the methods that are common to all instances of Python classes. This function does not accept any arguments.    ", "rationale": "MyClass() instantiates new object of type MyClass. instancelist = [MyClass()] creates list \u2018instancelist\u2019 containing 1 object of type MyClass. instancelist = [MyClass() for i in range(29)] creates list \u2018instancelist\u2019 containing 29 objects of type MyClass. The answer is instancelist = [MyClass() for i in range(29)]."}
{"question_id": "11703064-52", "query": "append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`", "retrieval": "python.library.operator#operator.itemgetter    python operator itemgetter: Return a callable object that fetches item from its operand using the operand\u2019s __getitem__() method. If multiple items are specified, returns a tuple of lookup values. For example    python.library.functions#zip    python zip: Make an iterator that aggregates elements from each of the iterables.    python.library.functools#functools.reduce    python functools reduce: Apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value. For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and the right argument, y, is the update value from the iterable. If the optional initializer is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If initializer is not given and iterable contains only one item, the first item is returned.    ", "rationale": "zip(list1, list2) makes an iterator of tuple pairs of the grouped list elements from list1 and list2. [(a + b) for a, b in zip(list1, list2)] makes a list of sums of each tuple pair in zip(list1, list2). list3 = [(a + b) for a, b in zip(list1, list2)] assigns this list of sums to list3. The answer is list3 = [(a + b) for a, b in zip(list1, list2)]."}
{"question_id": "12096252-61", "query": "use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'", "retrieval": "numpy.reference.generated.numpy.isin    numpy isin: Calculates element in test_elements, broadcasting over element only. Returns a boolean array of the same shape as element that is True where an element of element is in test_elements and False otherwise.    pandas.reference.api.pandas.dataframe.isin    pandas dataframe isin: Whether each element in the DataFrame is contained in values.    pandas.reference.api.pandas.series.isin    pandas series isin: Whether elements in Series are contained in values.    ", "rationale": "df[\u2018A\u2019] returns `df`'s column 'A' as a pandas series. df[\u2018A\u2019].isin([3, 6]) returns a pandas series of booleans where each boolean denotes whether the corresponding element of df[\u2018A\u2019] is in the list of values [3, 6]. df[df['A'].isin([3, 6])] selects rows from `df` based on whether the value in column 'A' is contained in the list of values [3, 6]. The answer is df[df['A'].isin([3, 6])]."}
{"question_id": "17757450-20", "query": "convert list `data` into a string of its elements", "retrieval": "python.library.stdtypes#str.join    python str join: Return a string which is the concatenation of the strings in iterable. A TypeError will be raised if there are any non-string values in iterable, including bytes objects. The separator between elements is the string providing this method.    python.library.stdtypes#bytearray.join    python bytearray join: Return a bytes or bytearray object which is the concatenation of the binary data sequences in iterable. A TypeError will be raised if there are any values in iterable that are not bytes-like objects, including str objects. The separator between elements is the contents of the bytes or bytearray object providing this method.    python.library.stdtypes#bytes.join    python bytes join: Return a bytes or bytearray object which is the concatenation of the binary data sequences in iterable. A TypeError will be raised if there are any values in iterable that are not bytes-like objects, including str objects. The separator between elements is the contents of the bytes or bytearray object providing this method.    ", "rationale": "map(str, data) returns a new list where every element is the corresponding element of data, cast to a string. ''.join(map(str, data)) returns a string formed from the elements of data in order, joined by '', the empty string. This is a string of the elements of data. print(''.join(map(str, data))) prints the string of elements of data to the output stream. The answer is print(''.join(map(str, data)))."}
