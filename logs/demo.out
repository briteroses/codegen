Prompt:
('You are an expert language model in code generation. Come up with a series '
 'of rationales for code generation problems under the following '
 'specification. Given a query for a coding task and a list of code '
 'documentation, please reason through the provided documentation to arrive at '
 'the answer code, and print the answer at the end of the output, in the '
 'format "Therefore, the answer is " with your answer code stated afterwards.\n'
 '\n'
 'Query: use a list of values `[3,6]` to select rows from a pandas dataframe '
 "`df`'s column 'A'\n"
 'Relevant documentation: numpy.reference.generated.numpy.isin numpy.isin '
 'numpy.isin(element, test_elements, assume_unique=False, '
 'invert=False)[source] Calculates element in test_elements, broadcasting over '
 'element only. Returns a boolean array of the same shape as element that is '
 'True where an element of element is in test_elements and False otherwise. '
 'Parameters elementarray_like Input array. test_elementsarray_like The values '
 'against which to test each value of element. This argument is flattened if '
 'it is an array or array_like. See notes for behavior with non-array-like '
 'parameters. assume_uniquebool, optional If True, the input arrays are both '
 'assumed to be unique, which can speed up the calculation. Default is False. '
 'invertbool, optional If True, the values in the returned array are inverted, '
 'as if calculating element not in test_elements. Default is False. np.isin(a, '
 'b, invert=True) is equivalent to (but faster than) np.invert(np.isin(a, b)). '
 'Returns isinndarray, bool Has the same shape as element. The values '
 'element[isin] are in test_elements. See also in1d Flattened version of this '
 'function. numpy.lib.arraysetops Module with a number of other functions for '
 'performing set operations on arrays. Notes isin is an element-wise function '
 'version of the python keyword in. isin(a, b) is roughly equivalent to '
 'np.array([item in b for item in a]) if a and b are 1-D sequences. element '
 'and test_elements are converted to arrays if they are not already. If '
 'test_elements is a set (or other non-sequence collection) it will be '
 'converted to an object array with one element, rather than an array of the '
 'values contained in test_elements. This is a consequence of the array '
 'constructor’s way of handling non-sequence collections. Converting the set '
 'to a list usually gives the desired behavior. New in version 1.13.0. '
 'Examples >>> element = 2*np.arange(4).reshape((2, 2)) >>> element array([[0, '
 '2], [4, 6]]) >>> test_elements = [1, 2, 4, 8] >>> mask = np.isin(element, '
 'test_elements) >>> mask array([[False, True], [ True, False]]) >>> '
 'element[mask] array([2, 4]) The indices of the matched values can be '
 'obtained with nonzero: >>> np.nonzero(mask) (array([0, 1]), array([1, 0])) '
 'The test can also be inverted: >>> mask = np.isin(element, test_elements, '
 'invert=True) >>> mask array([[ True, False], [False, True]]) >>> '
 'element[mask] array([0, 6]) Because of how array handles sets, the following '
 'does not work as expected: >>> test_set = {1, 2, 4, 8} >>> np.isin(element, '
 'test_set) array([[False, False], [False, False]]) Casting the set to a list '
 'gives the expected result: >>> np.isin(element, list(test_set)) '
 'array([[False, True], [ True, '
 'False]])pandas.reference.api.pandas.dataframe.isin pandas.DataFrame.isin '
 'DataFrame.isin(values)[source] Whether each element in the DataFrame is '
 'contained in values. Parameters values:iterable, Series, DataFrame or dict '
 'The result will only be true at a location if all the labels match. If '
 'values is a Series, that’s the index. If values is a dict, the keys must be '
 'the column names, which must match. If values is a DataFrame, then both the '
 'index and column labels must match. Returns DataFrame DataFrame of booleans '
 'showing whether each element in the DataFrame is contained in values. See '
 'also DataFrame.eq Equality test for DataFrame. Series.isin Equivalent method '
 'on Series. Series.str.contains Test if pattern or regex is contained within '
 "a string of a Series or Index. Examples >>> df = pd.DataFrame({'num_legs': "
 "[2, 4], 'num_wings': [2, 0]}, ... index=['falcon', 'dog']) >>> df num_legs "
 'num_wings falcon 2 2 dog 4 0 When values is a list check whether every value '
 'in the DataFrame is present in the list (which animals have 0 or 2 legs or '
 'wings) >>> df.isin([0, 2]) num_legs num_wings falcon True True dog False '
 'True To check if values is not in the DataFrame, use the ~ operator: >>> '
 '~df.isin([0, 2]) num_legs num_wings falcon False False dog True False When '
 'values is a dict, we can pass values to check for each column separately: '
 ">>> df.isin({'num_wings': [0, 3]}) num_legs num_wings falcon False False dog "
 'False True When values is a Series or DataFrame the index and column must '
 'match. Note that ‘falcon’ does not match based on the number of legs in '
 "other. >>> other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]}, "
 "... index=['spider', 'falcon']) >>> df.isin(other) num_legs num_wings falcon "
 'False True dog False Falsepandas.reference.api.pandas.series.isin '
 'pandas.Series.isin Series.isin(values)[source] Whether elements in Series '
 'are contained in values. Return a boolean Series showing whether each '
 'element in the Series matches an element in the passed sequence of values '
 'exactly. Parameters values:set or list-like The sequence of values to test. '
 'Passing in a single string will raise a TypeError. Instead, turn a single '
 'string into a list of one element. Returns Series Series of booleans '
 'indicating if each element is in values. Raises TypeError If values is a '
 'string See also DataFrame.isin Equivalent method on DataFrame. Examples >>> '
 "s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama', ... 'hippo'], "
 "name='animal') >>> s.isin(['cow', 'lama']) 0 True 1 True 2 True 3 False 4 "
 'True 5 False Name: animal, dtype: bool To invert the boolean values, use the '
 "~ operator: >>> ~s.isin(['cow', 'lama']) 0 False 1 False 2 False 3 True 4 "
 'False 5 True Name: animal, dtype: bool Passing a single string as '
 "s.isin('lama') will raise an error. Use a list of one element instead: >>> "
 "s.isin(['lama']) 0 True 1 False 2 True 3 False 4 True 5 False Name: animal, "
 'dtype: bool Strings and integers are distinct and are therefore not '
 "comparable: >>> pd.Series([1]).isin(['1']) 0 False dtype: bool >>> "
 "pd.Series([1.1]).isin(['1.1']) 0 False dtype: bool\n"
 "Rationale: df[‘A’] returns `df`'s column 'A' as a pandas series. "
 'df[‘A’].isin([3, 6]) returns a pandas series of booleans where each boolean '
 'denotes whether the corresponding element of df[‘A’] is in the list of '
 "values [3, 6]. df[df['A'].isin([3, 6])] selects rows from `df` based on "
 "whether the value in column 'A' is contained in the list of values [3, 6]. "
 "The answer is df[df['A'].isin([3, 6])].\n"
 '\n'
 'Query: append the sum of each tuple pair in the grouped list `list1` and '
 'list `list2` elements to list `list3`\n'
 'Relevant documentation: python.library.operator#operator.itemgetter '
 'operator.itemgetter(item) operator.itemgetter(*items) Return a callable '
 'object that fetches item from its operand using the operand’s __getitem__() '
 'method. If multiple items are specified, returns a tuple of lookup values. '
 'For example: After f = itemgetter(2), the call f(r) returns r[2]. After g = '
 'itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3]). Equivalent '
 'to: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): '
 'return obj[item] else: def g(obj): return tuple(obj[item] for item in items) '
 'return g The items can be any type accepted by the operand’s __getitem__() '
 'method. Dictionaries accept any hashable value. Lists, tuples, and strings '
 "accept an index or a slice: >>> itemgetter(1)('ABCDEFG') 'B' >>> "
 "itemgetter(1, 3, 5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2, "
 "None))('ABCDEFG') 'CDEFG' >>> soldier = dict(rank='captain', "
 "name='dotterbart') >>> itemgetter('rank')(soldier) 'captain' Example of "
 'using itemgetter() to retrieve specific fields from a tuple record: >>> '
 "inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> "
 'getcount = itemgetter(1) >>> list(map(getcount, inventory)) [3, 2, 5, 1] >>> '
 "sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), "
 "('pear', 5)]python.library.functions#zip zip(*iterables) Make an iterator "
 'that aggregates elements from each of the iterables. Returns an iterator of '
 'tuples, where the i-th tuple contains the i-th element from each of the '
 'argument sequences or iterables. The iterator stops when the shortest input '
 'iterable is exhausted. With a single iterable argument, it returns an '
 'iterator of 1-tuples. With no arguments, it returns an empty iterator. '
 "Equivalent to: def zip(*iterables): # zip('ABCD', 'xy') --> Ax By sentinel = "
 'object() iterators = [iter(it) for it in iterables] while iterators: result '
 '= [] for it in iterators: elem = next(it, sentinel) if elem is sentinel: '
 'return result.append(elem) yield tuple(result) The left-to-right evaluation '
 'order of the iterables is guaranteed. This makes possible an idiom for '
 'clustering a data series into n-length groups using zip(*[iter(s)]*n). This '
 'repeats the same iterator n times so that each output tuple has the result '
 'of n calls to the iterator. This has the effect of dividing the input into '
 'n-length chunks. zip() should only be used with unequal length inputs when '
 'you don’t care about trailing, unmatched values from the longer iterables. '
 'If those values are important, use itertools.zip_longest() instead. zip() in '
 'conjunction with the * operator can be used to unzip a list: >>> x = [1, 2, '
 '3] >>> y = [4, 5, 6] >>> zipped = zip(x, y) >>> list(zipped) [(1, 4), (2, '
 '5), (3, 6)] >>> x2, y2 = zip(*zip(x, y)) >>> x == list(x2) and y == list(y2) '
 'Truepython.library.functools#functools.reduce functools.reduce(function, '
 'iterable[, initializer]) Apply function of two arguments cumulatively to the '
 'items of iterable, from left to right, so as to reduce the iterable to a '
 'single value. For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) '
 'calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value '
 'and the right argument, y, is the update value from the iterable. If the '
 'optional initializer is present, it is placed before the items of the '
 'iterable in the calculation, and serves as a default when the iterable is '
 'empty. If initializer is not given and iterable contains only one item, the '
 'first item is returned. Roughly equivalent to: def reduce(function, '
 'iterable, initializer=None): it = iter(iterable) if initializer is None: '
 'value = next(it) else: value = initializer for element in it: value = '
 'function(value, element) return value See itertools.accumulate() for an '
 'iterator that yields all intermediate values.\n'
 'Rationale: zip(list1, list2) makes an iterator of tuple pairs of the grouped '
 'list elements from list1 and list2. [(a + b) for a, b in zip(list1, list2)] '
 'makes a list of sums of each tuple pair in zip(list1, list2). list3 = [(a + '
 'b) for a, b in zip(list1, list2)] assigns this list of sums to list3. The '
 'answer is list3 = [(a + b) for a, b in zip(list1, list2)].\n'
 '\n'
 'Query: Create list `instancelist` containing 29 objects of type MyClass\n'
 'Relevant documentation: python.library.functions#isinstance '
 'isinstance(object, classinfo) Return True if the object argument is an '
 'instance of the classinfo argument, or of a (direct, indirect or virtual) '
 'subclass thereof. If object is not an object of the given type, the function '
 'always returns False. If classinfo is a tuple of type objects (or '
 'recursively, other such tuples), return True if object is an instance of any '
 'of the types. If classinfo is not a type or tuple of types and such tuples, '
 'a TypeError exception is raised.python.library.stdtypes#class.__subclasses__ '
 'class.__subclasses__() Each class keeps a list of weak references to its '
 'immediate subclasses. This method returns a list of all those references '
 'still alive. The list is in definition order. Example: >>> '
 "int.__subclasses__() [<class 'bool'>]python.library.functions#object class "
 'object Return a new featureless object. object is a base for all classes. It '
 'has the methods that are common to all instances of Python classes. This '
 'function does not accept any arguments. Note object does not have a '
 '__dict__, so you can’t assign arbitrary attributes to an instance of the '
 'object class.\n'
 'Rationale: MyClass() instantiates new object of type MyClass. instancelist = '
 '[MyClass()] creates list ‘instancelist’ containing 1 object of type MyClass. '
 'instancelist = [MyClass() for i in range(29)] creates list ‘instancelist’ '
 'containing 29 objects of type MyClass. The answer is instancelist = '
 '[MyClass() for i in range(29)].\n'
 '\n'
 'Query: convert list `data` into a string of its elements\n'
 "Relevant documentation: ' python.library.stdtypes#str.join "
 'str.join(iterable) Return a string which is the concatenation of the strings '
 'in iterable. A TypeError will be raised if there are any non-string values '
 'in iterable, including bytes objects. The separator between elements is the '
 'string providing this method.python.library.stdtypes#bytearray.join '
 'bytes.join(iterable) bytearray.join(iterable) Return a bytes or bytearray '
 'object which is the concatenation of the binary data sequences in iterable. '
 'A TypeError will be raised if there are any values in iterable that are not '
 'bytes-like objects, including str objects. The separator between elements is '
 'the contents of the bytes or bytearray object providing this '
 'method.python.library.stdtypes#bytes.join bytes.join(iterable) '
 'bytearray.join(iterable) Return a bytes or bytearray object which is the '
 'concatenation of the binary data sequences in iterable. A TypeError will be '
 'raised if there are any values in iterable that are not bytes-like objects, '
 'including str objects. The separator between elements is the contents of the '
 "bytes or bytearray object providing this method.'\n"
 'Rationale: map(str, data) returns a new list where every element is the '
 "corresponding element of data, cast to a string. ''.join(map(str, data)) "
 "returns a string formed from the elements of data in order, joined by '', "
 'the empty string. This is a string of the elements of data. '
 "print(''.join(map(str, data))) prints the string of elements of data to the "
 "output stream. The answer is print(''.join(map(str, data))).\n"
 '\n'
 "Query: Find all the lists from a lists of list 'items' if third element in "
 "all sub-lists is '0'\n"
 'Relevant code documentation: python.library.functions#any any(iterable) '
 'Return True if any element of the iterable is true. If the iterable is '
 'empty, return False. Equivalent to: def any(iterable): for element in '
 'iterable: if element: return True return '
 'Falsepython.library.operator#operator.itemgetter operator.itemgetter(item) '
 'operator.itemgetter(*items) Return a callable object that fetches item from '
 'its operand using the operand’s __getitem__() method. If multiple items are '
 'specified, returns a tuple of lookup values. For example: After f = '
 'itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), '
 'the call g(r) returns (r[2], r[5], r[3]). Equivalent to: def '
 'itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return '
 'obj[item] else: def g(obj): return tuple(obj[item] for item in items) return '
 'g The items can be any type accepted by the operand’s __getitem__() method. '
 'Dictionaries accept any hashable value. Lists, tuples, and strings accept an '
 "index or a slice: >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1, 3, "
 "5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2, None))('ABCDEFG') "
 "'CDEFG' >>> soldier = dict(rank='captain', name='dotterbart') >>> "
 "itemgetter('rank')(soldier) 'captain' Example of using itemgetter() to "
 "retrieve specific fields from a tuple record: >>> inventory = [('apple', 3), "
 "('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> "
 'list(map(getcount, inventory)) [3, 2, 5, 1] >>> sorted(inventory, '
 "key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', "
 '5)]python.library.itertools#itertools.chain.from_iterable classmethod '
 'chain.from_iterable(iterable) Alternate constructor for chain(). Gets '
 'chained inputs from a single iterable argument that is evaluated lazily. '
 'Roughly equivalent to: def from_iterable(iterables): # '
 "chain.from_iterable(['ABC', 'DEF']) --> A B C D E F for it in iterables: for "
 'element in it: yield element\n'
 'Rationale:')



Completion:
('You are an expert language model in code generation. Come up with a series '
 'of rationales for code generation problems under the following '
 'specification. Given a query for a coding task and a list of code '
 'documentation, please reason through the provided documentation to arrive at '
 'the answer code, and print the answer at the end of the output, in the '
 'format "Therefore, the answer is " with your answer code stated afterwards.\n'
 '\n'
 'Query: use a list of values `[3,6]` to select rows from a pandas dataframe '
 "`df`'s column 'A'\n"
 'Relevant documentation: numpy.reference.generated.numpy.isin numpy.isin '
 'numpy.isin(element, test_elements, assume_unique=False, '
 'invert=False)[source] Calculates element in test_elements, broadcasting over '
 'element only. Returns a boolean array of the same shape as element that is '
 'True where an element of element is in test_elements and False otherwise. '
 'Parameters elementarray_like Input array. test_elementsarray_like The values '
 'against which to test each value of element. This argument is flattened if '
 'it is an array or array_like. See notes for behavior with non-array-like '
 'parameters. assume_uniquebool, optional If True, the input arrays are both '
 'assumed to be unique, which can speed up the calculation. Default is False. '
 'invertbool, optional If True, the values in the returned array are inverted, '
 'as if calculating element not in test_elements. Default is False. np.isin(a, '
 'b, invert=True) is equivalent to (but faster than) np.invert(np.isin(a, b)). '
 'Returns isinndarray, bool Has the same shape as element. The values '
 'element[isin] are in test_elements. See also in1d Flattened version of this '
 'function. numpy.lib.arraysetops Module with a number of other functions for '
 'performing set operations on arrays. Notes isin is an element-wise function '
 'version of the python keyword in. isin(a, b) is roughly equivalent to '
 'np.array([item in b for item in a]) if a and b are 1-D sequences. element '
 'and test_elements are converted to arrays if they are not already. If '
 'test_elements is a set (or other non-sequence collection) it will be '
 'converted to an object array with one element, rather than an array of the '
 'values contained in test_elements. This is a consequence of the array '
 'constructor’s way of handling non-sequence collections. Converting the set '
 'to a list usually gives the desired behavior. New in version 1.13.0. '
 'Examples >>> element = 2*np.arange(4).reshape((2, 2)) >>> element array([[0, '
 '2], [4, 6]]) >>> test_elements = [1, 2, 4, 8] >>> mask = np.isin(element, '
 'test_elements) >>> mask array([[False, True], [ True, False]]) >>> '
 'element[mask] array([2, 4]) The indices of the matched values can be '
 'obtained with nonzero: >>> np.nonzero(mask) (array([0, 1]), array([1, 0])) '
 'The test can also be inverted: >>> mask = np.isin(element, test_elements, '
 'invert=True) >>> mask array([[ True, False], [False, True]]) >>> '
 'element[mask] array([0, 6]) Because of how array handles sets, the following '
 'does not work as expected: >>> test_set = {1, 2, 4, 8} >>> np.isin(element, '
 'test_set) array([[False, False], [False, False]]) Casting the set to a list '
 'gives the expected result: >>> np.isin(element, list(test_set)) '
 'array([[False, True], [ True, '
 'False]])pandas.reference.api.pandas.dataframe.isin pandas.DataFrame.isin '
 'DataFrame.isin(values)[source] Whether each element in the DataFrame is '
 'contained in values. Parameters values:iterable, Series, DataFrame or dict '
 'The result will only be true at a location if all the labels match. If '
 'values is a Series, that’s the index. If values is a dict, the keys must be '
 'the column names, which must match. If values is a DataFrame, then both the '
 'index and column labels must match. Returns DataFrame DataFrame of booleans '
 'showing whether each element in the DataFrame is contained in values. See '
 'also DataFrame.eq Equality test for DataFrame. Series.isin Equivalent method '
 'on Series. Series.str.contains Test if pattern or regex is contained within '
 "a string of a Series or Index. Examples >>> df = pd.DataFrame({'num_legs': "
 "[2, 4], 'num_wings': [2, 0]}, ... index=['falcon', 'dog']) >>> df num_legs "
 'num_wings falcon 2 2 dog 4 0 When values is a list check whether every value '
 'in the DataFrame is present in the list (which animals have 0 or 2 legs or '
 'wings) >>> df.isin([0, 2]) num_legs num_wings falcon True True dog False '
 'True To check if values is not in the DataFrame, use the ~ operator: >>> '
 '~df.isin([0, 2]) num_legs num_wings falcon False False dog True False When '
 'values is a dict, we can pass values to check for each column separately: '
 ">>> df.isin({'num_wings': [0, 3]}) num_legs num_wings falcon False False dog "
 'False True When values is a Series or DataFrame the index and column must '
 'match. Note that ‘falcon’ does not match based on the number of legs in '
 "other. >>> other = pd.DataFrame({'num_legs': [8, 3], 'num_wings': [0, 2]}, "
 "... index=['spider', 'falcon']) >>> df.isin(other) num_legs num_wings falcon "
 'False True dog False Falsepandas.reference.api.pandas.series.isin '
 'pandas.Series.isin Series.isin(values)[source] Whether elements in Series '
 'are contained in values. Return a boolean Series showing whether each '
 'element in the Series matches an element in the passed sequence of values '
 'exactly. Parameters values:set or list-like The sequence of values to test. '
 'Passing in a single string will raise a TypeError. Instead, turn a single '
 'string into a list of one element. Returns Series Series of booleans '
 'indicating if each element is in values. Raises TypeError If values is a '
 'string See also DataFrame.isin Equivalent method on DataFrame. Examples >>> '
 "s = pd.Series(['lama', 'cow', 'lama', 'beetle', 'lama', ... 'hippo'], "
 "name='animal') >>> s.isin(['cow', 'lama']) 0 True 1 True 2 True 3 False 4 "
 'True 5 False Name: animal, dtype: bool To invert the boolean values, use the '
 "~ operator: >>> ~s.isin(['cow', 'lama']) 0 False 1 False 2 False 3 True 4 "
 'False 5 True Name: animal, dtype: bool Passing a single string as '
 "s.isin('lama') will raise an error. Use a list of one element instead: >>> "
 "s.isin(['lama']) 0 True 1 False 2 True 3 False 4 True 5 False Name: animal, "
 'dtype: bool Strings and integers are distinct and are therefore not '
 "comparable: >>> pd.Series([1]).isin(['1']) 0 False dtype: bool >>> "
 "pd.Series([1.1]).isin(['1.1']) 0 False dtype: bool\n"
 "Rationale: df[‘A’] returns `df`'s column 'A' as a pandas series. "
 'df[‘A’].isin([3, 6]) returns a pandas series of booleans where each boolean '
 'denotes whether the corresponding element of df[‘A’] is in the list of '
 "values [3, 6]. df[df['A'].isin([3, 6])] selects rows from `df` based on "
 "whether the value in column 'A' is contained in the list of values [3, 6]. "
 "The answer is df[df['A'].isin([3, 6])].\n"
 '\n'
 'Query: append the sum of each tuple pair in the grouped list `list1` and '
 'list `list2` elements to list `list3`\n'
 'Relevant documentation: python.library.operator#operator.itemgetter '
 'operator.itemgetter(item) operator.itemgetter(*items) Return a callable '
 'object that fetches item from its operand using the operand’s __getitem__() '
 'method. If multiple items are specified, returns a tuple of lookup values. '
 'For example: After f = itemgetter(2), the call f(r) returns r[2]. After g = '
 'itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3]). Equivalent '
 'to: def itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): '
 'return obj[item] else: def g(obj): return tuple(obj[item] for item in items) '
 'return g The items can be any type accepted by the operand’s __getitem__() '
 'method. Dictionaries accept any hashable value. Lists, tuples, and strings '
 "accept an index or a slice: >>> itemgetter(1)('ABCDEFG') 'B' >>> "
 "itemgetter(1, 3, 5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2, "
 "None))('ABCDEFG') 'CDEFG' >>> soldier = dict(rank='captain', "
 "name='dotterbart') >>> itemgetter('rank')(soldier) 'captain' Example of "
 'using itemgetter() to retrieve specific fields from a tuple record: >>> '
 "inventory = [('apple', 3), ('banana', 2), ('pear', 5), ('orange', 1)] >>> "
 'getcount = itemgetter(1) >>> list(map(getcount, inventory)) [3, 2, 5, 1] >>> '
 "sorted(inventory, key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), "
 "('pear', 5)]python.library.functions#zip zip(*iterables) Make an iterator "
 'that aggregates elements from each of the iterables. Returns an iterator of '
 'tuples, where the i-th tuple contains the i-th element from each of the '
 'argument sequences or iterables. The iterator stops when the shortest input '
 'iterable is exhausted. With a single iterable argument, it returns an '
 'iterator of 1-tuples. With no arguments, it returns an empty iterator. '
 "Equivalent to: def zip(*iterables): # zip('ABCD', 'xy') --> Ax By sentinel = "
 'object() iterators = [iter(it) for it in iterables] while iterators: result '
 '= [] for it in iterators: elem = next(it, sentinel) if elem is sentinel: '
 'return result.append(elem) yield tuple(result) The left-to-right evaluation '
 'order of the iterables is guaranteed. This makes possible an idiom for '
 'clustering a data series into n-length groups using zip(*[iter(s)]*n). This '
 'repeats the same iterator n times so that each output tuple has the result '
 'of n calls to the iterator. This has the effect of dividing the input into '
 'n-length chunks. zip() should only be used with unequal length inputs when '
 'you don’t care about trailing, unmatched values from the longer iterables. '
 'If those values are important, use itertools.zip_longest() instead. zip() in '
 'conjunction with the * operator can be used to unzip a list: >>> x = [1, 2, '
 '3] >>> y = [4, 5, 6] >>> zipped = zip(x, y) >>> list(zipped) [(1, 4), (2, '
 '5), (3, 6)] >>> x2, y2 = zip(*zip(x, y)) >>> x == list(x2) and y == list(y2) '
 'Truepython.library.functools#functools.reduce functools.reduce(function, '
 'iterable[, initializer]) Apply function of two arguments cumulatively to the '
 'items of iterable, from left to right, so as to reduce the iterable to a '
 'single value. For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) '
 'calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value '
 'and the right argument, y, is the update value from the iterable. If the '
 'optional initializer is present, it is placed before the items of the '
 'iterable in the calculation, and serves as a default when the iterable is '
 'empty. If initializer is not given and iterable contains only one item, the '
 'first item is returned. Roughly equivalent to: def reduce(function, '
 'iterable, initializer=None): it = iter(iterable) if initializer is None: '
 'value = next(it) else: value = initializer for element in it: value = '
 'function(value, element) return value See itertools.accumulate() for an '
 'iterator that yields all intermediate values.\n'
 'Rationale: zip(list1, list2) makes an iterator of tuple pairs of the grouped '
 'list elements from list1 and list2. [(a + b) for a, b in zip(list1, list2)] '
 'makes a list of sums of each tuple pair in zip(list1, list2). list3 = [(a + '
 'b) for a, b in zip(list1, list2)] assigns this list of sums to list3. The '
 'answer is list3 = [(a + b) for a, b in zip(list1, list2)].\n'
 '\n'
 'Query: Create list `instancelist` containing 29 objects of type MyClass\n'
 'Relevant documentation: python.library.functions#isinstance '
 'isinstance(object, classinfo) Return True if the object argument is an '
 'instance of the classinfo argument, or of a (direct, indirect or virtual) '
 'subclass thereof. If object is not an object of the given type, the function '
 'always returns False. If classinfo is a tuple of type objects (or '
 'recursively, other such tuples), return True if object is an instance of any '
 'of the types. If classinfo is not a type or tuple of types and such tuples, '
 'a TypeError exception is raised.python.library.stdtypes#class.__subclasses__ '
 'class.__subclasses__() Each class keeps a list of weak references to its '
 'immediate subclasses. This method returns a list of all those references '
 'still alive. The list is in definition order. Example: >>> '
 "int.__subclasses__() [<class 'bool'>]python.library.functions#object class "
 'object Return a new featureless object. object is a base for all classes. It '
 'has the methods that are common to all instances of Python classes. This '
 'function does not accept any arguments. Note object does not have a '
 '__dict__, so you can’t assign arbitrary attributes to an instance of the '
 'object class.\n'
 'Rationale: MyClass() instantiates new object of type MyClass. instancelist = '
 '[MyClass()] creates list ‘instancelist’ containing 1 object of type MyClass. '
 'instancelist = [MyClass() for i in range(29)] creates list ‘instancelist’ '
 'containing 29 objects of type MyClass. The answer is instancelist = '
 '[MyClass() for i in range(29)].\n'
 '\n'
 'Query: convert list `data` into a string of its elements\n'
 "Relevant documentation: ' python.library.stdtypes#str.join "
 'str.join(iterable) Return a string which is the concatenation of the strings '
 'in iterable. A TypeError will be raised if there are any non-string values '
 'in iterable, including bytes objects. The separator between elements is the '
 'string providing this method.python.library.stdtypes#bytearray.join '
 'bytes.join(iterable) bytearray.join(iterable) Return a bytes or bytearray '
 'object which is the concatenation of the binary data sequences in iterable. '
 'A TypeError will be raised if there are any values in iterable that are not '
 'bytes-like objects, including str objects. The separator between elements is '
 'the contents of the bytes or bytearray object providing this '
 'method.python.library.stdtypes#bytes.join bytes.join(iterable) '
 'bytearray.join(iterable) Return a bytes or bytearray object which is the '
 'concatenation of the binary data sequences in iterable. A TypeError will be '
 'raised if there are any values in iterable that are not bytes-like objects, '
 'including str objects. The separator between elements is the contents of the '
 "bytes or bytearray object providing this method.'\n"
 'Rationale: map(str, data) returns a new list where every element is the '
 "corresponding element of data, cast to a string. ''.join(map(str, data)) "
 "returns a string formed from the elements of data in order, joined by '', "
 'the empty string. This is a string of the elements of data. '
 "print(''.join(map(str, data))) prints the string of elements of data to the "
 "output stream. The answer is print(''.join(map(str, data))).\n"
 '\n'
 "Query: Find all the lists from a lists of list 'items' if third element in "
 "all sub-lists is '0'\n"
 'Relevant code documentation: python.library.functions#any any(iterable) '
 'Return True if any element of the iterable is true. If the iterable is '
 'empty, return False. Equivalent to: def any(iterable): for element in '
 'iterable: if element: return True return '
 'Falsepython.library.operator#operator.itemgetter operator.itemgetter(item) '
 'operator.itemgetter(*items) Return a callable object that fetches item from '
 'its operand using the operand’s __getitem__() method. If multiple items are '
 'specified, returns a tuple of lookup values. For example: After f = '
 'itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), '
 'the call g(r) returns (r[2], r[5], r[3]). Equivalent to: def '
 'itemgetter(*items): if len(items) == 1: item = items[0] def g(obj): return '
 'obj[item] else: def g(obj): return tuple(obj[item] for item in items) return '
 'g The items can be any type accepted by the operand’s __getitem__() method. '
 'Dictionaries accept any hashable value. Lists, tuples, and strings accept an '
 "index or a slice: >>> itemgetter(1)('ABCDEFG') 'B' >>> itemgetter(1, 3, "
 "5)('ABCDEFG') ('B', 'D', 'F') >>> itemgetter(slice(2, None))('ABCDEFG') "
 "'CDEFG' >>> soldier = dict(rank='captain', name='dotterbart') >>> "
 "itemgetter('rank')(soldier) 'captain' Example of using itemgetter() to "
 "retrieve specific fields from a tuple record: >>> inventory = [('apple', 3), "
 "('banana', 2), ('pear', 5), ('orange', 1)] >>> getcount = itemgetter(1) >>> "
 'list(map(getcount, inventory)) [3, 2, 5, 1] >>> sorted(inventory, '
 "key=getcount) [('orange', 1), ('banana', 2), ('apple', 3), ('pear', "
 '5)]python.library.itertools#itertools.chain.from_iterable classmethod '
 'chain.from_iterable(iterable) Alternate constructor for chain(). Gets '
 'chained inputs from a single iterable argument that is evaluated lazily. '
 'Roughly equivalent to: def from_iterable(iterables): # '
 "chain.from_iterable(['ABC', 'DEF']) --> A B C D E F for it in iterables: for "
 'element in it: yield element\n'
 'Rationale:.')
