Potential document 0: python datetime datetime strptime: classmethod datetime.strptime(date_string, format)   Return a datetime corresponding to date_string, parsed according to format. This is equivalent to: datetime(*(time.strptime(date_string, format)[0:6]))  ValueError is raised if the date_string and format can’t be parsed by time.strptime() or if it returns a value which isn’t a time tuple. For a complete list of formatting directives, see strftime() and strptime() Behavior.
Potential document 1: python time strftime: time.strftime(format[, t])   Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a string as specified by the format argument. If t is not provided, the current time as returned by localtime() is used. format must be a string. ValueError is raised if any field in t is outside of the allowed range. 0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one. The following directives can be embedded in the format string. They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the strftime() result: 
Potential document 2: python time strptime: time.strptime(string[, format])   Parse a string representing a time according to a format. The return value is a struct_time as returned by gmtime() or localtime(). The format parameter uses the same directives as those used by strftime(); it defaults to "%a %b %d %H:%M:%S %Y" which matches the formatting returned by ctime(). If string cannot be parsed according to format, or if it has excess data after parsing, ValueError is raised. The default values used to fill in any missing data when more accurate values cannot be inferred are (1900, 1, 1, 0, 0, 0, 0, 1, -1). Both
Potential document 3: python datetime datetime strftime: datetime.strftime(format)   Return a string representing the date and time, controlled by an explicit format string. For a complete list of formatting directives, see strftime() and strptime() Behavior.
Potential document 4: python datetime date strftime: date.strftime(format)   Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. For a complete list of formatting directives, see strftime() and strptime() Behavior.
# convert string '2011221' into a DateTime object using format '%Y%W%w'
datetime.strptime('2011221', '%Y%W%w')

#END

Potential document 0: python str rsplit: str.rsplit(sep=None, maxsplit=-1)   Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done, the rightmost ones. If sep is not specified or None, any whitespace string is a separator. Except for splitting from the right, rsplit() behaves like split() which is described in detail below.
Potential document 1: python sorted: sorted(iterable, *, key=None, reverse=False)   Return a new sorted list from the items in iterable. Has two optional arguments which must be specified as keyword arguments. key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower). The default value is None (compare the elements directly). reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed. Use functools.cmp_to_key() to convert an old-style cmp function to a key function. The built-in sorted() function is guaranteed to be stable. A sort
Potential document 2: python list sort: sort(*, key=None, reverse=False)   This method sorts the list in place, using only < comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state). sort() accepts two arguments that can only be passed by keyword (keyword-only arguments): key specifies a function of one argument that is used to extract a comparison key from each list element (for example, key=str.lower). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of None means that list items are sorted directly without calculating a separate key value. The
Potential document 3: python operator itemgetter: operator.itemgetter(item)   operator.itemgetter(*items)   Return a callable object that fetches item from its operand using the operand’s __getitem__() method. If multiple items are specified, returns a tuple of lookup values. For example:  After f = itemgetter(2), the call f(r) returns r[2]. After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3]).  Equivalent to: def itemgetter(*items):     if len(items) == 1:       
Potential document 4: python str rfind: str.rfind(sub[, start[, end]])   Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 on failure.
# Sort a list of strings 'words' such that items starting with 's' come first.
sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)

#END

Potential document 0: pandas series dropna: pandas.Series.dropna   Series.dropna(axis=0, inplace=False, how=None)[source]   Return a new Series with missing values removed. See the User Guide for more on which values are considered missing, and how to work with missing data.  Parameters    axis:{0 or ‘index’}, default 0   There is only one axis to drop values from.   inplace:bool, default False   If True, do operation inplace and return None.   how:str, optional   Not in use. Kept for compatibility.    Returns   Series or None  Series with NA entries
Potential document 1: pandas dataframe fillna: pandas.DataFrame.fillna   DataFrame.fillna(value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)[source]   Fill NA/NaN values using the specified method.  Parameters    value:scalar, dict, Series, or DataFrame   Value to use to fill holes (e.g. 0), alternately a dict/Series/DataFrame of values specifying which value to use for each index (for a Series) or column (for a DataFrame). Values not in the dict/Series/DataFrame will not be filled. This value cannot be a list.   
Potential document 2: pandas dataframe isnull: pandas.DataFrame.isnull   DataFrame.isnull()[source]   DataFrame.isnull is an alias for DataFrame.isna. Detect missing values. Return a boolean same-sized object indicating if the values are NA. NA values, such as None or numpy.NaN, gets mapped to True values. Everything else gets mapped to False values. Characters such as empty strings '' or numpy.inf are not considered NA values (unless you set pandas.options.mode.use_inf_as_na = True).  Returns   DataFrame  Mask of bool values for each element in DataFrame that indicates whether an element is an NA value.  
Potential document 3: pandas index dropna: pandas.Index.dropna   Index.dropna(how='any')[source]   Return Index without NA/NaN values.  Parameters    how:{‘any’, ‘all’}, default ‘any’   If the Index is a MultiIndex, drop the value when any or all levels are NaN.    Returns   Index
Potential document 4: pandas dataframe notnull: pandas.DataFrame.notnull   DataFrame.notnull()[source]   DataFrame.notnull is an alias for DataFrame.notna. Detect existing (non-missing) values. Return a boolean same-sized object indicating if the values are not NA. Non-missing values get mapped to True. Characters such as empty strings '' or numpy.inf are not considered NA values (unless you set pandas.options.mode.use_inf_as_na = True). NA values, such as None or numpy.NaN, get mapped to False values.  Returns   DataFrame  Mask of bool values for each element in DataFrame that indicates whether an element
# replace all the nan values with 0 in a pandas dataframe `df`
df.fillna(0)

#END

