{
    "question_id": "348196-52",
    "nl": "Create list `instancelist` containing 29 objects of type MyClass",
    "cmd": "instancelist = [MyClass() for i in range(29)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [MyClass() for i in range(29)]",
    "cmd_name": "conala",
    "gpt35_response": "-Create list `instancelist` containing 29 objects of type MyClass. This requires creating list `instancelist`, creating 29 objects of type MyClass, and adding them to the list.\n"
}
{
    "question_id": "5744980-30",
    "nl": "Taking the results of a bash command \"awk '{print $10, $11}' test.txt > test2.txt\"",
    "cmd": "os.system(\"awk '{print $10, $11}' test.txt > test2.txt\")",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Taking the results of a bash command \"awk '{print $10, $11}' test.txt > test2.txt\". This requires executing bash command \"awk '{print $10, $11}' test.txt > test2.txt\" and storing the results.\n"
}
{
    "question_id": "16739319-24",
    "nl": "selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception",
    "cmd": "driver.implicitly_wait(60)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.implicitly_wait(60)",
    "cmd_name": "conala",
    "gpt35_response": "Selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception. This requires setting up a wait function with a timeout of 60 seconds and catching any NoSuchElementExceptions exception that may be thrown.\n"
}
{
    "question_id": "16739319-56",
    "nl": "selenium webdriver switch to frame 'frameName'",
    "cmd": "driver.switch_to_frame('frameName')",
    "oracle_man": [],
    "canonical_cmd": "driver.switch_to_frame('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Selenium webdriver switch to frame 'frameName'. This requires accessing the `switch_to` method of the webdriver and passing in the name of the frame to switch to.\n"
}
{
    "question_id": "39870642-93",
    "nl": "Save plot `plt` as png file 'filename.png'",
    "cmd": "plt.savefig('filename.png')",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure.savefig"
    ],
    "canonical_cmd": "VAR_STR.savefig('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Save plot `plt` as png file 'filename.png'. This requires saving `plt` plot as `filename.png` and ensuring that the file is correctly formatted as a PNG image.\n"
}
{
    "question_id": "39870642-22",
    "nl": "Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`",
    "cmd": "plt.savefig('filename.png', dpi=300)",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure.savefig"
    ],
    "canonical_cmd": "plt.savefig('VAR_STR', dpi=300)",
    "cmd_name": "conala",
    "gpt35_response": "Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`. This requires saving the matplotlib graph as `filename.png`, ensuring that the file is formatted as a PNG image, and specifying the resolution of `300 dpi`. \n"
}
{
    "question_id": "20062565-45",
    "nl": "search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\\n'",
    "cmd": "re.search('Test(.*)print', testStr, re.DOTALL)",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "re.search('VAR_STR', VAR_STR, re.DOTALL)",
    "cmd_name": "conala",
    "gpt35_response": "Search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\\n'. This requires creating a regular expression pattern that matches the specified pattern and using it to search through the `testStr` string.\n"
}
{
    "question_id": "42364992-94",
    "nl": "Enclose numbers in quotes in a string `This is number 1 and this is number 22`",
    "cmd": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(\\\\d+)', '\"\\\\1\"', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Enclose numbers in quotes in a string `This is number 1 and this is number 22`. This requires finding all instances of numbers in the string, converting them to strings enclosed in quotes, and replacing the original numbers in the string with the new strings.\n"
}
{
    "question_id": "4383571-75",
    "nl": "Importing file `file` from folder '\/path\/to\/application\/app\/folder'",
    "cmd": "sys.path.insert(0, '\/path\/to\/application\/app\/folder')\nimport file",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "sys.path.insert(0, 'VAR_STR')\nimport VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": "Import file `file` from folder '\/path\/to\/application\/app\/folder'. This requires navigating to the specified folder and importing the specified file.\n"
}
{
    "question_id": "11703064-52",
    "nl": "append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`",
    "cmd": "list3 = [(a + b) for a, b in zip(list1, list2)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "VAR_STR = [(a + b) for a, b in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": "Append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`. This requires iterating through each pair of tuples in `list1` and `list2`, adding their sums to a new list, and appending this new list to `list3`.\n"
}
{
    "question_id": "25540259-67",
    "nl": "remove frame of legend in plot `plt`",
    "cmd": "plt.legend(frameon=False)",
    "oracle_man": [
        "matplotlib.legend_api#matplotlib.legend.Legend"
    ],
    "canonical_cmd": "VAR_STR.legend(frameon=False)",
    "cmd_name": "conala",
    "gpt35_response": "Remove frame of legend in plot `plt`. This requires accessing the `legend` object of the plot and removing its enclosing frame. \n"
}
{
    "question_id": "16050952-62",
    "nl": "remove the punctuation '!', '.', ':' from a string `asking`",
    "cmd": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "out = ''.join(c for c in VAR_STR if c not in ('VAR_STR', 'VAR_STR', 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": "Remove the punctuation '!', '.', ':' from a string `asking`. This requires creating a regular expression pattern that matches the specified punctuation marks and replacing them with empty strings in the `asking` string.\n"
}
{
    "question_id": "12096252-61",
    "nl": "use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'",
    "cmd": "df[df['A'].isin([3, 6])]",
    "oracle_man": [
        "numpy.reference.generated.numpy.isin"
    ],
    "canonical_cmd": "VAR_STR[VAR_STR['A'].isin([3, 6])]",
    "cmd_name": "conala",
    "gpt35_response": "Use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'. This requires accessing the 'A' column of the dataframe and selecting only the rows whose values are present in the `[3,6]` list.\n"
}
{
    "question_id": "1179305-61",
    "nl": "Parse a file `sample.xml` using expat parsing in python 3",
    "cmd": "parser.ParseFile(open('sample.xml', 'rb'))",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "parser.ParseFile(open('VAR_STR', 'rb'))",
    "cmd_name": "conala",
    "gpt35_response": "Parse a file `sample.xml` using expat parsing in python 3. This requires importing the `xml.parsers.expat` package and using it to parse the `sample.xml` file.\n"
}
{
    "question_id": "22229255-65",
    "nl": "match zero-or-more instances of lower case alphabet characters in a string `f233op `",
    "cmd": "re.findall('([a-z]*)', 'f233op')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('([a-z]*)', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Match zero-or-more instances of lower case alphabet characters in a string `f233op`. This requires creating a regular expression pattern that matches the specified characters and searching through the `f233op` string.\n"
}
{
    "question_id": "22229255-56",
    "nl": "match zero-or-more instances of lower case alphabet characters in a string `f233op `",
    "cmd": "re.findall('([a-z])*', 'f233op')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('([a-z])*', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Match zero-or-more instances of lower case alphabet characters in a string `f233op`. This requires creating a regular expression pattern that matches the specified characters and searching through the `f233op` string.\n"
}
{
    "question_id": "209513-92",
    "nl": "Convert hex string \"deadbeef\" to integer",
    "cmd": "int('deadbeef', 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR', 16)",
    "cmd_name": "conala",
    "gpt35_response": "Convert hex string \"deadbeef\" to integer. This requires using the `int()` function and specifying that the input string is in base 16.\n"
}
{
    "question_id": "209513-93",
    "nl": "Convert hex string \"a\" to integer",
    "cmd": "int('a', 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR', 16)",
    "cmd_name": "conala",
    "gpt35_response": "Convert hex string \"a\" to integer. This requires using the `int()` function and specifying that the input string is in base 16.\n"
}
{
    "question_id": "209513-94",
    "nl": "Convert hex string \"0xa\" to integer",
    "cmd": "int('0xa', 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR', 16)",
    "cmd_name": "conala",
    "gpt35_response": "Convert hex string \"0xa\" to integer. This requires using the `int()` function and specifying that the input string is in base 16.\n"
}
{
    "question_id": "209513-47",
    "nl": "Convert hex string `s` to integer",
    "cmd": "int(s, 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int(VAR_STR, 16)",
    "cmd_name": "conala",
    "gpt35_response": "Convert hex string `s` to integer. This requires using the `int()` function and specifying that the input string `s` is in base 16."
}
{
    "question_id": "209513-79",
    "nl": "Convert hex string `hexString` to int",
    "cmd": "int(hexString, 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int(VAR_STR, 16)",
    "cmd_name": "conala",
    "gpt35_response": "- Convert hex string `hexString` to int. This requires using the built-in python function `int()`."
}
{
    "question_id": "1400608-13",
    "nl": "empty a list `lst`",
    "cmd": "del lst[:]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[:]",
    "cmd_name": "conala",
    "gpt35_response": " Empty a list `lst`. This requires calling the built-in python function `lst.clear()`."
}
{
    "question_id": "1400608-91",
    "nl": "empty a list `lst`",
    "cmd": "del lst1[:]",
    "oracle_man": [],
    "canonical_cmd": "del lst1[:]",
    "cmd_name": "conala",
    "gpt35_response": " Empty a list `lst`. This requires calling the built-in python function `lst.clear()`."
}
{
    "question_id": "1400608-86",
    "nl": "empty a list `lst`",
    "cmd": "lst[:] = []",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:] = []",
    "cmd_name": "conala",
    "gpt35_response": " Empty a list `lst`. This requires calling the built-in python function `lst.clear()`."
}
{
    "question_id": "1400608-67",
    "nl": "empty a list `alist`",
    "cmd": "alist[:] = []",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:] = []",
    "cmd_name": "conala",
    "gpt35_response": " Empty a list `alist`. This requires assigning an empty list to the variable `alist`."
}
{
    "question_id": "15740236-74",
    "nl": "encode unicode string '\\xc5\\xc4\\xd6' to utf-8 code",
    "cmd": "print('\\xc5\\xc4\\xd6'.encode('UTF8'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print('VAR_STR'.encode('UTF8'))",
    "cmd_name": "conala",
    "gpt35_response": " Encode unicode string '\\xc5\\xc4\\xd6' to utf-8 code. This requires calling the built-in python function `str.encode()` with the appropriate encoding type specified."
}
{
    "question_id": "41648246-16",
    "nl": "solve for the least squares' solution of matrices `a` and `b`",
    "cmd": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))",
    "oracle_man": [
        "numpy.reference.generated.numpy.dot",
        "numpy.reference.generated.numpy.linalg.solve"
    ],
    "canonical_cmd": "np.linalg.solve(np.dot(VAR_STR.T, VAR_STR), np.dot(VAR_STR.T, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Solve for the least squares' solution of matrices `a` and `b`. This requires calling a linear algebra function to solve the least squares problem on the matrices `a` and `b`."
}
{
    "question_id": "3820312-13",
    "nl": "create a file 'filename' with each tuple in the list `mylist` written to a line",
    "cmd": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.stdtypes#str.join",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "open('VAR_STR', 'w').write('\\n'.join('%s %s' % x for x in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Create a file 'filename' with each tuple in the list `mylist` written to a line. This requires opening a file in write mode, iterating over the tuples in `mylist`, and writing each tuple as a line to the file."
}
{
    "question_id": "7351270-100",
    "nl": "print numbers in list `list` with precision of 3 decimal places",
    "cmd": "print('[%s]' % ', '.join('%.3f' % val for val in list))",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print('[%s]' % ', '.join('%.3f' % val for val in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print numbers in list `list` with precision of 3 decimal places. This requires iterating over each element in the list and using string formatting to print the number with a precision of 3 decimal places."
}
{
    "question_id": "7351270-60",
    "nl": "format print output of list of floats `l` to print only up to 3 decimal points",
    "cmd": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print('[' + ', '.join('%5.3f' % v for v in VAR_STR) + ']')",
    "cmd_name": "conala",
    "gpt35_response": " Format print output of list of floats `l` to print only up to 3 decimal points. This requires using a list comprehension to iterate through `l` and format each float with a precision of 3 decimal points."
}
{
    "question_id": "7351270-62",
    "nl": "print a list of floating numbers `l` using string formatting",
    "cmd": "print([('%5.3f' % val) for val in l])",
    "oracle_man": [],
    "canonical_cmd": "print([('%5.3f' % val) for val in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Print a list of floating numbers `l` using string formatting. This requires iterating over each element in the list and using string formatting to print each element as a floating-point number."
}
{
    "question_id": "14750675-12",
    "nl": "delete letters from string '12454v'",
    "cmd": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))",
    "oracle_man": [
        "python.library.functions#filter",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(filter(str.isdigit, 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Delete letters from string '12454v'. This requires using a string method to replace all occurrences of the specified letters with an empty string."
}
{
    "question_id": "4508155-69",
    "nl": "Get a md5 hash from string `thecakeisalie`",
    "cmd": "k = hashlib.md5('thecakeisalie').hexdigest()",
    "oracle_man": [
        "python.library.hashlib#hashlib.hash.hexdigest"
    ],
    "canonical_cmd": "k = hashlib.md5('VAR_STR').hexdigest()",
    "cmd_name": "conala",
    "gpt35_response": " Get an md5 hash from string `thecakeisalie`. This requires importing the `hashlib` library and using its `md5()` function to create a hash object before encoding `thecakeisalie`."
}
{
    "question_id": "36296993-71",
    "nl": "replace string 'in.' with ' in. ' in dataframe `df` column 'a'",
    "cmd": "df['a'] = df['a'].str.replace('in.', ' in. ')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].str.replace('VAR_STR', ' in. ')",
    "cmd_name": "conala",
    "gpt35_response": " Replace string 'in.' with ' in. ' in dataframe `df` column 'a'. This requires using the `pandas` library to access and modify the specified column in the dataframe."
}
{
    "question_id": "1246444-16",
    "nl": "convert string `x'  to dictionary splitted by `=` using list comprehension",
    "cmd": "dict([x.split('=') for x in s.split()])",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "dict([x.split('=') for x in s.split()])",
    "cmd_name": "conala",
    "gpt35_response": " Convert string `x` to dictionary splitted by `=` using list comprehension. This requires using a list comprehension to split the `x` string by `=` and creating a dictionary from the resulting list."
}
{
    "question_id": "12168648-98",
    "nl": "add a column 'new_col' to dataframe `df` for index in range",
    "cmd": "df['new_col'] = list(range(1, len(df) + 1))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = list(range(1, len(VAR_STR) + 1))",
    "cmd_name": "conala",
    "gpt35_response": " Add a column 'new_col' to dataframe `df` for index in range. This requires accessing the `pandas` dataframe object `df` and adding a new column 'new_col' using a for loop to iterate over the range of indices."
}
{
    "question_id": "1790520-32",
    "nl": "apply logical operator 'AND' to all elements in list `a_list`",
    "cmd": "all(a_list)",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Apply logical operator 'AND' to all elements in list `a_list`. This requires using the built-in python function `all()` and passing it the `a_list` with the logical operator 'AND'."
}
{
    "question_id": "32996293-30",
    "nl": "get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal",
    "cmd": "z = [(i == j) for i, j in zip(x, y)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "VAR_STR = [(i == j) for i, j in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of booleans `z` that shows whether the corresponding items in list `x` and `y` are equal. This requires using a list comprehension with `zip()` to iterate through `x` and `y` simultaneously and comparing each corresponding element."
}
{
    "question_id": "32996293-89",
    "nl": "create a list which indicates whether each element in `x` and `y` is identical",
    "cmd": "[(x[i] == y[i]) for i in range(len(x))]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[(VAR_STR[i] == VAR_STR[i]) for i in range(len(VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list which indicates whether each element in `x` and `y` is identical. This requires using a list comprehension or loop to iterate through `x` and `y` simultaneously and comparing each corresponding element."
}
{
    "question_id": "3887469-9",
    "nl": "convert currency string `dollars` to decimal `cents_int`",
    "cmd": "cents_int = int(round(float(dollars.strip('$')) * 100))",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.functions#int",
        "python.library.functions#round",
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR = int(round(float(VAR_STR.strip('$')) * 100))",
    "cmd_name": "conala",
    "gpt35_response": " Convert currency string `dollars` to decimal `cents_int`. This requires using the built-in python library `decimal` to convert the currency string to a decimal and multiplying it by 100."
}
{
    "question_id": "17734779-42",
    "nl": "sort list `users` using values associated with key 'id' according to elements in list `order`",
    "cmd": "users.sort(key=lambda x: order.index(x['id']))",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: VAR_STR.index(x['VAR_STR']))",
    "cmd_name": "conala",
    "gpt35_response": "- Sort list `users` using values associated with key 'id' according to elements in list `order`. This requires accessing 'id' value associated with each element of list `users`, matching elements in list `order` with values of 'id', and sorting the list `users` accordingly."
}
{
    "question_id": "17734779-50",
    "nl": "sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order",
    "cmd": "users.sort(key=lambda x: order.index(x['id']))",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: VAR_STR.index(x['VAR_STR']))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order. This requires accessing 'id' value associated with each dictionary in the list `users`, matching elements in list `order` with values of 'id', and sorting the list of dictionaries `users` accordingly."
}
{
    "question_id": "7658932-91",
    "nl": "Get all indexes of a letter `e` from a string `word`",
    "cmd": "[index for index, letter in enumerate(word) if letter == 'e']",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[index for index, letter in enumerate(VAR_STR) if letter == 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Get all indexes of a letter `e` from a string `word`. This requires iterating through each character in `word`, checking if the character is equal to `e`, and appending the index if the character is `e`."
}
{
    "question_id": "18609153-66",
    "nl": "format parameters 'b' and 'a' into plcaeholders in string \"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"",
    "cmd": "\"\"\"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"\"\".format('b', 'a')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Format parameters 'b' and 'a' into plcaeholders in string \"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\". This requires using the `format()` method to insert the parameters 'a' and 'b' into the string as placeholders \"{0}\" and \"{1}\" respectively, and with the correct syntax."
}
{
    "question_id": "845058-51",
    "nl": "get line count of file 'myfile.txt'",
    "cmd": "sum((1 for line in open('myfile.txt')))",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "sum(1 for line in open('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Get line count of file 'myfile.txt'. This requires opening the file 'myfile.txt' in read mode, iterating through each line, and incrementing a counter for each line."
}
{
    "question_id": "845058-70",
    "nl": "get line count of file `filename`",
    "cmd": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "def bufcount(VAR_STR):\n    f = open(VAR_STR)\n    lines = 0\n    buf_size = 1024 * 1024\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines",
    "cmd_name": "conala",
    "gpt35_response": " Get line count of file `filename`. This requires opening the file `filename` in read mode, iterating through each line, and incrementing a counter for each line."
}
{
    "question_id": "6714826-24",
    "nl": "Determine the byte length of a utf-8 encoded string `s`",
    "cmd": "return len(s.encode('utf-8'))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "return len(VAR_STR.encode('utf-8'))",
    "cmd_name": "conala",
    "gpt35_response": " Determine the byte length of a utf-8 encoded string `s`. This requires encoding the string `s` using utf-8 encoding and finding the length of the resulting byte string."
}
{
    "question_id": "5373474-77",
    "nl": "specify multiple positional arguments with argparse",
    "cmd": "parser.add_argument('input', nargs='+')",
    "oracle_man": [
        "python.library.argparse#argparse.ArgumentParser.add_argument"
    ],
    "canonical_cmd": "parser.add_argument('input', nargs='+')",
    "cmd_name": "conala",
    "gpt35_response": " Specify multiple positional arguments with argparse. This requires using the argparse module to define multiple positional arguments and appending them to a list or tuple for further use."
}
{
    "question_id": "28925267-60",
    "nl": "delete every 8th column in a numpy array 'a'.",
    "cmd": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)",
    "oracle_man": [
        "numpy.reference.generated.numpy.delete",
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "np.delete(VAR_STR, list(range(0, VAR_STR.shape[1], 8)), axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Delete every 8th column in a numpy array 'a'. This requires iterating through columns of `a` and deleting every 8th column."
}
{
    "question_id": "3878555-86",
    "nl": "Replace repeated instances of a character '*' with a single instance in a string 'text'",
    "cmd": "re.sub('\\\\*\\\\*+', '*', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\*\\\\*+', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Replace repeated instances of a character '*' with a single instance in a string 'text'. This requires iterating through each character of the string 'text', checking if the character is a '*', and replacing repeated instances with a single instance of '*'."
}
{
    "question_id": "3878555-86",
    "nl": "replace repeated instances of \"*\" with a single instance of \"*\"",
    "cmd": "re.sub('\\\\*+', '*', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\*+', 'VAR_STR', text)",
    "cmd_name": "conala",
    "gpt35_response": " Replace repeated instances of \"*\" with a single instance of \"*\". This requires iterating through each character of the string, checking if the character is a '*', and replacing repeated instances with a single instance of '*'."
}
{
    "question_id": "23145240-59",
    "nl": "split elements of a list `l` by '\\t'",
    "cmd": "[i.partition('\\t')[-1] for i in l if '\\t' in i]",
    "oracle_man": [
        "python.library.stdtypes#str.partition"
    ],
    "canonical_cmd": "[i.partition('VAR_STR')[-1] for i in VAR_STR if 'VAR_STR' in i]",
    "cmd_name": "conala",
    "gpt35_response": " Split elements of a list `l` by '\\t'. This requires using the `split()` method on each element of the list `l` and specifying the delimiter as '\\t'."
}
{
    "question_id": "1731346-40",
    "nl": "get two random records from model 'MyModel' in Django",
    "cmd": "MyModel.objects.order_by('?')[:2]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.objects.order_by('?')[:2]",
    "cmd_name": "conala",
    "gpt35_response": " Get two random records from model 'MyModel' in Django. This requires accessing the model 'MyModel', using the `sample()` method to randomly select two records, and returning those records."
}
{
    "question_id": "317413-56",
    "nl": "get value of first child of xml node `name`",
    "cmd": "name[0].firstChild.nodeValue",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[0].firstChild.nodeValue",
    "cmd_name": "conala",
    "gpt35_response": " Get value of first child of xml node `name`. This requires accessing the xml node corresponding to `name`, accessing its first child node, and returning the value of that node."
}
{
    "question_id": "10618586-67",
    "nl": "Convert a hex string `437c2123 ` according to ascii value.",
    "cmd": "\"\"\"437c2123\"\"\".decode('hex')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".decode('hex')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a hex string `437c2123 ` according to ascii value. This requires converting the hex string `437c2123` to ascii equivalent using the `binascii` module."
}
{
    "question_id": "2755950-13",
    "nl": "Get all `a` tags where the text starts with value `some text` using regex",
    "cmd": "doc.xpath(\"\/\/a[starts-with(text(),'some text')]\")",
    "oracle_man": [],
    "canonical_cmd": "doc.xpath(\"\/\/a[starts-with(text(),'some text')]\")",
    "cmd_name": "conala",
    "gpt35_response": " Get all `a` tags where the text starts with value `some text` using regex. This requires using regex to match the desired `a` tags where the text starts with the specified value \"some text\"."
}
{
    "question_id": "10974932-69",
    "nl": "split string `str1` on one or more spaces with a regular expression",
    "cmd": "re.split(' +', str1)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split(' +', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `str1` on one or more spaces with a regular expression. This requires using regex to match one or more spaces in the string `str1` and splitting the string accordingly."
}
{
    "question_id": "10974932-59",
    "nl": "python split string based on regular expression",
    "cmd": "re.findall('\\\\S+', str1)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\S+', str1)",
    "cmd_name": "conala",
    "gpt35_response": " Python split string based on regular expression. This requires using regex to match the desired pattern in the string and splitting the string accordingly."
}
{
    "question_id": "3774571-10",
    "nl": "BeautifulSoup find all tags with attribute 'name' equal to 'description'",
    "cmd": "soup.findAll(attrs={'name': 'description'})",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "soup.findAll(attrs={'VAR_STR': 'VAR_STR'})",
    "cmd_name": "conala",
    "gpt35_response": " BeautifulSoup find all tags with attribute 'name' equal to 'description'. This requires using the `find_all()` method of the BeautifulSoup library with the parameter `attrs` set to {'name': 'description'} to find all tags with the specified attribute."
}
{
    "question_id": "23566515-25",
    "nl": "get the dot product of two one dimensional numpy arrays",
    "cmd": "np.dot(a[:, (None)], b[(None), :])",
    "oracle_man": [
        "numpy.reference.generated.numpy.dot"
    ],
    "canonical_cmd": "np.dot(a[:, (None)], b[(None), :])",
    "cmd_name": "conala",
    "gpt35_response": " Get the dot product of two one dimensional numpy arrays. This requires using the `dot()` method on the two numpy arrays."
}
{
    "question_id": "23566515-22",
    "nl": "multiplication of two 1-dimensional arrays  in numpy",
    "cmd": "np.outer(a, b)",
    "oracle_man": [
        "numpy.reference.generated.numpy.outer"
    ],
    "canonical_cmd": "np.outer(a, b)",
    "cmd_name": "conala",
    "gpt35_response": "- Multiply two 1-dimensional arrays in numpy. This requires calling a function to multiply two 1-dimensional arrays in numpy."
}
{
    "question_id": "8785554-77",
    "nl": "insert a list `k` at the front of list `a`",
    "cmd": "a.insert(0, k)",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "VAR_STR.insert(0, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Insert a list `k` at the front of list `a`. This requires creating a new list by concatenating list `k` with list `a`."
}
{
    "question_id": "8785554-42",
    "nl": "insert elements of list `k` into list `a` at position `n`",
    "cmd": "a = a[:n] + k + a[n:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[:VAR_STR] + VAR_STR + VAR_STR[VAR_STR:]",
    "cmd_name": "conala",
    "gpt35_response": " Insert elements of list `k` into list `a` at position `n`. This requires calling a function to insert elements of list `k` into list `a` at position `n`."
}
{
    "question_id": "17106819-22",
    "nl": "get values from a dictionary `my_dict` whose key contains the string `Date`",
    "cmd": "[v for k, v in list(my_dict.items()) if 'Date' in k]",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[v for k, v in list(VAR_STR.items()) if 'VAR_STR' in k]",
    "cmd_name": "conala",
    "gpt35_response": " Get values from a dictionary `my_dict` whose key contains the string `Date`. This requires iterating through the keys of `my_dict`, checking if the key contains the string `Date`, and retrieving the corresponding values."
}
{
    "question_id": "9969684-48",
    "nl": "Print variable `count` and variable `conv` with space string '    ' in between",
    "cmd": "print(str(count) + '    ' + str(conv))",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "print(str(VAR_STR) + '    ' + str(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print variable `count` and variable `conv` with space string '    ' in between. This requires printing the value of variable `count`, followed by a space string '    ', followed by the value of variable `conv`."
}
{
    "question_id": "10805589-34",
    "nl": "convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'",
    "cmd": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'. This requires calling a function to convert the JSON string into a DateTime object using the specified format."
}
{
    "question_id": "17577727-88",
    "nl": "decode string `content` to UTF-8 code",
    "cmd": "print(content.decode('utf8'))",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "print(VAR_STR.decode('utf8'))",
    "cmd_name": "conala",
    "gpt35_response": " Decode string `content` to UTF-8 code. This requires calling a function to decode the string `content` to UTF-8 code."
}
{
    "question_id": "17757450-20",
    "nl": "convert list `data` into a string of its elements",
    "cmd": "print(''.join(map(str, data)))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(''.join(map(str, VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `data` into a string of its elements. This requires calling a function to concatenate the elements of the list `data` into a string."
}
{
    "question_id": "11584773-84",
    "nl": "sort list `lst` in descending order based on the second item of each tuple in it",
    "cmd": "lst.sort(key=lambda x: x[2], reverse=True)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x[2], reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `lst` in descending order based on the second item of each tuple in it. This requires calling a function to sort the list `lst` based on the second item of each tuple in descending order."
}
{
    "question_id": "20078816-77",
    "nl": "Replace non-ASCII characters in string `text` with a single space",
    "cmd": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Replace non-ASCII characters in string `text` with a single space. This requires calling a function to replace all non-ASCII characters in the string `text` with a single space."
}
{
    "question_id": "34338341-12",
    "nl": "get all digits in a string `s` after a '[' character",
    "cmd": "re.findall('\\\\d+(?=[^[]+$)', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\d+(?=[^[]+$)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get all digits in a string `s` after a '[' character. This requires iterating through the characters in the string `s`, finding the '[' character, and then iterating through the characters after it to find all digits."
}
{
    "question_id": "38251245-5",
    "nl": "create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'",
    "cmd": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(x, y) for x, y in zip(VAR_STR, VAR_STR[1:]) if y == 9]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'. This requires iterating through the elements of the list 'myList' and creating a new list of tuples for each occurrence of the number 9, where each tuple contains the number 9 and the number before it."
}
{
    "question_id": "2186656-7",
    "nl": "remove all instances of [1, 1] from list `a`",
    "cmd": "a[:] = [x for x in a if x != [1, 1]]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:] = [x for x in VAR_STR if x != [1, 1]]",
    "cmd_name": "conala",
    "gpt35_response": " Remove all instances of [1, 1] from list `a`. This requires calling a function to remove all instances of the list [1, 1] from list `a`."
}
{
    "question_id": "2186656-86",
    "nl": "remove all instances of `[1, 1]` from a list `a`",
    "cmd": "[x for x in a if x != [1, 1]]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x != [VAR_STR]]",
    "cmd_name": "conala",
    "gpt35_response": " Remove all instances of `[1, 1]` from a list `a`. This requires calling a function to remove all instances of the list `[1, 1]` from list `a`."
}
{
    "question_id": "716477-33",
    "nl": "Convert nested list `x` into a flat list",
    "cmd": "[j for i in x for j in i]",
    "oracle_man": [],
    "canonical_cmd": "[j for i in VAR_STR for j in i]",
    "cmd_name": "conala",
    "gpt35_response": " Convert nested list `x` into a flat list. This requires calling a function to recursively flatten the nested list `x`."
}
{
    "question_id": "716477-54",
    "nl": "get each value from a list of lists `a` using itertools",
    "cmd": "print(list(itertools.chain.from_iterable(a)))",
    "oracle_man": [
        "python.library.itertools#itertools.chain.from_iterable",
        "python.library.functions#list"
    ],
    "canonical_cmd": "print(list(itertools.chain.from_iterable(VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Get each value from a list of lists `a` using itertools. This requires calling an itertools function to iterate through each value in the nested list `a`."
}
{
    "question_id": "2917372-41",
    "nl": "get the indices of tuples in list of tuples `L` where the first value is 53",
    "cmd": "[i for i, v in enumerate(L) if v[0] == 53]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, v in enumerate(VAR_STR) if v[0] == 53]",
    "cmd_name": "conala",
    "gpt35_response": " Get the indices of tuples in list of tuples `L` where the first value is 53. This requires iterating through the list of tuples `L`, checking if the first value of each tuple is 53, and adding the corresponding indices to a new list."
}
{
    "question_id": "5882405-43",
    "nl": "convert string '2011221' into a DateTime object using format '%Y%W%w'",
    "cmd": "datetime.strptime('2011221', '%Y%W%w')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert string '2011221' into a DateTime object using format '%Y%W%w'. This requires calling a function to convert the string '2011221' into a DateTime object using the specified format."
}
{
    "question_id": "4627981-39",
    "nl": "Create a dictionary from string `e` separated by `-` and `,`",
    "cmd": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#dict",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "dict((k, int(v)) for k, v in (VAR_STR.split(' - ') for VAR_STR in s.split('VAR_STR'))\n    )",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary from string `e` separated by `-` and `,`. This requires splitting the string `e` at every occurrence of '-' or ',', and using the resulting substrings to create a new dictionary."
}
{
    "question_id": "24492327-75",
    "nl": "insert directory '.\/path\/to\/your\/modules\/' to current directory",
    "cmd": "sys.path.insert(0, '.\/path\/to\/your\/modules\/')",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "sys.path.insert(0, 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Insert directory '.\/path\/to\/your\/modules\/' to current directory. This requires calling a function to add the directory '.\/path\/to\/your\/modules\/' to the current directory."
}
{
    "question_id": "17608210-91",
    "nl": "Sort a list of strings 'words' such that items starting with 's' come first.",
    "cmd": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#str.startswith"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: 'a' + x if x.startswith('VAR_STR') else 'b' + x)",
    "cmd_name": "conala",
    "gpt35_response": "- Sort a list of strings 'words' such that items starting with 's' come first. This requires sorting the list 'words' and having items starting with 's' come first."
}
{
    "question_id": "21804935-73",
    "nl": "execute a mv command `mv \/home\/somedir\/subdir\/* somedir\/` in subprocess",
    "cmd": "subprocess.call('mv \/home\/somedir\/subdir\/* somedir\/', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " Execute a mv command `mv \/home\/somedir\/subdir\/* somedir\/` in subprocess. This requires executing the bash command `mv \/home\/somedir\/subdir\/* somedir\/` in the subprocess."
}
{
    "question_id": "21804935-87",
    "nl": "How to use the mv command in Python with subprocess",
    "cmd": "subprocess.call('mv \/home\/somedir\/subdir\/* somedir\/', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('mv \/home\/somedir\/subdir\/* somedir\/', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " How to use the mv command in Python with subprocess. This requires using the subprocess module in Python and executing a similar command to `mv`."
}
{
    "question_id": "40273313-48",
    "nl": "use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`",
    "cmd": "df.c_contofficeID.str.replace('^12(?=.{4}$)', '')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "VAR_STR.VAR_STR.str.replace('VAR_STR', '')",
    "cmd_name": "conala",
    "gpt35_response": " Use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`. This requires applying the regex pattern `^12(?=.{4}$)` to the column `c_contofficeID` of the dataframe `df` and removing any matches of the pattern."
}
{
    "question_id": "30015665-50",
    "nl": "get the platform OS name",
    "cmd": "platform.system()",
    "oracle_man": [
        "python.library.platform#platform.system"
    ],
    "canonical_cmd": "platform.system()",
    "cmd_name": "conala",
    "gpt35_response": " Get the platform OS name. This requires using the `platform` module in Python and calling the `platform.system()` function to get the platform OS name."
}
{
    "question_id": "31650399-37",
    "nl": "find all digits between two characters `\\xab` and `\\xbb`in a string `text`",
    "cmd": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\u00ab([\\\\s\\\\S]*?)\u00bb', VAR_STR))))",
    "cmd_name": "conala",
    "gpt35_response": " Find all digits between two characters `\\xab` and `\\xbb`in a string `text`. This requires using regex pattern `(?<=\\\\xab).*?(?=\\\\xbb)` to find all digits between `\\xab` and `\\xbb` in the string `text`."
}
{
    "question_id": "8898294-36",
    "nl": "convert utf-8 with bom string `s` to utf-8 with no bom `u`",
    "cmd": "u = s.decode('utf-8-sig')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.decode('utf-8-sig')",
    "cmd_name": "conala",
    "gpt35_response": " Convert utf-8 with bom string `s` to utf-8 with no bom `u`. This requires opening the utf-8 with bom string `s` and writing it to a new file without the bom header as utf-8 string `u`."
}
{
    "question_id": "11174790-90",
    "nl": "convert unicode string '\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0' to byte string",
    "cmd": "'\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0'.encode('latin-1')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".encode('latin-1')",
    "cmd_name": "conala",
    "gpt35_response": " Convert unicode string '\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0' to byte string. This requires encoding the unicode string '\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0' into bytes using the appropriate encoding scheme (such as utf-8) to get a byte string."
}
{
    "question_id": "4843158-40",
    "nl": "get a list of items from the list `some_list` that contain string 'abc'",
    "cmd": "matching = [s for s in some_list if 'abc' in s]",
    "oracle_man": [],
    "canonical_cmd": "matching = [s for s in VAR_STR if 'VAR_STR' in s]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of items from the list `some_list` that contain string 'abc'. This requires iterating through the list `some_list` and selecting only the items that contain the string 'abc'."
}
{
    "question_id": "4605439-78",
    "nl": "swap each pair of characters in string `s`",
    "cmd": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([VAR_STR[x:x + 2][::-1] for x in range(0, len(VAR_STR), 2)])",
    "cmd_name": "conala",
    "gpt35_response": " Swap each pair of characters in string `s`. This requires iterating through the string `s`, selecting each pair of characters and swapping them."
}
{
    "question_id": "7503241-31",
    "nl": "django return a QuerySet list containing the values of field 'eng_name' in model `Employees`",
    "cmd": "Employees.objects.values_list('eng_name', flat=True)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.objects.values_list('VAR_STR', flat=True)",
    "cmd_name": "conala",
    "gpt35_response": " Django return a QuerySet list containing the values of field 'eng_name' in model `Employees`. This requires using the Django ORM to get a QuerySet object for the `Employees` model and selecting only the values of the `eng_name` field."
}
{
    "question_id": "11280536-19",
    "nl": "sum elements at the same index of each list in list `lists`",
    "cmd": "map(sum, zip(*lists))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(sum, zip(*VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Sum elements at the same index of each list in list `lists`. This requires iterating through each list in `lists` and summing the elements at the same index."
}
{
    "question_id": "899103-24",
    "nl": "writing items in list `thelist` to file `thefile`",
    "cmd": "for item in thelist:\n    thefile.write(('%s\\n' % item))",
    "oracle_man": [
        "python.library.os#os.write"
    ],
    "canonical_cmd": "for item in VAR_STR:\n    VAR_STR.write('%s\\n' % item)",
    "cmd_name": "conala",
    "gpt35_response": " Writing items in list `thelist` to file `thefile`. This requires opening `thefile` in write mode, iterating through each item in `thelist`, and writing them to the file."
}
{
    "question_id": "899103-78",
    "nl": "writing items in list `thelist` to file `thefile`",
    "cmd": "for item in thelist:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "for item in VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Writing items in list `thelist` to file `thefile`. This requires opening `thefile` in write mode, iterating through each item in `thelist`, and writing them to the file."
}
{
    "question_id": "899103-57",
    "nl": "serialize `itemlist` to file `outfile`",
    "cmd": "pickle.dump(itemlist, outfile)",
    "oracle_man": [
        "python.library.pickle#pickle.dump"
    ],
    "canonical_cmd": "pickle.dump(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Serialize `itemlist` to file `outfile`. This requires using a serialization library (such as `pickle` or `json`) to serialize the `itemlist` object and writing it to the specified file `outfile`."
}
{
    "question_id": "899103-77",
    "nl": "writing items in list `itemlist` to file `outfile`",
    "cmd": "outfile.write('\\n'.join(itemlist))",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "VAR_STR.write('\\n'.join(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Writing items in list `itemlist` to file `outfile`. This requires opening `outfile` in write mode, iterating through each item in `itemlist`, and writing them to the file."
}
{
    "question_id": "13295735-56",
    "nl": "replace all the nan values with 0 in a pandas dataframe `df`",
    "cmd": "df.fillna(0)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.fillna"
    ],
    "canonical_cmd": "VAR_STR.fillna(0)",
    "cmd_name": "conala",
    "gpt35_response": " Replace all the nan values with 0 in a pandas dataframe `df`. This requires accessing the `NaN` values of the dataframe `df` and replacing them with 0."
}
{
    "question_id": "12575421-53",
    "nl": "convert a 1d `A` array to a 2d array `B`",
    "cmd": "B = np.reshape(A, (-1, 2))",
    "oracle_man": [
        "numpy.reference.generated.numpy.reshape"
    ],
    "canonical_cmd": "VAR_STR = np.reshape(VAR_STR, (-1, 2))",
    "cmd_name": "conala",
    "gpt35_response": " Convert a 1d `A` array to a 2d array `B`. This requires reshaping the 1d array `A` into a 2d array `B`."
}
{
    "question_id": "23612271-34",
    "nl": "a sequence of empty lists of length `n`",
    "cmd": "[[] for _ in range(n)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[[] for _ in range(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " A sequence of empty lists of length `n`. This requires creating a sequence of `n` empty lists."
}
{
    "question_id": "10592674-55",
    "nl": "update a list `l1` dictionaries with a key `count` and value from list `l2`",
    "cmd": "[dict(d, count=n) for d, n in zip(l1, l2)]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "[dict(d, VAR_STR=n) for d, n in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Update a list `l1` dictionaries with a key `count` and value from list `l2`. This requires iterating through each dictionary in `l1` and updating the value of the key `count` with the corresponding value from `l2`."
}
{
    "question_id": "19490064-50",
    "nl": "merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1",
    "cmd": "pd.concat((df1, df2), axis=1).mean(axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat",
        "pandas.reference.api.pandas.dataframe.mean"
    ],
    "canonical_cmd": "pd.concat((VAR_STR, VAR_STR), axis=1).mean(axis=1)",
    "cmd_name": "conala",
    "gpt35_response": "- Merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1. This requires accessing dataframes `df1` and `df2`, merging the rows with the same value of axis 1, and calculating the mean of those rows."
}
{
    "question_id": "4880960-33",
    "nl": "sum of all values in a python dict `d`",
    "cmd": "sum(d.values())",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(VAR_STR.values())",
    "cmd_name": "conala",
    "gpt35_response": " Sum all values in a Python dictionary `d`. This requires accessing the dictionary `d` and summing all of its values."
}
{
    "question_id": "4880960-87",
    "nl": "Sum of all values in a Python dict",
    "cmd": "sum(d.values())",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(d.values())",
    "cmd_name": "conala",
    "gpt35_response": " Sum all values in a Python dictionary `d`. This requires accessing the dictionary `d` and summing all of its values."
}
{
    "question_id": "627435-73",
    "nl": "remove the last element in list `a`",
    "cmd": "del a[(-1)]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[-1]",
    "cmd_name": "conala",
    "gpt35_response": " Remove the last element in list `a`. This requires accessing list `a` and removing its last element."
}
{
    "question_id": "627435-63",
    "nl": "remove the element in list `a` with index 1",
    "cmd": "a.pop(1)",
    "oracle_man": [
        "python.library.stdtypes#frozenset.pop"
    ],
    "canonical_cmd": "VAR_STR.pop(1)",
    "cmd_name": "conala",
    "gpt35_response": " Remove the element in list `a` with index 1. This requires accessing list `a` and removing the element at index 1."
}
{
    "question_id": "627435-40",
    "nl": "remove the last element in list `a`",
    "cmd": "a.pop()",
    "oracle_man": [
        "python.library.stdtypes#frozenset.pop"
    ],
    "canonical_cmd": "VAR_STR.pop()",
    "cmd_name": "conala",
    "gpt35_response": " Remove the last element in list `a`. This requires accessing list `a` and removing its last element."
}
{
    "question_id": "627435-31",
    "nl": "remove the element in list `a` at index `index`",
    "cmd": "a.pop(index)",
    "oracle_man": [
        "python.library.stdtypes#frozenset.pop"
    ],
    "canonical_cmd": "VAR_STR.pop(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove the element in list `a` at index `index`. This requires accessing list `a` and removing the element at the specified `index`."
}
{
    "question_id": "627435-36",
    "nl": "remove the element in list `a` at index `index`",
    "cmd": "del a[index]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Remove the element in list `a` at index `index`. This requires accessing list `a` and removing the element at the specified `index`."
}
{
    "question_id": "16868457-20",
    "nl": "sort a dictionary `d` by length of its values and print as string",
    "cmd": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#len",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(' '.join(sorted(VAR_STR, key=lambda k: len(VAR_STR[k]), reverse=True)))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a dictionary `d` by length of its values and print as a string. This requires accessing dictionary `d`, sorting it by the length of its values, and then printing it as a string."
}
{
    "question_id": "8172861-52",
    "nl": "Replace comma with dot in a string `original_string` using regex",
    "cmd": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Replace comma with dot in a string `original_string` using regex. This requires accessing string `original_string` and replacing each comma with a dot using regex."
}
{
    "question_id": "20084487-20",
    "nl": "plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index",
    "cmd": "monthly_mean.reset_index().plot(x='index', y='A')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index",
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "VAR_STR.reset_index().plot(x='VAR_STR', y='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index. This requires accessing the dataframe `monthly_mean`, resetting its index, selecting columns 'index' and 'A', and plotting the resulting data."
}
{
    "question_id": "5971312-4",
    "nl": "set environment variable 'DEBUSSY' equal to 1",
    "cmd": "os.environ['DEBUSSY'] = '1'",
    "oracle_man": [],
    "canonical_cmd": "os.environ['VAR_STR'] = '1'",
    "cmd_name": "conala",
    "gpt35_response": " Set environment variable 'DEBUSSY' equal to 1. This requires accessing the environment variables and setting the value of 'DEBUSSY' to 1."
}
{
    "question_id": "5971312-29",
    "nl": "Get a environment variable `DEBUSSY`",
    "cmd": "print(os.environ['DEBUSSY'])",
    "oracle_man": [],
    "canonical_cmd": "print(os.environ['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Get an environment variable `DEBUSSY`. This requires accessing the environment variables and retrieving the value of `DEBUSSY`."
}
{
    "question_id": "5971312-73",
    "nl": "set environment variable 'DEBUSSY' to '1'",
    "cmd": "os.environ['DEBUSSY'] = '1'",
    "oracle_man": [],
    "canonical_cmd": "os.environ['VAR_STR'] = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Set environment variable 'DEBUSSY' to '1'. This requires accessing the environment variables and setting the value of 'DEBUSSY' to '1'."
}
{
    "question_id": "4921038-69",
    "nl": "flask-sqlalchemy delete row `page`",
    "cmd": "db.session.delete(page)",
    "oracle_man": [
        "python.library.ast#ast.Delete"
    ],
    "canonical_cmd": "db.session.delete(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " flask-sqlalchemy delete row `page`. This requires accessing the flask-sqlalchemy database and deleting the row with name `page`."
}
{
    "question_id": "14301913-69",
    "nl": "convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'",
    "cmd": "df.set_index(['Name', 'Destination'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "df.set_index(['VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'. This requires accessing the pandas group by object, converting it to a multi-indexed dataframe with indices 'Name' and 'Destination', and storing it."
}
{
    "question_id": "6504200-56",
    "nl": "decode unicode string `s` into a readable unicode literal",
    "cmd": "s.decode('unicode_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('unicode_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Decode unicode string `s` into a readable unicode literal. This requires accessing string `s` and decoding it into a unicode literal."
}
{
    "question_id": "3262437-3",
    "nl": "get the non-masked values of array `m`",
    "cmd": "m[~m.mask]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[~VAR_STR.mask]",
    "cmd_name": "conala",
    "gpt35_response": " Get the non-masked values of array `m`. This requires accessing array `m` and retrieving all of its non-masked values."
}
{
    "question_id": "4859292-70",
    "nl": "get a random key `country` and value `capital` form a dictionary `d`",
    "cmd": "country, capital = random.choice(list(d.items()))",
    "oracle_man": [
        "python.library.random#random.choice",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "VAR_STR, VAR_STR = random.choice(list(VAR_STR.items()))",
    "cmd_name": "conala",
    "gpt35_response": " Get a random key `country` and value `capital` from a dictionary `d`. This requires accessing dictionary `d`, selecting a random key-value pair, and storing them as `country` and `capital`."
}
{
    "question_id": "12777222-51",
    "nl": "zip file `pdffile` using its basename as directory name",
    "cmd": "archive.write(pdffile, os.path.basename(pdffile))",
    "oracle_man": [
        "python.library.os.path#os.path.basename",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "archive.write(VAR_STR, os.path.basename(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Zip file `pdffile` using its basename as directory name. This requires accessing file `pdffile`, extracting its basename, and using that basename as the directory name for zipping the file."
}
{
    "question_id": "7323859-99",
    "nl": "call bash command 'tar c my_dir | md5sum' with pipe",
    "cmd": "subprocess.call('tar c my_dir | md5sum', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": "- Call bash command 'tar c my_dir | md5sum' with pipe. This involves executing bash command 'tar c my_dir' to create an archive of the directory 'my_dir', and pipe the output to the 'md5sum' command to generate a checksum of the archive."
}
{
    "question_id": "1185524-91",
    "nl": "trim whitespace in string `s`",
    "cmd": "s.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trim whitespace in string `s`. This requires removing all leading and trailing white spaces and any space between words in string `s`."
}
{
    "question_id": "1185524-91",
    "nl": "trim whitespace (including tabs) in `s` on the left side",
    "cmd": "s = s.lstrip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.lstrip()",
    "cmd_name": "conala",
    "gpt35_response": " Trim whitespace (including tabs) in `s` on the left side. This requires removing all leading white spaces (including tabs) in string `s`."
}
{
    "question_id": "1185524-8",
    "nl": "trim whitespace (including tabs) in `s` on the right side",
    "cmd": "s = s.rstrip()",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.rstrip()",
    "cmd_name": "conala",
    "gpt35_response": " Trim whitespace (including tabs) in `s` on the right side. This involves removing all trailing white spaces (including tabs) in string `s`."
}
{
    "question_id": "1185524-9",
    "nl": "trim characters ' \\t\\n\\r' in `s`",
    "cmd": "s = s.strip(' \\t\\n\\r')",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.strip(' \\t\\n\\r')",
    "cmd_name": "conala",
    "gpt35_response": " Trim characters ' \\t\\n\\r' in `s`. This requires removing all occurrences of characters ' \\t\\n\\r' in string `s`."
}
{
    "question_id": "1185524-31",
    "nl": "trim whitespaces (including tabs) in string `s`",
    "cmd": "print(re.sub('[\\\\s+]', '', s))",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "print(re.sub('[\\\\s+]', '', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Trim whitespaces (including tabs) in string `s`. This involves removing all leading and trailing white spaces (including tabs) in string `s`."
}
{
    "question_id": "8409095-82",
    "nl": "set color marker styles `--bo` in matplotlib",
    "cmd": "plt.plot(list(range(10)), '--bo')",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list",
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "plt.plot(list(range(10)), 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Set color marker styles `--bo` in matplotlib. This requires setting color marker style to `--bo` in matplotlib for a plot."
}
{
    "question_id": "8409095-48",
    "nl": "set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)",
    "cmd": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list",
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')",
    "cmd_name": "conala",
    "gpt35_response": " Set circle markers on plot for individual points defined in list `[1,2,3,4,5,6,7,8,9,10]` created by range(10). This requires setting circle markers on a plot for individual points defined in list `[1,2,3,4,5,6,7,8,9,10]` created using the range(10) function in Python."
}
{
    "question_id": "13438574-91",
    "nl": "sort list `results` by keys value 'year'",
    "cmd": "sorted(results, key=itemgetter('year'))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=itemgetter('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `results` by keys value 'year'. This involves sorting a list `results` by the values of the 'year' key in ascending order."
}
{
    "question_id": "10078470-99",
    "nl": "sort array `arr` in ascending order by values of the 3rd column",
    "cmd": "arr[arr[:, (2)].argsort()]",
    "oracle_man": [
        "numpy.reference.generated.numpy.argsort"
    ],
    "canonical_cmd": "VAR_STR[VAR_STR[:, (2)].argsort()]",
    "cmd_name": "conala",
    "gpt35_response": " Sort array `arr` in ascending order by values of the 3rd column. This requires sorting array `arr` in ascending order based on the values in the 3rd column."
}
{
    "question_id": "10078470-100",
    "nl": "sort rows of numpy matrix `arr` in ascending order according to all column values",
    "cmd": "numpy.sort(arr, axis=0)",
    "oracle_man": [
        "numpy.reference.generated.numpy.sort"
    ],
    "canonical_cmd": "numpy.sort(VAR_STR, axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Sort rows of numpy matrix `arr` in ascending order according to all column values. This involves sorting rows of numpy matrix `arr` in ascending order according to the values in all columns."
}
{
    "question_id": "2783079-30",
    "nl": "Format a string `u'Andr\\xc3\\xa9'` that has unicode characters",
    "cmd": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')",
    "oracle_man": [
        "python.library.functions#chr",
        "python.library.functions#ord",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\u00c3\u00a9')",
    "cmd_name": "conala",
    "gpt35_response": " Format a string `u'Andr\\xc3\\xa9'` that has unicode characters. This involves formatting a string `u'Andr\\xc3\\xa9'` that has unicode characters."
}
{
    "question_id": "2783079-88",
    "nl": "convert a unicode 'Andr\\xc3\\xa9' to a string",
    "cmd": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')",
    "oracle_man": [
        "python.library.functions#chr",
        "python.library.functions#ord",
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'VAR_STR').decode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a unicode 'Andr\\xc3\\xa9' to a string. This requires converting a unicode string `'Andr\\xc3\\xa9'` to a regular string."
}
{
    "question_id": "2372573-38",
    "nl": "remove white spaces from the end of string \"    xyz     \"",
    "cmd": "\"\"\"    xyz     \"\"\".rstrip()",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"    xyz     \"\"\".rstrip()",
    "cmd_name": "conala",
    "gpt35_response": " Remove white spaces from the end of string \"    xyz     \". This involves removing all trailing white spaces from the string `\"    xyz     \"`."
}
{
    "question_id": "14295673-41",
    "nl": "Convert string '03:55' into datetime.time object",
    "cmd": "datetime.datetime.strptime('03:55', '%H:%M').time()",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.datetime#datetime.datetime.time"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', '%H:%M').time()",
    "cmd_name": "conala",
    "gpt35_response": " Convert string '03:55' into datetime.time object. This requires converting the string '03:55' into a datetime.time object."
}
{
    "question_id": "4059550-66",
    "nl": "generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`",
    "cmd": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])",
    "oracle_man": [
        "python.library.itertools#itertools.combinations",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print([''.join(a) for a in combinations([VAR_STR], 2)])",
    "cmd_name": "conala",
    "gpt35_response": " Generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`. This involves generating all possible string permutations for each two elements in the list `['hel', 'lo', 'bye']`."
}
{
    "question_id": "3590165-87",
    "nl": "print a list of integers `list_of_ints` using string formatting",
    "cmd": "print(', '.join(str(x) for x in list_of_ints))",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(', '.join(str(x) for x in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print a list of integers `list_of_ints` using string formatting. This requires printing a list of integers `list_of_ints` using string formatting."
}
{
    "question_id": "5555063-8",
    "nl": "un-escaping characters in a string with python",
    "cmd": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')",
    "cmd_name": "conala",
    "gpt35_response": " Un-escaping characters in a string with python. This involves un-escaping characters in a string using Python's built-in escape sequences."
}
{
    "question_id": "9402255-38",
    "nl": "save current figure to file 'graph.png' with resolution of 1000 dpi",
    "cmd": "plt.savefig('graph.png', dpi=1000)",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure.savefig"
    ],
    "canonical_cmd": "plt.savefig('VAR_STR', dpi=1000)",
    "cmd_name": "conala",
    "gpt35_response": " Save current figure to file 'graph.png' with resolution of 1000 dpi. This requires saving the current matplotlib figure to an image file named 'graph.png' with a resolution of 1000 dpi."
}
{
    "question_id": "38147259-48",
    "nl": "Print a emoji from a string `\\\\ud83d\\\\ude4f` having surrogate pairs",
    "cmd": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')",
    "cmd_name": "conala",
    "gpt35_response": " Print an emoji from a string `\\\\ud83d\\\\ude4f` having surrogate pairs. This involves printing an emoji from a string `\\\\ud83d\\\\ude4f` that has surrogate pairs."
}
{
    "question_id": "12589481-54",
    "nl": "apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`",
    "cmd": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.agg"
    ],
    "canonical_cmd": "VAR_STR.groupby('VAR_STR').agg({'returns': [np.VAR_STR, np.VAR_STR]})",
    "cmd_name": "conala",
    "gpt35_response": "- Apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`. This requires computing the mean and sum of column `dummy` separately, both of which involve calling the corresponding function on the data frame `df` and specifying the column name `dummy`."
}
{
    "question_id": "209840-22",
    "nl": "map two lists `keys` and `values` into a dictionary",
    "cmd": "new_dict = {k: v for k, v in zip(keys, values)}",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "new_dict = {k: v for k, v in zip(VAR_STR, VAR_STR)}",
    "cmd_name": "conala",
    "gpt35_response": " Map two lists `keys` and `values` into a dictionary. This requires creating an empty dictionary `dict`, and then iterating over the two lists simultaneously, adding each key-value pair to the dictionary."
}
{
    "question_id": "209840-67",
    "nl": "map two lists `keys` and `values` into a dictionary",
    "cmd": "dict((k, v) for k, v in zip(keys, values))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict((k, v) for k, v in zip(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Map two lists `keys` and `values` into a dictionary. This requires creating an empty dictionary `dict`, and then iterating over the two lists simultaneously, adding each key-value pair to the dictionary."
}
{
    "question_id": "209840-17",
    "nl": "map two lists `keys` and `values` into a dictionary",
    "cmd": "dict([(k, v) for k, v in zip(keys, values)])",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict([(k, v) for k, v in zip(VAR_STR, VAR_STR)])",
    "cmd_name": "conala",
    "gpt35_response": " Map two lists `keys` and `values` into a dictionary. This requires creating an empty dictionary `dict`, and then iterating over the two lists simultaneously, adding each key-value pair to the dictionary."
}
{
    "question_id": "38379453-42",
    "nl": "get a list of substrings consisting of the first 5 characters of every string in list `buckets`",
    "cmd": "[s[:5] for s in buckets]",
    "oracle_man": [],
    "canonical_cmd": "[s[:5] for s in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of substrings consisting of the first 5 characters of every string in list `buckets`. This requires iterating over each string in the list `buckets`, and extracting the first 5 characters using string slicing."
}
{
    "question_id": "12329853-55",
    "nl": "Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'",
    "cmd": "df = df[['x', 'y', 'a', 'b']]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[['VAR_STR', 'VAR_STR', 'VAR_STR', 'VAR_STR']]",
    "cmd_name": "conala",
    "gpt35_response": " Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'. This requires creating a copy of the data frame `df` with columns arranged in the desired order."
}
{
    "question_id": "8586738-95",
    "nl": "Get a list of all fields in class `User` that are marked `required`",
    "cmd": "[k for k, v in User._fields.items() if v.required]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[k for k, v in VAR_STR._fields.items() if v.VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of all fields in class `User` that are marked `required`. This requires iterating over all fields in the class `User`, and checking if each field is marked as `required`."
}
{
    "question_id": "3817529-35",
    "nl": "create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'",
    "cmd": "d['dict3'] = {'spam': 5, 'ham': 6}",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = {VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'. This requires creating another dictionary `d`, and adding the initial dictionary `{'spam': 5, 'ham': 6}` as a value for key `dict3`."
}
{
    "question_id": "26720916-8",
    "nl": "Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`",
    "cmd": "df.groupby('group')['value'].rank(ascending=False)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.rank"
    ],
    "canonical_cmd": "VAR_STR.groupby('VAR_STR')['VAR_STR'].rank(ascending=False)",
    "cmd_name": "conala",
    "gpt35_response": " Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`. This requires grouping the data frame `df` by the `group` column, applying the rank function to the `value` column separately for each group, and then combining the results."
}
{
    "question_id": "19973489-29",
    "nl": "remove column by index `[:, 0:2]` in dataframe `df`",
    "cmd": "df = df.ix[:, 0:2]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR.ix[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Remove column by index `[:, 0:2]` in dataframe `df`. This requires creating a copy of the data frame `df` without the selected columns."
}
{
    "question_id": "2397687-56",
    "nl": "convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers",
    "cmd": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "[int(x, 16) for x in [VAR_STR]]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers. This requires iterating over each element of the list of byte strings, calling the `int()` function with an appropriate base, and storing the resulting integers in a new list."
}
{
    "question_id": "2397687-31",
    "nl": "convert the elements of list `L` from hex byte strings to hex integers",
    "cmd": "[int(x, 16) for x in L]",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "[int(x, 16) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert the elements of list `L` from hex byte strings to hex integers. This requires iterating over each element of the list `L`, calling the `int()` function with an appropriate base, and storing the resulting integers back in the same list."
}
{
    "question_id": "1747817-96",
    "nl": "Create a dictionary `d` from list `iterable`",
    "cmd": "d = dict(((key, value) for (key, value) in iterable))",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "VAR_STR = dict((key, value) for key, value in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary `d` from list `iterable`. This requires iterating over the `iterable` list in chunks of two, and adding each pair of elements as a key-value pair to the dictionary `d`."
}
{
    "question_id": "1747817-8",
    "nl": "Create a dictionary `d` from list `iterable`",
    "cmd": "d = {key: value for (key, value) in iterable}",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = {key: value for key, value in VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary `d` from list `iterable`. This requires iterating over the `iterable` list in chunks of two, and adding each pair of elements as a key-value pair to the dictionary `d`."
}
{
    "question_id": "1747817-34",
    "nl": "Create a dictionary `d` from list of key value pairs `iterable`",
    "cmd": "d = {k: v for (k, v) in iterable}",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = {k: v for k, v in VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary `d` from list of key value pairs `iterable`. This requires creating an empty dictionary `d` and iterating over the `iterable` list, unpacking each key-value pair and adding it to the dictionary."
}
{
    "question_id": "22397058-19",
    "nl": "drop a single subcolumn 'a' in column 'col1' from a dataframe `df`",
    "cmd": "df.drop(('col1', 'a'), axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.drop(('VAR_STR', 'VAR_STR'), axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Drop a single subcolumn 'a' in column 'col1' from a dataframe `df`. This requires calling the `drop()` function on the data frame `df`, specifying the column and sub-column to be dropped."
}
{
    "question_id": "22397058-80",
    "nl": "dropping all columns named 'a' from a multiindex 'df', across all level.",
    "cmd": "df.drop('a', level=1, axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.drop('VAR_STR', level=1, axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Dropping all columns named 'a' from a multiindex 'df', across all level. This requires calling the `drop()` function on the data frame `df`, specifying the column label 'a' and the axis along which to drop columns."
}
{
    "question_id": "13283689-71",
    "nl": "return list `result` of sum of elements of each list `b` in list of lists `a`",
    "cmd": "result = [sum(b) for b in a]",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "VAR_STR = [sum(VAR_STR) for VAR_STR in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Return list `result` of sum of elements of each list `b` in list of lists `a`. This requires iterating over each list `b` in the list of lists `a`, computing the sum of its elements, and storing the result in the `result` list."
}
{
    "question_id": "13395888-35",
    "nl": "make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)",
    "cmd": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')",
    "oracle_man": [
        "matplotlib._as_gen.mpl_toolkits.mplot3d.axes3d.axes3d#mpl_toolkits.mplot3d.axes3d.Axes3D.errorbar"
    ],
    "canonical_cmd": "VAR_STR = plt.errorbar(x, VAR_STR, yerr=err, ecolor='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow). This requires creating a line plot with error bars, specifying the data columns `x`, `y`, and `err`, and modifying the color of the error bars to `y`."
}
{
    "question_id": "5285181-18",
    "nl": "open a file `\/home\/user\/test\/wsservice\/data.pkl` in binary write mode",
    "cmd": "output = open('\/home\/user\/test\/wsservice\/data.pkl', 'wb')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "output = open('VAR_STR', 'wb')",
    "cmd_name": "conala",
    "gpt35_response": " Open a file `\/home\/user\/test\/wsservice\/data.pkl` in binary write mode. This requires calling the `open()` function with the given file path, specifying the binary write mode."
}
{
    "question_id": "1388818-50",
    "nl": "compare two lists in python `a` and `b` and return matches",
    "cmd": "set(a).intersection(b)",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.intersection"
    ],
    "canonical_cmd": "set(VAR_STR).intersection(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Compare two lists in python `a` and `b` and return matches. This requires comparing each element in `a` with each element in `b` and returning a list of only the matching elements."
}
{
    "question_id": "1388818-27",
    "nl": "How can I compare two lists in python and return matches",
    "cmd": "[i for i, j in zip(a, b) if i == j]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[i for i, j in zip(a, b) if i == j]",
    "cmd_name": "conala",
    "gpt35_response": " How can I compare two lists in python and return matches? This requires creating a function that takes in two lists, comparing each element in the first list with each element in the second list, and returning a list of only the matching elements."
}
{
    "question_id": "20230211-71",
    "nl": "sort a dictionary `a` by values that are list type",
    "cmd": "t = sorted(list(a.items()), key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "t = sorted(list(VAR_STR.items()), key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a dictionary `a` by values that are list type. This requires creating a function that sorts the dictionary by comparing the values of each key, but only sorting the keys that have list values."
}
{
    "question_id": "12985456-66",
    "nl": "Replace all non-alphanumeric characters in a string",
    "cmd": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')",
    "cmd_name": "conala",
    "gpt35_response": " Replace all non-alphanumeric characters in a string. This requires creating a function that takes in a string, iterating through each character in the string, and replacing any non-alphanumeric character with an empty string."
}
{
    "question_id": "9040939-18",
    "nl": "find all possible sequences of elements in a list `[2, 3, 4]`",
    "cmd": "map(list, permutations([2, 3, 4]))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.itertools#itertools.permutations"
    ],
    "canonical_cmd": "map(list, permutations([VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": " Find all possible sequences of elements in a list `[2, 3, 4]`. This requires creating a function that generates all possible combinations of the elements in the list, such as `[2,3]`, `[3,4]`, or `[2,3,4]`."
}
{
    "question_id": "35797523-43",
    "nl": "create a list by appending components from list `a` and reversed list `b` interchangeably",
    "cmd": "[value for pair in zip(a, b[::-1]) for value in pair]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[value for pair in zip(VAR_STR, VAR_STR[::-1]) for value in pair]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list by appending components from list `a` and reversed list `b` interchangeably. This requires creating a function that interweaves the elements of two lists, taking one element from `a`, then one element from `b`, and so on, until both lists have been fully iterated through."
}
{
    "question_id": "29386995-92",
    "nl": "get http header of the key 'your-header-name' in flask",
    "cmd": "request.headers['your-header-name']",
    "oracle_man": [],
    "canonical_cmd": "request.headers['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Get http header of the key 'your-header-name' in flask. This requires accessing the http headers of a Flask request object, finding the value associated with the 'your-header-name' key, and returning it."
}
{
    "question_id": "7745562-86",
    "nl": "Create list `listy` containing 3 empty lists",
    "cmd": "listy = [[] for i in range(3)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [[] for i in range(3)]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `listy` containing 3 empty lists. This requires creating a function that initializes three empty lists and adds each one to a larger list, `listy`."
}
{
    "question_id": "8777753-52",
    "nl": "convert datetime.date `dt` to utc timestamp",
    "cmd": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()",
    "oracle_man": [
        "python.library.datetime#datetime.timedelta.total_seconds",
        "python.library.datetime#datetime.datetime"
    ],
    "canonical_cmd": "timestamp = (VAR_STR - datetime(1970, 1, 1)).total_seconds()",
    "cmd_name": "conala",
    "gpt35_response": " Convert datetime.date `dt` to utc timestamp. This requires creating a function that takes in a datetime.date object, converting it to a datetime object with the correct timezone information, and then converting that datetime object to a UTC timestamp."
}
{
    "question_id": "12211944-86",
    "nl": "find float number proceeding sub-string `par` in string `dir`",
    "cmd": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.functions#float"
    ],
    "canonical_cmd": "float(re.findall('(?:^|_)' + VAR_STR + '(\\\\d+\\\\.\\\\d*)', VAR_STR)[0])",
    "cmd_name": "conala",
    "gpt35_response": " Find float number proceeding sub-string `par` in string `dir`. This requires creating a function that searches through `dir` for the sub-string 'par', and then extracts the float value that follows it in the string."
}
{
    "question_id": "12211944-0",
    "nl": "Get all the matches from a string `abcd` if it begins with a character `a`",
    "cmd": "re.findall('[^a]', 'abcd')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('[^a]', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get all the matches from a string `abcd` if it begins with a character `a`. This requires creating a function that searches through `abcd` for instances of the character `'a'` at the beginning of a substring, and returns all substrings that match this criteria."
}
{
    "question_id": "1270951-66",
    "nl": "get a relative path of file 'my_file' into variable `fn`",
    "cmd": "fn = os.path.join(os.path.dirname(__file__), 'my_file')",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.join"
    ],
    "canonical_cmd": "VAR_STR = os.path.join(os.path.dirname(__file__), 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get a relative path of file 'my_file' into variable `fn`. This requires creating a function that accesses the current working directory, finding the path to `'my_file'` relative to the current directory, and storing it into the variable `fn`."
}
{
    "question_id": "1534542-44",
    "nl": "Can I sort text by its numeric value in Python?",
    "cmd": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#map",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))",
    "cmd_name": "conala",
    "gpt35_response": " Can I sort text by its numeric value in Python? This requires creating a function that separates the numeric values in a string of text from the non-numeric values, converting the numeric strings to integers, and sorting the text by the values of the integers."
}
{
    "question_id": "39538010-46",
    "nl": "execute python code `myscript.py` in a virtualenv `\/path\/to\/my\/venv` from matlab",
    "cmd": "system('\/path\/to\/my\/venv\/bin\/python myscript.py')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "system('\/path\/to\/my\/venv\/bin\/python myscript.py')",
    "cmd_name": "conala",
    "gpt35_response": " Execute python code `myscript.py` in a virtualenv `\/path\/to\/my\/venv` from matlab. This requires using the `subprocess` module to execute a command from within Python, running the `python` interpreter with the proper arguments to execute `myscript.py` within the specified virtual environment at `\/path\/to\/my\/venv`."
}
{
    "question_id": "42260840-56",
    "nl": "remove dictionary from list `a` if the value associated with its key 'link' is in list `b`",
    "cmd": "a = [x for x in a if x['link'] not in b]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x for x in VAR_STR if x['VAR_STR'] not in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Remove dictionary from list `a` if the value associated with its key 'link' is in list `b`. This requires creating a function that iterates through each dictionary in `a`, checks the value associated with the `'link'` key against each element of `b`, and removes any dictionaries from `a` that match this criteria."
}
{
    "question_id": "19334374-30",
    "nl": "Convert a string of numbers `example_string` separated by `,` into a list of integers",
    "cmd": "map(int, example_string.split(','))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "map(int, VAR_STR.split('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string of numbers `example_string` separated by `,` into a list of integers. This requires creating a function that splits the string into separate number strings by the comma separator, converts each number string into an integer, and adds that integer to a new list."
}
{
    "question_id": "19334374-87",
    "nl": "Convert a string of numbers 'example_string' separated by comma into a list of numbers",
    "cmd": "[int(s) for s in example_string.split(',')]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[int(s) for s in VAR_STR.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string of numbers 'example_string' separated by comma into a list of numbers. This requires creating a function that splits the string into separate number strings by the comma separator, converts each number string into a float or integer, and adds that number to a new list."
}
{
    "question_id": "4270742-97",
    "nl": "remove newlines and whitespace from string `yourstring`",
    "cmd": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[\\\\ \\\\n]{2,}', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove newlines and whitespace from string `yourstring`. This requires creating a function that removes all whitespace characters from the string, such as newlines, tabs, and spaces."
}
{
    "question_id": "16772071-63",
    "nl": "sort dict `data` by value",
    "cmd": "sorted(data, key=data.get)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=VAR_STR.get)",
    "cmd_name": "conala",
    "gpt35_response": " Sort dict `data` by value. This requires creating a function that sorts the dictionary `data` by the values of its keys, so that the output dictionary has the same keys as the input, but the values are in ascending or descending order."
}
{
    "question_id": "16772071-53",
    "nl": "Sort a dictionary `data` by its values",
    "cmd": "sorted(data.values())",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sorted(VAR_STR.values())",
    "cmd_name": "conala",
    "gpt35_response": " Sort a dictionary `data` by its values. This requires creating a function that sorts the dictionary `data` by the values of its keys, so that the output dictionary has the same keys as the input, but the values are in ascending or descending order."
}
{
    "question_id": "16772071-42",
    "nl": "Get a list of pairs of key-value sorted by values in dictionary `data`",
    "cmd": "sorted(list(data.items()), key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": "-Get a list of pairs of key-value sorted by values in dictionary `data`. This requires accessing dictionary `data`, sorting the key-value pairs by value, and returning as a list of pairs.\n"
}
{
    "question_id": "16772071-83",
    "nl": "sort dict by value python",
    "cmd": "sorted(list(data.items()), key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(data.items()), key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": "Sort dictionary `d` by value in Python. This requires accessing dictionary `d` and sorting by value.\n"
}
{
    "question_id": "4484690-74",
    "nl": "update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`",
    "cmd": "{i: 'updated' for i, j in list(d.items()) if j != 'None'}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "{VAR_STR: 'VAR_STR' for VAR_STR, VAR_STR in list(VAR_STR.items()) if VAR_STR != 'VAR_STR'}",
    "cmd_name": "conala",
    "gpt35_response": "Update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`. This requires checking if the value associated with key `i` is not equal to `'None'`, and if so, updating the value to `'updated'`.\n"
}
{
    "question_id": "4484690-66",
    "nl": "Filter a dictionary `d` to remove keys with value None and replace other values with 'updated'",
    "cmd": "dict((k, 'updated') for k, v in d.items() if v is None)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((k, 'VAR_STR') for k, v in VAR_STR.items() if v is None)",
    "cmd_name": "conala",
    "gpt35_response": "Filter dictionary `d` to remove keys with value `None` and replace other values with 'updated'. This requires filtering out all key-value pairs with a value of `'None'`, and updating the values of the remaining key-value pairs to `'updated'`.\n"
}
{
    "question_id": "4484690-31",
    "nl": "Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'",
    "cmd": "dict((k, 'updated') for k, v in d.items() if v != 'None')",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((k, 'VAR_STR') for k, v in VAR_STR.items() if v != 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Filter dictionary `d` to remove keys with value 'None' and replace other values with 'updated'. This requires filtering out all key-value pairs with a value of `'None'`, and updating the values of the remaining key-value pairs to `'updated'`.\n"
}
{
    "question_id": "8528178-96",
    "nl": "create a list `listofzeros` of `n` zeros",
    "cmd": "listofzeros = [0] * n",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [0] * VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": "Create a list `listofzeros` of `n` zeros. This requires initializing an empty list, and appending `n` zeros to it.\n"
}
{
    "question_id": "4233476-75",
    "nl": "sort a list `s` by first and second attributes",
    "cmd": "s = sorted(s, key=lambda x: (x[1], x[2]))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "VAR_STR = sorted(VAR_STR, key=lambda x: (x[1], x[2]))",
    "cmd_name": "conala",
    "gpt35_response": "Sort list `s` by first and second attributes. This requires accessing list `s`, and sorting it by the first and second attributes.\n"
}
{
    "question_id": "4233476-98",
    "nl": "sort a list of lists `s` by second and third element in each list.",
    "cmd": "s.sort(key=operator.itemgetter(1, 2))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.itemgetter(1, 2))",
    "cmd_name": "conala",
    "gpt35_response": "Sort a list of lists `s` by second and third element in each list. This requires accessing list `s`, and sorting each sublist by the second and third element.\n"
}
{
    "question_id": "1217251-72",
    "nl": "sort dictionary of lists `myDict` by the third item in each list",
    "cmd": "sorted(list(myDict.items()), key=lambda e: e[1][2])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda e: e[1][2])",
    "cmd_name": "conala",
    "gpt35_response": "Sort dictionary of lists `myDict` by the third item in each list. This requires accessing dictionary `myDict`, sorting each list by the third item, and returning the sorted dictionary.\n"
}
{
    "question_id": "22412258-62",
    "nl": "get the first element of each tuple in a list `rows`",
    "cmd": "[x[0] for x in rows]",
    "oracle_man": [],
    "canonical_cmd": "[x[0] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Get the first element of each tuple in a list `rows`. This requires accessing list `rows`, and returning a list of the first elements of each tuple.\n"
}
{
    "question_id": "22412258-39",
    "nl": "get a list `res_list` of the first elements of each tuple in a list of tuples `rows`",
    "cmd": "res_list = [x[0] for x in rows]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x[0] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Get a list `res_list` of the first elements of each tuple in a list of tuples `rows`. This requires accessing list `rows`, iterating through each tuple, and appending the first element of each tuple to a new list `res_list`.\n"
}
{
    "question_id": "7332841-60",
    "nl": "append the first element of array `a` to array `a`",
    "cmd": "numpy.append(a, a[0])",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "numpy.append(VAR_STR, VAR_STR[0])",
    "cmd_name": "conala",
    "gpt35_response": "Append the first element of array `a` to array `a`. This requires accessing array `a`, and appending its first element to the end of the same array.\n"
}
{
    "question_id": "18624039-75",
    "nl": "reset index of series `s`",
    "cmd": "s.reset_index(0).reset_index(drop=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "VAR_STR.reset_index(0).reset_index(drop=True)",
    "cmd_name": "conala",
    "gpt35_response": "Reset index of series `s`. This requires accessing series `s`, and resetting its index to the default integer index.\n"
}
{
    "question_id": "4060221-89",
    "nl": "open a file 'bundled-resource.jpg' in the same directory as a python script",
    "cmd": "f = open(os.path.join(__location__, 'bundled-resource.jpg'))",
    "oracle_man": [
        "python.library.os.path#os.path.join",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "f = open(os.path.join(__location__, 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": "Open a file 'bundled-resource.jpg' in the same directory as a Python script. This requires accessing the current directory, and opening file 'bundled-resource.jpg' located in that directory.\n"
}
{
    "question_id": "18663026-72",
    "nl": "Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`",
    "cmd": "count.setdefault('a', 0)",
    "oracle_man": [
        "python.library.stdtypes#dict.setdefault"
    ],
    "canonical_cmd": "VAR_STR.setdefault('VAR_STR', 0)",
    "cmd_name": "conala",
    "gpt35_response": "Set value for key `a` in dictionary `count` to `0` if key `a` does not exist or if value is `none`. This requires checking if key `a` exists in dictionary `count`, and setting its value to `0` if it does not exist or if the current value is `None`.\n"
}
{
    "question_id": "5022066-15",
    "nl": "serialise SqlAlchemy RowProxy object `row` to a json object",
    "cmd": "json.dumps([dict(list(row.items())) for row in rs])",
    "oracle_man": [
        "python.library.json#json.dumps",
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "json.dumps([dict(list(VAR_STR.items())) for VAR_STR in rs])",
    "cmd_name": "conala",
    "gpt35_response": "Serialise SqlAlchemy RowProxy object `row` to a JSON object. This requires accessing SqlAlchemy RowProxy object `row`'s attributes, and converting them to a JSON object.\n"
}
{
    "question_id": "18170459-31",
    "nl": "check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`",
    "cmd": "set(L[0].f.items()).issubset(set(a3.f.items()))",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "set(L[0].f.items()).issubset(set(a3.f.items()))",
    "cmd_name": "conala",
    "gpt35_response": "Check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`. This requires accessing dictionaries `L[0].f` and `a3.f`, checking if the items of `L[0].f` are in the items of `a3.f`.\n"
}
{
    "question_id": "674519-53",
    "nl": "convert a python dictionary `d` to a list of tuples",
    "cmd": "[(v, k) for k, v in list(d.items())]",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[(v, k) for k, v in list(VAR_STR.items())]",
    "cmd_name": "conala",
    "gpt35_response": "Convert Python dictionary `d` to a list of tuples. This requires iterating through the key-value pairs in dictionary `d`, and converting each pair to a tuple and appending to a list.\n"
}
{
    "question_id": "674519-26",
    "nl": "convert dictionary of pairs `d` to a list of tuples",
    "cmd": "[(v, k) for k, v in d.items()]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[(v, k) for k, v in VAR_STR.items()]",
    "cmd_name": "conala",
    "gpt35_response": "Convert dictionary of pairs `d` to a list of tuples. This requires iterating through the key-value pairs in dictionary `d`, and extracting the values to form a new tuple and appending to a list.\n"
}
{
    "question_id": "674519-5",
    "nl": "convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element",
    "cmd": "[(v, k) for k, v in a.items()]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[(v, k) for k, v in VAR_STR.items()]",
    "cmd_name": "conala",
    "gpt35_response": "Convert Python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element. This requires iterating through the key-value pairs in dictionary `a`, and swapping the key and value to create a new tuple and appending it to a list."
}
{
    "question_id": "674519-55",
    "nl": "convert a python dictionary 'a' to a list of tuples",
    "cmd": "[(k, v) for k, v in a.items()]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[(k, v) for k, v in VAR_STR.items()]",
    "cmd_name": "conala",
    "gpt35_response": "- Convert a python dictionary 'a' to a list of tuples. This requires iterating through the keys in dictionary 'a' and creating a list of tuples where each tuple contains a key-value pair from the dictionary."
}
{
    "question_id": "312443-22",
    "nl": "split list `l` into `n` sized lists",
    "cmd": "[l[i:i + n] for i in range(0, len(l), n)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[VAR_STR[i:i + VAR_STR] for i in range(0, len(VAR_STR), VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Split list `l` into `n` sized sublists. This requires determining the length of list `l` and using this length and `n` to create sublists of length `n` from the elements in `l`."
}
{
    "question_id": "312443-22",
    "nl": "split a list `l` into evenly sized chunks `n`",
    "cmd": "[l[i:i + n] for i in range(0, len(l), n)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[VAR_STR[i:i + VAR_STR] for i in range(0, len(VAR_STR), VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Split a list `l` into evenly sized chunks `n`. This requires calculating the length of list `l`, dividing it by `n`, and using the result to create evenly sized chunks of the elements in `l`."
}
{
    "question_id": "28161356-78",
    "nl": "Sort Pandas Dataframe by Date",
    "cmd": "df.sort_values(by='Date')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.sort_values"
    ],
    "canonical_cmd": "df.sort_values(by='Date')",
    "cmd_name": "conala",
    "gpt35_response": " Sort Pandas Dataframe by Date. This requires selecting the column with the date information and using the sort_values() method to sort the dataframe by this column."
}
{
    "question_id": "10569438-9",
    "nl": "print 'here is your checkmark: ' plus unicode character u'\\u2713'",
    "cmd": "print('here is your checkmark: ' + '\\u2713')",
    "oracle_man": [],
    "canonical_cmd": "print('here is your checkmark: ' + 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Print 'here is your checkmark: ' plus unicode character u'\\u2713'. This requires concatenating the string 'here is your checkmark: ' with the unicode character u'\\u2713' and printing the result."
}
{
    "question_id": "10569438-100",
    "nl": "print unicode characters in a string `\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f`",
    "cmd": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')",
    "oracle_man": [],
    "canonical_cmd": "print('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Print unicode characters in a string `\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f`. This requires printing the string \"\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f\", which represents the Unicode characters for the Russian word \"Russia\"."
}
{
    "question_id": "11219949-92",
    "nl": "append 3 lists in one list",
    "cmd": "[[] for i in range(3)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[[] for i in range(3)]",
    "cmd_name": "conala",
    "gpt35_response": " Append 3 lists in one list. This requires creating a new list and using the append() method to add the elements of each of the 3 lists to this new list."
}
{
    "question_id": "11219949-47",
    "nl": "Initialize a list of empty lists `a` of size 3",
    "cmd": "a = [[] for i in range(3)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [[] for i in range(3)]",
    "cmd_name": "conala",
    "gpt35_response": " Initialize a list of empty lists `a` of size 3. This requires creating a list with 3 empty sublists."
}
{
    "question_id": "39532974-100",
    "nl": "remove letters from string `example_line` if the letter exist in list `bad_chars`",
    "cmd": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]",
    "oracle_man": [
        "python.library.itertools#itertools.dropwhile",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(dropwhile(lambda x: x in VAR_STR, VAR_STR[::-1]))[::-1]",
    "cmd_name": "conala",
    "gpt35_response": " Remove letters from string `example_line` if the letter exists in list `bad_chars`. This requires iterating through the characters in `example_line` and removing any that exist in list `bad_chars`."
}
{
    "question_id": "7253803-95",
    "nl": "get every thing after last `\/`",
    "cmd": "url.rsplit('\/', 1)",
    "oracle_man": [
        "python.library.stdtypes#str.rsplit"
    ],
    "canonical_cmd": "url.rsplit('VAR_STR', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Get everything after the last `\/`. This requires finding the index of the last `\/` character in a string and then using string slicing to obtain everything after this index."
}
{
    "question_id": "7253803-97",
    "nl": "get everything after last slash in a url stored in variable 'url'",
    "cmd": "url.rsplit('\/', 1)[-1]",
    "oracle_man": [
        "python.library.stdtypes#str.rsplit"
    ],
    "canonical_cmd": "VAR_STR.rsplit('\/', 1)[-1]",
    "cmd_name": "conala",
    "gpt35_response": " Get everything after the last slash in a url stored in variable 'url'. This requires finding the index of the last `\/` character in the string stored in variable 'url' and then using string slicing to obtain everything after this index."
}
{
    "question_id": "4800419-29",
    "nl": "Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.",
    "cmd": "max(alkaline_earth_values, key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(VAR_STR, key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Find the list in a list of lists `alkaline_earth_values` with the max value of the second element. This requires iterating through the sublists in `alkaline_earth_values` and comparing the second element of each list to determine which sublist has the max value in this position."
}
{
    "question_id": "31267493-65",
    "nl": "remove elements from list `centroids` the indexes of which are in array `index`",
    "cmd": "[element for i, element in enumerate(centroids) if i not in index]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[element for i, element in enumerate(VAR_STR) if i not in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Remove elements from list `centroids` the indexes of which are in array `index`. This requires iterating through the indexes in array `index` and removing the corresponding elements from the list `centroids`."
}
{
    "question_id": "8303993-4",
    "nl": "convert a list of dictionaries `listofdict into a dictionary of dictionaries",
    "cmd": "dict((d['name'], d) for d in listofdict)",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict((d['name'], d) for d in listofdict)",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of dictionaries `listofdict` into a dictionary of dictionaries. This requires iterating through the dictionaries in `listofdict` and using the values associated with a specific key as the key in a new dictionary that is created from these values."
}
{
    "question_id": "36518800-16",
    "nl": "sort a list `unsorted_list` based on another sorted list `presorted_list`",
    "cmd": "sorted(unsorted_list, key=presorted_list.index)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=VAR_STR.index)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list `unsorted_list` based on another sorted list `presorted_list`. This requires creating a mapping between the elements in `presorted_list` and their indices and then using this mapping to create a sorted version of `unsorted_list`."
}
{
    "question_id": "18872717-86",
    "nl": "For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.",
    "cmd": "[a[x].append(b[x]) for x in range(3)]",
    "oracle_man": [
        "python.library.functions#range",
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "[a[VAR_STR].append(VAR_STR[VAR_STR]) for VAR_STR in range(3)]",
    "cmd_name": "conala",
    "gpt35_response": " For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list `a`. This requires iterating through the indices 0 to 3, obtaining the elements at index `x` from lists `a` and `b`, and appending the element from list `b` to the list in `a`."
}
{
    "question_id": "11351874-64",
    "nl": "convert dictionary `dict` into a flat list",
    "cmd": "print([y for x in list(dict.items()) for y in x])",
    "oracle_man": [
        "python.library.stdtypes#dict.items",
        "python.library.functions#list"
    ],
    "canonical_cmd": "print([y for x in list(VAR_STR.items()) for y in x])",
    "cmd_name": "conala",
    "gpt35_response": " Convert dictionary `dict` into a flat list. This requires using the items() method to obtain the key-value pairs in the dictionary and then converting these pairs into a single list using list comprehension."
}
{
    "question_id": "11351874-3",
    "nl": "Convert a dictionary `dict` into a list with key and values as list items.",
    "cmd": "[y for x in list(dict.items()) for y in x]",
    "oracle_man": [
        "python.library.stdtypes#dict.items",
        "python.library.functions#list"
    ],
    "canonical_cmd": "[y for x in list(VAR_STR.items()) for y in x]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a dictionary `dict` into a list with the key and values as list items. This requires using the items() method to obtain the key-value pairs in the dictionary and then creating a list where each element is a tuple containing a key-value pair."
}
{
    "question_id": "234512-44",
    "nl": "split a string 's' by space while ignoring spaces within square braces and quotes.",
    "cmd": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split a string 's' by space while ignoring spaces within square brackets and quotes. This requires using regular expressions to identify spaces that occur outside of square brackets and quotes and splitting the string at these locations."
}
{
    "question_id": "613183-7",
    "nl": "Sort dictionary `x` by value in ascending order",
    "cmd": "sorted(list(x.items()), key=operator.itemgetter(1))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=operator.itemgetter(1))",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary `x` by value in ascending order. This requires using the sorted() function to sort the dictionary items by their values in ascending order."
}
{
    "question_id": "613183-35",
    "nl": "Sort dictionary `dict1` by value in ascending order",
    "cmd": "sorted(dict1, key=dict1.get)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=VAR_STR.get)",
    "cmd_name": "conala",
    "gpt35_response": "- Sort dictionary `dict1` by value in ascending order. This requires obtaining all the values from the dictionary `dict1`, sorting them in ascending order, then sorting the dictionary by value."
}
{
    "question_id": "613183-93",
    "nl": "Sort dictionary `d` by value in descending order",
    "cmd": "sorted(d, key=d.get, reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=VAR_STR.get, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary `d` by value in descending order. This requires obtaining all the values from the dictionary `d`, sorting them in descending order, then sorting the dictionary by value."
}
{
    "question_id": "613183-66",
    "nl": "Sort dictionary `d` by value in ascending order",
    "cmd": "sorted(list(d.items()), key=(lambda x: x[1]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary `d` by value in ascending order. This requires obtaining all the values from the dictionary `d`, sorting them in ascending order, then sorting the dictionary by value."
}
{
    "question_id": "1712227-5",
    "nl": "get the size of list `items`",
    "cmd": "len(items)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the size of list `items`. This requires counting the number of elements in list `items`."
}
{
    "question_id": "1712227-52",
    "nl": "get the size of a list `[1,2,3]`",
    "cmd": "len([1, 2, 3])",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len([1, 2, 3])",
    "cmd_name": "conala",
    "gpt35_response": " Get the size of a list `[1,2,3]`. This requires counting the number of elements in the list `[1, 2, 3]`."
}
{
    "question_id": "1712227-61",
    "nl": "get the size of object `items`",
    "cmd": "items.__len__()",
    "oracle_man": [
        "numpy.reference.generated.numpy.ndarray.__len__"
    ],
    "canonical_cmd": "VAR_STR.__len__()",
    "cmd_name": "conala",
    "gpt35_response": " Get the size of object `items`. This requires determining the size of object `items`."
}
{
    "question_id": "1712227-3",
    "nl": "function to get the size of object",
    "cmd": "len()",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len()",
    "cmd_name": "conala",
    "gpt35_response": " Function to get the size of object. This function should accept an object as input and determine its size."
}
{
    "question_id": "1712227-90",
    "nl": "get the size of list `s`",
    "cmd": "len(s)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the size of list `s`. This requires counting the number of elements in the list `s`."
}
{
    "question_id": "28416408-96",
    "nl": "Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values",
    "cmd": "km.fit(x.reshape(-1, 1))",
    "oracle_man": [
        "numpy.reference.generated.numpy.reshape",
        "pygame.ref.rect#pygame.Rect.fit"
    ],
    "canonical_cmd": "km.fit(VAR_STR.reshape(-1, 1))",
    "cmd_name": "conala",
    "gpt35_response": " Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values. This requires reshaping the one-dimensional array `x` into a multidimensional array of single values, then fitting the Kmeans function to the new array."
}
{
    "question_id": "19433630-36",
    "nl": "django create a foreign key column `user` and link it to table 'User'",
    "cmd": "user = models.ForeignKey('User', unique=True)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = models.ForeignKey('VAR_STR', unique=True)",
    "cmd_name": "conala",
    "gpt35_response": " Django create a foreign key column `user` and link it to table 'User'. This requires creating a new column in the table 'User', making it a foreign key to table `user`, then linking the two tables."
}
{
    "question_id": "6916542-23",
    "nl": "write a list of strings `row` to csv object `csvwriter`",
    "cmd": "csvwriter.writerow(row)",
    "oracle_man": [
        "python.library.csv#csv.csvwriter.writerow"
    ],
    "canonical_cmd": "VAR_STR.writerow(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Write a list of strings `row` to csv object `csvwriter`. This requires opening the csv object `csvwriter`, writing each string in `row` followed by a delimiter, and closing the csv object."
}
{
    "question_id": "21986194-29",
    "nl": "pass dictionary items `data` as keyword arguments in function `my_function`",
    "cmd": "my_function(**data)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR(**VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Pass dictionary items `data` as keyword arguments in function `my_function`. This requires passing all key-value pairs as keyword arguments to the function `my_function`."
}
{
    "question_id": "39646401-79",
    "nl": "merge the elements in a list `lst` sequentially",
    "cmd": "[''.join(seq) for seq in zip(lst, lst[1:])]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "[''.join(seq) for seq in zip(VAR_STR, VAR_STR[1:])]",
    "cmd_name": "conala",
    "gpt35_response": " Merge the elements in a list `lst` sequentially. This requires concatenating all elements of `lst` together."
}
{
    "question_id": "6146778-62",
    "nl": "make matplotlib plot legend put marker in legend only once",
    "cmd": "legend(numpoints=1)",
    "oracle_man": [
        "matplotlib.legend_api#matplotlib.legend.Legend"
    ],
    "canonical_cmd": "legend(numpoints=1)",
    "cmd_name": "conala",
    "gpt35_response": " Make matplotlib plot legend put marker in legend only once. This requires creating a legend for the plot, ensuring the marker is only included once, then displaying the plot with the updated legend."
}
{
    "question_id": "8305518-73",
    "nl": "switch keys and values in a dictionary `my_dict`",
    "cmd": "dict((v, k) for k, v in my_dict.items())",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((v, k) for k, v in VAR_STR.items())",
    "cmd_name": "conala",
    "gpt35_response": " Switch keys and values in a dictionary `my_dict`. This requires creating a new dictionary with keys and values swapped from `my_dict`."
}
{
    "question_id": "5900683-7",
    "nl": "regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.",
    "cmd": "re.compile('{}-\\\\d*'.format(user))",
    "oracle_man": [
        "python.library.re#re.compile",
        "python.library.functions#format"
    ],
    "canonical_cmd": "re.compile('{}-\\\\d*'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits. This requires defining a regular expression pattern that matches the specified sequence of characters and digits."
}
{
    "question_id": "21360028-37",
    "nl": "Get a list comprehension in list of lists `X`",
    "cmd": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[[VAR_STR[i][j] for j in range(len(VAR_STR[i]))] for i in range(len(VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list comprehension in list of lists `X`. This requires creating a new list `lst` using a list comprehension that iterates over all elements of each sublist in `X`."
}
{
    "question_id": "748491-31",
    "nl": "convert `ms` milliseconds to a datetime object",
    "cmd": "datetime.datetime.fromtimestamp(ms \/ 1000.0)",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.fromtimestamp"
    ],
    "canonical_cmd": "datetime.datetime.fromtimestamp(VAR_STR \/ 1000.0)",
    "cmd_name": "conala",
    "gpt35_response": " Convert `ms` milliseconds to a datetime object. This requires converting `ms` to seconds, then using the resulting number of seconds to generate a datetime object."
}
{
    "question_id": "19555472-57",
    "nl": "change a string of integers `x` separated by spaces to a list of int",
    "cmd": "x = map(int, x.split())",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = map(int, VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Change a string of integers `x` separated by spaces to a list of int. This requires splitting `x` on the space character, then converting each resulting string element to an integer."
}
{
    "question_id": "19555472-58",
    "nl": "convert a string of integers `x` separated by spaces to a list of integers",
    "cmd": "x = [int(i) for i in x.split()]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = [int(i) for i in VAR_STR.split()]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string of integers `x` separated by spaces to a list of integers. This requires splitting `x` on the space character, then converting each resulting string element to an integer and storing them in a new list."
}
{
    "question_id": "9554544-22",
    "nl": "subprocess run command 'start command -flags arguments' through the shell",
    "cmd": "subprocess.call('start command -flags arguments', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": "- Run subprocess command 'start command -flags arguments' through the shell. This requires executing the subprocess command 'start command -flags arguments' and running it through the shell."
}
{
    "question_id": "9554544-33",
    "nl": "run command 'command -flags arguments &' on command line tools as separate processes",
    "cmd": "subprocess.call('command -flags arguments &', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " Run command 'command -flags arguments &' on command line tools as separate processes. This requires running command 'command -flags arguments' as a separate process on command line tools and appending '&' to it."
}
{
    "question_id": "16114244-20",
    "nl": "Selenium get the entire `driver` page text",
    "cmd": "driver.page_source",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.page_source",
    "cmd_name": "conala",
    "gpt35_response": " Get the entire `driver` page text in Selenium. This requires using Selenium to access and retrieve the complete page text from the `driver`."
}
{
    "question_id": "41807864-53",
    "nl": "regex matching 5-digit substrings not enclosed with digits in `s`",
    "cmd": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Match 5-digit substrings not enclosed with digits in string `s` using regex. This requires using regex to match 5-digit substrings that are not enclosed by any digits in string `s`."
}
{
    "question_id": "5306079-82",
    "nl": "convert a list of strings `['1', '-1', '1']` to a list of numbers",
    "cmd": "map(int, ['1', '-1', '1'])",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(int, [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of strings `['1', '-1', '1']` to a list of numbers. This requires iterating through the list of strings and converting each of them to a number."
}
{
    "question_id": "13655392-1",
    "nl": "concatenate items from list `parts` into a string starting from the second element",
    "cmd": "\"\"\"\"\"\".join(parts[1:])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(VAR_STR[1:])",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate items from list `parts` into a string starting from the second element. This requires iterating through the list `parts`, starting from the second element, and concatenating each item into a single string."
}
{
    "question_id": "13655392-37",
    "nl": "insert a character ',' into a string in front of '+' character in second part of the string",
    "cmd": "\"\"\",+\"\"\".join(c.rsplit('+', 1))",
    "oracle_man": [
        "python.library.stdtypes#str.rsplit",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\",+\"\"\".join(c.rsplit('VAR_STR', 1))",
    "cmd_name": "conala",
    "gpt35_response": " Insert a character ',' into a string in front of '+' character in the second part of the string. This requires finding the second part of the string, identifying the '+' character, and inserting ',' in front of it."
}
{
    "question_id": "39159475-83",
    "nl": "Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`",
    "cmd": "df.groupby(level=0).agg(['sum', 'count', 'std'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.agg"
    ],
    "canonical_cmd": "VAR_STR.groupby(level=0).agg(['VAR_STR', 'VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`. This requires grouping the pandas data frame `df` by certain variables and performing operations including `sum`, `count`, and `std`."
}
{
    "question_id": "11361985-41",
    "nl": "output data of the first 7 columns of Pandas dataframe",
    "cmd": "pandas.set_option('display.max_columns', 7)",
    "oracle_man": [
        "pandas.reference.api.pandas.set_option"
    ],
    "canonical_cmd": "pandas.set_option('display.max_columns', 7)",
    "cmd_name": "conala",
    "gpt35_response": " Output data of the first 7 columns of a Pandas dataframe. This requires selecting the first 7 columns of the Pandas dataframe and displaying their data."
}
{
    "question_id": "11361985-80",
    "nl": "Display maximum output data of columns in dataframe `pandas` that will fit into the screen",
    "cmd": "pandas.set_option('display.max_columns', None)",
    "oracle_man": [
        "pandas.reference.api.pandas.set_option"
    ],
    "canonical_cmd": "VAR_STR.set_option('display.max_columns', None)",
    "cmd_name": "conala",
    "gpt35_response": " Display the maximum output data of columns in Pandas dataframe `pandas` that will fit into the screen. This requires specifying the maximum output size of columns in the Pandas dataframe `pandas` that will fit into the screen."
}
{
    "question_id": "4659524-76",
    "nl": "sort list `the_list` by the length of string followed by alphabetical order",
    "cmd": "the_list.sort(key=lambda item: (-len(item), item))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda item: (-len(item), item))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `the_list` by the length of a string followed by alphabetical order. This requires sorting the list `the_list` based on the length of each string and the alphabetical order of the strings."
}
{
    "question_id": "15012228-23",
    "nl": "split a string `s` on last delimiter",
    "cmd": "s.rsplit(',', 1)",
    "oracle_man": [
        "python.library.stdtypes#str.rsplit"
    ],
    "canonical_cmd": "VAR_STR.rsplit(',', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `s` on the last delimiter. This requires finding the last delimiter in string `s` and splitting the string on it."
}
{
    "question_id": "15269161-89",
    "nl": "convert list `a` from being consecutive sequences of tuples into a single sequence of elements",
    "cmd": "list(itertools.chain(*a))",
    "oracle_man": [
        "python.library.itertools#itertools.chain",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(itertools.chain(*VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `a` from being consecutive sequences of tuples into a single sequence of elements. This requires iterating through the list of tuples and concatenating their elements into a single sequence."
}
{
    "question_id": "11344827-83",
    "nl": "Sum numbers in a list 'your_list'",
    "cmd": "sum(your_list)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum numbers in a list 'your_list'. This requires iterating through the list of numbers and adding them together to get their sum."
}
{
    "question_id": "15852295-80",
    "nl": "convert a flat list into a list of tuples of every two items in the list, in order",
    "cmd": "print(zip(my_list[0::2], my_list[1::2]))",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "print(zip(my_list[0::2], my_list[1::2]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert a flat list into a list of tuples of every two items in the list, in order. This requires iterating through the flat list and converting each pair of items into a tuple ordered in the list."
}
{
    "question_id": "15852295-94",
    "nl": "group a list of ints into a list of tuples of each 2 elements",
    "cmd": "my_new_list = zip(my_list[0::2], my_list[1::2])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "my_new_list = zip(my_list[0::2], my_list[1::2])",
    "cmd_name": "conala",
    "gpt35_response": " Group a list of integers into a list of tuples of each 2 elements. This requires iterating through the list of integers and converting each pair of integers into a tuple and grouping them into a single list."
}
{
    "question_id": "258746-77",
    "nl": "Slice `url` with '&' as delimiter  to get  \"http:\/\/www.domainname.com\/page?CONTENT_ITEM_ID=1234\" from url \"http:\/\/www.domainname.com\/page?CONTENT_ITEM_ID=1234&param2&param3\r\n\"",
    "cmd": "url.split('&')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Slice `url` with '&' as delimiter to get \"http:\/\/www.domainname.com\/page?CONTENT_ITEM_ID=1234\" from url \"http:\/\/www.domainname.com\/page?CONTENT_ITEM_ID=1234&param2&param3\". This requires identifying the delimiter '&' in the URL and slicing the URL to obtain the desired string."
}
{
    "question_id": "14661051-63",
    "nl": "convert python dictionary `your_data` to json array",
    "cmd": "json.dumps(your_data, ensure_ascii=False)",
    "oracle_man": [
        "python.library.json#json.dumps"
    ],
    "canonical_cmd": "json.dumps(VAR_STR, ensure_ascii=False)",
    "cmd_name": "conala",
    "gpt35_response": " Convert python dictionary `your_data` to a json array. This requires using python's built-in json library to convert the python dictionary `your_data` into a json array."
}
{
    "question_id": "36661837-2",
    "nl": "retrieve arabic texts from string `my_string`",
    "cmd": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "print(re.findall('[\\\\u0600-\\\\u06FF]+', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Retrieve Arabic texts from string `my_string`. This requires using regex to extract and retrieve all Arabic texts from string `my_string`."
}
{
    "question_id": "2338531-54",
    "nl": "sort list `L` based on the value of variable 'resultType' for each object in list `L`",
    "cmd": "sorted(L, key=operator.itemgetter('resultType'))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=operator.itemgetter('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `L` based on the value of variable 'resultType' for each object in list `L`. This requires sorting the list `L` based on the value of variable 'resultType' for each object in the list."
}
{
    "question_id": "2338531-20",
    "nl": "sort a list of objects `s` by a member variable 'resultType'",
    "cmd": "s.sort(key=operator.attrgetter('resultType'))",
    "oracle_man": [
        "python.library.operator#operator.attrgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.attrgetter('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": "- Sort a list of objects `s` by a member variable `resultType`. This requires creating a function that accesses the value of the `resultType` member variable for each object and using that value to sort the list."
}
{
    "question_id": "2338531-55",
    "nl": "sort a list of objects 'somelist' where the object has member number variable `resultType`",
    "cmd": "somelist.sort(key=lambda x: x.resultType)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of objects `somelist` where the object has a member number variable `resultType`. This requires creating a function that accesses the value of the `resultType` member variable for each object, filtering the list to only include objects with a `resultType` member variable, and using that value to sort the list."
}
{
    "question_id": "1773805-82",
    "nl": "parse a YAML file \"example.yaml\"",
    "cmd": "with open('example.yaml', 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.json#json.load"
    ],
    "canonical_cmd": "with open('VAR_STR', 'r') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)",
    "cmd_name": "conala",
    "gpt35_response": " Parse a YAML file \"example.yaml\". This requires using a library or function that can interpret YAML syntax and parsing the file into a usable data structure."
}
{
    "question_id": "1773805-43",
    "nl": "parse a YAML file \"example.yaml\"",
    "cmd": "with open('example.yaml') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.json#json.load"
    ],
    "canonical_cmd": "with open('VAR_STR') as stream:\n    try:\n        print(yaml.load(stream))\n    except yaml.YAMLError as exc:\n        print(exc)",
    "cmd_name": "conala",
    "gpt35_response": " Parse a YAML file \"example.yaml\". This requires using a library or function that can interpret YAML syntax and parsing the file into a usable data structure."
}
{
    "question_id": "21212706-79",
    "nl": "split string `s` into float values and write sum to `total`",
    "cmd": "total = sum(float(item) for item in s.split(','))",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.functions#sum",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = sum(float(item) for item in VAR_STR.split(','))",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` into float values and write the sum to `total`. This requires creating a function that splits the string into individual float values, sums them, and stores the result in the `total` variable."
}
{
    "question_id": "11066400-12",
    "nl": "substitute occurrences of unicode regex pattern u'\\\\p{P}+' with empty string '' in string `text`",
    "cmd": "return re.sub('\\\\p{P}+', '', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "return re.sub('VAR_STR', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Substitute occurrences of Unicode regex pattern `u'\\\\p{P}+'` with empty string ` ''` in string `text`. This requires using a regular expression library to find and replace all occurrences of the pattern with an empty string."
}
{
    "question_id": "3283306-10",
    "nl": "get the absolute path of a running python script",
    "cmd": "os.path.abspath(__file__)",
    "oracle_man": [
        "python.library.os.path#os.path.abspath"
    ],
    "canonical_cmd": "os.path.abspath(__file__)",
    "cmd_name": "conala",
    "gpt35_response": " Get the absolute path of a running Python script. This requires a function that identifies the path of the currently executing script."
}
{
    "question_id": "5404665-73",
    "nl": "access value associated with key 'American' of key 'Apple' from dictionary `dict`",
    "cmd": "dict['Apple']['American']",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR']['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Access the value associated with key `American` of key `Apple` from dictionary `dict`. This requires creating a function that accesses the value of the `American` key within the `Apple` key of the `dict` dictionary."
}
{
    "question_id": "18724607-93",
    "nl": "Python date string formatting",
    "cmd": "\"\"\"{0.month}\/{0.day}\/{0.year}\"\"\".format(my_date)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{0.month}\/{0.day}\/{0.year}\"\"\".format(my_date)",
    "cmd_name": "conala",
    "gpt35_response": " Python date string formatting. This requires creating a function that formats a date string in Python into the desired output format."
}
{
    "question_id": "39187788-53",
    "nl": "find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe",
    "cmd": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc",
        "python.library.functions#any"
    ],
    "canonical_cmd": "df.loc[(df.loc[:, (df.dtypes != VAR_STR)] != 0).any(1)]",
    "cmd_name": "conala",
    "gpt35_response": " Find rows with non-zero values in a subset of columns where `df.dtypes` is not equal to `object` in a Pandas DataFrame. This requires a function that filters the DataFrame to only include rows with non-zero values in specified columns, and where the data type is not an object."
}
{
    "question_id": "34468983-72",
    "nl": "check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`",
    "cmd": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(i in (VAR_STR) for i in (VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`. This requires creating a function that checks if all elements of one tuple are present in another tuple."
}
{
    "question_id": "11677860-42",
    "nl": "Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`",
    "cmd": "C = [(a - b) for a, b in zip(A, B)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "VAR_STR = [(a - b) for a, b in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`. This requires creating a function that subtracts each element in list `B` from the corresponding element in list `A` and returns a new list `C`."
}
{
    "question_id": "39605640-67",
    "nl": "pull a value with key 'name' from a json object `item`",
    "cmd": "print(item['name'])",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Pull a value with key `name` from a JSON object `item`. This requires creating a function that accesses the value for the `name` key in the `item` JSON object."
}
{
    "question_id": "41083229-90",
    "nl": "removing vowel characters 'aeiouAEIOU' from string `text`",
    "cmd": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(c for c in VAR_STR if c not in 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove vowel characters `aeiouAEIOU` from string `text`. This requires creating a function that iterates through the `text` string, removing any vowels, and returning a new modified string."
}
{
    "question_id": "28657018-77",
    "nl": "get last element of string splitted by '\\\\' from list of strings `list_dirs`",
    "cmd": "[l.split('\\\\')[-1] for l in list_dirs]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[l.split('VAR_STR')[-1] for l in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get the last element of a string split by the backslash character `\\` from a list of strings `list_dirs`. This requires a function that splits each string in `list_dirs` by the backslash character `\\`, selects the last element, and returns a new list."
}
{
    "question_id": "354038-4",
    "nl": "check if string `a` is an integer",
    "cmd": "a.isdigit()",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit"
    ],
    "canonical_cmd": "VAR_STR.isdigit()",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `a` is an integer. This requires creating a function that attempts to parse `a` as an integer and returns a boolean value indicating whether the parse was successful."
}
{
    "question_id": "354038-84",
    "nl": "function to check if a string is a number",
    "cmd": "isdigit()",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit"
    ],
    "canonical_cmd": "isdigit()",
    "cmd_name": "conala",
    "gpt35_response": " Function to check if a string is a number. This requires creating a function that attempts to parse a string as a number and returns a boolean value indicating whether the parse was successful."
}
{
    "question_id": "354038-52",
    "nl": "check if string `b` is a number",
    "cmd": "b.isdigit()",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit"
    ],
    "canonical_cmd": "VAR_STR.isdigit()",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `b` is a number. This requires creating a function that attempts to parse `b` as a number and returns a boolean value indicating whether the parse was successful."
}
{
    "question_id": "34015615-56",
    "nl": "reverse a UTF-8 string 'a'",
    "cmd": "b = a.decode('utf8')[::-1].encode('utf8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "b = VAR_STR.decode('utf8')[::-1].encode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " Reverse a UTF-8 string `a`. This requires creating a function that reverses the order of the characters in `a`."
}
{
    "question_id": "20778951-67",
    "nl": "find all occurrences of regex pattern '(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)' in string `x`",
    "cmd": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all occurrences of regex pattern `(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)` in string `x`. This requires creating a function that searches `x` for all occurrences of the specified regex pattern and returns a list of matched strings."
}
{
    "question_id": "15741759-23",
    "nl": "Return rows of data associated with the maximum value of column 'Value' in dataframe `df`",
    "cmd": "df.loc[df['Value'].idxmax()]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc",
        "pandas.reference.api.pandas.dataframe.idxmax"
    ],
    "canonical_cmd": "VAR_STR.loc[VAR_STR['VAR_STR'].idxmax()]",
    "cmd_name": "conala",
    "gpt35_response": "- Return rows of data associated with the maximum value of column 'Value' in dataframe `df`. This requires finding the maximum value in column 'Value', identifying all rows of data associated with the maximum value, and returning those rows."
}
{
    "question_id": "2158347-51",
    "nl": "Convert a datetime object `my_datetime` into readable format `%B %d, %Y`",
    "cmd": "my_datetime.strftime('%B %d, %Y')",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "VAR_STR.strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a datetime object `my_datetime` into readable format `%B %d, %Y`. This requires converting the `my_datetime` object into a datetime format that can be read, and formatting that datetime in the desired output format of `%B %d, %Y`."
}
{
    "question_id": "15795525-71",
    "nl": "Sort items in dictionary `d`  using the first part of the key after splitting the key",
    "cmd": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#str.rsplit",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda name_num: (name_num[0].rsplit(None, \n    1)[0], name_num[1]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort items in dictionary `d` using the first part of the key after splitting the key. This requires splitting each key in `d` into the first and second parts, sorting the dictionary based on the first part of each key, and then reassembling the sorted dictionary."
}
{
    "question_id": "33127636-66",
    "nl": "Execute a put request to the url `url`",
    "cmd": "response = requests.put(url, data=json.dumps(data), headers=headers)",
    "oracle_man": [
        "python.library.json#json.dumps",
        "numpy.reference.generated.numpy.put"
    ],
    "canonical_cmd": "response = requests.put(VAR_STR, data=json.dumps(data), headers=headers)",
    "cmd_name": "conala",
    "gpt35_response": " Execute a put request to the url `url`. This requires sending a put request to the specific url `url`."
}
{
    "question_id": "17952279-42",
    "nl": "plot a data logarithmically in y axis",
    "cmd": "plt.yscale('log', nonposy='clip')",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.pyplot.yscale"
    ],
    "canonical_cmd": "plt.yscale('log', nonposy='clip')",
    "cmd_name": "conala",
    "gpt35_response": " Plot data logarithmically in y axis. This requires taking the input data, applying a logarithmic function to the y-axis of the graph, and displaying the resulting plot."
}
{
    "question_id": "6900955-83",
    "nl": "build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key\/value pair as its items",
    "cmd": "dict([['two', 2], ['one', 1]])",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key\/value pair as its items. This requires iterating through each sublist in `[['two', 2], ['one', 1]]`, creating a key\/value pair out of the values in that sublist, and adding each key\/value pair to a new dictionary."
}
{
    "question_id": "6900955-75",
    "nl": "convert list `l` to dictionary having each two adjacent elements as key\/value pair",
    "cmd": "dict(zip(l[::2], l[1::2]))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip(VAR_STR[::2], VAR_STR[1::2]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `l` to dictionary having each two adjacent elements as key\/value pair. This requires iterating through each pair of adjacent elements in `l`, creating a key\/value pair out of those elements, and adding each key\/value pair to a new dictionary."
}
{
    "question_id": "12768504-68",
    "nl": "create list `c` containing items from list `b` whose index is in list `index`",
    "cmd": "c = [b[i] for i in index]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [VAR_STR[i] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `c` containing items from list `b` whose index is in list `index`. This requires iterating through each index in `index`, identifying the item in `b` at that index, and appending that item to a new list `c`."
}
{
    "question_id": "32792874-24",
    "nl": "get geys of dictionary `my_dict` that contain any values from list `lst`",
    "cmd": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.intersection",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[key for key, value in list(VAR_STR.items()) if set(value).intersection(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get keys of dictionary `my_dict` that contain any values from list `lst`. This requires iterating through each key and value in `my_dict`, checking if any value exists within `lst`, and adding the key to a new list if a matching value is found."
}
{
    "question_id": "32792874-83",
    "nl": "get list of keys in dictionary `my_dict` whose values contain values from list `lst`",
    "cmd": "[key for item in lst for key, value in list(my_dict.items()) if item in value]",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[key for item in VAR_STR for key, value in list(VAR_STR.items()) if item in value]",
    "cmd_name": "conala",
    "gpt35_response": " Get list of keys in dictionary `my_dict` whose values contain values from list `lst`. This requires iterating through each key and value in `my_dict`, checking if any value exists within `lst`, and adding the key to a new list only if all of the values are found."
}
{
    "question_id": "31828240-66",
    "nl": "get first non-null value per each row from dataframe `df`",
    "cmd": "df.stack().groupby(level=0).first()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.stack",
        "pandas.reference.api.pandas.dataframe.first",
        "pandas.reference.api.pandas.dataframe.groupby"
    ],
    "canonical_cmd": "VAR_STR.stack().groupby(level=0).first()",
    "cmd_name": "conala",
    "gpt35_response": " Get first non-null value per each row from dataframe `df`. This requires iterating through each row in `df`, identifying the first non-null value in that row, and adding that value to a new list."
}
{
    "question_id": "25292838-12",
    "nl": "Update row values for a column `Season` using vectorized string operation in pandas",
    "cmd": "df['Season'].str.split('-').str[0].astype(int)",
    "oracle_man": [
        "python.library.stdtypes#str.split",
        "pandas.reference.api.pandas.series.astype"
    ],
    "canonical_cmd": "df['VAR_STR'].str.split('-').str[0].astype(int)",
    "cmd_name": "conala",
    "gpt35_response": " Update row values for a column `Season` using vectorized string operation in pandas. This requires using a vectorized string operation to update the values in the `Season` column of `df`."
}
{
    "question_id": "31465002-50",
    "nl": "find all digits in string '6,7)' and put them to a list",
    "cmd": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Find all digits in string '6,7)' and put them to a list. This requires iterating through each character in the string, identifying any digits, and adding those digits to a new list."
}
{
    "question_id": "3487377-65",
    "nl": "check if string `foo` is UTF-8 encoded",
    "cmd": "foo.decode('utf8').encode('utf8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('utf8').encode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `foo` is UTF-8 encoded. This requires checking whether the string `foo` is encoded using the UTF-8 encoding format."
}
{
    "question_id": "7128153-81",
    "nl": "check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`",
    "cmd": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(word in VAR_STR for word in [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Check if dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`. This requires iterating through each key in `['somekey', 'someotherkey', 'somekeyggg']` and checking if that key exists in `d`. "
}
{
    "question_id": "18116235-9",
    "nl": "Get only digits from a string `strs`",
    "cmd": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([c for c in VAR_STR if c.isdigit()])",
    "cmd_name": "conala",
    "gpt35_response": " Get only digits from a string `strs`. This requires iterating through each character in `strs`, identifying any digits, and concatenating those digits into a new string."
}
{
    "question_id": "40208429-82",
    "nl": "sort dictionary `tag_weight` in reverse order by values cast to integers",
    "cmd": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#int",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda x: int(x[1]), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary `tag_weight` in reverse order by values cast to integers. This requires converting each value in `tag_weight` into an integer, sorting the dictionary in reverse order based on those integers, and reassembling the sorted dictionary."
}
{
    "question_id": "13408919-82",
    "nl": "sort list `mylist` of tuples by arbitrary key from list `order`",
    "cmd": "sorted(mylist, key=lambda x: order.index(x[1]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#str.index"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: VAR_STR.index(x[1]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `mylist` of tuples by arbitrary key from list `order`. This requires sorting `mylist` of tuples based on a specific key identified in `order`."
}
{
    "question_id": "15334783-78",
    "nl": "multiply values of dictionary `dict` with their respective values in dictionary `dict2`",
    "cmd": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "VAR_STR((k, v * VAR_STR[k]) for k, v in list(dict1.items()) if k in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Multiply values of dictionary `dict` with their respective values in dictionary `dict2`. This requires iterating through each key\/value pair in `dict`, identifying the corresponding value in `dict2`, multiplying the two values, and replacing the original value in `dict` with the product."
}
{
    "question_id": "14850853-99",
    "nl": "insert directory 'libs' at the 0th index of current directory",
    "cmd": "sys.path.insert(0, 'libs')",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "sys.path.insert(0, 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Insert directory 'libs' at the 0th index of current directory. This requires identifying the current working directory, inserting 'libs' at the 0th index of the directory path, and setting this new path as the current working directory."
}
{
    "question_id": "21018612-78",
    "nl": "download to a directory '\/path\/to\/dir\/filename.ext' from source 'http:\/\/example.com\/file.ext'",
    "cmd": "urllib.request.urlretrieve('http:\/\/example.com\/file.ext', '\/path\/to\/dir\/filename.ext')",
    "oracle_man": [
        "python.library.urllib.request#urllib.request.urlretrieve"
    ],
    "canonical_cmd": "urllib.request.urlretrieve('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Download file from source 'http:\/\/example.com\/file.ext' to directory '\/path\/to\/dir\/filename.ext'. This requires specifying the file source and destination path and downloading the file."
}
{
    "question_id": "20986631-1",
    "nl": "scroll to the bottom of a web page using selenium webdriver",
    "cmd": "driver.execute_script('window.scrollTo(0, Y)')",
    "oracle_man": [],
    "canonical_cmd": "driver.execute_script('window.scrollTo(0, Y)')",
    "cmd_name": "conala",
    "gpt35_response": " Scroll to the bottom of a web page using selenium webdriver. This requires finding the web page's scroll bar and scrolling to the bottom."
}
{
    "question_id": "20986631-45",
    "nl": "scroll a to the bottom of a web page using selenium webdriver",
    "cmd": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')",
    "oracle_man": [],
    "canonical_cmd": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')",
    "cmd_name": "conala",
    "gpt35_response": " Scroll to the bottom of a web page using selenium webdriver. This requires finding the web page's scroll bar and continuously scrolling until the bottom is reached."
}
{
    "question_id": "3662142-4",
    "nl": "remove tags from a string `mystring`",
    "cmd": "re.sub('<[^>]*>', '', mystring)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('<[^>]*>', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove HTML tags from the string `mystring`. This requires identifying HTML tags in the string and removing them."
}
{
    "question_id": "25678689-75",
    "nl": "append array of strings `['x', 'x', 'x']` into one string",
    "cmd": "\"\"\"\"\"\".join(['x', 'x', 'x'])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Append an array of strings `['x', 'x', 'x']` into one string. This requires iterating through the array and concatenating the strings into one."
}
{
    "question_id": "3252590-78",
    "nl": "Find all the items from a dictionary `D` if the key contains the string `Light`",
    "cmd": "[(k, v) for k, v in D.items() if 'Light' in k]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[(k, v) for k, v in VAR_STR.items() if 'VAR_STR' in k]",
    "cmd_name": "conala",
    "gpt35_response": " Find all the items from dictionary `D` if the key contains the string `Light`. This requires iterating through the dictionary and identifying keys that contain the string `Light`."
}
{
    "question_id": "18448469-27",
    "nl": "create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`",
    "cmd": "result = [x for x in list_a if x[0] in list_b]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x for x in VAR_STR if x[0] in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list `result` containing elements from list `list_a` if the first element of list `list_a` is in list `list_b`. This requires iterating through `list_a`, checking if its first element is in `list_b`, and adding it to `result` if it is."
}
{
    "question_id": "4127344-57",
    "nl": "transforming the string `s` into dictionary",
    "cmd": "dict(map(int, x.split(':')) for x in s.split(','))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#dict",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "dict(map(int, x.split(':')) for x in VAR_STR.split(','))",
    "cmd_name": "conala",
    "gpt35_response": " Transform the string `s` into a dictionary. This requires parsing the string and creating a dictionary from the data."
}
{
    "question_id": "6086047-89",
    "nl": "get output of script `proc`",
    "cmd": "print(proc.communicate()[0])",
    "oracle_man": [
        "python.library.subprocess#subprocess.Popen.communicate"
    ],
    "canonical_cmd": "print(VAR_STR.communicate()[0])",
    "cmd_name": "conala",
    "gpt35_response": " Get the output of the script `proc`. This requires executing the script `proc` and storing its output."
}
{
    "question_id": "18722196-70",
    "nl": "set UTC offset by 9 hrs ahead for date '2013\/09\/11 00:17'",
    "cmd": "dateutil.parser.parse('2013\/09\/11 00:17 +0900')",
    "oracle_man": [
        "python.library.email.parser#email.parser.Parser.parse"
    ],
    "canonical_cmd": "dateutil.parser.parse('2013\/09\/11 00:17 +0900')",
    "cmd_name": "conala",
    "gpt35_response": " Set the UTC offset 9 hours ahead for the date '2013\/09\/11 00:17'. This requires identifying the date, setting the UTC offset, and adjusting the date accordingly."
}
{
    "question_id": "1358977-73",
    "nl": "Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib",
    "cmd": "fig.add_subplot(1, 1, 1)",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.FigureBase.add_subplot"
    ],
    "canonical_cmd": "fig.add_subplot(1, 1, 1)",
    "cmd_name": "conala",
    "gpt35_response": " Return a subplot axes positioned by the grid definition `1,1,1` using matplotlib. This requires creating the subplot and positioning it based on the grid definition."
}
{
    "question_id": "18689823-5",
    "nl": "replace nan values in a pandas data frame with the average of columns",
    "cmd": "df.apply(lambda x: x.fillna(x.mean()), axis=0)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.apply",
        "pandas.reference.api.pandas.dataframe.fillna",
        "pandas.reference.api.pandas.dataframe.mean"
    ],
    "canonical_cmd": "df.apply(lambda x: x.fillna(x.mean()), axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Replace NaN values in a pandas data frame with the average of columns. This requires iterating through the columns, identifying NaN values, and replacing them with the column's average."
}
{
    "question_id": "2972212-34",
    "nl": "Creating an empty list `l`",
    "cmd": "l = []",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = []",
    "cmd_name": "conala",
    "gpt35_response": " Create an empty list `l`. This requires initializing an empty list and assigning it to `l`."
}
{
    "question_id": "2972212-64",
    "nl": "Creating an empty list `l`",
    "cmd": "l = list()",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "VAR_STR = list()",
    "cmd_name": "conala",
    "gpt35_response": " Create an empty list `l`. This requires initializing an empty list and assigning it to `l`."
}
{
    "question_id": "2972212-86",
    "nl": "Creating an empty list",
    "cmd": "list()",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list()",
    "cmd_name": "conala",
    "gpt35_response": " Create an empty list. This requires initializing an empty list."
}
{
    "question_id": "2972212-96",
    "nl": "Creating an empty list",
    "cmd": "[]",
    "oracle_man": [],
    "canonical_cmd": "[]",
    "cmd_name": "conala",
    "gpt35_response": " Create an empty list. This requires initializing an empty list."
}
{
    "question_id": "16412563-51",
    "nl": "sort dictionary of dictionaries `dic` according to the key 'Fisher'",
    "cmd": "sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda x: x[1]['VAR_STR'], reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary of dictionaries `dic` according to the key 'Fisher'. This requires iterating through the dictionary and sorting the inner dictionaries by the key 'Fisher'."
}
{
    "question_id": "9573244-39",
    "nl": "check if the string `myString` is empty",
    "cmd": "if (not myString):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if not VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if the string `myString` is empty. This requires checking the length of the string and determining if it is equal to zero."
}
{
    "question_id": "9573244-74",
    "nl": "check if string `some_string` is empty",
    "cmd": "if (not some_string):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if not VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `some_string` is empty. This requires checking the length of the string and determining if it is equal to zero."
}
{
    "question_id": "9573244-79",
    "nl": "check if string `my_string` is empty",
    "cmd": "if (not my_string):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if not VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `my_string` is empty. This requires checking the length of the string and determining if it is equal to zero."
}
{
    "question_id": "9573244-4",
    "nl": "check if string `my_string` is empty",
    "cmd": "if some_string:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if some_string:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": "-Check if string `my_string` is empty. This requires checking the length of the string and see if it is equal to zero."
}
{
    "question_id": "12402561-84",
    "nl": "set font size of axis legend of plot `plt` to 'xx-small'",
    "cmd": "plt.setp(legend.get_title(), fontsize='xx-small')",
    "oracle_man": [
        "matplotlib.legend_api#matplotlib.legend.Legend.get_title",
        "matplotlib._as_gen.matplotlib.artist.setp"
    ],
    "canonical_cmd": "VAR_STR.setp(legend.get_title(), fontsize='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Set font size of axis legend of plot `plt` to 'xx-small'. This requires accessing the axis legend object from `plt` and setting its font size to 'xx-small'."
}
{
    "question_id": "7633274-73",
    "nl": "Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation",
    "cmd": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')",
    "oracle_man": [
        "python.library.re#re.compile",
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.compile('\\\\w+').findall('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Get a list of words from a string `Hello world, my name is...James the 2nd!` removing punctuation. This requires removing all punctuation marks from the string and then splitting it into a list of words."
}
{
    "question_id": "22625616-82",
    "nl": "list all files in a current directory",
    "cmd": "glob.glob('*')",
    "oracle_man": [],
    "canonical_cmd": "glob.glob('*')",
    "cmd_name": "conala",
    "gpt35_response": "List all files in a current directory. This requires accessing the file system and listing all files in the current directory."
}
{
    "question_id": "22625616-43",
    "nl": "List all the files that doesn't contain the name `hello`",
    "cmd": "glob.glob('[!hello]*.txt')",
    "oracle_man": [],
    "canonical_cmd": "glob.glob('[!hello]*.txt')",
    "cmd_name": "conala",
    "gpt35_response": "List all the files that doesn't contain the name `hello`. This requires accessing the file system and filtering out all files that contain the text 'hello' in their names."
}
{
    "question_id": "22625616-69",
    "nl": "List all the files that matches the pattern `hello*.txt`",
    "cmd": "glob.glob('hello*.txt')",
    "oracle_man": [],
    "canonical_cmd": "glob.glob('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "List all the files that matches the pattern `hello*.txt`. This requires accessing the file system and finding all files that have names starting with 'hello' and ending with '.txt'."
}
{
    "question_id": "2911754-43",
    "nl": "upload binary file `myfile.txt` with ftplib",
    "cmd": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.ftplib#ftplib.FTP.storbinary"
    ],
    "canonical_cmd": "ftp.storbinary('STOR myfile.txt', open('VAR_STR', 'rb'))",
    "cmd_name": "conala",
    "gpt35_response": "Upload binary file `myfile.txt` with ftplib. This requires connecting to the server, logging in with appropriate credentials, and using the ftplib module to send the binary file to the server."
}
{
    "question_id": "41552839-94",
    "nl": "convert and escape string \"\\\\xc3\\\\x85\u3042\" to UTF-8 code",
    "cmd": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')",
    "cmd_name": "conala",
    "gpt35_response": "Convert and escape string \"\\\\xc3\\\\x85\u3042\" to UTF-8 code. This requires decoding the escaped string to its original form and then encoding it in UTF-8."
}
{
    "question_id": "41552839-27",
    "nl": "encode string \"\\\\xc3\\\\x85\u3042\" to bytes",
    "cmd": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8')",
    "cmd_name": "conala",
    "gpt35_response": "Encode string \"\\\\xc3\\\\x85\u3042\" to bytes. This requires converting the string to bytes using a specified encoding, such as UTF-8."
}
{
    "question_id": "28773683-11",
    "nl": "combine  dataframe `df1` and dataframe `df2` by index number",
    "cmd": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "pd.merge(VAR_STR, VAR_STR, left_index=True, right_index=True, how='outer')",
    "cmd_name": "conala",
    "gpt35_response": "Combine dataframe `df1` and dataframe `df2` by index number. This requires using the pandas.concat() function on `df1` and `df2` and specifying that they should be combined by index."
}
{
    "question_id": "28773683-66",
    "nl": "Combine two Pandas dataframes with the same index",
    "cmd": "pandas.concat([df1, df2], axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat"
    ],
    "canonical_cmd": "pandas.concat([df1, df2], axis=1)",
    "cmd_name": "conala",
    "gpt35_response": "Combine two Pandas dataframes with the same index. This requires using the pandas.concat() function on the two dataframes and specifying that they should be combined based on their shared index."
}
{
    "question_id": "20894525-98",
    "nl": "replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`",
    "cmd": "df['name'].str.replace('\\\\(.*\\\\)', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].str.replace('\\\\(.*\\\\)', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`. This requires manipulating the dataframe `df` to extract only the string outside the parentheses and then replacing the entire column with the modified values."
}
{
    "question_id": "41313232-31",
    "nl": "delete items from list `my_list` if the item exist in list `to_dell`",
    "cmd": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [[x for x in sublist if x not in to_del] for sublist in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Delete items from list `my_list` if the item exists in list `to_dell`. This requires iterating through both lists and using the list.remove() function to remove any item that is found in both lists."
}
{
    "question_id": "4682088-12",
    "nl": "invoke perl script '.\/uireplace.pl' using perl interpeter '\/usr\/bin\/perl' and send argument `var` to it",
    "cmd": "subprocess.call(['\/usr\/bin\/perl', '.\/uireplace.pl', var])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['VAR_STR', 'VAR_STR', VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": "Invoke perl script '.\/uireplace.pl' using perl interpreter '\/usr\/bin\/perl' and send argument `var` to it. This requires executing the perl script with the perl interpreter at '\/usr\/bin\/perl' and passing the argument `var` to the script."
}
{
    "question_id": "5245058-99",
    "nl": "filter lines from a text file 'textfile' which contain a word 'apple'",
    "cmd": "[line for line in open('textfile') if 'apple' in line]",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "[line for line in open('VAR_STR') if 'VAR_STR' in line]",
    "cmd_name": "conala",
    "gpt35_response": "Filter lines from a text file 'textfile' which contain a word 'apple'. This requires reading the text file line by line and using a conditional statement to filter out all lines that do not contain the desired word."
}
{
    "question_id": "17149561-2",
    "nl": "Check if the value of the key \"name\" is \"Test\" in a list of dictionaries `label`",
    "cmd": "any(d['name'] == 'Test' for d in label)",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(d['VAR_STR'] == 'VAR_STR' for d in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Check if the value of the key \"name\" is \"Test\" in a list of dictionaries `label`. This requires iterating through the list of dictionaries and using a conditional statement to check if the value associated with the key `name` is equal to 'Test'."
}
{
    "question_id": "32950347-8",
    "nl": "get value in string `line` matched by regex pattern '\\\\bLOG_ADDR\\\\s+(\\\\S+)'",
    "cmd": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "print(re.search('VAR_STR', VAR_STR).group(1))",
    "cmd_name": "conala",
    "gpt35_response": "Get value in string `line` matched by regex pattern '\\\\bLOG_ADDR\\\\s+(\\\\S+)'. This requires using a regular expression pattern to match the desired value in `line`."
}
{
    "question_id": "14991195-10",
    "nl": "remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`",
    "cmd": "df2.dropna(subset=['three', 'four', 'five'], how='all')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.dropna"
    ],
    "canonical_cmd": "VAR_STR.dropna(subset=['VAR_STR', 'VAR_STR', 'VAR_STR'], how='all')",
    "cmd_name": "conala",
    "gpt35_response": "Remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`. This requires accessing `df2` and then dropping all rows that contain null values within the specified columns."
}
{
    "question_id": "902408-3",
    "nl": "insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'",
    "cmd": "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.Cursor.execute"
    ],
    "canonical_cmd": "cursor.execute('VAR_STR', (VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'. This requires modifying the sql statement to include placeholders for the three variables."
}
{
    "question_id": "902408-38",
    "nl": "Execute a sql statement using variables `var1`, `var2` and `var3`",
    "cmd": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.Cursor.execute"
    ],
    "canonical_cmd": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (VAR_STR, VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Execute a sql statement using variables `var1`, `var2` and `var3`. This requires executing the modified sql statement with the three variables included and committing the changes to the database."
}
{
    "question_id": "902408-71",
    "nl": "How to use variables in SQL statement in Python?",
    "cmd": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.Cursor.execute"
    ],
    "canonical_cmd": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))",
    "cmd_name": "conala",
    "gpt35_response": "- How to use variables in SQL statement in Python?:\n    - To use variables in an SQL statement in Python, you need to replace the hardcoded values in the SQL statement with placeholders. Then you should pass those values as a tuple to the `execute` method of the cursor object that you use to execute the SQL statement. For example, `cursor.execute(\"SELECT * FROM tablename WHERE column1 = %s and column2 = %s\", (value1, value2))` where `value1` and `value2` are the variables you want to use in the SQL statement."
}
{
    "question_id": "23931444-78",
    "nl": "Selenium `driver` click a hyperlink with the pattern \"a[href^='javascript']\"",
    "cmd": "driver.find_element_by_css_selector(\"a[href^='javascript']\").click()",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.find_element_by_css_selector('VAR_STR').click()",
    "cmd_name": "conala",
    "gpt35_response": " Selenium `driver` click a hyperlink with the pattern \"a[href^='javascript']\":\n    - To make the Selenium `driver` click a hyperlink with the pattern \"a[href^='javascript']\", you need to find that element on the page using the `find_element_by_css_selector` method. Then, you can call the `click()` method on that element to click on it."
}
{
    "question_id": "13793973-44",
    "nl": "Print string `t` with proper unicode representations",
    "cmd": "print(t.decode('unicode_escape'))",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "print(VAR_STR.decode('unicode_escape'))",
    "cmd_name": "conala",
    "gpt35_response": " Print string `t` with proper unicode representations:\n    - To print string `t` with proper unicode representations, you need to encode the string with a unicode encoding format and then decode it back into a unicode string format. For example, `print(t.encode('utf-8').decode('unicode_escape'))`."
}
{
    "question_id": "33824334-79",
    "nl": "convert list `lst` of key, value pairs into a dictionary",
    "cmd": "dict([(e[0], int(e[1])) for e in lst])",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict([(e[0], int(e[1])) for e in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `lst` of key, value pairs into a dictionary:\n    - To convert list `lst` of key, value pairs into a dictionary, you need to use the `dict()` constructor with a list comprehension. For example, `mydict = dict([(k, v) for k, v in lst])`."
}
{
    "question_id": "14041791-87",
    "nl": "Print a string `card` with string formatting",
    "cmd": "print('I have: {0.price}'.format(card))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('I have: {0.price}'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print a string `card` with string formatting:\n    - To print string `card` with string formatting, you can use the `str.format()` method. For example, given `val1` and `val2` are the values to be formatted as `{}` in the string, the formatted output would be `print(\"The card is {}{}\".format(card, val1, val2))`."
}
{
    "question_id": "969285-80",
    "nl": "None",
    "cmd": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')",
    "cmd_name": "conala",
    "gpt35_response": " None:\n    - No enhancement needed, as no task is given."
}
{
    "question_id": "2764586-55",
    "nl": "get current requested url",
    "cmd": "self.request.url",
    "oracle_man": [],
    "canonical_cmd": "self.request.url",
    "cmd_name": "conala",
    "gpt35_response": " Get current requested url:\n    - To get the current requested URL in Python, you can use the `current_url` attribute of the webdriver instance. For example, `current_url = driver.current_url`."
}
{
    "question_id": "2424412-78",
    "nl": "convert list of strings `str_list` into list of integers",
    "cmd": "[int(i) for i in str_list]",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "[int(i) for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of strings `str_list` into list of integers:\n    - To convert a list of strings `str_list` into a list of integers, you can use the `map()` function with `int` as the argument. For example, `int_list = list(map(int, str_list))`."
}
{
    "question_id": "2424412-99",
    "nl": "convert a list with string `['1', '2', '3']` into list with integers",
    "cmd": "map(int, ['1', '2', '3'])",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(int, [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list with string `['1', '2', '3']` into list with integers:\n    - To convert a list with string `['1', '2', '3']` into a list with integers, you can use the `map()` function with `int` as the argument. For example, `int_list = list(map(int, ['1', '2', '3']))`."
}
{
    "question_id": "2424412-2",
    "nl": "convert list with str into list with int",
    "cmd": "list(map(int, ['1', '2', '3']))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(map(int, ['1', '2', '3']))",
    "cmd_name": "conala",
    "gpt35_response": " Convert list with str into list with int:\n    - To convert a list with string values to a list with integer values, you can use the `map()` function with `int` as the argument. For example, `int_list = list(map(int, str_list))`."
}
{
    "question_id": "33680914-50",
    "nl": "Return values for column `C` after group by on column `A` and `B` in dataframe `df`",
    "cmd": "df.groupby(['A', 'B'])['C'].unique()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.core.groupby.seriesgroupby.unique"
    ],
    "canonical_cmd": "VAR_STR.groupby(['VAR_STR', 'VAR_STR'])['VAR_STR'].unique()",
    "cmd_name": "conala",
    "gpt35_response": " Return values for column `C` after group by on column `A` and `B` in dataframe `df`:\n    - To return values for column `C` after group by on column `A` and `B` in dataframe `df`, you can use the `groupby()` function followed by the `sum()` or `mean()` function for the desired calculation. For example, `result = df.groupby(['A', 'B'])['C'].sum()` or `result = df.groupby(['A', 'B'])['C'].mean()`."
}
{
    "question_id": "19939084-58",
    "nl": "plot point marker '.' on series `ts`",
    "cmd": "ts.plot(marker='.')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "VAR_STR.plot(marker='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Plot point marker '.' on series `ts`:\n    - To plot a point marker '.' on the series `ts`, you need to use the `plt.plot()` method and specify the marker argument as '.'. For example, `plt.plot(ts, marker='.')`."
}
{
    "question_id": "15459217-11",
    "nl": "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`",
    "cmd": "br.addheaders = [('Cookie', 'cookiename=cookie value')]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.addheaders = [(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`:\n    - To add a header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`, you need to use the `addheaders` method with a list of header tuples. For example, `br.addheaders = [('Cookie', 'cookiename=cookie value')]`."
}
{
    "question_id": "33065588-27",
    "nl": "execute a command `command ` in the terminal from a python script",
    "cmd": "os.system(command)",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Execute a command `command` in the terminal from a python script:\n    - To execute a command `command` in the terminal from a Python script, you need to use the `os.system` function or the `subprocess.call` function. For example, `os.system(command)` or `subprocess.call(command, shell=True)`."
}
{
    "question_id": "4716533-82",
    "nl": "attach debugger pdb to class `ForkedPdb`",
    "cmd": "ForkedPdb().set_trace()",
    "oracle_man": [
        "python.library.bdb#bdb.set_trace"
    ],
    "canonical_cmd": "VAR_STR().set_trace()",
    "cmd_name": "conala",
    "gpt35_response": " Attach debugger pdb to class `ForkedPdb`:\n    - To attach debugger pdb to class `ForkedPdb`, you need to include the following code `import pdb; pdb.set_trace()` in the desired location in the class. When the script runs, the debugger will pause execution at that point and allow for debugging."
}
{
    "question_id": "26897536-42",
    "nl": "drop all columns in dataframe `df` that holds a maximum value bigger than 0",
    "cmd": "df.columns[df.max() > 0]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.max"
    ],
    "canonical_cmd": "VAR_STR.columns[VAR_STR.max() > 0]",
    "cmd_name": "conala",
    "gpt35_response": " Drop all columns in dataframe `df` that holds a maximum value bigger than 0:\n    - To drop all columns in dataframe `df` that holds a maximum value bigger than 0, you can use the `apply()` and `drop()` method in conjunction. For example, `df.drop(df.columns[df.apply(lambda col: col.max() > 0)], axis=1, inplace=True)` will drop all columns who have a maximum value greater than 0."
}
{
    "question_id": "1720421-45",
    "nl": "concatenate lists `listone` and `listtwo`",
    "cmd": "(listone + listtwo)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR + VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate lists `listone` and `listtwo`:\n    - To concatenate lists `listone` and `listtwo`, you can use the `+` operator. For example, `result_list = listone + listtwo`."
}
{
    "question_id": "1720421-49",
    "nl": "iterate items in lists `listone` and `listtwo`",
    "cmd": "for item in itertools.chain(listone, listtwo):\n    pass",
    "oracle_man": [
        "python.library.itertools#itertools.chain"
    ],
    "canonical_cmd": "for item in itertools.chain(VAR_STR, VAR_STR):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterate items in lists `listone` and `listtwo`:\n    - To iterate items in lists `listone` and `listtwo`, you can use the `zip()` function to iterate over both lists simultaneously. For example, `for item1, item2 in zip(listone, listtwo):` will allow you to iterate through both lists together."
}
{
    "question_id": "9637838-45",
    "nl": "convert date string `s` in format pattern '%d\/%m\/%Y' into a timestamp",
    "cmd": "time.mktime(datetime.datetime.strptime(s, '%d\/%m\/%Y').timetuple())",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.time#time.mktime",
        "python.library.datetime#datetime.datetime.timetuple"
    ],
    "canonical_cmd": "time.mktime(datetime.datetime.strptime(VAR_STR, 'VAR_STR').timetuple())",
    "cmd_name": "conala",
    "gpt35_response": " Convert date string `s` in format pattern '%d\/%m\/%Y' into a timestamp:\n    - To convert date string `s` in format pattern '%d\/%m\/%Y' into a timestamp, you need to use the `strptime()` function from the `datetime.strptime()`. For example, `timestamp = datetime.datetime.strptime(s, '%d\/%m\/%Y').strftime('%s')`."
}
{
    "question_id": "9637838-89",
    "nl": "convert string '01\/12\/2011' to an integer timestamp",
    "cmd": "int(datetime.datetime.strptime('01\/12\/2011', '%d\/%m\/%Y').strftime('%s'))",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.functions#int",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "int(datetime.datetime.strptime('VAR_STR', '%d\/%m\/%Y').strftime('%s'))",
    "cmd_name": "conala",
    "gpt35_response": " Convert string '01\/12\/2011' to an integer timestamp:\n    - To convert the string '01\/12\/2011' to an integer timestamp, you can use the `strptime()` and `strftime()` functions from the `datetime` module. For example, `timestamp = datetime.datetime.strptime('01\/12\/2011', '%d\/%m\/%Y').strftime('%s')`."
}
{
    "question_id": "6490560-12",
    "nl": "move the last item in list `a` to the beginning",
    "cmd": "a = a[-1:] + a[:-1]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[-1:] + VAR_STR[:-1]",
    "cmd_name": "conala",
    "gpt35_response": "- Move the last item in list `a` to the beginning. This requires accessing the last item in list `a`, removing it from its current position, and inserting it at the beginning of the list."
}
{
    "question_id": "14961014-3",
    "nl": "Remove the string value `item` from a list of strings `my_sequence`",
    "cmd": "[item for item in my_sequence if item != 'item']",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR for VAR_STR in VAR_STR if VAR_STR != 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Remove the string value `item` from a list of strings `my_sequence`. This requires finding the index of the string value `item` in list `my_sequence` and removing it from the list."
}
{
    "question_id": "19112735-16",
    "nl": "print each first value from a list of tuples `mytuple` with string formatting",
    "cmd": "print(', ,'.join([str(i[0]) for i in mytuple]))",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(', ,'.join([str(i[0]) for i in VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": " Print each first value from a list of tuples `mytuple` with string formatting. This requires iterating through each tuple in `mytuple`, accessing the first value of each tuple, and printing it with the appropriate string formatting."
}
{
    "question_id": "12337583-90",
    "nl": "Serialize dictionary `data` and its keys to a JSON formatted string",
    "cmd": "json.dumps({str(k): v for k, v in data.items()})",
    "oracle_man": [
        "python.library.json#json.dumps",
        "python.library.stdtypes#str",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "json.dumps({str(k): v for k, v in VAR_STR.items()})",
    "cmd_name": "conala",
    "gpt35_response": " Serialize dictionary `data` and its keys to a JSON formatted string. This requires using a JSON library to convert the dictionary `data` to a JSON formatted string, including all of its keys."
}
{
    "question_id": "32464280-95",
    "nl": "remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats",
    "cmd": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.astype",
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "VAR_STR[VAR_STR.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)",
    "cmd_name": "conala",
    "gpt35_response": " Remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats. This requires accessing the second to last column in dataframe `df`, removing the dollar sign from each value, and converting the resulting string to a float."
}
{
    "question_id": "199059-12",
    "nl": "insert spaces before capital letters in string `text`",
    "cmd": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Insert spaces before capital letters in string `text`. This requires iterating through each character in the string `text`, checking if it is a capital letter, and inserting a space before that letter if it is."
}
{
    "question_id": "27946742-34",
    "nl": "Get all the sentences from a string `text` using regex",
    "cmd": "re.split('\\\\.\\\\s', text)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('\\\\.\\\\s', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get all the sentences from a string `text` using regex. This requires using a regular expression that matches sentence endings to extract each sentence from the string `text`."
}
{
    "question_id": "27946742-72",
    "nl": "Regular expression in Python sentence extractor",
    "cmd": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))",
    "cmd_name": "conala",
    "gpt35_response": " Regular expression in Python sentence extractor. This requires defining a regular expression pattern that matches sentence endings and using it to extract each sentence from a text."
}
{
    "question_id": "4576115-20",
    "nl": "convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value",
    "cmd": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "b = {VAR_STR[i]: VAR_STR[i + 1] for i in range(0, len(VAR_STR), 2)}",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value. This requires iterating through the list `a`, using each even element as the key and the following odd element as the value, and adding them to a dictionary."
}
{
    "question_id": "31888871-4",
    "nl": "replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`",
    "cmd": "data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].replace([0, 1], ['VAR_STR', 'VAR_STR'], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`. This requires accessing column 'sex' in dataframe `data`, finding all values that equal 0 and replacing them with 'Female', finding all values that equal 1 and replacing them with 'Male'."
}
{
    "question_id": "16766643-79",
    "nl": "convert date string 'January 11, 2010'  into day of week",
    "cmd": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', '%B %d, %Y').strftime('%A')",
    "cmd_name": "conala",
    "gpt35_response": " Convert date string 'January 11, 2010' into day of week. This requires converting the date string 'January 11, 2010' to a `datetime` object and then extracting the day of the week from that object."
}
{
    "question_id": "16766643-43",
    "nl": "Convert Date String to Day of Week",
    "cmd": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')",
    "cmd_name": "conala",
    "gpt35_response": " Convert Date String to Day of Week. This requires converting a given date string to a `datetime` object and then retrieving the day of the week from that object."
}
{
    "question_id": "2813806-71",
    "nl": "check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`",
    "cmd": "set(['stackoverflow', 'google']).issubset(sites)",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.issubset"
    ],
    "canonical_cmd": "set(['VAR_STR', 'VAR_STR']).issubset(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`. This requires accessing the keys of dictionary `sites` and checking if both 'stackoverflow' and 'google' are present."
}
{
    "question_id": "36623789-63",
    "nl": "convert unicode text from list `elems` with index 0 to normal text 'utf-8'",
    "cmd": "elems[0].getText().encode('utf-8')",
    "oracle_man": [
        "python.library.gettext#gettext.gettext",
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "VAR_STR[0].getText().encode('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert unicode text from list `elems` with index 0 to normal text 'utf-8'. This requires accessing the element of list `elems` with index 0, which should contain unicode text, and converting it to normal text encoded in 'utf-8'."
}
{
    "question_id": "7238226-76",
    "nl": "Convert a datetime object `dt` to microtime",
    "cmd": "time.mktime(dt.timetuple()) + dt.microsecond \/ 1000000.0",
    "oracle_man": [
        "python.library.time#time.mktime",
        "python.library.datetime#datetime.datetime.timetuple"
    ],
    "canonical_cmd": "time.mktime(VAR_STR.timetuple()) + VAR_STR.microsecond \/ 1000000.0",
    "cmd_name": "conala",
    "gpt35_response": " Convert a datetime object `dt` to microtime. This requires converting a `datetime` object to Unix time (seconds since January 1, 1970) and then multiplying it by 1,000,000 to get microtime (microseconds since January 1, 1970)."
}
{
    "question_id": "82831-64",
    "nl": "check whether a file `fname` exists",
    "cmd": "os.path.isfile(fname)",
    "oracle_man": [
        "python.library.os.path#os.path.isfile"
    ],
    "canonical_cmd": "os.path.isfile(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check whether a file `fname` exists. This requires checking if a file with the specified filename or path `fname` exists in the file system."
}
{
    "question_id": "82831-96",
    "nl": "check whether file \"\/path\/to\/file\" exists",
    "cmd": "my_file = Path('\/path\/to\/file')\nif my_file.is_file():\n    pass",
    "oracle_man": [
        "python.library.zipfile#zipfile.Path.is_file",
        "matplotlib.path_api#matplotlib.path.Path"
    ],
    "canonical_cmd": "my_file = Path('VAR_STR')\nif my_file.is_file():\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check whether file \"\/path\/to\/file\" exists. This requires checking if a file with the specified absolute path \"\/path\/to\/file\" exists in the file system."
}
{
    "question_id": "82831-55",
    "nl": "check whether file `file_path` exists",
    "cmd": "os.path.exists(file_path)",
    "oracle_man": [
        "python.library.os.path#os.path.exists"
    ],
    "canonical_cmd": "os.path.exists(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check whether file `file_path` exists. This requires checking if a file with the specified path `file_path` exists in the file system."
}
{
    "question_id": "82831-86",
    "nl": "check whether a file \"\/etc\/password.txt\" exists",
    "cmd": "print(os.path.isfile('\/etc\/password.txt'))",
    "oracle_man": [
        "python.library.os.path#os.path.isfile"
    ],
    "canonical_cmd": "print(os.path.isfile('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Check whether a file \"\/etc\/password.txt\" exists. This requires checking if a file with the absolute path \"\/etc\/password.txt\" exists in the file system."
}
{
    "question_id": "82831-46",
    "nl": "check whether a file \"\/etc\" exists",
    "cmd": "print(os.path.isfile('\/etc'))",
    "oracle_man": [
        "python.library.os.path#os.path.isfile"
    ],
    "canonical_cmd": "print(os.path.isfile('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Check whether a file \"\/etc\" exists. This requires checking if a directory with the absolute path \"\/etc\" exists in the file system."
}
{
    "question_id": "82831-2",
    "nl": "check whether a path \"\/does\/not\/exist\" exists",
    "cmd": "print(os.path.exists('\/does\/not\/exist'))",
    "oracle_man": [
        "python.library.os.path#os.path.exists"
    ],
    "canonical_cmd": "print(os.path.exists('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": "- Check whether a path \"\/does\/not\/exist\" exists. This requires checking if the path \"\/does\/not\/exist\" exists."
}
{
    "question_id": "82831-53",
    "nl": "check whether a file \"\/does\/not\/exist\" exists",
    "cmd": "print(os.path.isfile('\/does\/not\/exist'))",
    "oracle_man": [
        "python.library.os.path#os.path.isfile"
    ],
    "canonical_cmd": "print(os.path.isfile('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Check whether a file \"\/does\/not\/exist\" exists. This requires checking if the file \"\/does\/not\/exist\" exists."
}
{
    "question_id": "82831-40",
    "nl": "check whether a path \"\/etc\" exists",
    "cmd": "print(os.path.exists('\/etc'))",
    "oracle_man": [
        "python.library.os.path#os.path.exists"
    ],
    "canonical_cmd": "print(os.path.exists('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Check whether a path \"\/etc\" exists. This requires checking if the path \"\/etc\" exists."
}
{
    "question_id": "82831-24",
    "nl": "check whether a path \"\/etc\/password.txt\" exists",
    "cmd": "print(os.path.exists('\/etc\/password.txt'))",
    "oracle_man": [
        "python.library.os.path#os.path.exists"
    ],
    "canonical_cmd": "print(os.path.exists('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Check whether a path \"\/etc\/password.txt\" exists. This requires checking if the path \"\/etc\/password.txt\" exists."
}
{
    "question_id": "19328874-69",
    "nl": "print line `line` from text file with 'utf-16-le' format",
    "cmd": "print(line.decode('utf-16-le').split())",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "print(VAR_STR.decode('VAR_STR').split())",
    "cmd_name": "conala",
    "gpt35_response": " Print line `line` from text file with 'utf-16-le' format. This requires opening a text file with 'utf-16-le' format, reading line `line` from it, and then printing it."
}
{
    "question_id": "19328874-21",
    "nl": "open a text file `data.txt` in io module with encoding `utf-16-le`",
    "cmd": "file = io.open('data.txt', 'r', encoding='utf-16-le')",
    "oracle_man": [
        "python.library.io#io.open"
    ],
    "canonical_cmd": "file = io.open('VAR_STR', 'r', encoding='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Open a text file `data.txt` in io module with encoding `utf-16-le`. This requires opening the file `data.txt` using the io module with the encoding `utf-16-le`."
}
{
    "question_id": "14180866-79",
    "nl": "create a list with the sum of respective elements of the tuples of list `l`",
    "cmd": "[sum(x) for x in zip(*l)]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[sum(x) for x in zip(*VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list with the sum of respective elements of the tuples of list `l`. This requires creating an empty list, iterating over the tuples in the list `l`, summing the respective elements, and appending the result to the new list."
}
{
    "question_id": "14180866-73",
    "nl": "sum each value in a list `l` of tuples",
    "cmd": "map(sum, zip(*l))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(sum, zip(*VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Sum each value in a list `l` of tuples. This requires iterating over the tuples in the list `l`, summing the values, and returning the result."
}
{
    "question_id": "187455-29",
    "nl": "count the number of elements in array `myArray`",
    "cmd": "len(myArray)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of elements in array `myArray`. This requires counting the number of elements in array `myArray`."
}
{
    "question_id": "42180455-54",
    "nl": "BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`",
    "cmd": "soup.select('div[id$=_answer]')",
    "oracle_man": [
        "python.library.select#select.select"
    ],
    "canonical_cmd": "VAR_STR.select('div[id$=_answer]')",
    "cmd_name": "conala",
    "gpt35_response": " BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`. This requires parsing the html string using BeautifulSoup, and selecting the 'div' elements with an id attribute value ending with sub-string '_answer'."
}
{
    "question_id": "1064335-63",
    "nl": "kill a process with id `process.pid`",
    "cmd": "os.kill(process.pid, signal.SIGKILL)",
    "oracle_man": [
        "python.library.os#os.kill"
    ],
    "canonical_cmd": "os.kill(process.pid, signal.SIGKILL)",
    "cmd_name": "conala",
    "gpt35_response": " Kill a process with id `process.pid`. This requires killing the process with the id `process.pid`."
}
{
    "question_id": "42950-17",
    "nl": "Get Last Day of the first month in 2002",
    "cmd": "calendar.monthrange(2002, 1)",
    "oracle_man": [
        "python.library.calendar#calendar.monthrange"
    ],
    "canonical_cmd": "calendar.monthrange(2002, 1)",
    "cmd_name": "conala",
    "gpt35_response": " Get last day of the first month in 2002. This requires determining the last day of the month January in the year 2002."
}
{
    "question_id": "42950-48",
    "nl": "Get Last Day of the second month in 2002",
    "cmd": "calendar.monthrange(2008, 2)",
    "oracle_man": [
        "python.library.calendar#calendar.monthrange"
    ],
    "canonical_cmd": "calendar.monthrange(2008, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Get last day of the second month in 2002. This requires determining the last day of the month February in the year 2002."
}
{
    "question_id": "42950-64",
    "nl": "Get Last Day of the second month in 2100",
    "cmd": "calendar.monthrange(2100, 2)",
    "oracle_man": [
        "python.library.calendar#calendar.monthrange"
    ],
    "canonical_cmd": "calendar.monthrange(2100, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Get last day of the second month in 2100. This requires determining the last day of the month February in the year 2100."
}
{
    "question_id": "42950-85",
    "nl": "Get Last Day of the month `month` in year `year`",
    "cmd": "calendar.monthrange(year, month)[1]",
    "oracle_man": [
        "python.library.calendar#calendar.monthrange"
    ],
    "canonical_cmd": "calendar.monthrange(VAR_STR, VAR_STR)[1]",
    "cmd_name": "conala",
    "gpt35_response": " Get last day of the month `month` in year `year`. This requires determining the last day of the given month and year."
}
{
    "question_id": "42950-60",
    "nl": "Get Last Day of the second month in year 2012",
    "cmd": "monthrange(2012, 2)",
    "oracle_man": [
        "python.library.calendar#calendar.monthrange"
    ],
    "canonical_cmd": "monthrange(2012, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Get last day of the second month in year 2012. This requires determining the last day of the month February in the year 2012."
}
{
    "question_id": "42950-91",
    "nl": "Get Last Day of the first month in year 2000",
    "cmd": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))",
    "oracle_man": [
        "python.library.datetime#datetime.timedelta",
        "python.library.datetime#datetime.date"
    ],
    "canonical_cmd": "datetime.date(2000, 2, 1) - datetime.timedelta(days=1)",
    "cmd_name": "conala",
    "gpt35_response": " Get last day of the first month in year 2000. This requires determining the last day of the month January in the year 2000."
}
{
    "question_id": "15286401-73",
    "nl": "print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.",
    "cmd": "print(('Total score for', name, 'is', score))",
    "oracle_man": [],
    "canonical_cmd": "print(('VAR_STR', VAR_STR, 'VAR_STR', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call. This requires concatenating the strings and variables and then printing the resulting string."
}
{
    "question_id": "15286401-49",
    "nl": "print multiple arguments 'name' and 'score'.",
    "cmd": "print('Total score for {} is {}'.format(name, score))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('Total score for {} is {}'.format(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print multiple arguments 'name' and 'score'. This requires passing multiple arguments 'name' and 'score' to the print function."
}
{
    "question_id": "15286401-39",
    "nl": "print a string using multiple strings `name` and `score`",
    "cmd": "print('Total score for %s is %s  ' % (name, score))",
    "oracle_man": [],
    "canonical_cmd": "print('Total score for %s is %s  ' % (VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print a string using multiple strings `name` and `score`. This requires concatenating the strings `name` and `score` and then printing the resulting string."
}
{
    "question_id": "15286401-72",
    "nl": "print string including multiple variables `name` and `score`",
    "cmd": "print(('Total score for', name, 'is', score))",
    "oracle_man": [],
    "canonical_cmd": "print(('Total score for', VAR_STR, 'is', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "- Print string including multiple variables `name` and `score`. This requires formatting the string with placeholders for the variables `name` and `score`."
}
{
    "question_id": "455612-84",
    "nl": "print float `a` with two decimal points",
    "cmd": "print(('%.2f' % a))",
    "oracle_man": [],
    "canonical_cmd": "print('%.2f' % VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Print float `a` with two decimal points. This requires formatting the float `a` using the string format method with a specific format specifier for decimal precision."
}
{
    "question_id": "455612-33",
    "nl": "print float `a` with two decimal points",
    "cmd": "print(('{0:.2f}'.format(a)))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('{0:.2f}'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print float `a` with two decimal points. This requires formatting the float `a` using the string format method with a specific format specifier for decimal precision."
}
{
    "question_id": "455612-78",
    "nl": "print float `a` with two decimal points",
    "cmd": "print(('{0:.2f}'.format(round(a, 2))))",
    "oracle_man": [
        "python.library.functions#round",
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('{0:.2f}'.format(round(VAR_STR, 2)))",
    "cmd_name": "conala",
    "gpt35_response": " Print float `a` with two decimal points. This requires formatting the float `a` using the string format method with a specific format specifier for decimal precision."
}
{
    "question_id": "455612-39",
    "nl": "print float `a` with two decimal points",
    "cmd": "print(('%.2f' % round(a, 2)))",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "print('%.2f' % round(VAR_STR, 2))",
    "cmd_name": "conala",
    "gpt35_response": " Print float `a` with two decimal points. This requires formatting the float `a` using the string format method with a specific format specifier for decimal precision."
}
{
    "question_id": "455612-31",
    "nl": "limit float 13.9499999 to two decimal points",
    "cmd": "('%.2f' % 13.9499999)",
    "oracle_man": [],
    "canonical_cmd": "'%.2f' % 13.9499999",
    "cmd_name": "conala",
    "gpt35_response": " Limit float 13.9499999 to two decimal points. This requires rounding the float `13.9499999` to two decimal points using the round function."
}
{
    "question_id": "455612-37",
    "nl": "limit float 3.14159 to two decimal points",
    "cmd": "('%.2f' % 3.14159)",
    "oracle_man": [],
    "canonical_cmd": "'%.2f' % 3.14159",
    "cmd_name": "conala",
    "gpt35_response": " Limit float 3.14159 to two decimal points. This requires rounding the float `3.14159` to two decimal points using the round function."
}
{
    "question_id": "455612-21",
    "nl": "limit float 13.949999999999999 to two decimal points",
    "cmd": "float('{0:.2f}'.format(13.95))",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.functions#format"
    ],
    "canonical_cmd": "float('{0:.2f}'.format(13.95))",
    "cmd_name": "conala",
    "gpt35_response": " Limit float 13.949999999999999 to two decimal points. This requires rounding the float `13.949999999999999` to two decimal points using the round function."
}
{
    "question_id": "455612-19",
    "nl": "limit float 13.949999999999999 to two decimal points",
    "cmd": "'{0:.2f}'.format(13.95)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{0:.2f}\"\"\".format(13.95)",
    "cmd_name": "conala",
    "gpt35_response": " Limit float 13.949999999999999 to two decimal points. This requires rounding the float `13.949999999999999` to two decimal points using the round function."
}
{
    "question_id": "4287209-80",
    "nl": "sort list of strings in list `the_list` by integer suffix",
    "cmd": "sorted(the_list, key=lambda k: int(k.split('_')[1]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda k: int(k.split('_')[1]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list of strings in list `the_list` by integer suffix. This requires writing a function that sorts the strings in the list based on the integer suffix contained in each string."
}
{
    "question_id": "4287209-74",
    "nl": "sort list of strings `the_list` by integer suffix before \"_\"",
    "cmd": "sorted(the_list, key=lambda x: int(x.split('_')[1]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: int(x.split('VAR_STR')[1]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list of strings `the_list` by integer suffix before \"_\". This requires writing a function that sorts the strings in the list based on the integer suffix before the underscore character, if present."
}
{
    "question_id": "8671702-94",
    "nl": "pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'",
    "cmd": "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))",
    "oracle_man": [],
    "canonical_cmd": "cur.mogrify('VAR_STR', ((1, 2, 3),))",
    "cmd_name": "conala",
    "gpt35_response": " Pass a list of parameters `((1, 2, 3),)` to SQL queue 'SELECT * FROM table WHERE column IN %s;'. This requires using a parameterized query and passing a tuple as the parameter."
}
{
    "question_id": "3804727-58",
    "nl": "flush output of python print",
    "cmd": "sys.stdout.flush()",
    "oracle_man": [
        "python.library.logging#logging.Handler.flush"
    ],
    "canonical_cmd": "sys.stdout.flush()",
    "cmd_name": "conala",
    "gpt35_response": " Flush output of Python print. This requires calling the `flush()` method on the output stream after a print statement."
}
{
    "question_id": "4664850-7",
    "nl": "find indexes of all occurrences of a substring `tt` in a string `ttt`",
    "cmd": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]",
    "oracle_man": [
        "python.library.re#re.finditer",
        "python.library.re#re.Match.start"
    ],
    "canonical_cmd": "[m.start() for m in re.finditer('(?=tt)', 'VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Find indexes of all occurrences of a substring `tt` in a string `ttt`. This requires using the `find()` or `index()` method in a loop to find all occurrences of the substring and storing the indices in a list."
}
{
    "question_id": "4664850-33",
    "nl": "find all occurrences of a substring in a string",
    "cmd": "[m.start() for m in re.finditer('test', 'test test test test')]",
    "oracle_man": [
        "python.library.re#re.finditer",
        "python.library.re#re.Match.start"
    ],
    "canonical_cmd": "[m.start() for m in re.finditer('test', 'test test test test')]",
    "cmd_name": "conala",
    "gpt35_response": " Find all occurrences of a substring in a string. This requires using regex to find all occurrences of a substring in a string and storing them in a list."
}
{
    "question_id": "6740311-53",
    "nl": "join Numpy array `b` with Numpy array 'a' along axis 0",
    "cmd": "b = np.concatenate((a, a), axis=0)",
    "oracle_man": [
        "numpy.reference.generated.numpy.concatenate"
    ],
    "canonical_cmd": "VAR_STR = np.concatenate((VAR_STR, VAR_STR), axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Join NumPy array `b` with NumPy array `a` along axis 0. This requires using the `concatenate()` function in NumPy with the appropriate `axis` argument."
}
{
    "question_id": "41256648-47",
    "nl": "select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`",
    "cmd": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.iloc[:, (np.r_[1:10, (15), (17), 50:100])]",
    "cmd_name": "conala",
    "gpt35_response": " Select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`. This requires using the indexing capabilities of pandas dataframes to select the desired columns."
}
{
    "question_id": "8654637-6",
    "nl": "fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4",
    "cmd": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((k, v) for k, v in VAR_STR.items() if 2 < k < 4)",
    "cmd_name": "conala",
    "gpt35_response": " Fetch all elements in a dictionary `parent_dict` falling between two keys 2 and 4. This requires writing a function that returns a dictionary containing only the elements of `parent_dict` with keys ranging from 2 to 4."
}
{
    "question_id": "8654637-44",
    "nl": "fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4",
    "cmd": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((k, v) for k, v in VAR_STR.items() if k > 2 and k < 4)",
    "cmd_name": "conala",
    "gpt35_response": " Fetch all elements in a dictionary `parent_dict` where the key is between the range of 2 to 4. This requires writing a function that returns a dictionary containing only the elements of `parent_dict` with keys ranging from 2 to 4."
}
{
    "question_id": "19641579-81",
    "nl": "concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string",
    "cmd": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join((VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string. This requires using the `join()` method on the tuple, with an empty string as the separator."
}
{
    "question_id": "9072844-100",
    "nl": "check if string `the_string` contains any upper or lower-case ASCII letters",
    "cmd": "re.search('[a-zA-Z]', the_string)",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "re.search('[a-zA-Z]', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Check if string `the_string` contains any upper or lower-case ASCII letters. This requires checking if there are any upper or lower-case ASCII letters in string `the_string`."
}
{
    "question_id": "1962795-99",
    "nl": "get alpha value `alpha` of a png image `img`",
    "cmd": "alpha = img.split()[-1]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.split()[-1]",
    "cmd_name": "conala",
    "gpt35_response": " Get alpha value `alpha` of a png image `img`. This requires extracting the alpha value from the png image `img` and storing it in `alpha`."
}
{
    "question_id": "902761-90",
    "nl": "save a numpy array `image_array` as an image 'outfile.jpg'",
    "cmd": "scipy.misc.imsave('outfile.jpg', image_array)",
    "oracle_man": [
        "matplotlib.image_api#matplotlib.image.imsave"
    ],
    "canonical_cmd": "scipy.misc.imsave('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Save a numpy array `image_array` as an image 'outfile.jpg'. This requires saving the  numpy array `image_array`as an image with the name 'outfile.jpg'."
}
{
    "question_id": "6710684-100",
    "nl": "delete the last column of numpy array `a` and assign resulting array to `b`",
    "cmd": "b = np.delete(a, -1, 1)",
    "oracle_man": [
        "numpy.reference.generated.numpy.delete"
    ],
    "canonical_cmd": "VAR_STR = np.delete(VAR_STR, -1, 1)",
    "cmd_name": "conala",
    "gpt35_response": " Delete the last column of numpy array `a` and assign resulting array to `b`. This requires deleting the last column of numpy array `a` and storing the resulting array in `b`."
}
{
    "question_id": "10677350-1",
    "nl": "Convert float 24322.34 to comma-separated string",
    "cmd": "\"\"\"{0:,.2f}\"\"\".format(24322.34)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{0:,.2f}\"\"\".format(24322.34)",
    "cmd_name": "conala",
    "gpt35_response": " Convert float 24322.34 to comma-separated string. This requires converting float 24322.34 to a string and replacing the decimal point with a comma."
}
{
    "question_id": "5061582-64",
    "nl": "Setting stacksize in a python script",
    "cmd": "os.system('ulimit -s unlimited; some_executable')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('ulimit -s unlimited; some_executable')",
    "cmd_name": "conala",
    "gpt35_response": " Setting stacksize in a python script. This requires setting the stacksize in a python script to a desired value."
}
{
    "question_id": "961263-25",
    "nl": "assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace",
    "cmd": "var1, var2 = input('Enter two numbers here: ').split()",
    "oracle_man": [
        "python.library.functions#input",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR, VAR_STR = input('Enter two numbers here: ').split()",
    "cmd_name": "conala",
    "gpt35_response": " Assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: `split on whitespace. This requires taking user input separated by whitespace and storing the first value in `var1` and the second value in `var2`."
}
{
    "question_id": "3220755-78",
    "nl": "get canonical path of the filename `path`",
    "cmd": "os.path.realpath(path)",
    "oracle_man": [
        "python.library.os.path#os.path.realpath"
    ],
    "canonical_cmd": "os.VAR_STR.realpath(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get canonical path of the filename `path`. This requires getting the full and unambiguous path to the file specified by `path`."
}
{
    "question_id": "30357276-39",
    "nl": "fill missing value in one column 'Cat1' with the value of another column 'Cat2'",
    "cmd": "df['Cat1'].fillna(df['Cat2'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.fillna"
    ],
    "canonical_cmd": "df['VAR_STR'].fillna(df['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Fill missing value in one column 'Cat1' with the value of another column 'Cat2'. This requires finding missing values in column 'Cat1' and filling them with the corresponding value in column 'Cat2'."
}
{
    "question_id": "19069701-24",
    "nl": "request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header",
    "cmd": "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})",
    "oracle_man": [
        "python.library.webbrowser#webbrowser.get"
    ],
    "canonical_cmd": "r = requests.get('VAR_STR', headers={'Authorization': 'VAR_STR'})",
    "cmd_name": "conala",
    "gpt35_response": " Request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header. This requires sending a HTTP request to URI '<MY_URI>' with the authorization token 'TOK:<MY_TOKEN>' included in the header."
}
{
    "question_id": "53513-86",
    "nl": "check if list `a` is empty",
    "cmd": "if (not a):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if not VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if list `a` is empty. This requires checking if the list `a` is empty."
}
{
    "question_id": "53513-49",
    "nl": "check if list `seq` is empty",
    "cmd": "if (not seq):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if not VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if list `seq` is empty. This requires checking if the list `seq` is empty."
}
{
    "question_id": "53513-83",
    "nl": "check if list `li` is empty",
    "cmd": "if (len(li) == 0):\n    pass",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "if len(VAR_STR) == 0:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if list `li` is empty. This requires checking if the list `li` is empty."
}
{
    "question_id": "5927180-86",
    "nl": "Extract values not equal to 0 from numpy array `a`",
    "cmd": "a[a != 0]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[VAR_STR != 0]",
    "cmd_name": "conala",
    "gpt35_response": " Extract values not equal to 0 from numpy array `a`. This requires extracting only the values that are not equal to 0 from numpy array `a`."
}
{
    "question_id": "5864485-86",
    "nl": "print a string `s` by splitting with comma `,`",
    "cmd": "print(s.split(','))",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "print(VAR_STR.split('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Print a string `s` by splitting with comma `,`. This requires splitting the string `s` with a comma as delimiter and printing the resulting parts."
}
{
    "question_id": "5864485-36",
    "nl": "Create list  by splitting string `mystring` using \",\" as delimiter",
    "cmd": "mystring.split(',')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Create list by splitting string `mystring` using `\",\"` as delimiter. This requires splitting string `mystring` with a comma as delimiter and creating a list with the resulting parts."
}
{
    "question_id": "40196941-40",
    "nl": "remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions",
    "cmd": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove periods in between capital letters that aren't immediately preceded by word character(s) in a string `s` using regular expressions. This requires using regular expressions to identify periods in between capital letters that are not immediately preceded by word characters and remove them from the string `s`."
}
{
    "question_id": "4365964-71",
    "nl": "Construct an array with data type float32 `a` from data in binary file 'filename'",
    "cmd": "a = numpy.fromfile('filename', dtype=numpy.float32)",
    "oracle_man": [
        "numpy.reference.generated.numpy.fromfile"
    ],
    "canonical_cmd": "VAR_STR = numpy.fromfile('VAR_STR', dtype=numpy.float32)",
    "cmd_name": "conala",
    "gpt35_response": " Construct an array with data type `float32` `a` from data in binary file 'filename'. This requires reading the data from binary file 'filename' and constructing a numpy array with data type `float32` and assigning it to `a`."
}
{
    "question_id": "22749706-34",
    "nl": "How to get the length of words in a sentence?",
    "cmd": "[len(x) for x in s.split()]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[len(x) for x in s.split()]",
    "cmd_name": "conala",
    "gpt35_response": " How to get the length of words in a sentence? This requires splitting the sentence into words and storing their lengths."
}
{
    "question_id": "29703793-83",
    "nl": "get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex",
    "cmd": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall(\"api\\\\('(.*?)'\", 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex. This requires using regular expressions to extract the substring `randomkey123xyz987` from the string `api('randomkey123xyz987', 'key', 'text')`."
}
{
    "question_id": "16568056-66",
    "nl": "create a list of aggregation of each element from list `l2` to all elements of list `l1`",
    "cmd": "[(x + y) for x in l2 for y in l1]",
    "oracle_man": [],
    "canonical_cmd": "[(x + y) for x in VAR_STR for y in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "-Create a new list `result_list` which aggregates each element from list `l2` to all elements of list `l1`. This requires looping through each element of list `l1`, looping again through each element of list `l2`, and appending the concatenated result to `result_list`.\n"
}
{
    "question_id": "16176996-7",
    "nl": "get date from dataframe `df` column 'dates' to column 'just_date'",
    "cmd": "df['just_date'] = df['dates'].dt.date",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].dt.date",
    "cmd_name": "conala",
    "gpt35_response": "Get the date from column 'dates' in dataframe `df` and store it in a new column called 'just_date'. This requires using the `pd.to_datetime` function on the 'dates' column, extracting the date portion, and storing it in a new column called 'just_date'.\n"
}
{
    "question_id": "17038639-32",
    "nl": "sort a list `your_list` of class objects by their values for the attribute `anniversary_score`",
    "cmd": "your_list.sort(key=operator.attrgetter('anniversary_score'))",
    "oracle_man": [
        "python.library.operator#operator.attrgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.attrgetter('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": "Sort the list of class objects `your_list` by their values for the attribute `anniversary_score`. This requires using the built-in `sorted` function with a lambda function as the key to sort by the `anniversary_score` attribute.\n"
}
{
    "question_id": "17038639-24",
    "nl": "sort list `your_list` by the `anniversary_score` attribute of each object",
    "cmd": "your_list.sort(key=lambda x: x.anniversary_score)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Sort list `your_list` by the `anniversary_score` attribute of each object. This requires using the `sort` method of `your_list` with a lambda function as the key to sort by the `anniversary_score` attribute.\n"
}
{
    "question_id": "373459-40",
    "nl": "split string 'a b.c' on space \" \" and dot character \".\"",
    "cmd": "re.split('[ .]', 'a b.c')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('[ .]', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Split string 'a b.c' on space \" \" and dot character \".\". This requires using the `split` method with the delimiter argument of ' ' and '.'.\n"
}
{
    "question_id": "19384532-12",
    "nl": "count number of rows in a group `key_columns` in pandas groupby object `df`",
    "cmd": "df.groupby(key_columns).size()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.size"
    ],
    "canonical_cmd": "VAR_STR.groupby(VAR_STR).size()",
    "cmd_name": "conala",
    "gpt35_response": "Count the number of rows in a group `key_columns` in pandas groupby object `df`. This requires using the `size` method on the groupby object `df[key_columns]`.\n"
}
{
    "question_id": "8337004-51",
    "nl": "Print +1 using format '{0:+d}'",
    "cmd": "print('{0:+d}'.format(score))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('VAR_STR'.format(score))",
    "cmd_name": "conala",
    "gpt35_response": "Print the integer +1 using format '{0:+d}'. This requires using the `format` function with the integer argument of +1 and the format specifier '{0:+d}'.\n"
}
{
    "question_id": "26541968-79",
    "nl": "delete every non `utf-8` characters from a string `line`",
    "cmd": "line = line.decode('utf-8', 'ignore').encode('utf-8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.decode('VAR_STR', 'ignore').encode('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Delete every non `utf-8` character from a string `line`. This requires using the `decode` method with the `utf-8` encoding and the `ignore` error handler, and then using the `encode` method with the `utf-8` encoding again.\n"
}
{
    "question_id": "22245171-54",
    "nl": "lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`",
    "cmd": "df['x'].str.lower()",
    "oracle_man": [
        "python.library.stdtypes#str.lower"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].str.lower()",
    "cmd_name": "conala",
    "gpt35_response": "Lowercase the values in column 'x' of dataframe `df` if they have missing values. This requires using the `fillna` method to fill the missing values with a placeholder value, using the `str.lower` method to lowercase the string values in column 'x', and then using `replace` again to replace the placeholder values.\n"
}
{
    "question_id": "13384841-37",
    "nl": "swap values in a tuple\/list inside a list `mylist`",
    "cmd": "map(lambda t: (t[1], t[0]), mylist)",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(lambda t: (t[1], t[0]), VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Swap values in a tuple\/list inside a list `mylist`. This requires accessing the elements in `mylist` with indexing, creating a temporary variable to store one of the values, swapping the values, and then overwriting the original indexing.\n"
}
{
    "question_id": "13384841-49",
    "nl": "Swap values in a tuple\/list in list `mylist`",
    "cmd": "[(t[1], t[0]) for t in mylist]",
    "oracle_man": [],
    "canonical_cmd": "[(t[1], t[0]) for t in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Swap values in a tuple\/list in list `mylist`. This requires accessing the elements in `mylist` with indexing, creating a temporary variable to store one of the values, swapping the values, and then overwriting the original indexing.\n"
}
{
    "question_id": "33565643-86",
    "nl": "Set index equal to field 'TRX_DATE' in dataframe `df`",
    "cmd": "df = df.set_index(['TRX_DATE'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.set_index(['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": "Set the index of dataframe `df` equal to the field 'TRX_DATE'. This requires using the `set_index` method with the argument 'TRX_DATE'.\n"
}
{
    "question_id": "17109608-36",
    "nl": "change figure size to 3 by 4 in matplotlib",
    "cmd": "plt.figure(figsize=(3, 4))",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure"
    ],
    "canonical_cmd": "plt.figure(figsize=(3, 4))",
    "cmd_name": "conala",
    "gpt35_response": "Change the figure size to 3 by 4 in matplotlib. This requires using the `figure` method with the `figsize` argument of (3, 4).\n"
}
{
    "question_id": "11040626-65",
    "nl": "add column `d` to index of dataframe `df`",
    "cmd": "df.set_index(['d'], append=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "VAR_STR.set_index(['VAR_STR'], append=True)",
    "cmd_name": "conala",
    "gpt35_response": "Add column `d` to the index of dataframe `df`. This requires using the `set_index` method with the argument 'd', and setting the `append` argument to `True`.\n"
}
{
    "question_id": "587345-88",
    "nl": "create a regular expression that matches the pattern '^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)' over multiple lines of text",
    "cmd": "re.compile('^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)', re.MULTILINE)",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('VAR_STR', re.MULTILINE)",
    "cmd_name": "conala",
    "gpt35_response": "Create a regular expression that matches the pattern '^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)' over multiple lines of text. This requires using the `re.compile` function to create the regular expression object.\n"
}
{
    "question_id": "587345-23",
    "nl": "regular expression \"^(.+)\\\\n((?:\\\\n.+)+)\" matching a multiline block of text",
    "cmd": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('VAR_STR', re.MULTILINE)",
    "cmd_name": "conala",
    "gpt35_response": "Regular expression \"^(.+)\\\\n((?:\\\\n.+)+)\" matches a multiline block of text. This requires using the `re.compile` function to create the regular expression object.\n"
}
{
    "question_id": "2600775-7",
    "nl": "get equivalent week number from a date `2010\/6\/16` using  isocalendar",
    "cmd": "datetime.date(2010, 6, 16).isocalendar()[1]",
    "oracle_man": [
        "python.library.datetime#datetime.date",
        "python.library.datetime#datetime.date.isocalendar"
    ],
    "canonical_cmd": "datetime.date(2010, 6, 16).isocalendar()[1]",
    "cmd_name": "conala",
    "gpt35_response": "Get the equivalent week number from a date `2010\/6\/16` using `isocalendar`. This requires using the `isocalendar` method on the `datetime` object for the date, and accessing the element at index 1 of the resulting tuple.\n"
}
{
    "question_id": "5180365-48",
    "nl": "format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator",
    "cmd": "print('Total cost is: ${:,.2f}'.format(TotalAmount))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('Total cost is: ${:,.2f}'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Format the floating point number `TotalAmount` to be rounded off to two decimal places and have a comma thousands' separator. This requires using the `format` function with the format specifier '{:,.2f}'.\n"
}
{
    "question_id": "464736-72",
    "nl": "split string 'abcdefg' into a list of characters",
    "cmd": "re.findall('\\\\w', 'abcdefg')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\w', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Split string 'abcdefg' into a list of characters. This requires using the `list` function on the string.\n"
}
{
    "question_id": "18071222-58",
    "nl": "set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`",
    "cmd": "rdata.set_index(['race_date', 'track_code', 'race_number'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "VAR_STR.set_index([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": "Set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`. This requires using the `set_index` method with the argument `['race_date', 'track_code', 'race_number']`."
}
{
    "question_id": "3008992-74",
    "nl": "replace a string `Abc` in case sensitive way using maketrans",
    "cmd": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))",
    "oracle_man": [
        "python.library.stdtypes#str.maketrans",
        "python.library.stdtypes#str.translate"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".translate(maketrans('abcABC', 'defDEF'))",
    "cmd_name": "conala",
    "gpt35_response": "- Replace string `Abc` in a case-sensitive way using maketrans. This requires using the maketrans function to create translation table and applying translate method to the string using the table."
}
{
    "question_id": "25040875-80",
    "nl": "get a list of values with key 'key' from a list of dictionaries `l`",
    "cmd": "[d['key'] for d in l if 'key' in d]",
    "oracle_man": [],
    "canonical_cmd": "[d['VAR_STR'] for d in VAR_STR if 'VAR_STR' in d]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of values with key 'key' from a list of dictionaries `l`. This requires iterating over the list of dictionaries and appending values of the key 'key' to a new list."
}
{
    "question_id": "25040875-99",
    "nl": "get a list of values for key 'key' from a list of dictionaries `l`",
    "cmd": "[d['key'] for d in l]",
    "oracle_man": [],
    "canonical_cmd": "[d['VAR_STR'] for d in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of values for key 'key' from a list of dictionaries `l`. This requires iterating over the list of dictionaries and appending values of the key 'key' to a new list."
}
{
    "question_id": "25040875-16",
    "nl": "get a list of values for key \"key\" from a list of dictionaries in `l`",
    "cmd": "[d['key'] for d in l]",
    "oracle_man": [],
    "canonical_cmd": "[d['VAR_STR'] for d in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of values for key \"key\" from a list of dictionaries in `l`. This requires iterating over the list of dictionaries and appending values of the key 'key' to a new list."
}
{
    "question_id": "3899980-30",
    "nl": "change the font size on plot `matplotlib` to 22",
    "cmd": "matplotlib.rcParams.update({'font.size': 22})",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.SubplotParams.update"
    ],
    "canonical_cmd": "VAR_STR.rcParams.update({'font.size': 22})",
    "cmd_name": "conala",
    "gpt35_response": " Change the font size on plot `matplotlib` to 22. This requires using the `rcParams` function to change the font size to 22."
}
{
    "question_id": "16233593-48",
    "nl": "replace comma in string `s` with empty string ''",
    "cmd": "s = s.replace(',', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.replace(',', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace comma in string `s` with empty string ''. This requires using the `replace` function and passing in ',' and '' as parameters to replace commas with an empty string."
}
{
    "question_id": "39607540-52",
    "nl": "get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`",
    "cmd": "df.Country.value_counts().reset_index(name='Sum of Accidents')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index",
        "pandas.reference.api.pandas.dataframe.value_counts"
    ],
    "canonical_cmd": "VAR_STR.VAR_STR.value_counts().reset_index(name='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get the count of each unique value in column `Country` of DataFrame `df` and store in column `Sum of Accidents`. This requires using the `value_counts` function on the 'Country' column and assigning them to a new column 'Sum of Accidents'."
}
{
    "question_id": "9001509-32",
    "nl": "sort dictionary `d` by key",
    "cmd": "od = collections.OrderedDict(sorted(d.items()))",
    "oracle_man": [
        "python.library.collections#collections.OrderedDict",
        "python.library.functions#sorted",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "od = collections.OrderedDict(sorted(VAR_STR.items()))",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary `d` by key. This requires using the `sorted` function with parameter 'key' set to `d.get` to sort dictionary `d` by key."
}
{
    "question_id": "9001509-28",
    "nl": "sort a dictionary `d` by key",
    "cmd": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.collections#collections.OrderedDict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "OrderedDict(sorted(list(VAR_STR.items()), key=lambda t: t[0]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a dictionary `d` by key. This requires using the `sorted` function with parameter 'key' set to `d.get` to sort dictionary `d` by key."
}
{
    "question_id": "30546889-40",
    "nl": "get dictionary with max value of key 'size' in list of dicts `ld`",
    "cmd": "max(ld, key=lambda d: d['size'])",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(VAR_STR, key=lambda d: d['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Get dictionary with max value of key 'size' in list of dictionaries `ld`. This requires using the `max` function with parameter 'key' set to `'size'` to get the dictionary with the maximum value of 'size'."
}
{
    "question_id": "12739911-21",
    "nl": "create a dictionary containing each string in list `my_list` split by '=' as a key\/value pairs",
    "cmd": "print(dict([s.split('=') for s in my_list]))",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "print(dict([s.split('VAR_STR') for s in VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary containing each string in list `my_list` split by '=' as a key\/value pairs. This requires iterating over the list and splitting each string by '=' to get key\/value pairs and adding them to a new dictionary."
}
{
    "question_id": "2514961-92",
    "nl": "remove all values within one list `[2, 3, 7]` from another list `a`",
    "cmd": "[x for x in a if x not in [2, 3, 7]]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x not in [VAR_STR]]",
    "cmd_name": "conala",
    "gpt35_response": " Remove all values within one list `[2, 3, 7]` from another list `a`. This requires using a list comprehension to iterate over the original list and only appending values that are not in the list `[2, 3, 7]`."
}
{
    "question_id": "32296933-71",
    "nl": "remove all duplicates from a list of sets `L`",
    "cmd": "list(set(frozenset(item) for item in L))",
    "oracle_man": [
        "python.library.stdtypes#frozenset",
        "python.library.functions#list",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "list(set(frozenset(item) for item in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Remove all duplicates from a list of sets `L`. This requires converting the list of sets to a set and then converting the set back into a list to remove duplicate sets."
}
{
    "question_id": "32296933-32",
    "nl": "remove duplicates from a list of sets 'L'",
    "cmd": "[set(item) for item in set(frozenset(item) for item in L)]",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset"
    ],
    "canonical_cmd": "[set(item) for item in set(frozenset(item) for item in VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Remove duplicates from a list of sets 'L'. This requires converting the list of sets to a set and then converting the set back into a list to remove duplicate sets."
}
{
    "question_id": "41067960-51",
    "nl": "Concatenate elements of a list 'x' of multiple integers to a single integer",
    "cmd": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))",
    "oracle_man": [
        "python.library.functions#enumerate",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(d * 10 ** i for i, d in enumerate(VAR_STR[::-1]))",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate elements of a list `x` of multiple integers to a single integer. This requires using the `join` function to join the integers as a string and then converting it to an integer."
}
{
    "question_id": "41067960-57",
    "nl": "convert a list of integers into a single integer",
    "cmd": "r = int(''.join(map(str, x)))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "r = int(''.join(map(str, x)))",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of integers into a single integer. This requires using the `join` function to join the integers as a string and then converting it to an integer."
}
{
    "question_id": "19454970-33",
    "nl": "create dict of squared int values in range of 100",
    "cmd": "{(x ** 2) for x in range(100)}",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "{(x ** 2) for x in range(100)}",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary of squared int values in the range of 100. This requires using a dictionary comprehension to iterate over the range and assign squared values to the keys."
}
{
    "question_id": "9534608-97",
    "nl": "get complete path of a module named `os`",
    "cmd": "imp.find_module('os')[1]",
    "oracle_man": [
        "python.library.zipimport#zipimport.zipimporter.find_module"
    ],
    "canonical_cmd": "imp.find_module('VAR_STR')[1]",
    "cmd_name": "conala",
    "gpt35_response": " Get the complete path of a module named `os`. This requires using the `os` module and accessing its `__file__` attribute to get the complete path of the module."
}
{
    "question_id": "276052-11",
    "nl": "get current CPU and RAM usage",
    "cmd": "psutil.cpu_percent()\npsutil.virtual_memory()",
    "oracle_man": [],
    "canonical_cmd": "psutil.cpu_percent()\npsutil.virtual_memory()",
    "cmd_name": "conala",
    "gpt35_response": " Get current CPU and RAM usage. This requires using the `psutil` module and accessing the `cpu_percent` and `virtual_memory` functions to get the current CPU and RAM usage respectively."
}
{
    "question_id": "276052-21",
    "nl": "get current RAM usage of current program",
    "cmd": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] \/ (2.0 ** 30))",
    "oracle_man": [
        "python.library.os#os.getpid",
        "python.library.multiprocessing#multiprocessing.Process"
    ],
    "canonical_cmd": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = py.memory_info()[0] \/ 2.0 ** 30",
    "cmd_name": "conala",
    "gpt35_response": " Get current RAM usage of the current program. This requires using the `psutil` module and accessing the `Process` class to get the current program's process ID and then accessing its `memory_info` function to get the current RAM usage."
}
{
    "question_id": "276052-66",
    "nl": "print cpu and memory usage",
    "cmd": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))",
    "oracle_man": [],
    "canonical_cmd": "print(psutil.cpu_percent())\nprint(psutil.virtual_memory())",
    "cmd_name": "conala",
    "gpt35_response": "- Print CPU and memory usage. This requires printing the CPU usage and memory usage."
}
{
    "question_id": "39821166-6",
    "nl": "given list `to_reverse`, reverse the all sublists and the list itself",
    "cmd": "[sublist[::-1] for sublist in to_reverse[::-1]]",
    "oracle_man": [],
    "canonical_cmd": "[sublist[::-1] for sublist in VAR_STR[::-1]]",
    "cmd_name": "conala",
    "gpt35_response": " Given list `to_reverse`, reverse all sublists and the list itself. This requires creating a loop over each sublist in `to_reverse`, reversing each sublist, and then reversing the entire `to_reverse` list."
}
{
    "question_id": "7571635-38",
    "nl": "check if 7 is in `a`",
    "cmd": "(7 in a)",
    "oracle_man": [],
    "canonical_cmd": "7 in VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Check if 7 is in `a`. This requires checking if the element 7 is in the list `a`."
}
{
    "question_id": "7571635-96",
    "nl": "check if 'a' is in list `a`",
    "cmd": "('a' in a)",
    "oracle_man": [],
    "canonical_cmd": "'VAR_STR' in VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Check if 'a' is in list `a`. This requires checking if the string 'a' is in the list `a`."
}
{
    "question_id": "8139797-27",
    "nl": "extract table data from table `rows` using beautifulsoup",
    "cmd": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Extract table data from table `rows` using BeautifulSoup. This requires using BeautifulSoup to parse the table `rows` and extract the data in it."
}
{
    "question_id": "14299978-48",
    "nl": "find element `a` that contains string \"TEXT A\" in file `root`",
    "cmd": "e = root.xpath('.\/\/a[contains(text(),\"TEXT A\")]')",
    "oracle_man": [],
    "canonical_cmd": "e = VAR_STR.xpath('.\/\/a[contains(text(),\"TEXT A\")]')",
    "cmd_name": "conala",
    "gpt35_response": " Find element `a` that contains string \"TEXT A\" in file `root`. This requires searching for the element `a` in file `root` that contains the string \"TEXT A\"."
}
{
    "question_id": "14299978-16",
    "nl": "Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`",
    "cmd": "e = root.xpath('.\/\/a[starts-with(text(),\"TEXT A\")]')",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR.xpath('.\/\/a[starts-with(text(),\"TEXT A\")]')",
    "cmd_name": "conala",
    "gpt35_response": " Find the `a` tag in html `root` which starts with the text `TEXT A` and assign it to `e`. This requires finding the `a` tag in the html `root` that starts with the text \"TEXT A\" and assigning it to variable `e`."
}
{
    "question_id": "14299978-52",
    "nl": "find the element that holds string 'TEXT A' in file `root`",
    "cmd": "e = root.xpath('.\/\/a[text()=\"TEXT A\"]')",
    "oracle_man": [],
    "canonical_cmd": "e = VAR_STR.xpath('.\/\/a[text()=\"TEXT A\"]')",
    "cmd_name": "conala",
    "gpt35_response": " Find the element that holds string 'TEXT A' in file `root`. This requires searching for the element in file `root` that contains the string 'TEXT A'."
}
{
    "question_id": "31818050-79",
    "nl": "round number `x` to nearest integer",
    "cmd": "int(round(x))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#round"
    ],
    "canonical_cmd": "int(round(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Round number `x` to the nearest integer. This requires rounding number `x` to the nearest integer."
}
{
    "question_id": "31818050-74",
    "nl": "round number `h` to nearest integer",
    "cmd": "h = int(round(h))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#round"
    ],
    "canonical_cmd": "VAR_STR = int(round(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Round number `h` to the nearest integer. This requires rounding number `h` to the nearest integer."
}
{
    "question_id": "31818050-9",
    "nl": "round number 32.268907563 up to 3 decimal points",
    "cmd": "round(32.268907563, 3)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(32.268907563, 3)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 32.268907563 up to 3 decimal points. This requires rounding number 32.268907563 up to 3 decimal points."
}
{
    "question_id": "31818050-24",
    "nl": "round number `value` up to `significantDigit` decimal places",
    "cmd": "round(value, significantDigit)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Round number `value` up to `significantDigit` decimal places. This requires rounding number `value` up to the `significantDigit` decimal places."
}
{
    "question_id": "31818050-19",
    "nl": "round number 1.0005 up to 3 decimal places",
    "cmd": "round(1.0005, 3)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(1.0005, 3)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 1.0005 up to 3 decimal places. This requires rounding number 1.0005 up to 3 decimal places."
}
{
    "question_id": "31818050-37",
    "nl": "round number 2.0005 up to 3 decimal places",
    "cmd": "round(2.0005, 3)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(2.0005, 3)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 2.0005 up to 3 decimal places. This requires rounding number 2.0005 up to 3 decimal places."
}
{
    "question_id": "31818050-47",
    "nl": "round number 3.0005 up to 3 decimal places",
    "cmd": "round(3.0005, 3)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(3.0005, 3)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 3.0005 up to 3 decimal places. This requires rounding number 3.0005 up to 3 decimal places."
}
{
    "question_id": "31818050-37",
    "nl": "round number 4.0005 up to 3 decimal places",
    "cmd": "round(4.0005, 3)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(4.0005, 3)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 4.0005 up to 3 decimal places. This requires rounding number 4.0005 up to 3 decimal places."
}
{
    "question_id": "31818050-23",
    "nl": "round number 8.005 up to 2 decimal places",
    "cmd": "round(8.005, 2)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(8.005, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 8.005 up to 2 decimal places. This requires rounding number 8.005 up to 2 decimal places."
}
{
    "question_id": "31818050-74",
    "nl": "round number 7.005 up to 2 decimal places",
    "cmd": "round(7.005, 2)",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(7.005, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 7.005 up to 2 decimal places. This requires rounding number 7.005 up to 2 decimal places."
}
{
    "question_id": "31818050-68",
    "nl": "round number 6.005 up to 2 decimal places",
    "cmd": "round(6.005, 2)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(6.005, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 6.005 up to 2 decimal places. This requires rounding number 6.005 up to 2 decimal places."
}
{
    "question_id": "31818050-55",
    "nl": "round number 1.005 up to 2 decimal places",
    "cmd": "round(1.005, 2)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(1.005, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Round number 1.005 up to 2 decimal places. This requires rounding number 1.005 up to 2 decimal places."
}
{
    "question_id": "16418415-99",
    "nl": "Divide elements in list `a` from elements at the same index in list `b`",
    "cmd": "[(x \/ y) for x, y in zip(a, b)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(x \/ y) for x, y in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": "- Divide elements in list `a` from elements at the same index in list `b`. This requires dividing each element in list `a` by the element in list `b` at the corresponding index."
}
{
    "question_id": "7568627-60",
    "nl": "Unpack each value in list `x` to its placeholder '%' in string '%.2f'",
    "cmd": "\"\"\", \"\"\".join(['%.2f'] * len(x))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\", \"\"\".join(['VAR_STR'] * len(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Unpack each value in list `x` to its placeholder '%' in string '%.2f'. This requires iterating through each value in list `x`, creating a string with the value formatted to 2 decimal places using the placeholder '%.2f', and storing the formatted string."
}
{
    "question_id": "21164910-6",
    "nl": "delete all columns in  DataFrame `df` that do not hold a non-zero value in its records",
    "cmd": "df.loc[:, ((df != 0).any(axis=0))]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc",
        "python.library.functions#any"
    ],
    "canonical_cmd": "VAR_STR.loc[:, ((VAR_STR != 0).any(axis=0))]",
    "cmd_name": "conala",
    "gpt35_response": " Delete all columns in DataFrame `df` that do not hold a non-zero value in its records. This requires iterating through each column in `df`, checking if any value in the column is non-zero, and dropping the column if all values are zero."
}
{
    "question_id": "5844672-30",
    "nl": "Delete an element `key` from a dictionary `d`",
    "cmd": "del d[key]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Delete an element `key` from a dictionary `d`. This requires using the `del` keyword to remove the key-value pair with the key `key` from dictionary `d`."
}
{
    "question_id": "5844672-73",
    "nl": "Delete an element 0 from a dictionary `a`",
    "cmd": "{i: a[i] for i in a if (i != 0)}",
    "oracle_man": [],
    "canonical_cmd": "{i: VAR_STR[i] for i in VAR_STR if i != 0}",
    "cmd_name": "conala",
    "gpt35_response": " Delete an element 0 from a dictionary `a`. This requires using the `del` keyword to remove the key-value pair with the key 0 from dictionary `a`."
}
{
    "question_id": "5844672-74",
    "nl": "Delete an element \"hello\" from a dictionary `lol`",
    "cmd": "lol.pop('hello')",
    "oracle_man": [
        "python.library.stdtypes#dict.pop"
    ],
    "canonical_cmd": "VAR_STR.pop('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Delete an element \"hello\" from a dictionary `lol`. This requires using the `del` keyword to remove the key-value pair with the key \"hello\" from dictionary `lol`."
}
{
    "question_id": "5844672-98",
    "nl": "Delete an element with key `key` dictionary `r`",
    "cmd": "del r[key]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Delete an element with key `key` in dictionary `r`. This requires using the `del` keyword to remove the key-value pair with the key `key` from dictionary `r`."
}
{
    "question_id": "12182744-50",
    "nl": "python pandas: apply a function with arguments to a series",
    "cmd": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.series.apply"
    ],
    "canonical_cmd": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)",
    "cmd_name": "conala",
    "gpt35_response": " Apply a function with arguments to a series in Python pandas. This requires using the `apply` method on the series object and passing the name of the function, along with any arguments, as arguments to the `apply` function."
}
{
    "question_id": "21691126-12",
    "nl": "find element by css selector \"input[onclick*='1 Bedroom Deluxe']\"",
    "cmd": "driver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_css_selector('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Find element by CSS selector \"input[onclick*='1 Bedroom Deluxe']\". This requires using a web scraping library like BeautifulSoup or Selenium and using the appropriate method to find the element matching the given CSS selector."
}
{
    "question_id": "29902714-77",
    "nl": "get  value at index `[2, 0]` in dataframe `df`",
    "cmd": "df.iloc[2, 0]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc"
    ],
    "canonical_cmd": "VAR_STR.iloc[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get value at index `[2,0]` in DataFrame `df`. This requires using the `iloc` indexer on `df` and passing the row and column indices as arguments."
}
{
    "question_id": "10666163-6",
    "nl": "check if the third element of all the lists in a list \"items\" is equal to zero.",
    "cmd": "any(item[2] == 0 for item in items)",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(item[2] == 0 for item in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if the third element of all the lists in a list \"items\" is equal to zero. This requires iterating through each list in `items`, accessing the element at index 2, and testing if it is equal to zero."
}
{
    "question_id": "10666163-14",
    "nl": "Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'",
    "cmd": "[x for x in items if x[2] == 0]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x[2] == 0]",
    "cmd_name": "conala",
    "gpt35_response": " Find all the lists from a list of lists 'items' if the third element in all sub-lists is '0'. This requires iterating through each list in `items`, accessing the element at index 2, and adding the list to a new list if the element is equal to zero."
}
{
    "question_id": "9889635-12",
    "nl": "find all substrings in `mystring` beginning and ending with square brackets",
    "cmd": "re.findall('\\\\[(.*?)\\\\]', mystring)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\[(.*?)\\\\]', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all substrings in `mystring` beginning and ending with square brackets. This requires using a regular expression to match substrings beginning and ending with square brackets and extracting them from `mystring`."
}
{
    "question_id": "3877491-18",
    "nl": "Delete third row in a numpy array `x`",
    "cmd": "x = numpy.delete(x, 2, axis=1)",
    "oracle_man": [
        "numpy.reference.generated.numpy.delete"
    ],
    "canonical_cmd": "VAR_STR = numpy.delete(VAR_STR, 2, axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Delete the third row in a NumPy array `x`. This requires using NumPy's `delete` function to remove the desired row from `x`."
}
{
    "question_id": "3877491-16",
    "nl": "delete first row of array `x`",
    "cmd": "x = numpy.delete(x, 0, axis=0)",
    "oracle_man": [
        "numpy.reference.generated.numpy.delete"
    ],
    "canonical_cmd": "VAR_STR = numpy.delete(VAR_STR, 0, axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Delete the first row of array `x`. This requires using NumPy's `delete` function to remove the first row from `x`."
}
{
    "question_id": "20837786-15",
    "nl": "request URL `url` using http header `{'referer': my_referer}`",
    "cmd": "requests.get(url, headers={'referer': my_referer})",
    "oracle_man": [
        "python.library.webbrowser#webbrowser.get"
    ],
    "canonical_cmd": "requests.get(VAR_STR, headers={VAR_STR})",
    "cmd_name": "conala",
    "gpt35_response": " Request URL `url` using HTTP header `{'referer': my_referer}`. This requires using a Python library like `requests` to make an HTTP request to `url`, passing the HTTP header as an argument."
}
{
    "question_id": "27867754-13",
    "nl": "get the widget which has currently the focus in tkinter instance `window2`",
    "cmd": "print(('focus object class:', window2.focus_get().__class__))",
    "oracle_man": [],
    "canonical_cmd": "print(('focus object class:', VAR_STR.focus_get().__class__))",
    "cmd_name": "conala",
    "gpt35_response": " Get the widget which has currently the focus in tkinter instance `window2`. This requires using tkinter's `focus_get` method on `window2` to get the widget with the current focus."
}
{
    "question_id": "7996940-71",
    "nl": "What is the best way to sort list with custom sorting parameters in Python?",
    "cmd": "li1.sort(key=lambda x: not x.startswith('b.'))",
    "oracle_man": [
        "python.library.stdtypes#str.startswith",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "li1.sort(key=lambda x: not x.startswith('b.'))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list with custom sorting parameters in Python. This requires using the `sorted` function on the list and passing a custom `key` function that determines the sorting parameter for each element."
}
{
    "question_id": "7173850-2",
    "nl": "get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'",
    "cmd": "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))",
    "oracle_man": [
        "python.library.functions#input",
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('VAR_STR'.format(input('Enter name here: ')))",
    "cmd_name": "conala",
    "gpt35_response": " Get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'. This requires printing the message 'Enter name here: ', prompting the user for input, and using string formatting to insert the input value into the first placeholder in the string 'Hello, {0}, how do you do?'."
}
{
    "question_id": "10258584-10",
    "nl": "Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml",
    "cmd": "print(etree.tostring(some_tag.find('strong')))",
    "oracle_man": [
        "python.library.xml.etree.elementtree#xml.etree.ElementTree.tostring",
        "python.library.xml.etree.elementtree#xml.etree.ElementTree.Element.find"
    ],
    "canonical_cmd": "print(etree.tostring(VAR_STR.find('VAR_STR')))",
    "cmd_name": "conala",
    "gpt35_response": " Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml. This requires using the `findall` method on `some_tag` to find all the `strong` tags, and then accessing their text and tag attributes to retrieve their values."
}
{
    "question_id": "237079-99",
    "nl": "get modified time of file `file`",
    "cmd": "time.ctime(os.path.getmtime(file))",
    "oracle_man": [
        "python.library.os.path#os.path.getmtime",
        "python.library.time#time.ctime"
    ],
    "canonical_cmd": "time.ctime(os.path.getmtime(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "- Get modified time of file `file`. This requires accessing file `file` and retrieving its modified time. "
}
{
    "question_id": "237079-26",
    "nl": "get creation time of file `file`",
    "cmd": "time.ctime(os.path.getctime(file))",
    "oracle_man": [
        "python.library.os.path#os.path.getctime",
        "python.library.time#time.ctime"
    ],
    "canonical_cmd": "time.ctime(os.path.getctime(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get creation time of file `file`. This requires accessing file `file` and retrieving its creation time. "
}
{
    "question_id": "237079-17",
    "nl": "get modification time of file `filename`",
    "cmd": "t = os.path.getmtime(filename)",
    "oracle_man": [
        "python.library.os.path#os.path.getmtime"
    ],
    "canonical_cmd": "t = os.path.getmtime(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get modification time of file `filename`. This requires accessing file `filename` and retrieving its modification time. "
}
{
    "question_id": "237079-40",
    "nl": "get modification time of file `path`",
    "cmd": "os.path.getmtime(path)",
    "oracle_man": [
        "python.library.os.path#os.path.getmtime"
    ],
    "canonical_cmd": "os.VAR_STR.getmtime(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get modification time of file `path`. This requires accessing file at `path` and retrieving its modification time. "
}
{
    "question_id": "237079-48",
    "nl": "get modified time of file `file`",
    "cmd": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))",
    "oracle_man": [
        "python.library.os.path#os.path.getmtime",
        "python.library.time#time.ctime"
    ],
    "canonical_cmd": "print('last modified: %s' % time.ctime(os.path.getmtime(VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": "- Get modified time of file `file`. This requires accessing file `file` and retrieving its modified time. "
}
{
    "question_id": "237079-32",
    "nl": "get the creation time of file `file`",
    "cmd": "print(('created: %s' % time.ctime(os.path.getctime(file))))",
    "oracle_man": [
        "python.library.os.path#os.path.getctime",
        "python.library.time#time.ctime"
    ],
    "canonical_cmd": "print('created: %s' % time.ctime(os.path.getctime(VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Get the creation time of file `file`. This requires accessing file `file` and retrieving its creation time. "
}
{
    "question_id": "237079-78",
    "nl": "get the creation time of file `path_to_file`",
    "cmd": "return os.path.getctime(path_to_file)",
    "oracle_man": [
        "python.library.os.path#os.path.getctime"
    ],
    "canonical_cmd": "return os.path.getctime(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the creation time of file `path_to_file`. This requires accessing file at `path_to_file` and retrieving its creation time. "
}
{
    "question_id": "11064917-93",
    "nl": "generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.",
    "cmd": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))",
    "cmd_name": "conala",
    "gpt35_response": " Generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`. This requires generating a sequence of numbers which are divisible by 4 with a remainder of either 1 or 2, and then concatenating them into a comma-separated string. "
}
{
    "question_id": "26724275-54",
    "nl": "remove first directory from path '\/First\/Second\/Third\/Fourth\/Fifth'",
    "cmd": "os.path.join(*x.split(os.path.sep)[2:])",
    "oracle_man": [
        "python.library.os.path#os.path.join",
        "python.library.os.path#os.path.split"
    ],
    "canonical_cmd": "os.path.join(*x.split(os.path.sep)[2:])",
    "cmd_name": "conala",
    "gpt35_response": " Remove first directory from path '\/First\/Second\/Third\/Fourth\/Fifth'. This requires parsing the path string '\/First\/Second\/Third\/Fourth\/Fifth' and removing the first directory 'First' from it. "
}
{
    "question_id": "3501382-87",
    "nl": "check if `x` is an integer",
    "cmd": "isinstance(x, int)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, int)",
    "cmd_name": "conala",
    "gpt35_response": " Check if `x` is an integer. This requires checking whether `x` is a whole number without a fractional component. "
}
{
    "question_id": "3501382-37",
    "nl": "check if `x` is an integer",
    "cmd": "(type(x) == int)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR) == int",
    "cmd_name": "conala",
    "gpt35_response": " Check if `x` is an integer. This requires checking whether `x` is a whole number without a fractional component. "
}
{
    "question_id": "18938276-57",
    "nl": "convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples",
    "cmd": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(map(tuple, [VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples. This requires iterating through the nested list and converting each inner list into a tuple. Then, all the tuples can be appended to a new list. "
}
{
    "question_id": "5229425-29",
    "nl": "print a digit `your_number` with exactly 2 digits after decimal",
    "cmd": "print('{0:.2f}'.format(your_number))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('{0:.2f}'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print a digit `your_number` with exactly 2 digits after decimal. This requires converting `your_number` into a string representation with two decimal places and then printing it. "
}
{
    "question_id": "20477190-38",
    "nl": "get biggest 3 values from each column of the pandas dataframe `data`",
    "cmd": "data.apply(lambda x: sorted(x, 3))",
    "oracle_man": [
        "python.library.functions#sorted",
        "pandas.reference.api.pandas.series.apply"
    ],
    "canonical_cmd": "VAR_STR.apply(lambda x: sorted(x, 3))",
    "cmd_name": "conala",
    "gpt35_response": " Get biggest 3 values from each column of the pandas dataframe `data`. This requires iterating through each column of the dataframe and finding the three largest values in each one.  "
}
{
    "question_id": "42731970-80",
    "nl": "replace periods `.` that are not followed by periods or spaces with a period and a space `. `",
    "cmd": "re.sub('\\\\.(?=[^ .])', '. ', para)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\.(?=[^ .])', '. ', para)",
    "cmd_name": "conala",
    "gpt35_response": " Replace periods `.` that are not followed by periods or spaces with a period and a space `. `. This requires iterating through the target string and replacing any periods that satisfy that criteria with a period followed by a space. "
}
{
    "question_id": "3392354-94",
    "nl": "append values `[3, 4]` to a set `a`",
    "cmd": "a.update([3, 4])",
    "oracle_man": [
        "python.library.turtle#turtle.update"
    ],
    "canonical_cmd": "VAR_STR.update([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Append values `[3, 4]` to a set `a`. This requires adding the values `[3, 4]` to the set `a`. "
}
{
    "question_id": "9210525-51",
    "nl": "convert hex string `s` to decimal",
    "cmd": "i = int(s, 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "i = int(VAR_STR, 16)",
    "cmd_name": "conala",
    "gpt35_response": " Convert hex string `s` to decimal. This requires converting the hexadecimal string `s` into its equivalent decimal representation. "
}
{
    "question_id": "9210525-67",
    "nl": "convert hex string \"0xff\" to decimal",
    "cmd": "int('0xff', 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR', 16)",
    "cmd_name": "conala",
    "gpt35_response": " Convert hex string \"0xff\" to decimal. This requires converting the hexadecimal string \"0xff\" into its equivalent decimal representation. "
}
{
    "question_id": "9210525-47",
    "nl": "convert hex string \"FFFF\" to decimal",
    "cmd": "int('FFFF', 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR', 16)",
    "cmd_name": "conala",
    "gpt35_response": " Convert hex string \"FFFF\" to decimal. This requires converting the hexadecimal string \"FFFF\" into its equivalent decimal representation. "
}
{
    "question_id": "9210525-85",
    "nl": "convert hex string '0xdeadbeef' to decimal",
    "cmd": "ast.literal_eval('0xdeadbeef')",
    "oracle_man": [
        "python.library.ast#ast.literal_eval"
    ],
    "canonical_cmd": "ast.literal_eval('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert hex string '0xdeadbeef' to decimal. This requires converting the hexadecimal string '0xdeadbeef' into its equivalent decimal representation."
}
{
    "question_id": "9210525-67",
    "nl": "convert hex string 'deadbeef' to decimal",
    "cmd": "int('deadbeef', 16)",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR', 16)",
    "cmd_name": "conala",
    "gpt35_response": "- Convert hex string 'deadbeef' to decimal. This requires converting the hex string to an integer using int() and specifying the base as 16.  "
}
{
    "question_id": "16866261-93",
    "nl": "Strip all non-ASCII characters from a unicode string, `\\xa3\\u20ac\\xa3\\u20ac`",
    "cmd": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "print(set(re.sub('[\\x00-\\x7f]', '', 'VAR_STR')))",
    "cmd_name": "conala",
    "gpt35_response": " Strip all non-ASCII characters from a unicode string, `\\xa3\\u20ac\\xa3\\u20ac`. This requires iterating over the unicode string and checking the ASCII code for each character. Any non-ASCII character should be excluded or removed. "
}
{
    "question_id": "16866261-39",
    "nl": "Get all non-ascii characters in a unicode string `\\xa3100 is worth more than \\u20ac100`",
    "cmd": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "print(re.sub('[\\x00-\\x7f]', '', 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Get all non-ascii characters in a unicode string `\\xa3100 is worth more than \\u20ac100`. This requires iterating over the unicode string and checking the ASCII code for each character. Only non-ASCII characters should be included. "
}
{
    "question_id": "9841303-32",
    "nl": "removing duplicate characters from a string variable \"foo\"",
    "cmd": "\"\"\"\"\"\".join(set(foo))",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(set(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Removing duplicate characters from a string variable \"foo\". This requires converting the string variable to a set using set() and then converting it back to a string using \"\".join().  "
}
{
    "question_id": "4481724-87",
    "nl": "convert a list of characters `['a', 'b', 'c', 'd']` into a string",
    "cmd": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of characters `['a', 'b', 'c', 'd']` into a string. This requires using the join() method on the list specifying \"\" as the delimiter."
}
{
    "question_id": "35015693-21",
    "nl": "join elements of each tuple in list `a` into one string",
    "cmd": "[''.join(x) for x in a]",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "[''.join(x) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Join elements of each tuple in list `a` into one string. This requires iterating over the list of tuples and using the join() method on each tuple specifying \"\" as the delimiter. "
}
{
    "question_id": "35015693-23",
    "nl": "join items of each tuple in list of tuples `a` into a list of strings",
    "cmd": "list(map(''.join, a))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(map(''.join, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Join items of each tuple in list of tuples `a` into a list of strings. This requires iterating over the list of tuples, using the join() method on each tuple specifying \"\" as the delimiter, and adding the resulting string to a new list. "
}
{
    "question_id": "11009155-40",
    "nl": "split string \"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\" on the first occurrence of delimiter '='",
    "cmd": "\"\"\"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\"\"\".split('=', 1)",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".split('VAR_STR', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Split string \"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\" on the first occurrence of delimiter '='. This requires using the split() method on the string specifying \"=\", and specifying 1 as the maxsplit parameter. "
}
{
    "question_id": "20970279-77",
    "nl": "get the middle two characters of a string 'state' in a pandas dataframe `df`",
    "cmd": "df['state'].apply(lambda x: x[len(x) \/ 2 - 1:len(x) \/ 2 + 1])",
    "oracle_man": [
        "python.library.functions#len",
        "pandas.reference.api.pandas.series.apply"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].apply(lambda x: x[len(x) \/ 2 - 1:len(x) \/ 2 + 1])",
    "cmd_name": "conala",
    "gpt35_response": " Get the middle two characters of a string 'state' in a pandas dataframe `df`. This requires using the slicing operator to get characters 2 to 4 of the string 'state' in the pandas dataframe. "
}
{
    "question_id": "23668427-2",
    "nl": "join multiple dataframes `d1`, `d2`, and `d3` on column 'name'",
    "cmd": "df1.merge(df2, on='name').merge(df3, on='name')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "df1.merge(df2, on='VAR_STR').merge(df3, on='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Join multiple dataframes `d1`, `d2`, and `d3` on column 'name'. This requires using the merge() method on the dataframes specifying 'name' as the parameter to merge on. "
}
{
    "question_id": "42765620-65",
    "nl": "How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list",
    "cmd": "sorted(list(data.items()), key=lambda x: x[1][0])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(data.items()), key=lambda x: x[1][0])",
    "cmd_name": "conala",
    "gpt35_response": " How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list. This requires using the sorted() method on the dictionary specifying a lambda function to sort by the first index of the list value. "
}
{
    "question_id": "12804801-42",
    "nl": "sort query set by number of characters in a field `length` in django model `MyModel`",
    "cmd": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')",
    "oracle_man": [
        "python.library.zipfile#zipfile.ZipInfo.extra"
    ],
    "canonical_cmd": "VAR_STR.objects.extra(select={'VAR_STR': 'Length(name)'}).order_by('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Sort query set by number of characters in a field `length` in Django model `MyModel`. This requires using the order_by() method on the query set specifying 'length' as the parameter and adding a '- ' prefix to it to sort in descending order. "
}
{
    "question_id": "13838405-78",
    "nl": "sort column `m` in panda dataframe `df`",
    "cmd": "df.sort('m')",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Sort column `m` in panda dataframe `df`. This requires using the sort_values() method on the pandas dataframe `df` specifying 'm' as the parameter."
}
{
    "question_id": "20154303-58",
    "nl": "read a ragged csv file `D:\/Temp\/tt.csv` using `names` parameter in pandas",
    "cmd": "pd.read_csv('D:\/Temp\/tt.csv', names=list('abcdef'))",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv",
        "python.library.functions#list"
    ],
    "canonical_cmd": "pd.read_csv('VAR_STR', VAR_STR=list('abcdef'))",
    "cmd_name": "conala",
    "gpt35_response": " Read a ragged csv file `D:\/Temp\/tt.csv` using `names` parameter in pandas. This requires using the read_csv() method on the csv file path 'D:\/Temp\/tt.csv' and specifying 'names' as the parameter. "
}
{
    "question_id": "9236926-97",
    "nl": "Concatenating two one-dimensional NumPy arrays 'a' and 'b'.",
    "cmd": "numpy.concatenate([a, b])",
    "oracle_man": [
        "numpy.reference.generated.numpy.concatenate"
    ],
    "canonical_cmd": "numpy.concatenate([VAR_STR, VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating two one-dimensional NumPy arrays 'a' and 'b'. This requires using the concatenate() method from the NumPy library and specifying the two arrays 'a' and 'b' as the parameters and axis=0. "
}
{
    "question_id": "18224991-15",
    "nl": "assign float 9.8 to variable `GRAVITY`",
    "cmd": "GRAVITY = 9.8",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = 9.8",
    "cmd_name": "conala",
    "gpt35_response": " Assign float 9.8 to variable `GRAVITY`. This requires using the assignment operator '=' and setting the value to 9.8. "
}
{
    "question_id": "372102-55",
    "nl": "create a regular expression object with the pattern '\\xe2\\x80\\x93'",
    "cmd": "re.compile('\\xe2\\x80\\x93')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Create a regular expression object with the pattern '\\xe2\\x80\\x93'. This requires using the re.compile() method specifying '\\xe2\\x80\\x93' as the pattern. "
}
{
    "question_id": "4552380-10",
    "nl": "SQLAlchemy select records of columns of table `my_table` in addition to current date column",
    "cmd": "print(select([my_table, func.current_date()]).execute())",
    "oracle_man": [
        "python.library.select#select.select",
        "python.library.msilib#msilib.View.Execute"
    ],
    "canonical_cmd": "print(select([VAR_STR, func.current_date()]).execute())",
    "cmd_name": "conala",
    "gpt35_response": " SQLAlchemy select records of columns of table `my_table` in addition to current date column. This requires using the select() method from the SQLAlchemy library to select the records and all the desired columns from the table 'my_table' and adding an additional current date column. "
}
{
    "question_id": "38457059-97",
    "nl": "change NaN values in dataframe `df` using preceding values in the frame",
    "cmd": "df.fillna(method='ffill', inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.fillna"
    ],
    "canonical_cmd": "VAR_STR.fillna(method='ffill', inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Change NaN values in dataframe `df` using preceding values in the frame. This requires using the fillna() method on the pandas dataframe `df` specifying the method='ffill' parameter to use the preceding values to fill the NaN values.  "
}
{
    "question_id": "12765833-84",
    "nl": "counting the number of true booleans in a python list `[True, True, False, False, False, True]`",
    "cmd": "sum([True, True, False, False, False, True])",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Counting the number of true booleans in a python list `[True, True, False, False, False, True]`. This requires using the sum() method on the list and converting the boolean values to integers using int()."
}
{
    "question_id": "31522361-37",
    "nl": "replacing  '\\u200b' with '*' in a string  using regular expressions",
    "cmd": "'used\\u200b'.replace('\\u200b', '*')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"used\u200b\"\"\".replace('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Replace '\\u200b' with '*' in a string using regular expressions. This requires using the `re` module to search for the '\\u200b' pattern, replacing it with '*', and returning the modified string."
}
{
    "question_id": "14111705-53",
    "nl": "display a grayscale image from array of pixels `imageArray`",
    "cmd": "imshow(imageArray, cmap='Greys_r')",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.pyplot.imshow"
    ],
    "canonical_cmd": "imshow(VAR_STR, cmap='Greys_r')",
    "cmd_name": "conala",
    "gpt35_response": " Display a grayscale image from array of pixels `imageArray`. This requires importing the necessary libraries (`numpy` and `matplotlib.pyplot`), creating a grayscale plot from `imageArray`, and displaying the plot using `plt.show()`."
}
{
    "question_id": "23354124-66",
    "nl": "unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`",
    "cmd": "pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')",
    "oracle_man": [
        "pandas.reference.api.pandas.melt"
    ],
    "canonical_cmd": "pd.melt(VAR_STR, id_vars=['farm', 'fruit'], var_name='VAR_STR', value_name='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`. This requires using the `melt()` function in pandas to unpivot the first 2 columns of the data frame `x` into the new columns 'year' and 'value' and returning the modified data frame."
}
{
    "question_id": "31771758-13",
    "nl": "add unicode string '1' to UTF-8 decoded string '\\xc2\\xa3'",
    "cmd": "print('\\xc2\\xa3'.decode('utf8') + '1')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "print('VAR_STR'.decode('utf8') + 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Add unicode string '1' to UTF-8 decoded string '\\xc2\\xa3'. This requires decoding the UTF-8 string using the `decode()` function, appending the unicode string '1' to the decoded string, then re-encoding the string using `encode()` function."
}
{
    "question_id": "20774910-90",
    "nl": "convert unicode string `s` into string literals",
    "cmd": "print(s.encode('unicode_escape'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print(VAR_STR.encode('unicode_escape'))",
    "cmd_name": "conala",
    "gpt35_response": " Convert unicode string `s` into string literals. This requires using the `encode()` method to encode the unicode string `s` into a byte string, and then decoding the byte string using the `decode()` method to convert it into a string literal."
}
{
    "question_id": "12791501-50",
    "nl": "Initialize a list of empty lists `x` of size 3",
    "cmd": "x = [[] for i in range(3)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [[] for i in range(3)]",
    "cmd_name": "conala",
    "gpt35_response": " Initialize a list of empty lists `x` of size 3. This requires creating a list of size 3, and initializing each element of the list as an empty list."
}
{
    "question_id": "5384570-34",
    "nl": "count the number of items in a generator\/iterator `it`",
    "cmd": "sum(1 for i in it)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(1 for i in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of items in a generator\/iterator `it`. This requires using the `sum()` function with a generator expression that yields 1 for each element in the iterator `it`. Alternatively, you can use the `len()` function with `list(it)` to convert the iterator `it` to a list and get the length of the list."
}
{
    "question_id": "16734590-48",
    "nl": "convert nested list 'Cards' into a flat list",
    "cmd": "[a for c in Cards for b in c for a in b]",
    "oracle_man": [],
    "canonical_cmd": "[a for c in VAR_STR for b in c for a in b]",
    "cmd_name": "conala",
    "gpt35_response": " Convert nested list 'Cards' into a flat list. This requires using a list comprehension or the `itertools.chain()` function to flatten the nested list."
}
{
    "question_id": "10996140-0",
    "nl": "remove specific elements in a numpy array `a`",
    "cmd": "numpy.delete(a, index)",
    "oracle_man": [
        "numpy.reference.generated.numpy.delete"
    ],
    "canonical_cmd": "numpy.delete(VAR_STR, index)",
    "cmd_name": "conala",
    "gpt35_response": " Remove specific elements in a numpy array `a`. This requires using boolean indexing with a condition that excludes the specific elements to be removed, or using the `numpy.delete()` function to remove them directly."
}
{
    "question_id": "4587915-52",
    "nl": "get a list of all items in list `j` with values greater than `5`",
    "cmd": "[x for x in j if x >= 5]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x >= 5]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of all items in list `j` with values greater than `5`. This requires using a list comprehension or the `filter()` function with a lambda function that checks if each element of `j` is greater than 5."
}
{
    "question_id": "38987-80",
    "nl": "merge dictionaries form array `dicts` in a single expression",
    "cmd": "dict((k, v) for d in dicts for k, v in list(d.items()))",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((k, v) for d in VAR_STR for k, v in list(d.items()))",
    "cmd_name": "conala",
    "gpt35_response": " Merge dictionaries form array `dicts` in a single expression. This requires using the `dict()` constructor with the `**` unpacking operator to merge all dictionaries in the array `dicts`."
}
{
    "question_id": "28431359-82",
    "nl": "decode url-encoded string `some_string` to its character equivalents",
    "cmd": "urllib.parse.unquote(urllib.parse.unquote(some_string))",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote"
    ],
    "canonical_cmd": "urllib.parse.unquote(urllib.parse.unquote(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Decode url-encoded string `some_string` to its character equivalents. This requires using the `urllib.parse.unquote()` function to decode the url-encoded string `some_string`."
}
{
    "question_id": "28431359-67",
    "nl": "decode a double URL encoded string \r\n'FireShot3%2B%25282%2529.png' to\r\n'FireShot3+(2).png'",
    "cmd": "urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote"
    ],
    "canonical_cmd": "urllib.parse.unquote(urllib.parse.unquote('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Decode a double URL encoded string 'FireShot3%2B%25282%2529.png' to 'FireShot3+(2).png'. This requires decoding the string twice using the `urllib.parse.unquote()` function, since the `%` character is used to encode characters in both the string and the resulting encoded string."
}
{
    "question_id": "2597932-72",
    "nl": "join list of numbers `[1,2,3,4] ` to string of numbers.",
    "cmd": "\"\"\"\"\"\".join([1, 2, 3, 4])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([1, 2, 3, 4])",
    "cmd_name": "conala",
    "gpt35_response": " Join list of numbers `[1,2,3,4] ` to string of numbers. This requires using the `join()` method of the string class to join the elements of the list into a single string with a separator of choice."
}
{
    "question_id": "849674-71",
    "nl": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1",
    "cmd": "thread.start_new_thread(myfunction, ('MyStringHere', 1))",
    "oracle_man": [
        "python.library._thread#_thread.start_new_thread"
    ],
    "canonical_cmd": "thread.start_new_thread(VAR_STR, ('VAR_STR', 1))",
    "cmd_name": "conala",
    "gpt35_response": " Start a new thread for `myfunction` with parameters 'MyStringHere' and 1. This requires creating a `Thread` object with `myfunction` as the target function and passing the parameters 'MyStringHere' and 1 as arguments to the `args` parameter."
}
{
    "question_id": "849674-100",
    "nl": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1",
    "cmd": "thread.start_new_thread(myfunction, ('MyStringHere', 1))",
    "oracle_man": [
        "python.library._thread#_thread.start_new_thread"
    ],
    "canonical_cmd": "thread.start_new_thread(VAR_STR, ('VAR_STR', 1))",
    "cmd_name": "conala",
    "gpt35_response": " Start a new thread for `myfunction` with parameters 'MyStringHere' and 1. This requires creating a `Thread` object with `myfunction` as the target function and passing the parameters 'MyStringHere' and 1 as arguments to the `args` parameter."
}
{
    "question_id": "12492137-8",
    "nl": "python sum of ascii values of all characters in a string `string`",
    "cmd": "sum(map(ord, string))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(map(ord, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Python sum of ascii values of all characters in a string `string`. This requires using a loop with the `ord()` function to get the ascii value of each character in the string, and adding them up using the `sum()` function."
}
{
    "question_id": "12883376-74",
    "nl": "remove first word in string `s`",
    "cmd": "s.split(' ', 1)[1]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split(' ', 1)[1]",
    "cmd_name": "conala",
    "gpt35_response": " Remove first word in string `s`. This requires using the `split()` method to split the string into words, excluding the first word, then using the `join()` method to join the remaining words into a string."
}
{
    "question_id": "1679798-8",
    "nl": "open a file \"$file\" under Unix",
    "cmd": "os.system('start \"$file\"')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('start \"$file\"')",
    "cmd_name": "conala",
    "gpt35_response": " Open a file \"$file\" under Unix. This requires using the `open()` function with the path of the file as an argument. The file path should start with the Unix root directory, which is usually `\/`."
}
{
    "question_id": "27146262-46",
    "nl": "create variable key\/value pairs with argparse",
    "cmd": "parser.add_argument('--conf', nargs=2, action='append')",
    "oracle_man": [
        "python.library.argparse#argparse.ArgumentParser.add_argument"
    ],
    "canonical_cmd": "parser.add_argument('--conf', nargs=2, action='append')",
    "cmd_name": "conala",
    "gpt35_response": " Create variable key\/value pairs with argparse. This requires importing the `argparse` module, creating an `ArgumentParser` object, adding argument options using the `add_argument()` method, and parsing the command line arguments using the `parse_args()` method. The variable key\/value pairs will be accessible as attributes of the returned object."
}
{
    "question_id": "18789262-62",
    "nl": "convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary",
    "cmd": "dict(zip(list(range(1, 5)), list(range(7, 11))))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list",
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip(list(range(VAR_STR)), list(range(VAR_STR))))",
    "cmd_name": "conala",
    "gpt35_response": "-Convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary. This requires creating two ranges - `(1, 5)` and `(7, 11)`, zipping them and creating a dictionary from the resulting zip."
}
{
    "question_id": "18265935-5",
    "nl": "create a list of integers between 2 values `11` and `17`",
    "cmd": "list(range(11, 17))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(range(11, 17))",
    "cmd_name": "conala",
    "gpt35_response": "Create a list of integers between 2 values `11` and `17`. This requires specifying the starting and ending values for the range and converting the range to a list of integers."
}
{
    "question_id": "26727314-83",
    "nl": "argparse associate zero or more arguments with flag 'file'",
    "cmd": "parser.add_argument('file', nargs='*')",
    "oracle_man": [
        "python.library.argparse#argparse.ArgumentParser.add_argument"
    ],
    "canonical_cmd": "parser.add_argument('VAR_STR', nargs='*')",
    "cmd_name": "conala",
    "gpt35_response": "Argparse associate zero or more arguments with flag 'file'. This requires using the argparse module to allow users to specify zero or more arguments for flag 'file'."
}
{
    "question_id": "16658068-0",
    "nl": "print a character that has unicode value `\\u25b2`",
    "cmd": "print('\\u25b2'.encode('utf-8'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print('VAR_STR'.encode('utf-8'))",
    "cmd_name": "conala",
    "gpt35_response": "Print a character that has unicode value `\\u25b2`. This requires specifying the unicode value for the character and printing it to the console."
}
{
    "question_id": "7154739-87",
    "nl": "set every two-stride far element to -1 starting from second element in array `a`",
    "cmd": "a[1::2] = -1",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[1::2] = -1",
    "cmd_name": "conala",
    "gpt35_response": "Set every two-stride far element to -1 starting from second element in array `a`. This requires specifying an array `a`, iterating over every second element starting from the second in the array, and setting the value of each of these elements to -1."
}
{
    "question_id": "6561653-2",
    "nl": "Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function",
    "cmd": "max(lst, key=lambda x: x['score'])",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(VAR_STR, key=lambda x: x['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": "Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function. This requires creating a lambda function to extract the `score` key from each dictionary in the list and using the max function to find the dictionary with the maximum `score` value."
}
{
    "question_id": "17223174-79",
    "nl": "SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`",
    "cmd": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()",
    "oracle_man": [
        "django.ref.models.querysets#django.db.models.Count.distinct",
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "session.query(VAR_STR).distinct(VAR_STR.VAR_STR).group_by(VAR_STR.VAR_STR).count()",
    "cmd_name": "conala",
    "gpt35_response": "SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`. This requires connecting to a database using SQLAlchemy, selecting the `name` column of the `Tag` table, applying the `DISTINCT` keyword to get unique values, and counting the number of rows returned."
}
{
    "question_id": "6889785-68",
    "nl": "get a list of items form nested list `li` where third element of each item contains string 'ar'",
    "cmd": "[x for x in li if 'ar' in x[2]]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if 'VAR_STR' in x[2]]",
    "cmd_name": "conala",
    "gpt35_response": "Get a list of items form nested list `li` where third element of each item contains string 'ar'. This requires iterating over each item in the nested list `li`, checking if the third element contains the string 'ar', and adding it to a new list if it does."
}
{
    "question_id": "3847472-86",
    "nl": "get index of character 'b' in list '['a', 'b']'",
    "cmd": "['a', 'b'].index('b')",
    "oracle_man": [
        "python.library.stdtypes#str.index"
    ],
    "canonical_cmd": "['a', 'VAR_STR'].index('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Get index of character 'b' in list '['a', 'b']'. This requires specifying a list `['a', 'b']` and using the `index()` method to find the index of the character 'b'."
}
{
    "question_id": "10857924-28",
    "nl": "remove null columns in a dataframe `df`",
    "cmd": "df = df.dropna(axis=1, how='all')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.dropna"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.dropna(axis=1, how='all')",
    "cmd_name": "conala",
    "gpt35_response": "Remove null columns in a dataframe `df`. This requires specifying a dataframe `df` and dropping any columns that contain null values."
}
{
    "question_id": "17558552-75",
    "nl": "Log info message 'Log message' with attributes `{'app_name': 'myapp'}`",
    "cmd": "logging.info('Log message', extra={'app_name': 'myapp'})",
    "oracle_man": [
        "python.library.logging#logging.info"
    ],
    "canonical_cmd": "logging.info('VAR_STR', extra={VAR_STR})",
    "cmd_name": "conala",
    "gpt35_response": "Log info message 'Log message' with attributes `{'app_name': 'myapp'}`. This requires using a logging module to log an info level message with the text 'Log message' and adding attributes `{'app_name': 'myapp'}` to the log record."
}
{
    "question_id": "42060144-97",
    "nl": "Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`",
    "cmd": "df1.merge(df2, how='left', on='word')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "VAR_STR.merge(VAR_STR, how='left', on='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Merge column 'word' in dataframe `df2` with column 'word' on dataframe `df1'. This requires specifying dataframes `df1` and `df2`, merging the 'word' columns on both dataframes using the `merge()` method."
}
{
    "question_id": "42211584-15",
    "nl": "get the maximum of 'salary' and 'bonus' values in a dictionary",
    "cmd": "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "print(max(d, key=lambda x: (d[x]['VAR_STR'], d[x]['VAR_STR'])))",
    "cmd_name": "conala",
    "gpt35_response": "Get the maximum of 'salary' and 'bonus' values in a dictionary. This requires specifying a dictionary and finding the maximum value of both the 'salary' and 'bonus' keys."
}
{
    "question_id": "1197600-71",
    "nl": "match blank lines in `s` with regular expressions",
    "cmd": "re.split('\\n\\\\s*\\n', s)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('\\n\\\\s*\\n', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Match blank lines in `s` with regular expressions. This requires specifying a string `s` and using regular expressions to find any blank lines."
}
{
    "question_id": "11755208-97",
    "nl": "replace carriage return in string `somestring` with empty string ''",
    "cmd": "somestring.replace('\\\\r', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR.replace('\\\\r', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Replace carriage return in string `somestring` with empty string ''. This requires specifying a string `somestring` and using the `replace()` method to replace any carriage returns with an empty string."
}
{
    "question_id": "21947035-29",
    "nl": "print string \"ABC\" as hex literal",
    "cmd": "\"\"\"\u0001ABC\"\"\".encode('hex')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "\"\"\"\u0001ABC\"\"\".encode('hex')",
    "cmd_name": "conala",
    "gpt35_response": "Print string \"ABC\" as hex literal. This requires specifying the string \"ABC\" and using the `encode()` method with the `hex` codec to encode it as a hex literal and print it to the console."
}
{
    "question_id": "21361604-32",
    "nl": "sort a list `L` by number after second '.'",
    "cmd": "print(sorted(L, key=lambda x: int(x.split('.')[2])))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "print(sorted(VAR_STR, key=lambda x: int(x.split('VAR_STR')[2])))",
    "cmd_name": "conala",
    "gpt35_response": "Sort a list `L` by number after second '.'. This requires specifying a list `L`, creating a lambda function to extract the number after the second '.' in each element of the list, and using the `sorted()` function to sort `L` based on the extracted number."
}
{
    "question_id": "11114358-38",
    "nl": "Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'",
    "cmd": "list(dict((x['id'], x) for x in L).values())",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "list(dict((x['VAR_STR'], x) for x in VAR_STR).values())",
    "cmd_name": "conala",
    "gpt35_response": "Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'. This requires specifying a list of dictionaries `L`, creating a lambda function to extract the 'id' value from each dictionary, and filtering the list to remove any duplicate entries based on the 'id' value."
}
{
    "question_id": "6376886-84",
    "nl": "create list of 'size' empty strings",
    "cmd": "strs = ['' for x in range(size)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "strs = ['' for x in range(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": "Create list of 'size' empty strings. This requires specifying a variable `size` and creating a list with `size` number of empty strings"
}
{
    "question_id": "28684154-81",
    "nl": "Copy list `old_list` and name it `new_list`",
    "cmd": "new_list = [x[:] for x in old_list]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x[:] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Copy list `old_list` and name it `new_list`. This requires specifying a list `old_list` and creating a new list `new_list` with the same contents as `old_list`."
}
{
    "question_id": "20025882-78",
    "nl": "append string 'str' at the beginning of each value in column 'col' of dataframe `df`",
    "cmd": "df['col'] = 'str' + df['col'].astype(str)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.astype"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = 'VAR_STR' + VAR_STR['VAR_STR'].astype(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Append string 'str' at the beginning of each value in column 'col' of dataframe `df`. This requires selecting the column `col` in `df`, iterating over each value, and appending the string `str` at the beginning of each value."
}
{
    "question_id": "11924135-42",
    "nl": "BeautifulSoup find a tag whose id ends with string 'para'",
    "cmd": "soup.findAll(id=re.compile('para$'))",
    "oracle_man": [
        "python.library.re#re.compile",
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "soup.findAll(id=re.compile('para$'))",
    "cmd_name": "conala",
    "gpt35_response": " BeautifulSoup find a tag whose id ends with string 'para'. This requires using BeautifulSoup to search through the html document for all tags with an id that ends with 'para'."
}
{
    "question_id": "11924135-85",
    "nl": "select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`",
    "cmd": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')",
    "oracle_man": [
        "python.library.select#select.select"
    ],
    "canonical_cmd": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')",
    "cmd_name": "conala",
    "gpt35_response": " Select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`. This requires using a CSS selector to select all `div` tags whose `id` begins with `value_xxx_c_1_f_8_a_`."
}
{
    "question_id": "4338032-43",
    "nl": "match string 'this is my string' with regex '\\\\b(this|string)\\\\b'\r\nthen replace it with regex '<markup>\\\\1<\/markup>'",
    "cmd": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1<\/markup>', 'this is my string')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('VAR_STR', 'VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Match string 'this is my string' with regex '\\\\b(this|string)\\\\b' then replace it with regex '<markup>\\\\1<\/markup>'. This requires applying a regular expression pattern matching to the string 'this is my string', and then replacing it with the string '<markup>\\\\1<\/markup>'."
}
{
    "question_id": "3160752-54",
    "nl": "replace backslashes in string `result` with empty string ''",
    "cmd": "result = result.replace('\\\\', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.replace('\\\\', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace backslashes in string `result` with empty string ''. This requires replacing all occurrences of the backslash character in the string `result` with an empty string."
}
{
    "question_id": "3160752-60",
    "nl": "remove backslashes from string `result`",
    "cmd": "result.replace('\\\\', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR.replace('\\\\', '')",
    "cmd_name": "conala",
    "gpt35_response": " Remove backslashes from string `result`. This requires removing all occurrences of the backslash character in the string `result`."
}
{
    "question_id": "27457970-81",
    "nl": "separate each character in string `s` by '-'",
    "cmd": "re.sub('(.)(?=.)', '\\\\1-', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(.)(?=.)', '\\\\1-', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Separate each character in string `s` by '-'. This requires iterating over each character in the string `s`, and concatenating it with the '-' character."
}
{
    "question_id": "27457970-4",
    "nl": "concatenate '-' in between characters of string `str`",
    "cmd": "re.sub('(?<=.)(?=.)', '-', str)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(?<=.)(?=.)', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate '-' in between characters of string `str`. This requires iterating over each character in the string `str`, and concatenating it with the '-' character in between."
}
{
    "question_id": "11144513-58",
    "nl": "cartesian product of `x` and `y` array points into single array of 2d points",
    "cmd": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)",
    "oracle_man": [
        "numpy.reference.generated.numpy.meshgrid",
        "numpy.reference.generated.numpy.dstack",
        "numpy.reference.generated.numpy.reshape"
    ],
    "canonical_cmd": "numpy.dstack(numpy.meshgrid(VAR_STR, VAR_STR)).reshape(-1, 2)",
    "cmd_name": "conala",
    "gpt35_response": " Cartesian product of `x` and `y` array points into single array of 2d points. This requires iterating over each point in `x`, and for each point, iterating over each point in `y` and creating a new 2d point with the x-coordinate from the first point and the y-coordinate from the second point."
}
{
    "question_id": "436599-41",
    "nl": "truncate string `s` up to character ':'",
    "cmd": "s.split(':', 1)[1]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR', 1)[1]",
    "cmd_name": "conala",
    "gpt35_response": " Truncate string `s` up to character ':'. This requires finding the index of the first occurrence of the character ':' in the string `s`, and then truncating the string up to that index."
}
{
    "question_id": "9754729-26",
    "nl": "remove index 2 element from a list `my_list`",
    "cmd": "my_list.pop(2)",
    "oracle_man": [
        "python.library.stdtypes#frozenset.pop"
    ],
    "canonical_cmd": "VAR_STR.pop(2)",
    "cmd_name": "conala",
    "gpt35_response": " Remove index 2 element from a list `my_list`. This requires finding the element at index 2 of the list `my_list`, and then removing it from the list."
}
{
    "question_id": "18272066-92",
    "nl": "Encode each value to 'UTF8' in the list `EmployeeList`",
    "cmd": "[x.encode('UTF8') for x in EmployeeList]",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "[x.encode('VAR_STR') for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Encode each value to 'UTF8' in the list `EmployeeList`. This requires iterating over each value in the `EmployeeList` list, and encoding each value to 'UTF8'."
}
{
    "question_id": "12218112-25",
    "nl": "get the sum of each second value from a list of tuple `structure`",
    "cmd": "sum(x[1] for x in structure)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(x[1] for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the sum of each second value from a list of tuple `structure`. This requires iterating over each tuple in the list `structure` and adding the second value of each tuple to a running sum."
}
{
    "question_id": "40851413-100",
    "nl": "send data 'HTTP\/1.0 200 OK\\r\\n\\r\\n' to socket `connection`",
    "cmd": "connection.send('HTTP\/1.0 200 established\\r\\n\\r\\n')",
    "oracle_man": [
        "python.library.multiprocessing#multiprocessing.connection.Connection.send"
    ],
    "canonical_cmd": "VAR_STR.send('HTTP\/1.0 200 established\\r\\n\\r\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Send data 'HTTP\/1.0 200 OK\\r\\n\\r\\n' to socket `connection`. This requires creating a socket connection and sending the data string 'HTTP\/1.0 200 OK\\r\\n\\r\\n' to the connection."
}
{
    "question_id": "40851413-34",
    "nl": "send data 'HTTP\/1.0 200 OK\\r\\n\\r\\n' to socket `connection`",
    "cmd": "connection.send('HTTP\/1.0 200 OK\\r\\n\\r\\n')",
    "oracle_man": [
        "python.library.multiprocessing#multiprocessing.connection.Connection.send"
    ],
    "canonical_cmd": "VAR_STR.send('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Send data 'HTTP\/1.0 200 OK\\r\\n\\r\\n' to socket `connection`. This requires creating a socket connection and sending the data string 'HTTP\/1.0 200 OK\\r\\n\\r\\n' to the connection."
}
{
    "question_id": "13324554-1",
    "nl": "create a slice object using string `string_slice`",
    "cmd": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])",
    "oracle_man": [
        "python.library.functions#slice",
        "python.library.functions#int",
        "python.library.stdtypes#str.strip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "slice(*[(int(i.strip()) if i else None) for i in VAR_STR.split(':')])",
    "cmd_name": "conala",
    "gpt35_response": " Create a slice object using string `string_slice`. This requires parsing the slice information from the string `string_slice`, and then creating a new slice object."
}
{
    "question_id": "20400135-83",
    "nl": "append a pandas series `b` to the series `a` and get a continuous index",
    "cmd": "a.append(b).reset_index(drop=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.series.reset_index",
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.append(VAR_STR).reset_index(drop=True)",
    "cmd_name": "conala",
    "gpt35_response": " Append a pandas series `b` to the series `a` and get a continuous index. This requires appending the panda series `b` to the series `a`, resetting the index of the combined series to be continuous, and then returning the new series."
}
{
    "question_id": "20400135-52",
    "nl": "simple way to append a pandas series `a` and `b` with same index",
    "cmd": "pd.concat([a, b], ignore_index=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat"
    ],
    "canonical_cmd": "pd.concat([VAR_STR, VAR_STR], ignore_index=True)",
    "cmd_name": "conala",
    "gpt35_response": " Simple way to append a pandas series `a` and `b` with same index. This requires appending the pandas series `a` and `b` together using concatenation method `pd.concat()`."
}
{
    "question_id": "7286879-67",
    "nl": "split unicode string \"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\" into words",
    "cmd": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\"\"\".split()",
    "cmd_name": "conala",
    "gpt35_response": " Split unicode string \"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\" into words. This requires splitting the string \"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\" based on whitespace."
}
{
    "question_id": "14793098-82",
    "nl": "change flask security register url to `\/create_account`",
    "cmd": "app.config['SECURITY_REGISTER_URL'] = '\/create_account'",
    "oracle_man": [],
    "canonical_cmd": "app.config['SECURITY_REGISTER_URL'] = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Change flask security register url to `\/create_account`. This requires updating the Flask route for registering a new account to be located at the URL path `\/create_account`."
}
{
    "question_id": "200738-3",
    "nl": "encode string `data` as `hex`",
    "cmd": "data.encode('hex')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "VAR_STR.encode('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Encode string `data` as `hex`. This requires using a hex encoding function to convert the string `data` into its hexadecimal representation."
}
{
    "question_id": "21414159-59",
    "nl": "open the login site 'http:\/\/somesite.com\/adminpanel\/index.php' in the browser",
    "cmd": "webbrowser.open('http:\/\/somesite.com\/adminpanel\/index.php')",
    "oracle_man": [
        "python.library.webbrowser#webbrowser.open"
    ],
    "canonical_cmd": "webbrowser.open('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Open the login site 'http:\/\/somesite.com\/adminpanel\/index.php' in the browser. This requires using a web driver to navigate to the login site's URL."
}
{
    "question_id": "5507948-0",
    "nl": "insert row into mysql database with column 'column1' set to the value `value`",
    "cmd": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.Cursor.execute"
    ],
    "canonical_cmd": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (VAR_STR,))",
    "cmd_name": "conala",
    "gpt35_response": " Insert row into MySQL database with column 'column1' set to the value `value`. This requires executing an SQL query to insert a new row into the MySQL database, with the value of `column1` set to `value`."
}
{
    "question_id": "740287-34",
    "nl": "check if any item from list `b` is in list `a`",
    "cmd": "print(any(x in a for x in b))",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "print(any(x in VAR_STR for x in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Check if any item from list `b` is in list `a`. This requires iterating over the elements in list `b`, and for each element, checking if it exists in list `a`."
}
{
    "question_id": "3809265-55",
    "nl": "scalar multiply matrix `a` by `b`",
    "cmd": "(a.T * b).T",
    "oracle_man": [],
    "canonical_cmd": "(VAR_STR.T * VAR_STR).T",
    "cmd_name": "conala",
    "gpt35_response": " Scalar multiply matrix `a` by `b`. This requires performing scalar multiplication between each element in matrix `a` and scalar `b`."
}
{
    "question_id": "1885181-93",
    "nl": "un-escape a backslash-escaped string in `Hello,\\\\nworld!`",
    "cmd": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))",
    "cmd_name": "conala",
    "gpt35_response": " Un-escape a backslash-escaped string in `Hello,\\\\nworld!`. This requires replacing all instances of the escape sequence `\\n` with a newline character in the string `Hello,\\\\nworld!`."
}
{
    "question_id": "3348825-1",
    "nl": "round 1123.456789 to be an integer",
    "cmd": "print(round(1123.456789, -1))",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "print(round(1123.456789, -1))",
    "cmd_name": "conala",
    "gpt35_response": " Round 1123.456789 to be an integer. This requires rounding the number 1123.456789 to the nearest integer using the round function."
}
{
    "question_id": "36957908-74",
    "nl": "substitute two or more whitespace characters with character '|' in string `line`",
    "cmd": "re.sub('\\\\s{2,}', '|', line.strip())",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "re.sub('\\\\s{2,}', 'VAR_STR', VAR_STR.strip())",
    "cmd_name": "conala",
    "gpt35_response": " Substitute two or more whitespace characters with character '|' in string `line`. This requires using a regular expression substitution function to replace multiple consecutive whitespace characters with the character `|` in string `line`."
}
{
    "question_id": "1222677-77",
    "nl": "create a list containing elements from list `list` that are predicate to function `f`",
    "cmd": "[f(x) for x in list]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR(x) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing elements from list `list` that are predicate to function `f`. This requires iterating over each element in list `list`, passing it to the function `f`, and if the function returns a truthy value, adding the element to the new list."
}
{
    "question_id": "21519203-57",
    "nl": "Make a scatter plot using unpacked values of list `li`",
    "cmd": "plt.scatter(*zip(*li))",
    "oracle_man": [
        "python.library.functions#zip",
        "pandas.reference.api.pandas.dataframe.plot.scatter"
    ],
    "canonical_cmd": "plt.scatter(*zip(*VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Make a scatter plot using unpacked values of list `li`. This requires using a scatter plot function from a plotting library to create a plot with the values in list `li`."
}
{
    "question_id": "16128833-30",
    "nl": "inherit from class `Executive`",
    "cmd": "super(Executive, self).__init__(*args)",
    "oracle_man": [
        "python.library.functions#super",
        "python.library.logging#logging.Handler.__init__"
    ],
    "canonical_cmd": "super(VAR_STR, self).__init__(*args)",
    "cmd_name": "conala",
    "gpt35_response": " Inherit from class `Executive`. This requires creating a new class that will inherit all of the data members and member functions of the `Executive` class."
}
{
    "question_id": "17856928-74",
    "nl": "terminate process `p`",
    "cmd": "p.terminate()",
    "oracle_man": [
        "python.library.multiprocessing#multiprocessing.Process.terminate"
    ],
    "canonical_cmd": "VAR_STR.terminate()",
    "cmd_name": "conala",
    "gpt35_response": " Terminate process `p`. This requires sending a signal to the process `p` to terminate it gracefully."
}
{
    "question_id": "31743603-4",
    "nl": "make a list of integers from 0 to `5` where each second element is a duplicate of the previous element",
    "cmd": "print([u for v in [[i, i] for i in range(5)] for u in v])",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "print([u for v in [[i, i] for i in range(5)] for u in v])",
    "cmd_name": "conala",
    "gpt35_response": " Make a list of integers from 0 to `5` where each second element is a duplicate of the previous element. This requires using a loop to generate a list of integers from 0 to `5`, and at every second element, appending the value of the previous element to the list."
}
{
    "question_id": "31743603-29",
    "nl": "create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`",
    "cmd": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`. This requires adding the integers 0 through 4 twice to the list using the `list.extend()` method."
}
{
    "question_id": "31743603-80",
    "nl": "create a list of integers from 1 to 5 with each value duplicated",
    "cmd": "[(i \/\/ 2) for i in range(10)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[(i \/\/ 2) for i in range(10)]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list of integers from 1 to 5 with each value duplicated. This requires using a loop to generate a list of integers from 1 to 5, and for each element, appending it to the list twice."
}
{
    "question_id": "14694482-12",
    "nl": "convert a beautiful soup html `soup` to text",
    "cmd": "print(soup.get_text())",
    "oracle_man": [
        "matplotlib.table_api#matplotlib.table.Cell.get_text"
    ],
    "canonical_cmd": "print(VAR_STR.get_text())",
    "cmd_name": "conala",
    "gpt35_response": " Convert a Beautiful Soup HTML `soup` to text. This requires using a method to extract the text content from the HTML elements in `soup`."
}
{
    "question_id": "40311987-33",
    "nl": "calculate the mean of columns with same name in dataframe `df`",
    "cmd": "df.groupby(by=df.columns, axis=1).mean()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.mean"
    ],
    "canonical_cmd": "VAR_STR.groupby(by=VAR_STR.columns, axis=1).mean()",
    "cmd_name": "conala",
    "gpt35_response": " Calculate the mean of columns with same name in dataframe `df`. This requires grouping the columns in `df` by name, then taking the mean of each group."
}
{
    "question_id": "1780174-1",
    "nl": "create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`",
    "cmd": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[{'VAR_STR': a, 'VAR_STR': b} for a, b in zip(VAR_STR['VAR_STR'], VAR_STR['VAR_STR'])]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`. This requires iterating over the keys in `d`, assembling a dictionary with the corresponding values for each key, and appending the resulting dictionary to a list."
}
{
    "question_id": "1780174-26",
    "nl": "Split dictionary of lists into list of dictionaries",
    "cmd": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))",
    "cmd_name": "conala",
    "gpt35_response": " Split dictionary of lists into list of dictionaries. This requires iterating over the keys and values in the dictionary, assembling a new dictionary for each index in the list and appending it to the list."
}
{
    "question_id": "988228-81",
    "nl": "build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`",
    "cmd": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")",
    "oracle_man": [
        "python.library.ast#ast.literal_eval"
    ],
    "canonical_cmd": "ast.literal_eval('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Build a dictionary of key:value pairs from a string representation of a dictionary, `{'muffin' : 'lolz', 'foo' : 'kitty'}`. This requires parsing the string into a dictionary data structure."
}
{
    "question_id": "7271385-77",
    "nl": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary",
    "cmd": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip([VAR_STR], [VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": "- Combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary. This requires creating a dictionary, iterating over both lists simultaneously, and adding key-value pairs to the dictionary."
}
{
    "question_id": "7271385-51",
    "nl": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary",
    "cmd": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip([VAR_STR], [VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": "- Combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary. This requires creating a dictionary, iterating over both lists simultaneously, and adding key-value pairs to the dictionary."
}
{
    "question_id": "12604909-49",
    "nl": "pandas: change all the values of a column 'Date' into \"int(str(x)[-4:])\"",
    "cmd": "df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "df['VAR_STR'] = df['VAR_STR'].apply(lambda x: int(str(x)[-4:]))",
    "cmd_name": "conala",
    "gpt35_response": " Pandas: Change all the values of a column 'Date' into \"int(str(x)[-4:])\". This requires iterating over all the values in the 'Date' column of the pandas data frame and converting each value to its corresponding integer value with the specified format."
}
{
    "question_id": "13490292-70",
    "nl": "format number 1000000000.0 using latex notation",
    "cmd": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))",
    "cmd_name": "conala",
    "gpt35_response": " Format number 1000000000.0 using LaTeX notation. This requires converting the number to a string and formatting it using the LaTeX notation."
}
{
    "question_id": "8344905-24",
    "nl": "randomly switch letters' cases in string `s`",
    "cmd": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)",
    "oracle_man": [
        "python.library.random#random.randint",
        "python.library.stdtypes#str.upper",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Randomly switch letters' cases in string `s`. This requires iterating over every character in the string and randomly changing the case of the character."
}
{
    "question_id": "12843099-82",
    "nl": "convert the argument `date` with string formatting in logging",
    "cmd": "logging.info('date=%s', date)",
    "oracle_man": [
        "python.library.logging#logging.info"
    ],
    "canonical_cmd": "logging.info('date=%s', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert the argument `date` with string formatting in logging. This requires using the `strftime` method to format the `date` argument as a string with a specific format."
}
{
    "question_id": "12843099-18",
    "nl": "Log message of level 'info' with value of `date` in the message",
    "cmd": "logging.info('date={}'.format(date))",
    "oracle_man": [
        "python.library.logging#logging.info",
        "python.library.functions#format"
    ],
    "canonical_cmd": "logging.VAR_STR('date={}'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Log message of level 'info' with value of `date` in the message. This requires creating a log message with a specific level and formatting that message to include the value of the `date` argument."
}
{
    "question_id": "30328646-93",
    "nl": "Do group by on `cluster` column in `df` and get its mean",
    "cmd": "df.groupby(['cluster']).mean()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.mean"
    ],
    "canonical_cmd": "VAR_STR.groupby(['VAR_STR']).mean()",
    "cmd_name": "conala",
    "gpt35_response": " Do group by on `cluster` column in `df` and get its mean. This requires grouping the rows of the pandas data frame `df` by the values in the 'cluster' column and calculating the mean of each group."
}
{
    "question_id": "1082413-12",
    "nl": "sort list `strings` in alphabetical order based on the letter after percent character `%` in each element",
    "cmd": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `strings` in alphabetical order based on the letter after percent character `%` in each element. This requires defining a custom sorting function that extracts the relevant character from each string element and sorting the list using that function."
}
{
    "question_id": "1082413-43",
    "nl": "sort a list of strings `strings` based on regex match",
    "cmd": "strings.sort(key=lambda str: re.sub('.*%', '', str))",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda str: re.sub('.*%', '', str))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of strings `strings` based on regex match. This requires defining a regular expression that matches the pattern to be sorted and using it in the `key` argument of the `sorted` function."
}
{
    "question_id": "9206964-68",
    "nl": "split string \"This is a string\" into words that do not contain whitespaces",
    "cmd": "\"\"\"This is a string\"\"\".split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string \"This is a string\" into words that do not contain whitespaces. This requires splitting the string based on the presence of whitespaces and filtering out any resulting words that contain whitespaces."
}
{
    "question_id": "9206964-10",
    "nl": "split string \"This     is a     string\" into words that does not contain whitespaces",
    "cmd": "\"\"\"This     is a     string\"\"\".split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string \"This     is a     string\" into words that do not contain whitespaces. This requires splitting the string using a regular expression that matches one or more consecutive whitespaces, and then filtering out any resulting words that contain whitespaces."
}
{
    "question_id": "40076861-4",
    "nl": "merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single",
    "cmd": "pd.concat([distancesDF, datesDF.dates], axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat"
    ],
    "canonical_cmd": "pd.concat([VAR_STR, VAR_STR.VAR_STR], axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single. This requires merging the two data frames using a common column and dropping any unnecessary columns."
}
{
    "question_id": "12309976-25",
    "nl": "convert a list `my_list` into string with values separated by spaces",
    "cmd": "\"\"\" \"\"\".join(my_list)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list `my_list` into a string with values separated by spaces. This can be achieved using the `join` method of strings to join all values in the list with a space separator."
}
{
    "question_id": "14169122-51",
    "nl": "generate a list of all unique pairs of integers in `range(9)`",
    "cmd": "list(permutations(list(range(9)), 2))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.functions#range"
    ],
    "canonical_cmd": "list(permutations(list(range(9)), 2))",
    "cmd_name": "conala",
    "gpt35_response": " Generate a list of all unique pairs of integers in `range(9)`. This requires using nested loops to iterate over all pairs of integers in the range and adding only the unique pairs to a list."
}
{
    "question_id": "5801945-50",
    "nl": "Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind",
    "cmd": "re.split('(?<=[\\\\.\\\\?!]) ', text)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('(?<=[\\\\.\\\\?!]) ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind. This requires defining a regular expression that matches the specified punctuation characters as delimiters and using a look-behind assertion to ensure that the delimiters are not included in the resulting list of substrings."
}
{
    "question_id": "26081300-96",
    "nl": "Subtract the mean of each row in dataframe `df` from the corresponding row's elements",
    "cmd": "df.sub(df.mean(axis=1), axis=0)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.sub",
        "pandas.reference.api.pandas.dataframe.mean"
    ],
    "canonical_cmd": "VAR_STR.sub(VAR_STR.mean(axis=1), axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Subtract the mean of each row in dataframe `df` from the corresponding row's elements. This requires calculating the mean of each row in the pandas data frame `df` and then subtracting that value from each element in its corresponding row."
}
{
    "question_id": "3548673-96",
    "nl": "replace extension '.txt' in basename '\/home\/user\/somefile.txt' with extension '.jpg'",
    "cmd": "print(os.path.splitext('\/home\/user\/somefile.txt')[0] + '.jpg')",
    "oracle_man": [
        "python.library.os.path#os.path.splitext"
    ],
    "canonical_cmd": "print(os.path.splitext('VAR_STR')[0] + 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace extension '.txt' in basename '\/home\/user\/somefile.txt' with extension '.jpg'. This requires splitting the basename into its components, replacing the extension, and reassembling the components into a new filepath."
}
{
    "question_id": "27589325-84",
    "nl": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'",
    "cmd": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'. This requires finding the position of the second occurrence of 'cat' in the sentence and replacing it with 'Bull'."
}
{
    "question_id": "27589325-75",
    "nl": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'",
    "cmd": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'. This requires finding the position of the second occurrence of 'cat' in the sentence and replacing it with 'Bull'."
}
{
    "question_id": "379906-43",
    "nl": "parse string `a` to float",
    "cmd": "float(a)",
    "oracle_man": [
        "python.library.functions#float"
    ],
    "canonical_cmd": "float(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Parse string `a` to float. This requires utilizing the float() function to convert the string value to a float."
}
{
    "question_id": "379906-7",
    "nl": "Parse String `s` to Float or Int",
    "cmd": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.functions#int"
    ],
    "canonical_cmd": "try:\n    return int(VAR_STR)\nexcept ValueError:\n    return float(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Parse String `s` to Float or Int. This requires utilizing the appropriate function (either int() or float()) to convert the string value to its respective data type."
}
{
    "question_id": "180606-7",
    "nl": "convert a list `L` of ascii values to a string",
    "cmd": "\"\"\"\"\"\".join(chr(i) for i in L)",
    "oracle_man": [
        "python.library.functions#chr",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(chr(i) for i in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list `L` of ascii values to a string. This requires utilizing the join() function to concatenate the ascii values into a string."
}
{
    "question_id": "9758959-69",
    "nl": "sort list `['10', '3', '2']` in ascending order based on the integer value of its elements",
    "cmd": "sorted(['10', '3', '2'], key=int)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted([VAR_STR], key=int)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `['10', '3', '2']` in ascending order based on the integer value of its elements. This requires utilizing the sort() function with a lambda function to sort the list based on the integer value of each element."
}
{
    "question_id": "41894454-52",
    "nl": "custom sort an alphanumeric list `l`",
    "cmd": "sorted(l, key=lambda x: x.replace('0', 'Z'))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: x.replace('0', 'Z'))",
    "cmd_name": "conala",
    "gpt35_response": " Custom sort an alphanumeric list `l`. This requires utilizing the sort() function with a lambda function to sort the list based on specified criteria."
}
{
    "question_id": "13656519-84",
    "nl": "strip a string `line` of all carriage returns and newlines",
    "cmd": "line.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.strip()",
    "cmd_name": "conala",
    "gpt35_response": " Strip a string `line` of all carriage returns and newlines. This requires utilizing the rstrip() function to remove newline and carriage return characters from the end of the string."
}
{
    "question_id": "11837979-28",
    "nl": "remove white space padding around a saved image `test.png` in matplotlib",
    "cmd": "plt.savefig('test.png', bbox_inches='tight')",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure.savefig"
    ],
    "canonical_cmd": "plt.savefig('VAR_STR', bbox_inches='tight')",
    "cmd_name": "conala",
    "gpt35_response": " Remove white space padding around a saved image `test.png` in matplotlib. This requires utilizing the appropriate matplotlib function to remove the whitespace padding from the image. "
}
{
    "question_id": "7372592-56",
    "nl": "execute a jar file 'Blender.jar' using subprocess",
    "cmd": "subprocess.call(['java', '-jar', 'Blender.jar'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['java', '-jar', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Execute a jar file 'Blender.jar' using subprocess. This requires utilizing the subprocess module to execute the jar file with a specified command line argument."
}
{
    "question_id": "23887592-74",
    "nl": "Find next sibling element in Python Selenium?",
    "cmd": "driver.find_element_by_xpath(\"\/\/p[@id, 'one']\/following-sibling::p\")",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_xpath(\"\/\/p[@id, 'one']\/following-sibling::p\")",
    "cmd_name": "conala",
    "gpt35_response": " Find next sibling element in Python Selenium? This requires utilizing the find_element_by_xpath() function with the XPath selector to locate the desired sibling element."
}
{
    "question_id": "867866-86",
    "nl": "convert Unicode codepoint to utf8 hex",
    "cmd": "chr(int('fd9b', 16)).encode('utf-8')",
    "oracle_man": [
        "python.library.functions#chr",
        "python.library.functions#int",
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "chr(int('fd9b', 16)).encode('utf-8')",
    "cmd_name": "conala",
    "gpt35_response": " Convert Unicode codepoint to utf8 hex. This requires utilizing the appropriate encode() function to convert the codepoint to utf8 hex format."
}
{
    "question_id": "13480031-57",
    "nl": "zip keys with individual values in lists `k` and `v`",
    "cmd": "[dict(zip(k, x)) for x in v]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "[dict(zip(VAR_STR, x)) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Zip keys with individual values in lists `k` and `v`. This requires utilizing the zip() function to pair the corresponding elements from the two lists."
}
{
    "question_id": "32743479-65",
    "nl": "read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`",
    "cmd": "df = pd.read_csv('comma.csv', quotechar=\"'\")",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv"
    ],
    "canonical_cmd": "df = pd.read_csv('VAR_STR', quotechar='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`. This requires specifying the delimiter character as `'` to properly parse the string values within the csv file when using the read_csv() function."
}
{
    "question_id": "18292500-92",
    "nl": "Log message 'test' on the root logger.",
    "cmd": "logging.info('test')",
    "oracle_man": [
        "python.library.logging#logging.info"
    ],
    "canonical_cmd": "logging.info('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Log message 'test' on the root logger. This requires utilizing the appropriate Python logging function with the specified message."
}
{
    "question_id": "5201191-46",
    "nl": "sort list of lists `L` by the second item in each list",
    "cmd": "L.sort(key=operator.itemgetter(1))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.itemgetter(1))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list of lists `L` by the second item in each list. This requires utilizing the sorted() function with a lambda function to sort the list of lists based on the value of the second element in each sublist."
}
{
    "question_id": "35711059-64",
    "nl": "extract dictionary values by key 'Feature3' from data frame `df`",
    "cmd": "feature3 = [d.get('Feature3') for d in df.dic]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.get"
    ],
    "canonical_cmd": "feature3 = [d.get('VAR_STR') for d in VAR_STR.dic]",
    "cmd_name": "conala",
    "gpt35_response": " Extract dictionary values by key 'Feature3' from data frame `df`. This requires utilizing the loc[] function and specifying the desired key value to extract the associated values from the data frame. "
}
{
    "question_id": "2668909-73",
    "nl": "find the real user home directory using python",
    "cmd": "os.path.expanduser('~user')",
    "oracle_man": [
        "python.library.os.path#os.path.expanduser"
    ],
    "canonical_cmd": "os.path.expanduser('~user')",
    "cmd_name": "conala",
    "gpt35_response": " Find the real user home directory using python. This requires utilizing the expanduser() function with the '~' symbol to expand the home directory path."
}
{
    "question_id": "6243460-84",
    "nl": "lambda function that adds two operands",
    "cmd": "lambda x, y: x + y",
    "oracle_man": [],
    "canonical_cmd": "lambda x, y: x + y",
    "cmd_name": "conala",
    "gpt35_response": " Lambda function that adds two operands. This requires defining a lambda function with the appropriate steps to add the two operands."
}
{
    "question_id": "14661701-41",
    "nl": "drop rows whose index value in list `[1, 3]` in dataframe `df`",
    "cmd": "df.drop(df.index[[1, 3]], inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.drop(VAR_STR.index[[VAR_STR]], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Drop rows whose index value in list `[1, 3]` in dataframe `df`. This requires utilizing the drop() function with the specified list of index values to drop the corresponding rows from the data frame."
}
{
    "question_id": "3308102-72",
    "nl": "extract the 2nd elements from a list of tuples",
    "cmd": "[x[1] for x in elements]",
    "oracle_man": [],
    "canonical_cmd": "[x[1] for x in elements]",
    "cmd_name": "conala",
    "gpt35_response": " Extract the 2nd elements from a list of tuples. This requires utilizing a list comprehension to iterate through the list of tuples and extract the second element from each tuple."
}
{
    "question_id": "5775719-36",
    "nl": "find the first letter of each element in string `input`",
    "cmd": "output = ''.join(item[0].upper() for item in input.split())",
    "oracle_man": [
        "python.library.stdtypes#str.upper",
        "python.library.stdtypes#str.join",
        "python.library.re#re.split"
    ],
    "canonical_cmd": "output = ''.join(item[0].upper() for item in VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Find the first letter of each element in string `input`. This requires utilizing a for loop to iterate through each character in the string and extracting the first letter of each word."
}
{
    "question_id": "12527959-62",
    "nl": "replace percent-encoded code in request `f` to their single-character equivalent",
    "cmd": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote",
        "python.library.urllib.parse#urllib.parse.urlencode",
        "python.library.urllib.request#urllib.request.urlopen"
    ],
    "canonical_cmd": "VAR_STR = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.\n    urlencode(params)))",
    "cmd_name": "conala",
    "gpt35_response": "- Replace percent-encoded code in request `f` to their single-character equivalent. This requires parsing the string `f` and replacing each percent-encoded code with its corresponding single-character equivalent."
}
{
    "question_id": "19205916-14",
    "nl": "call base class's __init__ method from the child class `ChildClass`",
    "cmd": "super(ChildClass, self).__init__(*args, **kwargs)",
    "oracle_man": [
        "python.library.functions#super",
        "python.library.logging#logging.Handler.__init__"
    ],
    "canonical_cmd": "super(VAR_STR, self).__init__(*args, **kwargs)",
    "cmd_name": "conala",
    "gpt35_response": " Call base class's `__init__` method from the child class `ChildClass`. This requires defining the child class `ChildClass` and calling the base class's `__init__` method within it to initialize the inherited attributes."
}
{
    "question_id": "8199398-65",
    "nl": "extract only alphabetic characters from a string `your string`",
    "cmd": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))",
    "oracle_man": [
        "python.library.re#re.split",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Extract only alphabetic characters from a string `your string`. This requires iterating through each character in `your string` and selecting only the alphabetic characters."
}
{
    "question_id": "8199398-34",
    "nl": "Extract only characters from a string as a list",
    "cmd": "re.split('[^a-zA-Z]*', 'your string')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('[^a-zA-Z]*', 'your string')",
    "cmd_name": "conala",
    "gpt35_response": " Extract only characters from a string as a list. This requires iterating through each character in the string and appending it to a list."
}
{
    "question_id": "1386811-62",
    "nl": "Convert binary string to list of integers using Python",
    "cmd": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#int"
    ],
    "canonical_cmd": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]",
    "cmd_name": "conala",
    "gpt35_response": " Convert binary string to list of integers using Python. This requires parsing the binary string and converting each binary value to its corresponding integer value, and storing these values in a list."
}
{
    "question_id": "34543513-59",
    "nl": "find maximum with lookahead = 4 in a list `arr`",
    "cmd": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#abs",
        "python.library.functions#max"
    ],
    "canonical_cmd": "[max(abs(x) for x in VAR_STR[i:i + 4]) for i in range(0, len(VAR_STR), 4)]",
    "cmd_name": "conala",
    "gpt35_response": " Find maximum with lookahead = 4 in a list `arr`. This requires iterating through the list and comparing each element to the next 4 elements to find the maximum value with a lookahead of 4."
}
{
    "question_id": "3151146-41",
    "nl": "replace single quote character in string \"didn't\" with empty string ''",
    "cmd": "\"\"\"didn't\"\"\".replace(\"'\", '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace(\"'\", 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace single quote character in string \"didn't\" with empty string ''. This requires iterating through the string and replacing any occurrences of the single quote character with an empty string."
}
{
    "question_id": "12829889-23",
    "nl": "Find a max value of the key `count` in a nested dictionary `d`",
    "cmd": "max(d, key=lambda x: d[x]['count'])",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(VAR_STR, key=lambda x: VAR_STR[x]['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Find a max value of the key `count` in a nested dictionary `d`. This requires iterating over the nested dictionary and comparing the value associated with the key `count` for each dictionary to find the maximum value."
}
{
    "question_id": "329886-13",
    "nl": "Get a list of tuples with multiple iterators using list comprehension",
    "cmd": "[(i, j) for i in range(1, 3) for j in range(1, 5)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[(i, j) for i in range(1, 3) for j in range(1, 5)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of tuples with multiple iterators using list comprehension. This requires defining multiple iterators and using list comprehension to generate a list of tuples containing elements from each iterator."
}
{
    "question_id": "2497027-35",
    "nl": "read a binary file 'test\/test.pdf'",
    "cmd": "f = open('test\/test.pdf', 'rb')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "f = open('VAR_STR', 'rb')",
    "cmd_name": "conala",
    "gpt35_response": " Read a binary file 'test\/test.pdf'. This requires opening the binary file 'test\/test.pdf' and reading its contents into a variable."
}
{
    "question_id": "30945784-37",
    "nl": "remove all characters from string `stri` upto character 'I'",
    "cmd": "re.sub('.*I', 'I', stri)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('.*I', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove all characters from string `stri` upto character 'I'. This requires iterating through the string `stri` and removing each character up to and including the character 'I'."
}
{
    "question_id": "8243188-64",
    "nl": "append string `foo` to list `list`",
    "cmd": "list.append('foo')",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.append('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Append string `foo` to list `list`. This requires appending the string `foo` to the end of the list `list`."
}
{
    "question_id": "8243188-74",
    "nl": "insert string `foo` at position `0` of list `list`",
    "cmd": "list.insert(0, 'foo')",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "VAR_STR.insert(0, 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Insert string `foo` at position `0` of list `list`. This requires inserting the string `foo` at the first position in the list."
}
{
    "question_id": "12579061-75",
    "nl": "get the text of multiple elements found by xpath \"\/\/*[@type='submit']\/@value\"",
    "cmd": "browser.find_elements_by_xpath(\"\/\/*[@type='submit']\/@value\").text",
    "oracle_man": [],
    "canonical_cmd": "browser.find_elements_by_xpath('VAR_STR').text",
    "cmd_name": "conala",
    "gpt35_response": " Get the text of multiple elements found by xpath \"\/\/*[@type='submit']\/@value\". This requires using xpath to select all elements with `type` attribute equal to `submit` and then extracting the `value` attribute of each element."
}
{
    "question_id": "12579061-34",
    "nl": "find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium",
    "cmd": "browser.find_elements_by_xpath(\"\/\/*[@type='submit']\").get_attribute('value')",
    "oracle_man": [
        "python.library.test#test.support.get_attribute"
    ],
    "canonical_cmd": "browser.find_elements_by_xpath(\"\/\/*[@type='submit']\").get_attribute('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Find all the values in attribute `value` for the tags whose `type` attribute is `submit` in Selenium. This requires using Selenium to find all tags with `type` attribute equal to `submit` and then extracting the `value` attribute of each tag."
}
{
    "question_id": "3945856-34",
    "nl": "converting string '(1,2,3,4)' to a tuple",
    "cmd": "ast.literal_eval('(1,2,3,4)')",
    "oracle_man": [
        "python.library.ast#ast.literal_eval"
    ],
    "canonical_cmd": "ast.literal_eval('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Converting string '(1,2,3,4)' to a tuple. This requires parsing the string and converting each element to its corresponding type, and then constructing a tuple from these values."
}
{
    "question_id": "17098654-11",
    "nl": "store data frame `df` to file `file_name` using pandas, python",
    "cmd": "df.to_pickle(file_name)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.to_pickle"
    ],
    "canonical_cmd": "VAR_STR.to_pickle(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Store data frame `df` to file `file_name` using pandas, python. This requires using pandas library to save the data frame `df` to a file named `file_name`."
}
{
    "question_id": "25148611-71",
    "nl": "extract all the values of a specific key named 'values' from a list of dictionaries",
    "cmd": "results = [item['value'] for item in test_data]",
    "oracle_man": [],
    "canonical_cmd": "results = [item['value'] for item in test_data]",
    "cmd_name": "conala",
    "gpt35_response": " Extract all the values of a specific key named 'values' from a list of dictionaries. This requires iterating through each dictionary in the list and appending the value associated with the key 'values' to a list."
}
{
    "question_id": "2721782-74",
    "nl": "convert a date string `s` to a datetime object",
    "cmd": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime(VAR_STR, '%Y-%m-%dT%H:%M:%SZ')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a date string `s` to a datetime object. This requires parsing the date string `s` and converting it to a datetime object."
}
{
    "question_id": "40852575-70",
    "nl": "Get only first element in each of the innermost of the multidimensional list `listD`",
    "cmd": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[[[x[0]] for x in VAR_STR[i]] for i in range(len(VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": " Get only first element in each of the innermost of the multidimensional list `listD`. This requires iterating through each element in the multidimensional list and selecting only the first element of the innermost lists."
}
{
    "question_id": "20048987-61",
    "nl": "print a floating point number 2.345e-67 without any truncation",
    "cmd": "print('{:.100f}'.format(2.345e-67))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('{:.100f}'.format(2.345e-67))",
    "cmd_name": "conala",
    "gpt35_response": "- Print a floating point number 2.345e-67 without any truncation. This requires using the appropriate method to print the number 2.345e-67 without truncation."
}
{
    "question_id": "4574509-95",
    "nl": "remove duplicate characters from string 'ffffffbbbbbbbqqq'",
    "cmd": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('([a-z])\\\\1+', '\\\\1', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove duplicate characters from string 'ffffffbbbbbbbqqq'. This requires using a method to identify and remove the duplicate characters from the string 'ffffffbbbbbbbqqq'."
}
{
    "question_id": "1059559-41",
    "nl": "split string \"a;bcd,ef g\" on delimiters ';' and ','",
    "cmd": "\"\"\"a;bcd,ef g\"\"\".replace(';', ' ').replace(',', ' ').split()",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace('VAR_STR', ' ').replace('VAR_STR', ' ').split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string \"a;bcd,ef g\" on delimiters ';' and ','. This requires using the appropriate method to split the string \"a;bcd,ef g\" into separate strings at the delimiters ';' and ','."
}
{
    "question_id": "17424182-56",
    "nl": "extract all rows from dataframe `data` where the value of column 'Value' is True",
    "cmd": "data[data['Value'] == True]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[VAR_STR['VAR_STR'] == True]",
    "cmd_name": "conala",
    "gpt35_response": " Extract all rows from dataframe `data` where the value of column 'Value' is True. This requires using a method to identify and extract all rows from the dataframe `data` where the column 'Value' has a value of True."
}
{
    "question_id": "9505526-67",
    "nl": "split string `s` into strings of repeating elements",
    "cmd": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', VAR_STR)])",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` into strings of repeating elements. This requires using a method to split the string `s` into separate strings consisting of repeating elements."
}
{
    "question_id": "761804-99",
    "nl": "trim string \" Hello \"",
    "cmd": "' Hello '.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "\"\"\" Hello \"\"\".strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trim string \"Hello\". This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string \"Hello\"."
}
{
    "question_id": "761804-12",
    "nl": "trim string `myString `",
    "cmd": "myString.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trim string `myString`. This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string `myString`."
}
{
    "question_id": "761804-69",
    "nl": "Trimming a string \" Hello \"",
    "cmd": "' Hello '.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "\"\"\" Hello \"\"\".strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trimming a string \"Hello\". This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string \"Hello\"."
}
{
    "question_id": "761804-7",
    "nl": "Trimming a string \" Hello\"",
    "cmd": "' Hello'.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "\"\"\" Hello\"\"\".strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trimming a string \"Hello\". This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string \"Hello\"."
}
{
    "question_id": "761804-31",
    "nl": "Trimming a string \"Bob has a cat\"",
    "cmd": "'Bob has a cat'.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trimming a string \"Bob has a cat\". This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string \"Bob has a cat\"."
}
{
    "question_id": "761804-4",
    "nl": "Trimming a string \"          Hello        \"",
    "cmd": "'          Hello        '.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "\"\"\"          Hello        \"\"\".strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trimming a string \"Hello\" with leading and trailing whitespace. This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string \"          Hello        \"."
}
{
    "question_id": "761804-26",
    "nl": "Trimming a string `str`",
    "cmd": "str.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.strip()",
    "cmd_name": "conala",
    "gpt35_response": " Trimming a string `str`. This requires using the appropriate method to trim any whitespace from both the beginning and ending of the string `str`."
}
{
    "question_id": "761804-11",
    "nl": "Trimming \"\\n\" from string `myString`",
    "cmd": "myString.strip('\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.strip('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Trimming \"\\n\" from string `myString`. This requires using the appropriate method to trim any instances of \"\\n\" from the string `myString`."
}
{
    "question_id": "761804-12",
    "nl": "left trimming \"\\n\\r\" from string `myString`",
    "cmd": "myString.lstrip('\\n\\r')",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.lstrip('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Left trimming \"\\n\\r\" from string `myString`. This requires using the appropriate method to trim any instances of \"\\n\\r\" from the left-hand side of the string `myString`."
}
{
    "question_id": "761804-51",
    "nl": "right trimming \"\\n\\t\" from string `myString`",
    "cmd": "myString.rstrip('\\n\\t')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "VAR_STR.rstrip('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Right trimming \"\\n\\t\" from string `myString`. This requires using the appropriate method to trim any instances of \"\\n\\t\" from the right-hand side of the string `myString`."
}
{
    "question_id": "761804-50",
    "nl": "Trimming a string \"  Hello\\n\" by space",
    "cmd": "'  Hello\\n'.strip(' ')",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "\"\"\"  Hello\n\"\"\".strip(' ')",
    "cmd_name": "conala",
    "gpt35_response": " Trimming a string \"Hello\\n\" by space. This requires using the appropriate method to trim any whitespace and newline characters from both the beginning and ending of the string \"  Hello\\n\"."
}
{
    "question_id": "3518778-98",
    "nl": "read csv file 'my_file.csv' into numpy array",
    "cmd": "my_data = genfromtxt('my_file.csv', delimiter=',')",
    "oracle_man": [
        "numpy.reference.generated.numpy.genfromtxt"
    ],
    "canonical_cmd": "my_data = genfromtxt('VAR_STR', delimiter=',')",
    "cmd_name": "conala",
    "gpt35_response": " Read csv file 'my_file.csv' into numpy array. This requires using the appropriate method to read the csv file 'my_file.csv' into a numpy array."
}
{
    "question_id": "3518778-46",
    "nl": "read csv file 'myfile.csv' into array",
    "cmd": "df = pd.read_csv('myfile.csv', sep=',', header=None)",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv"
    ],
    "canonical_cmd": "df = pd.read_csv('VAR_STR', sep=',', header=None)",
    "cmd_name": "conala",
    "gpt35_response": " Read csv file 'myfile.csv' into array. This requires using the appropriate method to read the csv file 'myfile.csv' into an array."
}
{
    "question_id": "3518778-91",
    "nl": "read csv file 'myfile.csv' into array",
    "cmd": "np.genfromtxt('myfile.csv', delimiter=',')",
    "oracle_man": [
        "numpy.reference.generated.numpy.genfromtxt"
    ],
    "canonical_cmd": "np.genfromtxt('VAR_STR', delimiter=',')",
    "cmd_name": "conala",
    "gpt35_response": " Read csv file 'myfile.csv' into array. This requires using the appropriate method to read the csv file 'myfile.csv' into an array."
}
{
    "question_id": "3518778-42",
    "nl": "read csv file 'myfile.csv' into array",
    "cmd": "np.genfromtxt('myfile.csv', delimiter=',', dtype=None)",
    "oracle_man": [
        "numpy.reference.generated.numpy.genfromtxt"
    ],
    "canonical_cmd": "np.genfromtxt('VAR_STR', delimiter=',', dtype=None)",
    "cmd_name": "conala",
    "gpt35_response": " Read csv file 'myfile.csv' into array. This requires using the appropriate method to read the csv file 'myfile.csv' into an array."
}
{
    "question_id": "22702760-34",
    "nl": "multiply column 'A' and column 'B' by column 'C' in datafram `df`",
    "cmd": "df[['A', 'B']].multiply(df['C'], axis='index')",
    "oracle_man": [
        "numpy.reference.generated.numpy.multiply"
    ],
    "canonical_cmd": "VAR_STR[['VAR_STR', 'VAR_STR']].multiply(VAR_STR['VAR_STR'], axis='index')",
    "cmd_name": "conala",
    "gpt35_response": "- Multiply column 'A' and column 'B' by column 'C' in datafram `df`. This requires accessing column 'A', column 'B', and column 'C' in dataframe `df`, multiplying the values in column 'A' and column 'B' by the values in column 'C', and storing the result in new columns in `df`."
}
{
    "question_id": "10525301-35",
    "nl": "Normalize string `str` from 'cp1252' code to 'utf-8' code",
    "cmd": "print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "pandas.reference.api.pandas.series.str.decode"
    ],
    "canonical_cmd": "print(VAR_STR.encode('VAR_STR').decode('VAR_STR').encode('VAR_STR').decode('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Normalize string `str` from 'cp1252' code to 'utf-8' code. This requires converting the string `str` from 'cp1252' encoding to 'utf-8' encoding."
}
{
    "question_id": "3294889-83",
    "nl": "Iterating over a dictionary `d` using for loops",
    "cmd": "for (key, value) in d.items():\n    pass",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for key, value in VAR_STR.items():\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating over a dictionary `d` using for loops. This requires using a for loop to iterate over the items in the dictionary `d`."
}
{
    "question_id": "3294889-61",
    "nl": "Iterating over a dictionary `d` using for loops",
    "cmd": "for (key, value) in list(d.items()):\n    pass",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for key, value in list(VAR_STR.items()):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating over a dictionary `d` using for loops. This requires using a for loop to iterate over the items in the dictionary `d`."
}
{
    "question_id": "3294889-5",
    "nl": "Iterating key and items over dictionary `d`",
    "cmd": "for (letter, number) in list(d.items()):\n    pass",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for letter, number in list(VAR_STR.items()):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating key and items over dictionary `d`. This requires using a for loop to iterate over both the keys and items of the dictionary `d`."
}
{
    "question_id": "3294889-67",
    "nl": "Iterating key and items over dictionary `d`",
    "cmd": "for (k, v) in list(d.items()):\n    pass",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for k, v in list(VAR_STR.items()):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating key and items over dictionary `d`. This requires using a for loop to iterate over both the keys and items of the dictionary `d`."
}
{
    "question_id": "3294889-59",
    "nl": "get keys and items of dictionary `d`",
    "cmd": "list(d.items())",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "list(VAR_STR.items())",
    "cmd_name": "conala",
    "gpt35_response": " Get keys and items of dictionary `d`. This requires accessing the keys and items of the dictionary `d`."
}
{
    "question_id": "3294889-5",
    "nl": "get keys and items of dictionary `d` as a list",
    "cmd": "list(d.items())",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "list(VAR_STR.items())",
    "cmd_name": "conala",
    "gpt35_response": " Get keys and items of dictionary `d` as a list. This requires accessing the keys and items of the dictionary `d` and storing them as a list."
}
{
    "question_id": "3294889-54",
    "nl": "Iterating key and items over dictionary `d`",
    "cmd": "for (k, v) in list(d.items()):\n    pass",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for k, v in list(VAR_STR.items()):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating key and items over dictionary `d`. This requires using a for loop to iterate over both the keys and items of the dictionary `d`."
}
{
    "question_id": "3294889-3",
    "nl": "Iterating key and items over dictionary `d`",
    "cmd": "for (letter, number) in list(d.items()):\n    pass",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for letter, number in list(VAR_STR.items()):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating key and items over dictionary `d`. This requires using a for loop to iterate over both the keys and items of the dictionary `d`."
}
{
    "question_id": "3294889-25",
    "nl": "Iterating key and items over dictionary `d`",
    "cmd": "for (letter, number) in list(d.items()):\n    pass",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "for letter, number in list(VAR_STR.items()):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Iterating key and items over dictionary `d`. This requires using a for loop to iterate over both the keys and items of the dictionary `d`."
}
{
    "question_id": "7356042-14",
    "nl": "Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values",
    "cmd": "X = numpy.loadtxt('somefile.csv', delimiter=',')",
    "oracle_man": [
        "numpy.reference.generated.numpy.loadtxt"
    ],
    "canonical_cmd": "X = numpy.loadtxt('VAR_STR', delimiter=',')",
    "cmd_name": "conala",
    "gpt35_response": " Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values. This requires reading the data from 'somefile.csv', converting it to a 2D numpy array, and ensuring that each row in the file has the same number of values."
}
{
    "question_id": "1946181-83",
    "nl": "control the keyboard and mouse with dogtail in linux",
    "cmd": "dogtail.rawinput.click(100, 100)",
    "oracle_man": [],
    "canonical_cmd": "dogtail.rawinput.click(100, 100)",
    "cmd_name": "conala",
    "gpt35_response": " Control the keyboard and mouse with dogtail in linux. This requires using the dogtail library in Linux to simulate keyboard and mouse actions."
}
{
    "question_id": "2040038-20",
    "nl": "sort datetime objects `birthdays` by `month` and `day`",
    "cmd": "birthdays.sort(key=lambda d: (d.month, d.day))",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda d: (d.VAR_STR, d.VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Sort datetime objects `birthdays` by `month` and `day`. This requires accessing the `month` and `day` attributes of the datetime objects in `birthdays`, sorting the datetime objects by these attributes, and storing the sorted datetime objects in a new list or variable."
}
{
    "question_id": "275018-37",
    "nl": "remove trailing newline in string \"test string\\n\"",
    "cmd": "'test string\\n'.rstrip()",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".rstrip()",
    "cmd_name": "conala",
    "gpt35_response": " Remove trailing newline in string \"test string\\n\". This requires removing the newline character '\\n' at the end of the string \"test string\\n\"."
}
{
    "question_id": "275018-63",
    "nl": "remove trailing newline in string 'test string \\n\\n'",
    "cmd": "'test string \\n\\n'.rstrip('\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".rstrip('\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Remove trailing newline in string 'test string \\n\\n'. This requires removing the newline characters '\\n' at the end of the string 'test string \\n\\n'."
}
{
    "question_id": "275018-98",
    "nl": "remove newline in string `s`",
    "cmd": "s.strip()",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR.strip()",
    "cmd_name": "conala",
    "gpt35_response": " Remove newline in string `s`. This requires removing any newline characters '\\n' in the string `s`."
}
{
    "question_id": "275018-8",
    "nl": "remove newline in string `s` on the right side",
    "cmd": "s.rstrip()",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "VAR_STR.rstrip()",
    "cmd_name": "conala",
    "gpt35_response": " Remove newline in string `s` on the right side. This requires removing any newline characters '\\n' on the right side of the string `s`."
}
{
    "question_id": "275018-64",
    "nl": "remove newline in string `s` on the left side",
    "cmd": "s.lstrip()",
    "oracle_man": [
        "python.library.stdtypes#str.lstrip"
    ],
    "canonical_cmd": "VAR_STR.lstrip()",
    "cmd_name": "conala",
    "gpt35_response": " Remove newline in string `s` on the left side. This requires removing any newline characters '\\n' on the left side of the string `s`."
}
{
    "question_id": "275018-9",
    "nl": "remove newline in string 'Mac EOL\\r'",
    "cmd": "'Mac EOL\\r'.rstrip('\\r\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".rstrip('\\r\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Remove newline in string 'Mac EOL\\r'. This requires removing the newline character '\\r' at the end of the string 'Mac EOL\\r'."
}
{
    "question_id": "275018-25",
    "nl": "remove newline in string 'Windows EOL\\r\\n' on the right side",
    "cmd": "'Windows EOL\\r\\n'.rstrip('\\r\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".rstrip('\\r\\n')",
    "cmd_name": "conala",
    "gpt35_response": "- Remove a newline on the right side of string 'Windows EOL\\r\\n'. This requires removing the newline character `\\n` at the end of the string 'Windows EOL\\r\\n'."
}
{
    "question_id": "275018-43",
    "nl": "remove newline in string 'Unix EOL\\n' on the right side",
    "cmd": "'Unix EOL\\n'.rstrip('\\r\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".rstrip('\\r\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Remove a newline on the right side of string 'Unix EOL\\n'. This requires removing the newline character `\\n` at the end of the string 'Unix EOL\\n'."
}
{
    "question_id": "275018-58",
    "nl": "remove newline in string \"Hello\\n\\n\\n\" on the right side",
    "cmd": "'Hello\\n\\n\\n'.rstrip('\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".rstrip('\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Remove a newline on the right side of string \"Hello\\n\\n\\n\". This requires removing all newline characters `\\n` at the end of the string \"Hello\\n\\n\\n\"."
}
{
    "question_id": "15530399-12",
    "nl": "split string `text` by the occurrences of regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)'",
    "cmd": "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `text` by the occurrences of regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)'. This requires using the regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)' to find the occurrences where the string should be split."
}
{
    "question_id": "186857-59",
    "nl": "split a string `s` by ';' and convert to a dictionary",
    "cmd": "dict(item.split('=') for item in s.split(';'))",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "dict(item.split('=') for item in VAR_STR.split('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `s` by ';' and convert to a dictionary. This requires splitting the string `s` by ';' to separate the values and keys and then converting them into a dictionary."
}
{
    "question_id": "17117912-75",
    "nl": "create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`",
    "cmd": "[d['Name'] for d in thisismylist]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR['VAR_STR'] for VAR_STR in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`. This requires iterating through each dictionary `d` in the list `thisismylist` and appending the value for the key 'Name' to a new list."
}
{
    "question_id": "17117912-14",
    "nl": "create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`",
    "cmd": "[(d['Name'], d['Age']) for d in thisismylist]",
    "oracle_man": [],
    "canonical_cmd": "[(VAR_STR['VAR_STR'], VAR_STR['VAR_STR']) for VAR_STR in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`. This requires iterating through each dictionary `d` in the list `thisismylist`, extracting the values for the keys 'Name' and 'Age', and then appending them as a tuple to a new list."
}
{
    "question_id": "8650415-85",
    "nl": "Reverse key-value pairs in a dictionary `map`",
    "cmd": "dict((v, k) for k, v in map.items())",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((v, k) for k, v in VAR_STR.items())",
    "cmd_name": "conala",
    "gpt35_response": " Reverse key-value pairs in a dictionary `map`. This requires creating a new dictionary with the reversed key-value pairs from the original dictionary `map`."
}
{
    "question_id": "19153328-63",
    "nl": "assign value in `group` dynamically to class property `attr`",
    "cmd": "setattr(self, attr, group)",
    "oracle_man": [
        "python.library.functions#setattr"
    ],
    "canonical_cmd": "setattr(self, VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Assign value in `group` dynamically to class property `attr`. This requires assigning the value in the variable `group` to the class property `attr`."
}
{
    "question_id": "17627531-50",
    "nl": "sort list of date strings 'd'",
    "cmd": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list of date strings 'd'. This requires sorting the list of date strings 'd' in ascending or descending order, depending on the requirement."
}
{
    "question_id": "6159313-36",
    "nl": "test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`",
    "cmd": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.issubset"
    ],
    "canonical_cmd": "set(['VAR_STR', 'VAR_STR']).issubset(['VAR_STR', 'VAR_STR', 'foo', 'bar'])",
    "cmd_name": "conala",
    "gpt35_response": " Test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`. This requires checking if either string `a` or `b` is present in the set of strings `['b', 'a', 'foo', 'bar']`."
}
{
    "question_id": "6159313-37",
    "nl": "Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`",
    "cmd": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(x in [VAR_STR] for x in [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`. This requires checking if all values in the list `['a', 'b']` are present in the list `['b', 'a', 'foo', 'bar']`."
}
{
    "question_id": "17306755-9",
    "nl": "format float `3.5e+20`  to `$3.5 \\\\times 10^{20}$` and set as title of matplotlib plot `ax`",
    "cmd": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))",
    "oracle_man": [
        "matplotlib.legend_api#matplotlib.legend.Legend.set_title"
    ],
    "canonical_cmd": "VAR_STR.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))",
    "cmd_name": "conala",
    "gpt35_response": " Format float `3.5e+20`  to `$3.5 \\\\times 10^{20}$` and set as title of matplotlib plot `ax`. This requires formatting the float as `$3.5 \\\\times 10^{20}$` and setting it as the title of the matplotlib plot `ax`."
}
{
    "question_id": "24659239-4",
    "nl": "set text color as `red` and background color as `#A3C1DA` in qpushbutton",
    "cmd": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')",
    "oracle_man": [],
    "canonical_cmd": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')",
    "cmd_name": "conala",
    "gpt35_response": " Set text color as `red` and background color as `#A3C1DA` in qpushbutton. This requires setting the text color of the qpushbutton as `red` and the background color as `#A3C1DA`."
}
{
    "question_id": "12201577-67",
    "nl": "convert an rgb image 'messi5.jpg' into grayscale `img`",
    "cmd": "img = cv2.imread('messi5.jpg', 0)",
    "oracle_man": [
        "matplotlib.image_api#matplotlib.image.imread"
    ],
    "canonical_cmd": "VAR_STR = cv2.imread('VAR_STR', 0)",
    "cmd_name": "conala",
    "gpt35_response": " Convert an rgb image 'messi5.jpg' into grayscale `img`. This requires converting the color image 'messi5.jpg' into a grayscale image `img`."
}
{
    "question_id": "4411811-39",
    "nl": "create list `levels` containing 3 empty dictionaries",
    "cmd": "levels = [{}, {}, {}]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [{}, {}, {}]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `levels` containing 3 empty dictionaries. This requires creating 3 empty dictionaries and appending them to the list `levels`."
}
{
    "question_id": "1713594-63",
    "nl": "parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'",
    "cmd": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'. This requires parsing the string '01-Jan-1995' into a datetime object using the format '%d-%b-%Y'."
}
{
    "question_id": "7768859-33",
    "nl": "Convert integer elements in list `wordids` to strings",
    "cmd": "[str(wi) for wi in wordids]",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "[str(wi) for wi in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert integer elements in list `wordids` to strings. This requires converting all integer elements in the list `wordids` into string type."
}
{
    "question_id": "16099694-63",
    "nl": "get a list `cleaned` that contains all non-empty elements in list `your_list`",
    "cmd": "cleaned = [x for x in your_list if x]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x for x in VAR_STR if x]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list `cleaned` that contains all non-empty elements in list `your_list`. This requires iterating through all elements in the list `your_list` and appending all non-empty elements to a new list `cleaned`."
}
{
    "question_id": "17038426-88",
    "nl": "split a string `yas` based on tab '\\t'",
    "cmd": "re.split('\\\\t+', yas.rstrip('\\t'))",
    "oracle_man": [
        "python.library.re#re.split",
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "re.split('\\\\t+', VAR_STR.rstrip('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `yas` based on tab '\\t'. This requires splitting the string `yas` based on the tab character '\\t'."
}
{
    "question_id": "34197047-67",
    "nl": "sorting the lists in list of lists `data`",
    "cmd": "[sorted(item) for item in data]",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "[sorted(item) for item in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "- Sort the lists in list of lists `data`. This requires iterating through `data`, sorting each list in `data` using Python's built-in `sort()` method, and then returning the sorted `data`."
}
{
    "question_id": "22741068-41",
    "nl": "remove identical items from list `my_list` and sort it alphabetically",
    "cmd": "sorted(set(my_list))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "sorted(set(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Remove identical items from list `my_list` and sort it alphabetically. This requires creating a new list that contains only the unique elements from `my_list`, sorting that list alphabetically using Python's built-in `sorted()` function, and then returning the sorted list."
}
{
    "question_id": "35017035-30",
    "nl": "convert a list of lists `a` into list of tuples of appropriate elements form nested lists",
    "cmd": "zip(*a)",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of lists `a` into list of tuples of appropriate elements form nested lists. This requires iterating through each list in `a`, creating a tuple from its elements, appending that tuple to a new list, and then returning the new list of tuples."
}
{
    "question_id": "7595148-31",
    "nl": "converting hex string `s` to its integer representations",
    "cmd": "[ord(c) for c in s.decode('hex')]",
    "oracle_man": [
        "python.library.functions#ord",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "[ord(c) for c in VAR_STR.decode('hex')]",
    "cmd_name": "conala",
    "gpt35_response": " Convert hex string `s` to its integer representations. This requires using Python's built-in `int()` function to convert `s` from hexadecimal to an integer."
}
{
    "question_id": "41386443-67",
    "nl": "create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`",
    "cmd": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv"
    ],
    "canonical_cmd": "VAR_STR = pd.read_csv('VAR_STR', sep='VAR_STR', names=['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`. This requires using Pandas `read_csv()` function to read the txt file `filename.txt` with delimiter `;` and the column `Region Name`, and then returning the resulting data frame `df`."
}
{
    "question_id": "14657241-69",
    "nl": "get a list of all the duplicate items in dataframe `df` using pandas",
    "cmd": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.concat",
        "python.library.functions#len"
    ],
    "canonical_cmd": "pd.concat(g for _, g in VAR_STR.groupby('ID') if len(g) > 1)",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of all the duplicate items in dataframe `df` using pandas. This requires using Pandas `duplicated()` method on `df` and filter out unique values, and then returning the resulting duplicate list."
}
{
    "question_id": "930865-13",
    "nl": "sort objects in model `Profile` based on Theirs `reputation` attribute",
    "cmd": "sorted(Profile.objects.all(), key=lambda p: p.reputation)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#all"
    ],
    "canonical_cmd": "sorted(VAR_STR.objects.all(), key=lambda p: p.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sort objects in model `Profile` based on their `reputation` attribute. This requires sorting `Profile` objects by their associated `reputation` attribute using Python's built-in `sorted()` function with a custom key function, and then returning the sorted `Profile` objects."
}
{
    "question_id": "20585920-51",
    "nl": "for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key",
    "cmd": "a.setdefault('somekey', []).append('bob')",
    "oracle_man": [
        "python.library.stdtypes#dict.setdefault",
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.setdefault('VAR_STR', []).append('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " For a dictionary `a`, set default value for key `somekey` as list and append value `bob` in that key. This requires using Python's built-in `setdefault()` method on dictionary `a` with the key `somekey`, setting its default value to an empty list, and then appending the string value `\"bob\"` to the list associated with that key."
}
{
    "question_id": "3984539-10",
    "nl": "replace white spaces in string '  a\\n b\\n c\\nd  e' with empty string ''",
    "cmd": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(?m)^[^\\\\S\\\\n]+', 'VAR_STR', '  a\\n b\\n c\\nd  e')",
    "cmd_name": "conala",
    "gpt35_response": " Replace white spaces in string ' a\\n b\\n c\\nd e' with empty string ''. This requires using Python's built-in `replace()` method to replace all occurrences of white spaces in the given string with an empty string, and then returning the modified string."
}
{
    "question_id": "3984539-99",
    "nl": "remove white spaces from all the lines using a regular expression in string 'a\\n b\\n c'",
    "cmd": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(?m)^\\\\s+', '', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove white spaces from all the lines using a regular expression in string 'a\\n b\\n c'. This requires using Python's built-in `re` (Regular Expression) module's `sub()` function to replace all white spaces in each line of the given string with an empty string, and then returning the modified string. "
}
{
    "question_id": "17141558-7",
    "nl": "sort dataframe `df` based on column 'b' in ascending and column 'c' in descending",
    "cmd": "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.sort_values"
    ],
    "canonical_cmd": "VAR_STR.sort_values(['VAR_STR', 'VAR_STR'], ascending=[True, False], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort dataframe `df` based on column 'b' in ascending and column 'c' in descending. This requires using Pandas `sort_values()` method on `df` with column `b` in ascending and column `c` in descending."
}
{
    "question_id": "17141558-84",
    "nl": "sort dataframe `df` based on column 'a' in ascending and column 'b' in descending",
    "cmd": "df.sort_values(['a', 'b'], ascending=[True, False])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.sort_values"
    ],
    "canonical_cmd": "VAR_STR.sort_values(['VAR_STR', 'VAR_STR'], ascending=[True, False])",
    "cmd_name": "conala",
    "gpt35_response": " Sort dataframe `df` based on column 'a' in ascending and column 'b' in descending. This requires using Pandas `sort_values()` method on `df` with column `a` in ascending and column `b` in descending."
}
{
    "question_id": "17141558-74",
    "nl": "sort a pandas data frame with column `a` in ascending and `b` in descending order",
    "cmd": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "df1.sort(['VAR_STR', 'VAR_STR'], ascending=[True, False], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a pandas data frame with column `a` in ascending and `b` in descending order. This requires using Pandas `sort_values()` method on the data frame with column `a` in ascending order, and then with column `b` in descending order."
}
{
    "question_id": "17141558-89",
    "nl": "sort a pandas data frame by column `a` in ascending, and by column `b` in descending order",
    "cmd": "df.sort(['a', 'b'], ascending=[True, False])",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "df.sort(['VAR_STR', 'VAR_STR'], ascending=[True, False])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a pandas data frame by column `a` in ascending, and by column `b` in descending order. This requires using Pandas `sort_values()` method on the data frame with column `a` in ascending order, and then with column `b` in descending order."
}
{
    "question_id": "1447575-49",
    "nl": "create a symlink directory `D:\\\\testdirLink` for directory `D:\\\\testdir` with unicode support using ctypes library",
    "cmd": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)",
    "oracle_man": [],
    "canonical_cmd": "kdll.CreateSymbolicLinkW('VAR_STR', 'VAR_STR', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Create a symlink directory `D:\\\\testdirLink` for directory `D:\\\\testdir` with unicode support using ctypes library. This requires using Python's built-in `ctypes` library to create a symlink directory `D:\\\\testdirLink` for directory `D:\\\\testdir` with unicode support."
}
{
    "question_id": "861190-38",
    "nl": "Sort a list of dictionaries `mylist` by keys \"weight\" and \"factor\"",
    "cmd": "mylist.sort(key=operator.itemgetter('weight', 'factor'))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.itemgetter('VAR_STR', 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionaries `mylist` by keys \"weight\" and \"factor\". This requires using Python's built-in `sorted()` function to sort the list of dictionaries `mylist` based on the `\"weight\"` and `\"factor\"` keys for each dictionary, and then returning the sorted list of dictionaries."
}
{
    "question_id": "861190-31",
    "nl": "ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'",
    "cmd": "mylist.sort(key=lambda d: (d['weight'], d['factor']))",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda d: (d['VAR_STR'], d['VAR_STR']))",
    "cmd_name": "conala",
    "gpt35_response": " Ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'. This requires using Python's built-in `sorted()` function to sort the list of dictionaries `mylist` based on the `\"weight\"` and `\"factor\"` elements for each dictionary, and then returning the sorted list of dictionaries."
}
{
    "question_id": "8081545-50",
    "nl": "convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists",
    "cmd": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists. This requires iterating through each tuple in the list, using Python's built-in `list()` function to convert each tuple into a list, and then appending the resulting lists to a new list, and then returning the new list of lists."
}
{
    "question_id": "8081545-98",
    "nl": "convert list of tuples to multiple lists in Python",
    "cmd": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of tuples to multiple lists in Python. This requires iterating through each tuple in the list, using Python's built-in `zip()` function to stitch together all the elements in each tuple into a separate list, and then returning the resulting multiple lists."
}
{
    "question_id": "8081545-96",
    "nl": "convert list of tuples to multiple lists in Python",
    "cmd": "zip(*[(1, 2), (3, 4), (5, 6)])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*[(1, 2), (3, 4), (5, 6)])",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of tuples to multiple lists in Python. This requires iterating through each tuple in the list, using Python's built-in `zip()` function to stitch together all the elements in each tuple into a separate list, and then returning the resulting multiple lists."
}
{
    "question_id": "4965159-23",
    "nl": "execute os command `my_cmd`",
    "cmd": "os.system(my_cmd)",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Execute os command `my_cmd`. This requires executing the os command `my_cmd`."
}
{
    "question_id": "4793617-92",
    "nl": "derive the week start for the given week number and year \u20182011, 4, 0\u2019",
    "cmd": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')",
    "cmd_name": "conala",
    "gpt35_response": " Derive the week start for the given week number and year \u20182011, 4, 0\u2019. This requires deriving the week start by using year and week number as input parameters."
}
{
    "question_id": "21350605-24",
    "nl": "python selenium click on button '.button.c_button.s_button'",
    "cmd": "driver.find_element_by_css_selector('.button.c_button.s_button').click()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_css_selector('VAR_STR').click()",
    "cmd_name": "conala",
    "gpt35_response": " Python selenium click on button '.button.c_button.s_button'. This requires finding the button with css class '.button.c_button.s_button' and clicking on it using selenium."
}
{
    "question_id": "21350605-24",
    "nl": "python selenium click on button",
    "cmd": "driver.find_element_by_css_selector('.button .c_button .s_button').click()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_css_selector('.button .c_button .s_button').click()",
    "cmd_name": "conala",
    "gpt35_response": " Python selenium click on button. This requires finding the button element by using its name, id, class or any other selector and clicking on it using selenium."
}
{
    "question_id": "30190459-31",
    "nl": "read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n\/a' as NaN value",
    "cmd": "df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n\/a'])",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv"
    ],
    "canonical_cmd": "VAR_STR = pd.read_csv('VAR_STR', dtype={'VAR_STR': np.float64}, na_values=['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n\/a' as NaN value. This requires reading the CSV file 'my.csv' using `read_csv`, specifying the datatype for the required column(s) as float, and handling the 'n\/a' value as NaN."
}
{
    "question_id": "30190459-15",
    "nl": "convert nan values to \u2018n\/a\u2019 while reading rows from a csv `read_csv` with pandas",
    "cmd": "df = pd.read_csv('my.csv', na_values=['n\/a'])",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv"
    ],
    "canonical_cmd": "df = pd.VAR_STR('my.csv', na_values=['n\/a'])",
    "cmd_name": "conala",
    "gpt35_response": " Convert nan values to \u2018n\/a\u2019 while reading rows from a csv `read_csv` with pandas. This requires converting NaN values to 'n\/a' while reading rows from the CSV file using pandas `read_csv`."
}
{
    "question_id": "13076560-88",
    "nl": "get indexes of all true boolean values from a list `bool_list`",
    "cmd": "[i for i, elem in enumerate(bool_list, 1) if elem]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, elem in enumerate(VAR_STR, 1) if elem]",
    "cmd_name": "conala",
    "gpt35_response": " Get indexes of all true boolean values from a list `bool_list`. This requires finding the indexes of all elements that have a boolean value of True in `bool_list`."
}
{
    "question_id": "3159155-97",
    "nl": "get a list `no_integers` of all the items in list `mylist` that are not of type `int`",
    "cmd": "no_integers = [x for x in mylist if not isinstance(x, int)]",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "VAR_STR = [x for x in VAR_STR if not isinstance(x, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list `no_integers` of all the items in list `mylist` that are not of type `int`. This requires iterating over the list `mylist`, checking the type of each element and adding only those elements to `no_integers` that are not of type `int`."
}
{
    "question_id": "5618878-38",
    "nl": "concatenating values in `list1` to a string",
    "cmd": "str1 = ''.join(list1)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "str1 = ''.join(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating values in `list1` to a string. This requires concatenating all the elements in `list1` to create a single string."
}
{
    "question_id": "5618878-35",
    "nl": "concatenating values in list `L` to a string, separate by space",
    "cmd": "' '.join((str(x) for x in L))",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(str(x) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating values in list `L` to a string, separate by space. This requires concatenating all the elements in `L` to create a single string, separated by space."
}
{
    "question_id": "5618878-66",
    "nl": "concatenating values in `list1` to a string",
    "cmd": "str1 = ''.join((str(e) for e in list1))",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "str1 = ''.join(str(e) for e in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating values in `list1` to a string. This requires concatenating all the elements in `list1` to create a single string."
}
{
    "question_id": "5618878-26",
    "nl": "concatenating values in list `L` to a string",
    "cmd": "makeitastring = ''.join(map(str, L))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "makeitastring = ''.join(map(str, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating values in list `L` to a string. This requires concatenating all the elements in `L` to create a single string."
}
{
    "question_id": "14358567-16",
    "nl": "find consecutive segments from a column 'A' in a pandas data frame 'df'",
    "cmd": "df.reset_index().groupby('A')['index'].apply(np.array)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index",
        "pandas.reference.api.pandas.dataframe.apply",
        "pandas.reference.api.pandas.dataframe.groupby"
    ],
    "canonical_cmd": "VAR_STR.reset_index().groupby('VAR_STR')['index'].apply(np.array)",
    "cmd_name": "conala",
    "gpt35_response": " Find consecutive segments from a column 'A' in a pandas data frame 'df'. This requires finding consecutive segments of the same value in column 'A' of pandas data frame 'df', and grouping them together."
}
{
    "question_id": "26155985-7",
    "nl": "place '\\' infront of each non-letter char in string `line`",
    "cmd": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Place '\\' infront of each non-letter char in string `line`. This requires iterating over each character in the string `line`, and adding a '\\' in front of each non-letter character."
}
{
    "question_id": "8459231-72",
    "nl": "sort a list of tuples `my_list` by second parameter in the tuple",
    "cmd": "my_list.sort(key=lambda x: x[1])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of tuples `my_list` by second parameter in the tuple. This requires sorting the list of tuples `my_list` by the second parameter in each tuple."
}
{
    "question_id": "5788891-79",
    "nl": "execute a file '.\/abc.py' with arguments `arg1` and `arg2` in python shell",
    "cmd": "subprocess.call(['.\/abc.py', arg1, arg2])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['VAR_STR', VAR_STR, VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Execute a file '.\/abc.py' with arguments `arg1` and `arg2` in python shell. This requires calling the python shell to execute '.\/abc.py' with arguments `arg1` and `arg2`."
}
{
    "question_id": "8569201-37",
    "nl": "find the string matches within parenthesis from a string `s` using regex",
    "cmd": "m = re.search('\\\\[(\\\\w+)\\\\]', s)",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "m = re.search('\\\\[(\\\\w+)\\\\]', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find the string matches within parenthesis from a string `s` using regex. This requires using regex to find all the string matches within parenthesis in the string `s`."
}
{
    "question_id": "19365513-49",
    "nl": "Add row `['8\/19\/2014', 'Jun', 'Fly', '98765']` to dataframe `df`",
    "cmd": "df.loc[len(df)] = ['8\/19\/2014', 'Jun', 'Fly', '98765']",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc",
        "python.library.functions#len"
    ],
    "canonical_cmd": "VAR_STR.loc[len(VAR_STR)] = [VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Add row `['8\/19\/2014', 'Jun', 'Fly', '98765']` to dataframe `df`. This requires creating a row with the given values and adding it to the data frame `df`."
}
{
    "question_id": "4182603-40",
    "nl": "decode the string 'stringnamehere'  to UTF-8",
    "cmd": "stringnamehere.decode('utf-8', 'ignore')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('utf-8', 'ignore')",
    "cmd_name": "conala",
    "gpt35_response": " Decode the string 'stringnamehere'  to UTF-8. This requires decoding the string 'stringnamehere' to UTF-8 format."
}
{
    "question_id": "6539881-93",
    "nl": "convert string `apple` from iso-8859-1\/latin1 to utf-8",
    "cmd": "apple.decode('iso-8859-1').encode('utf8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('iso-8859-1').encode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " Convert string `apple` from iso-8859-1\/latin1 to utf-8. This requires converting the string `apple` from iso-8859-1\/latin1 encoding to utf-8 encoding."
}
{
    "question_id": "18684397-80",
    "nl": "create datetime object from \"16sep2012\"",
    "cmd": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')",
    "cmd_name": "conala",
    "gpt35_response": "-Create datetime object from \"16sep2012\". This requires using the year, month, and day values from \"16sep2012\" to create a datetime object. "
}
{
    "question_id": "6416131-30",
    "nl": "add key \"item3\" and value \"3\" to dictionary `default_data `",
    "cmd": "default_data['item3'] = 3",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = 3",
    "cmd_name": "conala",
    "gpt35_response": "Add key \"item3\" and value \"3\" to dictionary `default_data `. This requires accessing dictionary `default_data` and inserting key \"item3\" with corresponding value \"3\". "
}
{
    "question_id": "6416131-21",
    "nl": "add key \"item3\" and value \"3\" to dictionary `default_data `",
    "cmd": "default_data.update({'item3': 3, })",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update({'VAR_STR': 3})",
    "cmd_name": "conala",
    "gpt35_response": "Add key \"item3\" and value \"3\" to dictionary `default_data `. This requires accessing dictionary `default_data` and inserting key \"item3\" with corresponding value \"3\". "
}
{
    "question_id": "6416131-97",
    "nl": "add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`",
    "cmd": "default_data.update({'item4': 4, 'item5': 5, })",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update({'VAR_STR': 4, 'VAR_STR': 5})",
    "cmd_name": "conala",
    "gpt35_response": "Add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`. This requires accessing dictionary `default_data` and inserting key value pairs 'item4' , 4 and 'item5' , 5. "
}
{
    "question_id": "6696027-18",
    "nl": "split strings in list `l` on the first occurring tab `\\t` and enter only the first resulting substring in a new list",
    "cmd": "[i.split('\\t', 1)[0] for i in l]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[i.split('VAR_STR', 1)[0] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Split strings in list `l` on the first occurring tab `\\t` and enter only the first resulting substring in a new list. This requires accessing list `l`, splitting each string on the first tab character, and creating a new list containing only the first resulting substring. "
}
{
    "question_id": "6696027-69",
    "nl": "Split each string in list `myList` on the tab character",
    "cmd": "myList = [i.split('\\t')[0] for i in myList]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = [i.split('\\t')[0] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Split each string in list `myList` on the tab character. This requires accessing list `myList` and splitting each string on the tab character. "
}
{
    "question_id": "32792602-55",
    "nl": "search for occurrences of regex pattern `pattern` in string `url`",
    "cmd": "print(pattern.search(url).group(1))",
    "oracle_man": [
        "python.library.re#re.Pattern.search",
        "pygame.ref.sprite#pygame.sprite.Group"
    ],
    "canonical_cmd": "print(VAR_STR.search(VAR_STR).group(1))",
    "cmd_name": "conala",
    "gpt35_response": "Search for occurrences of regex pattern `pattern` in string `url`. This requires using regex to search for occurrences of the pattern `pattern` in string `url`. "
}
{
    "question_id": "1614236-63",
    "nl": "convert all of the items in a list `lst` to float",
    "cmd": "[float(i) for i in lst]",
    "oracle_man": [
        "python.library.functions#float"
    ],
    "canonical_cmd": "[float(i) for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Convert all of the items in a list `lst` to float. This requires accessing list `lst` and converting each item to a float. "
}
{
    "question_id": "2744795-17",
    "nl": "Change background color in Tkinter",
    "cmd": "root.configure(background='black')",
    "oracle_man": [
        "python.library.tkinter.ttk#tkinter.ttk.Style.configure"
    ],
    "canonical_cmd": "root.configure(background='black')",
    "cmd_name": "conala",
    "gpt35_response": "Change background color in Tkinter. This requires accessing the background color attribute in Tkinter and changing its value. "
}
{
    "question_id": "3059301-80",
    "nl": "encode string `data` using hex 'hex' encoding",
    "cmd": "print(data.encode('hex'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print(VAR_STR.encode('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": "Encode string `data` using hex 'hex' encoding. This requires using hex encoding to encode string `data`. "
}
{
    "question_id": "3059301-40",
    "nl": "Return the decimal value for each hex character in data `data`",
    "cmd": "print(' '.join([str(ord(a)) for a in data]))",
    "oracle_man": [
        "python.library.functions#ord",
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(' '.join([str(ord(a)) for a in VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": "Return the decimal value for each hex character in data `data`. This requires iterating through each hex character in the string `data` and converting it to its decimal representation. "
}
{
    "question_id": "10264618-17",
    "nl": "encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters",
    "cmd": "data['City'].encode('ascii', 'ignore')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].encode('VAR_STR', 'ignore')",
    "cmd_name": "conala",
    "gpt35_response": "Encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters. This requires accessing the value of key `City` in dictionary `data` and encoding it as `ascii`, while ignoring any non-ascii characters. "
}
{
    "question_id": "17467504-57",
    "nl": "Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.",
    "cmd": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(?=(a.*?a))', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'. This requires using regex to search for all occurrences of the pattern 'a.*?a' in the string 'a 1 a 2 a 3 a 4 a'. "
}
{
    "question_id": "40156469-42",
    "nl": "select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`",
    "cmd": "df[(x <= df['columnX']) & (df['columnX'] <= y)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[(VAR_STR <= VAR_STR['VAR_STR']) & (VAR_STR['VAR_STR'] <= VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": "Select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`. This requires accessing dataframe `df`, selecting rows where the values of column 'columnX' fall within the range of `x` to `y`. "
}
{
    "question_id": "31405409-44",
    "nl": "remove parentheses only around single words in a string `s` using regex",
    "cmd": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Remove parentheses only around single words in a string `s` using regex. This requires using regex to search for parentheses only around single words in the string `s` and removing them. "
}
{
    "question_id": "22296496-67",
    "nl": "add variable `var` to key 'f' of first element in JSON data `data`",
    "cmd": "data[0]['f'] = var",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[0]['VAR_STR'] = VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": "Add variable `var` to key 'f' of first element in JSON data `data`. This requires accessing the first element in JSON data `data` and inserting variable `var` as the value for key 'f'. "
}
{
    "question_id": "20504881-46",
    "nl": "merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'",
    "cmd": "pd.merge(y, x, on='k')[['a', 'b', 'y']]",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "pd.merge(VAR_STR, VAR_STR, on='k')[['VAR_STR', 'VAR_STR', 'VAR_STR']]",
    "cmd_name": "conala",
    "gpt35_response": "Merge Pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'. This requires merging two Pandas dataframes based on their common columns 'a', 'b', and 'y'. "
}
{
    "question_id": "40512124-86",
    "nl": "concatenate key\/value pairs in dictionary `a` with string ', ' into a single string",
    "cmd": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.functions#list",
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(VAR_STR.items())])",
    "cmd_name": "conala",
    "gpt35_response": "Concatenate key\/value pairs in dictionary `a` with string ', ' into a single string. This requires accessing dictionary `a` and concatenating its key\/value pairs with string ', ' into a single string. "
}
{
    "question_id": "9507819-61",
    "nl": "match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled",
    "cmd": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', 'VAR_STR', re.DOTALL)",
    "cmd_name": "conala",
    "gpt35_response": "Match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled. This requires using regex to search for the pattern 'a*?bc*?' on string 'aabcc', with DOTALL enabled to match across multiple lines. "
}
{
    "question_id": "120656-81",
    "nl": "list all files in directory \".\"",
    "cmd": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass",
    "oracle_man": [
        "python.library.os.path#os.path.join",
        "python.library.os#os.walk"
    ],
    "canonical_cmd": "for dirname, dirnames, filenames in os.walk('VAR_STR'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass",
    "cmd_name": "conala",
    "gpt35_response": "List all files in directory \".\". This requires accessing the current directory \".\" and listing all files within it."
}
{
    "question_id": "120656-36",
    "nl": "list all files in directory `path`",
    "cmd": "os.listdir(path)",
    "oracle_man": [
        "python.library.os#os.listdir"
    ],
    "canonical_cmd": "os.listdir(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- List all files in directory `path`. This requires accessing directory `path` and retrieving a list of all files within the directory."
}
{
    "question_id": "18711384-26",
    "nl": "split a `utf-8` encoded string `stru` into a list of characters",
    "cmd": "list(stru.decode('utf-8'))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "list(VAR_STR.decode('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Split a `utf-8` encoded string `stru` into a list of characters. This requires decoding `stru` using `utf-8` encoding and splitting the resulting string into a list of characters."
}
{
    "question_id": "10716796-78",
    "nl": "convert a string `s` to its base-10 representation",
    "cmd": "int(s.encode('hex'), 16)",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "int(VAR_STR.encode('hex'), 16)",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string `s` to its base-10 representation. This requires parsing string `s` and converting it to its base-10 representation."
}
{
    "question_id": "7142227-68",
    "nl": "sort a zipped list `zipped` using lambda function",
    "cmd": "sorted(zipped, key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a zipped list `zipped` using lambda function. This requires zipping the lists to be sorted, defining a lambda function for the desired sorting behavior and using the `sorted()` function."
}
{
    "question_id": "7142227-50",
    "nl": "How do I sort a zipped list in Python?",
    "cmd": "zipped.sort(key=lambda t: t[1])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "zipped.sort(key=lambda t: t[1])",
    "cmd_name": "conala",
    "gpt35_response": " How do I sort a zipped list in Python? This requires zipping the lists to be sorted, defining the desired sorting behavior, and employing the `sorted()` function on the zipped list."
}
{
    "question_id": "4934806-50",
    "nl": "print script's directory",
    "cmd": "print(os.path.dirname(os.path.realpath(__file__)))",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.realpath"
    ],
    "canonical_cmd": "print(os.path.dirname(os.path.realpath(__file__)))",
    "cmd_name": "conala",
    "gpt35_response": " Print script's directory. This requires accessing the path information of the script's directory and printing it."
}
{
    "question_id": "29464234-50",
    "nl": "find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.",
    "cmd": "pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "pd.merge(VAR_STR, VAR_STR, on=['VAR_STR', 'VAR_STR', 'VAR_STR', 'VAR_STR'], how='inner')",
    "cmd_name": "conala",
    "gpt35_response": " Find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'. This requires filtering out the rows in `df2` that do not exist in `df1` and selecting only the relevant columns."
}
{
    "question_id": "3931541-49",
    "nl": "check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`",
    "cmd": "set(['a', 'b']).issubset(['a', 'b', 'c'])",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.issubset"
    ],
    "canonical_cmd": "set([VAR_STR]).issubset([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`. This requires iterating over all items in `['a', 'b']`, checking if each item is present in `['a', 'b', 'c']`, and returning `True` if all items are present or `False` otherwise."
}
{
    "question_id": "3931541-28",
    "nl": "Check if all the items in a list `['a', 'b']` exists in another list `l`",
    "cmd": "set(['a', 'b']).issubset(set(l))",
    "oracle_man": [
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "set([VAR_STR]).issubset(set(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Check if all the items in a list `['a', 'b']` exist in another list `l`. This requires iterating over all items in `['a', 'b']`, checking if each item is present in `l`, and returning `True` if all items are present or `False` otherwise."
}
{
    "question_id": "3862010-24",
    "nl": "split string `string` on whitespaces using a generator",
    "cmd": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))",
    "oracle_man": [
        "python.library.re#re.finditer",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Split string `string` on whitespaces using a generator. This requires defining a generator to split `string` on whitespace, and iterating over the generator to retrieve each split substring."
}
{
    "question_id": "7271482-45",
    "nl": "generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`",
    "cmd": "[x['value'] for x in list_of_dicts]",
    "oracle_man": [],
    "canonical_cmd": "[x['VAR_STR'] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`. This requires iterating over all dictionaries in `list_of_dicts` and selecting the value associated with the key 'value', adding each value to a new list."
}
{
    "question_id": "7271482-32",
    "nl": "python getting a list of value from list of dict",
    "cmd": "[d['value'] for d in l]",
    "oracle_man": [],
    "canonical_cmd": "[d['value'] for d in l]",
    "cmd_name": "conala",
    "gpt35_response": " Python getting a list of value from list of dict. This requires iterating over all dictionaries in a list and selecting the desired value from each dictionary to be added to a new list."
}
{
    "question_id": "7271482-21",
    "nl": "python getting a list of value from list of dict",
    "cmd": "[d['value'] for d in l if 'value' in d]",
    "oracle_man": [],
    "canonical_cmd": "[d['value'] for d in l if 'value' in d]",
    "cmd_name": "conala",
    "gpt35_response": " Python getting a list of value from list of dict. This requires iterating over all dictionaries in a list and selecting the desired value from each dictionary to be added to a new list."
}
{
    "question_id": "8724352-17",
    "nl": "BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element",
    "cmd": "rows = soup.findAll('tr')[4::5]",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "rows = VAR_STR.findAll('VAR_STR')[4::5]",
    "cmd_name": "conala",
    "gpt35_response": " BeautifulSoup find all 'tr' elements in HTML string `soup` at the five-stride starting from the fourth element. This requires parsing `soup` using BeautifulSoup, selecting the 'tr' elements, and using a list slice with a start index of 3 and a step size of 5."
}
{
    "question_id": "15390374-17",
    "nl": "get a utf-8 string literal representation of byte string `x`",
    "cmd": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')",
    "oracle_man": [
        "python.library.functions#format",
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"x = {}\"\"\".format(VAR_STR.decode('utf8')).encode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " Get a utf-8 string literal representation of byte string `x`. This requires encoding the byte string `x` using `utf-8` encoding and converting the resulting bytes object to a string literal."
}
{
    "question_id": "2621674-32",
    "nl": "extract elements at indices (1, 2, 5) from a list `a`",
    "cmd": "[a[i] for i in (1, 2, 5)]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR[i] for i in (1, 2, 5)]",
    "cmd_name": "conala",
    "gpt35_response": " Extract elements at indices (1, 2, 5) from a list `a`. This requires using list slicing to extract elements at the specified indices."
}
{
    "question_id": "12814667-69",
    "nl": "sort list `a` using the first dimension of the element as the key to list `b`",
    "cmd": "a.sort(key=lambda x: b.index(x[0]))",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: VAR_STR.index(x[0]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `a` using the first dimension of the element as the key to list `b`. This requires defining a lambda function to extract the relevant element of each list element for sorting and using `sorted()` to sort the list using this lambda function."
}
{
    "question_id": "12814667-58",
    "nl": "How to sort a list according to another list?",
    "cmd": "a.sort(key=lambda x_y: b.index(x_y[0]))",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "a.sort(key=lambda x_y: b.index(x_y[0]))",
    "cmd_name": "conala",
    "gpt35_response": " How to sort a list according to another list? This requires using the `sorted()` function with a `key` parameter to sort a list based on the sorting order of another list."
}
{
    "question_id": "1207457-34",
    "nl": "Convert a Unicode string `title` to a 'ascii' string",
    "cmd": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')",
    "oracle_man": [
        "python.library.unicodedata#unicodedata.normalize",
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "unicodedata.normalize('NFKD', VAR_STR).encode('VAR_STR', 'ignore')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a Unicode string `title` to an 'ascii' string. This requires encoding the Unicode string `title` using `ascii` encoding."
}
{
    "question_id": "1207457-55",
    "nl": "Convert a Unicode string `a` to a 'ascii' string",
    "cmd": "a.encode('ascii', 'ignore')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "VAR_STR.encode('VAR_STR', 'ignore')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a Unicode string `a` to an 'ascii' string. This requires encoding the Unicode string `a` using `ascii` encoding."
}
{
    "question_id": "8282553-31",
    "nl": "delete all occureces of `8` in each string `s` in list `lst`",
    "cmd": "print([s.replace('8', '') for s in lst])",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "print([VAR_STR.replace('VAR_STR', '') for VAR_STR in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": "-Delete all occurrences of `8` in each string `s` in list `lst`. This requires iterating through each element `s` in the list `lst`, deleting all occurrences of the character `8` in `s`, and updating the list `lst` with the modified `s`."
}
{
    "question_id": "21771133-50",
    "nl": "replace values of dataframe `df` with True if numeric",
    "cmd": "df.applymap(lambda x: isinstance(x, (int, float)))",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.applymap",
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "VAR_STR.applymap(lambda x: isinstance(x, (int, float)))",
    "cmd_name": "conala",
    "gpt35_response": "Replace values of dataframe `df` with True if numeric. This requires iterating through each value in the dataframe `df`, checking if it is numeric, and replacing it with the boolean value `True`."
}
{
    "question_id": "9224385-40",
    "nl": "convert values in dictionary `d` into integers",
    "cmd": "{k: int(v) for k, v in d.items()}",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "{k: int(v) for k, v in VAR_STR.items()}",
    "cmd_name": "conala",
    "gpt35_response": "Convert values in dictionary `d` into integers. This requires iterating through each key-value pair in the dictionary `d`, converting the corresponding value to an integer and updating the dictionary `d` with the new value."
}
{
    "question_id": "10115967-39",
    "nl": "generate the combinations of 3 from a set `{1, 2, 3, 4}`",
    "cmd": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))",
    "oracle_man": [
        "python.library.itertools#itertools.combinations",
        "python.library.functions#list"
    ],
    "canonical_cmd": "print(list(itertools.combinations({VAR_STR}, 3)))",
    "cmd_name": "conala",
    "gpt35_response": "Generate the combinations of 3 from a set `{1, 2, 3, 4}`. This requires creating a set `{1, 2, 3, 4}`, generating all possible combinations of 3 elements from the set, and returning the resulting list."
}
{
    "question_id": "15175142-92",
    "nl": "double each character in string `text.read()`",
    "cmd": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.os#os.read"
    ],
    "canonical_cmd": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)",
    "cmd_name": "conala",
    "gpt35_response": "Double each character in string `text.read()`. This requires reading the text from the file, iterating through each character in the text, and appending the character twice to a new string."
}
{
    "question_id": "4697006-77",
    "nl": "split a string `a , b; cdf`  using both commas and semicolons as delimeters",
    "cmd": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Split a string `a , b; cdf`  using both commas and semicolons as delimeters. This requires splitting the string `a , b; cdf` using the comma and semicolon delimiters, and returning the resulting list."
}
{
    "question_id": "4697006-83",
    "nl": "Split a string `string` by multiple separators `,` and `;`",
    "cmd": "[t.strip() for s in string.split(',') for t in s.split(';')]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[t.strip() for s in VAR_STR.split('VAR_STR') for t in s.split('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": "Split a string `string` by multiple separators `,` and `;`. This requires splitting the string `string` by the comma and semicolon delimiters and returning the resulting list."
}
{
    "question_id": "12987178-6",
    "nl": "sort list `trial_list` based on values of dictionary `trail_dict`",
    "cmd": "sorted(trial_list, key=lambda x: trial_dict[x])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: trial_dict[x])",
    "cmd_name": "conala",
    "gpt35_response": "Sort list `trial_list` based on values of dictionary `trial_dict`. This requires iterating through each key-value pair in the dictionary `trial_dict`, sorting the list `trial_list` based on the value of the key, and returning the sorted list."
}
{
    "question_id": "4299741-5",
    "nl": "merge a list of integers `[1, 2, 3, 4, 5]` into a single integer",
    "cmd": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])",
    "oracle_man": [],
    "canonical_cmd": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": "Merge a list of integers `[1, 2, 3, 4, 5]` into a single integer. This requires converting each element of the list to a string, concatenating the resulting strings, and converting the concatenated string to an integer."
}
{
    "question_id": "6886493-12",
    "nl": "Get all object attributes of object `obj`",
    "cmd": "print((obj.__dict__))",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR.__dict__)",
    "cmd_name": "conala",
    "gpt35_response": "Get all object attributes of object `obj`. This requires inspecting the object `obj` and returning all its attributes."
}
{
    "question_id": "6886493-89",
    "nl": "Get all object attributes of an object",
    "cmd": "dir()",
    "oracle_man": [
        "python.library.functions#dir"
    ],
    "canonical_cmd": "dir()",
    "cmd_name": "conala",
    "gpt35_response": "Get all object attributes of an object. This requires passing the object to a function which inspects the object and returns all its attributes."
}
{
    "question_id": "6886493-2",
    "nl": "Get all object attributes of an object",
    "cmd": "dir()",
    "oracle_man": [
        "python.library.functions#dir"
    ],
    "canonical_cmd": "dir()",
    "cmd_name": "conala",
    "gpt35_response": "Get all object attributes of an object. This requires passing the object to a function which inspects the object and returns all its attributes."
}
{
    "question_id": "10271484-8",
    "nl": "create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`",
    "cmd": "[(a * b) for a, b in zip(lista, listb)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(a * b) for a, b in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": "Create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`. This requires iterating through each element at the same index in `lista` and `listb`, multiplying them together, and appending the result to a new list."
}
{
    "question_id": "9153527-61",
    "nl": "append a path `\/path\/to\/main_folder` in system path",
    "cmd": "sys.path.append('\/path\/to\/main_folder')",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "sys.path.append('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Append a path `\/path\/to\/main_folder` in system path. This requires adding the path `\/path\/to\/main_folder` to the system `PATH` variable."
}
{
    "question_id": "5858916-91",
    "nl": "check if any of the items in  `search` appear in `string`",
    "cmd": "any(x in string for x in search)",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(x in VAR_STR for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Check if any of the items in `search` appear in `string`. This requires iterating through each element in `search`, searching for its presence in `string`, and returning `True` if any element is found, otherwise `False`."
}
{
    "question_id": "42747987-29",
    "nl": "select the first row grouped per level 0 of dataframe `df`",
    "cmd": "df.groupby(level=0, as_index=False).nth(0)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.core.groupby.groupby.nth"
    ],
    "canonical_cmd": "VAR_STR.groupby(level=0, as_index=False).nth(0)",
    "cmd_name": "conala",
    "gpt35_response": "Select the first row grouped per level 0 of dataframe `df`. This requires grouping the dataframe `df` by level 0, selecting the first row of each group, and returning the resulting dataframe."
}
{
    "question_id": "9079540-32",
    "nl": "Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`",
    "cmd": "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('VAR_STR'.VAR_STR(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`. This requires escaping the character `}` in the string `{0}:<15}}{1}:<15}}{2}:<8}}` to create a valid format string with the arguments `('1', '2', '3')`."
}
{
    "question_id": "19618912-23",
    "nl": "Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes",
    "cmd": "s1 = pd.merge(df1, df2, how='inner', on=['user_id'])",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "s1 = pd.merge(VAR_STR, VAR_STR, how='inner', on=['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": "Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes. This requires performing a join operation between dataframe `df1` and `df2` using the column 'user_id' as the common column."
}
{
    "question_id": "25279993-12",
    "nl": "parse string '2015\/01\/01 12:12am' to DateTime object using format '%Y\/%m\/%d %I:%M%p'",
    "cmd": "datetime.strptime('2015\/01\/01 12:12am', '%Y\/%m\/%d %I:%M%p')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Parse string '2015\/01\/01 12:12am' to DateTime object using format '%Y\/%m\/%d %I:%M%p'. This requires parsing the string '2015\/01\/01 12:12am' to a DateTime object using the specified format string '%Y\/%m\/%d %I:%M%p'."
}
{
    "question_id": "11391969-89",
    "nl": "group dataframe `data` entries by year value of the date in column 'date'",
    "cmd": "data.groupby(data['date'].map(lambda x: x.year))",
    "oracle_man": [
        "python.library.functions#map",
        "pandas.reference.groupby"
    ],
    "canonical_cmd": "VAR_STR.groupby(VAR_STR['VAR_STR'].map(lambda x: x.year))",
    "cmd_name": "conala",
    "gpt35_response": "Group dataframe `data` entries by year value of the date in column 'date'. This requires extracting the year value from the date in column 'date' of dataframe `data`, grouping the dataframe by the year value, and returning the resulting grouped dataframe."
}
{
    "question_id": "14159753-79",
    "nl": "change the size of the sci notation to '30' above the y axis in matplotlib `plt`",
    "cmd": "plt.rc('font', **{'size': '30'})",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.pyplot.rc"
    ],
    "canonical_cmd": "VAR_STR.rc('font', **{'size': 'VAR_STR'})",
    "cmd_name": "conala",
    "gpt35_response": "- Change the size of the sci notation to '30' above the y axis in Matplotlib `plt`. This requires accessing the y-axis in `plt`, and adjusting the size of the sci notation to '30'. "
}
{
    "question_id": "32032836-96",
    "nl": "get all column name of dataframe `df` except for column 'T1_V6'",
    "cmd": "df[df.columns - ['T1_V6']]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[VAR_STR.columns - ['VAR_STR']]",
    "cmd_name": "conala",
    "gpt35_response": " Get all column names of dataframe `df` except for column 'T1_V6'. This requires accessing the column names of `df` and excluding the column with the name 'T1_V6'. "
}
{
    "question_id": "13254241-96",
    "nl": "removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`",
    "cmd": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[{k: v for k, v in d.items() if k != 'VAR_STR'} for d in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`. This requires iterating over each dictionary in `mylist` and removing the key-value pair with key 'mykey1'. "
}
{
    "question_id": "13254241-96",
    "nl": "Removing key values pairs from a list of dictionaries",
    "cmd": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]",
    "cmd_name": "conala",
    "gpt35_response": " Removing key values pairs from a list of dictionaries. This requires iterating over each dictionary in the list and removing the specified key-value pair. "
}
{
    "question_id": "18723580-43",
    "nl": "strip the string `.txt` from anywhere in the string `Boat.txt.txt`",
    "cmd": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace('VAR_STR', '')",
    "cmd_name": "conala",
    "gpt35_response": " Strip the string `.txt` from anywhere in the string `Boat.txt.txt`. This requires accessing the string `Boat.txt.txt` and removing all instances of the substring `.txt`. "
}
{
    "question_id": "2168123-74",
    "nl": "split string \"0,1,2\" based on delimiter ','",
    "cmd": "\"\"\"0,1,2\"\"\".split(',')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string \"0,1,2\" based on delimiter ','. This requires accessing the string \"0,1,2\" and splitting it based on the delimiter ','. "
}
{
    "question_id": "2168123-3",
    "nl": "convert the string '0,1,2' to a list of integers",
    "cmd": "[int(x) for x in '0,1,2'.split(',')]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[int(x) for x in 'VAR_STR'.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Convert the string '0,1,2' to a list of integers. This requires accessing the string '0,1,2' and converting it into a list of integers. "
}
{
    "question_id": "2108126-46",
    "nl": "run function 'SudsMove' simultaneously",
    "cmd": "threading.Thread(target=SudsMove).start()",
    "oracle_man": [
        "python.library.threading#threading.Thread",
        "python.library.threading#threading.Thread.start"
    ],
    "canonical_cmd": "threading.Thread(target=VAR_STR).start()",
    "cmd_name": "conala",
    "gpt35_response": " Run function 'SudsMove' simultaneously. This requires running the function 'SudsMove' multiple times concurrently. "
}
{
    "question_id": "17972020-38",
    "nl": "execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app",
    "cmd": "result = db.engine.execute('<sql here>')",
    "oracle_man": [
        "python.library.msilib#msilib.View.Execute"
    ],
    "canonical_cmd": "result = VAR_STR.engine.execute('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Execute raw SQL query '<sql here>' in database `db` in SQLAlchemy-Flask app. This requires accessing the database `db` and executing the raw SQL query `<sql here>`. "
}
{
    "question_id": "11791568-17",
    "nl": "What is the most pythonic way to exclude elements of a list that start with a specific character?",
    "cmd": "[x for x in my_list if not x.startswith('#')]",
    "oracle_man": [
        "python.library.stdtypes#str.startswith"
    ],
    "canonical_cmd": "[x for x in my_list if not x.startswith('#')]",
    "cmd_name": "conala",
    "gpt35_response": " What is the most pythonic way to exclude elements of a list that start with a specific character? This requires iterating over each element in the list and excluding the elements that start with the specified character in the most pythonic way. "
}
{
    "question_id": "12723751-59",
    "nl": "Replace `;` with `:` in a string `line`",
    "cmd": "line = line.replace(';', ':')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.replace('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace `;` with `:` in a string `line`. This requires accessing the string `line` and replacing all instances of the character `;` with `:`. "
}
{
    "question_id": "40535203-57",
    "nl": "get a list of last trailing words from another list  of strings`Original_List`",
    "cmd": "new_list = [x.split()[-1] for x in Original_List]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "new_list = [x.split()[-1] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of last trailing words from another list of strings `Original_List`. This requires accessing each string in `Original_List` and extracting the last word from each string to form a new list. "
}
{
    "question_id": "12307099-72",
    "nl": "set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`",
    "cmd": "df.ix[df.A == 0, 'B'] = np.nan",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.ix[VAR_STR.VAR_STR == 0, 'VAR_STR'] = np.nan",
    "cmd_name": "conala",
    "gpt35_response": " Set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in Pandas dataframe `df`. This requires accessing columns 'A' and 'B' in `df`, and setting the value in column 'B' to NaN if the corresponding value in column 'A' is 0. "
}
{
    "question_id": "20490274-12",
    "nl": "reset index to default in dataframe `df`",
    "cmd": "df = df.reset_index(drop=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.reset_index(drop=True)",
    "cmd_name": "conala",
    "gpt35_response": " Reset index to default in dataframe `df`. This requires accessing the index of `df` and resetting it to the default index. "
}
{
    "question_id": "13905936-21",
    "nl": "create a list containing digits of number 123 as its elements",
    "cmd": "list(str(123))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "list(str(123))",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing digits of number 123 as its elements. This requires accessing the integer 123 and converting it into a list containing each of its digits as elements. "
}
{
    "question_id": "13905936-57",
    "nl": "converting integer `num` to list",
    "cmd": "[int(x) for x in str(num)]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "[int(x) for x in str(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Converting integer `num` to list. This requires accessing the integer `num` and converting it into a list of digits. "
}
{
    "question_id": "17815945-94",
    "nl": "convert generator object to a dictionary",
    "cmd": "{i: (i * 2) for i in range(10)}",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "{i: (i * 2) for i in range(10)}",
    "cmd_name": "conala",
    "gpt35_response": " Convert generator object to a dictionary. This requires accessing the generator object and converting it into a dictionary. "
}
{
    "question_id": "17815945-66",
    "nl": "convert generator object to a dictionary",
    "cmd": "dict((i, i * 2) for i in range(10))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict((i, i * 2) for i in range(10))",
    "cmd_name": "conala",
    "gpt35_response": " Convert generator object to a dictionary. This requires accessing the generator object and converting it into a dictionary. "
}
{
    "question_id": "17027690-44",
    "nl": "skip the newline while printing `line`",
    "cmd": "print(line.rstrip('\\n'))",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "print(VAR_STR.rstrip('\\n'))",
    "cmd_name": "conala",
    "gpt35_response": " Skip the newline while printing `line`. This requires accessing the string `line` and printing it without the newline character. "
}
{
    "question_id": "42364593-66",
    "nl": "move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'",
    "cmd": "sorted(lst, key=lambda x: x['language'] != 'en')",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: x['VAR_STR'] != 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Move dictionaries in list `lst` to the end of the list if the value of key 'language' in each dictionary is not equal to 'en'. This requires iterating over each dictionary in `lst` and moving it to the end of the list if the value of the key 'language' is not equal to 'en'."
}
{
    "question_id": "2918362-2",
    "nl": "writing string 'text to write\\n' to file `f`",
    "cmd": "f.write('text to write\\n')",
    "oracle_man": [
        "python.library.os#os.write"
    ],
    "canonical_cmd": "VAR_STR.write('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Write string 'text to write\\n' to file `f`. This requires opening file `f`, writing the string 'text to write\\n' to the file, and then closing the file."
}
{
    "question_id": "2918362-26",
    "nl": "Write a string `My String` to a file `file` including new line character",
    "cmd": "file.write('My String\\n')",
    "oracle_man": [
        "python.library.os#os.write"
    ],
    "canonical_cmd": "VAR_STR.write('My String\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Write a string `My String` to a file `file` including a new line character. This requires opening the file `file`, writing the string 'My String\\n' to the file, and then closing the file."
}
{
    "question_id": "40582103-88",
    "nl": "use regex pattern '((.+?)\\\\2+)' to split string '44442(2)2(2)44'",
    "cmd": "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]",
    "oracle_man": [
        "python.library.re#re.compile",
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "[m[0] for m in re.compile('VAR_STR').findall('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Use regex pattern '((.+?)\\\\2+)' to split string '44442(2)2(2)44'. This requires applying the regex pattern '((.+?)\\\\2+)' to the string '44442(2)2(2)44' to split it."
}
{
    "question_id": "40582103-64",
    "nl": "use regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to split string `s`",
    "cmd": "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "[i[0] for i in re.findall('VAR_STR', VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Use regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to split string `s`. This requires applying the regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to the string `s` to split it."
}
{
    "question_id": "20735384-98",
    "nl": "add character '@' after word 'get' in string `text`",
    "cmd": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('(\\\\bget\\\\b)', '\\\\1@', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Add character '@' after the word 'get' in string `text`. This requires finding the position of the word 'get' in string `text`, inserting the character '@' at the next position, and returning the modified string."
}
{
    "question_id": "715550-30",
    "nl": "serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'",
    "cmd": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items",
        "python.library.json#json.dumps"
    ],
    "canonical_cmd": "simplejson.dumps(dict([('VAR_STR' % k, v) for k, v in list(VAR_STR.items())]))",
    "cmd_name": "conala",
    "gpt35_response": " Serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'. This requires using the json module to encode the dictionary `d`, and specifying that each key should be formatted as '%d,%d'."
}
{
    "question_id": "4020539-78",
    "nl": "decode escape sequences in string `myString`",
    "cmd": "myString.decode('string_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('string_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Decode escape sequences in string `myString`. This requires using the `decode` method to convert escape sequences in string `myString`."
}
{
    "question_id": "33724111-3",
    "nl": "remove colon character surrounded by vowels letters in string `word`",
    "cmd": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove colon character surrounded by vowel letters in string `word`. This requires applying a regular expression to identify the colon character that is surrounded by vowels in string `word`, and then removing it from the string."
}
{
    "question_id": "11073609-16",
    "nl": "group dataframe `df` based on minute interval",
    "cmd": "df.groupby(df.index.map(lambda t: t.minute))",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.index.map"
    ],
    "canonical_cmd": "VAR_STR.groupby(VAR_STR.index.map(lambda t: t.minute))",
    "cmd_name": "conala",
    "gpt35_response": " Group dataframe `df` based on minute interval. This requires using the `resample` method to group the dataframe `df` based on minute intervals."
}
{
    "question_id": "9733638-44",
    "nl": "Execute a post request to url `http:\/\/httpbin.org\/post` with json data `{'test': 'cheers'}`",
    "cmd": "requests.post('http:\/\/httpbin.org\/post', json={'test': 'cheers'})",
    "oracle_man": [
        "pygame.ref.fastevent#pygame.fastevent.post"
    ],
    "canonical_cmd": "requests.post('VAR_STR', json={VAR_STR})",
    "cmd_name": "conala",
    "gpt35_response": " Execute a POST request to url `http:\/\/httpbin.org\/post` with json data `{'test': 'cheers'}`. This requires using the requests module to execute a POST request to the specified URL, with the specified JSON data."
}
{
    "question_id": "817122-45",
    "nl": "delete all digits in string `s` that are not directly attached to a word character",
    "cmd": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Delete all digits in string `s` that are not directly attached to a word character. This requires applying a regular expression to identify digits that are not directly attached to word characters in string `s`, and then removing them from the string."
}
{
    "question_id": "817122-20",
    "nl": "delete digits at the end of string `s`",
    "cmd": "re.sub('\\\\b\\\\d+\\\\b', '', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\b\\\\d+\\\\b', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Delete digits at the end of string `s`. This requires identifying the position of the last non-digit character in string `s`, and then truncating the string at that position."
}
{
    "question_id": "817122-0",
    "nl": "Delete self-contained digits from string `s`",
    "cmd": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Delete self-contained digits from string `s`. This requires applying a regular expression to identify contiguous digits surrounded by non-digit characters in string `s`, and then removing them from the string."
}
{
    "question_id": "37125495-30",
    "nl": "get the maximum 2 values per row in array `A`",
    "cmd": "A[:, -2:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:, -2:]",
    "cmd_name": "conala",
    "gpt35_response": " Get the maximum 2 values per row in array `A`. This requires using the `argsort` method to sort the array `A`, selecting the top 2 values for each row, and returning the result."
}
{
    "question_id": "15661013-5",
    "nl": "convert date `my_date` to datetime",
    "cmd": "datetime.datetime.combine(my_date, datetime.time.min)",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.combine"
    ],
    "canonical_cmd": "datetime.datetime.combine(VAR_STR, datetime.time.min)",
    "cmd_name": "conala",
    "gpt35_response": " Convert date `my_date` to datetime. This requires using the `datetime` module to convert the date `my_date` to a datetime object."
}
{
    "question_id": "4706499-19",
    "nl": "append line \"appended text\" to file \"test.txt\"",
    "cmd": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "with open('VAR_STR', 'a') as myfile:\n    myfile.write('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Append line \"appended text\" to file \"test.txt\". This requires opening the file \"test.txt\" in append mode, writing the line \"appended text\" to the file, and then closing the file."
}
{
    "question_id": "4706499-84",
    "nl": "append line \"cool beans...\" to file \"foo\"",
    "cmd": "with open('foo', 'a') as f:\n    f.write('cool beans...')",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "with open('VAR_STR', 'a') as f:\n    f.write('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Append line \"cool beans...\" to file \"foo\". This requires opening the file \"foo\" in append mode, writing the line \"cool beans...\" to the file, and then closing the file."
}
{
    "question_id": "4706499-88",
    "nl": "append to file 'test1' content 'koko'",
    "cmd": "with open('test1', 'ab') as f:\n    pass",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "with open('VAR_STR', 'ab') as f:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Append to file 'test1' content 'koko'. This requires opening file 'test1' in append mode, writing the content 'koko' to the file, and then closing the file."
}
{
    "question_id": "4706499-97",
    "nl": "append to file 'test' content 'koko'",
    "cmd": "open('test', 'a+b').write('koko')",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "open('VAR_STR', 'a+b').write('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Append to file 'test' content 'koko'. This requires opening file 'test' in append mode, writing the content 'koko' to the file, and then closing the file."
}
{
    "question_id": "7142062-27",
    "nl": "get the name of function `func` as a string",
    "cmd": "print(func.__name__)",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR.__name__)",
    "cmd_name": "conala",
    "gpt35_response": " Get the name of function `func` as a string. This requires using the `__name__` attribute to get the name of the function `func`."
}
{
    "question_id": "14411633-100",
    "nl": "do a boolean check if a string `lestring` contains any of the items in list `lelist`",
    "cmd": "any(e in lestring for e in lelist)",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(e in VAR_STR for e in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Do a boolean check if a string `lestring` contains any of the items in list `lelist`. This requires looping through each item in `lelist` and checking if it is contained in `lestring`."
}
{
    "question_id": "10972410-96",
    "nl": "combine two columns `foo` and `bar` in a pandas data frame",
    "cmd": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat",
        "pandas.reference.api.pandas.index.dropna",
        "pandas.reference.api.pandas.series.reindex_like"
    ],
    "canonical_cmd": "pandas.concat([df['VAR_STR'].dropna(), df['VAR_STR'].dropna()]).reindex_like(df)",
    "cmd_name": "conala",
    "gpt35_response": " Combine two columns `foo` and `bar` in a pandas data frame. This requires creating a new column in the data frame that combines the values of `foo` and `bar`."
}
{
    "question_id": "10915391-10",
    "nl": "sort a list of dictionaries `a` by dictionary values in descending order",
    "cmd": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda i: list(i.values())[0], reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionaries `a` by dictionary values in descending order. This requires defining a function to extract the values by which to sort, and then using this function with the built-in `sorted` function to sort the list in descending order."
}
{
    "question_id": "10915391-39",
    "nl": "sorting a list of dictionary `a` by values in descending order",
    "cmd": "sorted(a, key=dict.values, reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=dict.values, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sorting a list of dictionary `a` by values in descending order. This requires defining a function to extract the values by which to sort, and then using this function with the built-in `sorted` function to sort the list in descending order."
}
{
    "question_id": "15210485-43",
    "nl": "split string `s` by '@' and get the first element",
    "cmd": "s.split('@')[0]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR')[0]",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` by '@' and get the first element. This requires using the built-in `split` method to split `s` into a list at every occurrence of '@', and then selecting the first item in the resulting list."
}
{
    "question_id": "3523048-94",
    "nl": "Add a tuple with value `another_choice` to a tuple `my_choices`",
    "cmd": "final_choices = ((another_choice,) + my_choices)",
    "oracle_man": [],
    "canonical_cmd": "final_choices = (VAR_STR,) + VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Add a tuple with value `another_choice` to a tuple `my_choices`. This requires creating a new tuple that combines `my_choices` with the tuple containing `another_choice`."
}
{
    "question_id": "3523048-81",
    "nl": "Add a tuple with value `another_choice` to a tuple `my_choices`",
    "cmd": "final_choices = ((another_choice,) + my_choices)",
    "oracle_man": [],
    "canonical_cmd": "final_choices = (VAR_STR,) + VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Add a tuple with value `another_choice` to a tuple `my_choices`. This requires creating a new tuple that combines `my_choices` with the tuple containing `another_choice`."
}
{
    "question_id": "23286254-50",
    "nl": "pair each element in list `it` 3 times into a tuple",
    "cmd": "zip(it, it, it)",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(VAR_STR, VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Pair each element in list `it` 3 times into a tuple. This requires looping through each item in `it` and creating a tuple that contains three copies of the current item, and then appending that tuple to a new list."
}
{
    "question_id": "19672101-46",
    "nl": "store integer 3, 4, 1 and 2 in a list",
    "cmd": "[3, 4, 1, 2]",
    "oracle_man": [],
    "canonical_cmd": "[3, 4, 1, 2]",
    "cmd_name": "conala",
    "gpt35_response": " Store integer 3, 4, 1 and 2 in a list. This requires creating a new list that contains the integer values 3, 4, 1, and 2."
}
{
    "question_id": "3728017-8",
    "nl": "Sorting while preserving order in python",
    "cmd": "sorted(enumerate(a), key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "sorted(enumerate(a), key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sorting while preserving order in python. This requires defining a function that takes an item as input and returns a tuple containing the key by which to sort and the original index of the item within the list. This function can then be used with the built-in `sorted` function in order to sort the list by the desired key while preserving the original order."
}
{
    "question_id": "40498088-80",
    "nl": "get list of sums of neighboring integers in string `example`",
    "cmd": "[sum(map(int, s)) for s in example.split()]",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#sum",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[sum(map(int, s)) for s in VAR_STR.split()]",
    "cmd_name": "conala",
    "gpt35_response": " Get list of sums of neighboring integers in string `example`. This requires using a list comprehension to iterate over each pair of neighboring integers in `example`, summing them, and appending the result to a new list."
}
{
    "question_id": "14745022-45",
    "nl": "split column 'AB' in dataframe `df` into two columns by first whitespace ' '",
    "cmd": "df['AB'].str.split(' ', 1, expand=True)",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].str.split(' ', 1, expand=True)",
    "cmd_name": "conala",
    "gpt35_response": " Split column 'AB' in dataframe `df` into two columns by first whitespace ' '. This requires using the built-in `split` method to split the values in column 'AB' at every occurrence of whitespace ' ', and then creating two new columns in the data frame with the resulting values."
}
{
    "question_id": "14745022-49",
    "nl": "pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '",
    "cmd": "df['A'], df['B'] = df['AB'].str.split(' ', 1).str",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "df['VAR_STR'], df['VAR_STR'] = df['VAR_STR'].str.split(' ', 1).str",
    "cmd_name": "conala",
    "gpt35_response": " Pandas dataframe, how do I split a column 'AB' into two 'A' and 'B' on delimiter ' '. This requires using the built-in `split` method to split the values in column 'AB' at every occurrence of delimiter ' ', and then creating two new columns in the data frame with the resulting values."
}
{
    "question_id": "14734750-16",
    "nl": "get multiple parameters with same name from a url in pylons",
    "cmd": "request.params.getall('c')",
    "oracle_man": [],
    "canonical_cmd": "request.params.getall('c')",
    "cmd_name": "conala",
    "gpt35_response": " Get multiple parameters with same name from a url in pylons. This requires using the built-in `request.GET.getall()` method to retrieve all values associated with the specified parameter name from the URL query string."
}
{
    "question_id": "2637760-10",
    "nl": "match contents of an element to 'Example' in xpath (lxml)",
    "cmd": "tree.xpath(\".\/\/a[text()='Example']\")[0].tag",
    "oracle_man": [],
    "canonical_cmd": "tree.xpath(\".\/\/a[text()='Example']\")[0].tag",
    "cmd_name": "conala",
    "gpt35_response": " Match contents of an element to 'Example' in xpath (lxml). This requires using the xpath `contains` function to search for elements that contain the specified substring, and then filtering the resulting elements based on their exact contents."
}
{
    "question_id": "36381230-4",
    "nl": "find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'",
    "cmd": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))",
    "oracle_man": [
        "numpy.reference.generated.numpy.argwhere",
        "numpy.reference.generated.numpy.all"
    ],
    "canonical_cmd": "np.argwhere(np.all(VAR_STR == [VAR_STR], axis=(1, 2)))",
    "cmd_name": "conala",
    "gpt35_response": " Find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'. This requires using the built-in `numpy.array_equal()` method to compare each row of the 3d array to the specified row, and then returning the indices of any matching rows."
}
{
    "question_id": "14524322-31",
    "nl": "How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m\/%d\/%y'",
    "cmd": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m\/%d\/%y')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', 'VAR_STR').strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m\/%d\/%y'. This requires using the built-in `strptime` function to parse the input string into a `datetime` object, and then using the `strftime` method to format the `datetime` object as a string in the desired output format."
}
{
    "question_id": "14524322-31",
    "nl": "convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m\/%d\/%y'",
    "cmd": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m\/%d\/%y')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', 'VAR_STR').strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m\/%d\/%y'. This requires using the `datetime.strptime` function to parse the input string into a `datetime` object, and then using the `strftime` method with the appropriate format codes to format the `datetime` object as a string in the desired output format."
}
{
    "question_id": "11300383-68",
    "nl": "find the count of a word 'Hello' in a string `input_string`",
    "cmd": "input_string.count('Hello')",
    "oracle_man": [
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "VAR_STR.count('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Find the count of a word 'Hello' in a string `input_string`. This requires using the built-in `count` method to count the number of occurrences of the specified word within the string."
}
{
    "question_id": "42178481-4",
    "nl": "count the number of trailing question marks in string `my_text`",
    "cmd": "len(my_text) - len(my_text.rstrip('?'))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "len(VAR_STR) - len(VAR_STR.rstrip('?'))",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of trailing question marks in string `my_text`. This requires using regular expressions to match any trailing question marks in the string, and then counting the total number of matches found."
}
{
    "question_id": "7900882-78",
    "nl": "extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'",
    "cmd": "[d for d in a if d['name'] == 'pluto']",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR for VAR_STR in VAR_STR if VAR_STR['VAR_STR'] == 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": "- Extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'. This requires iterating through `a`, checking if each dictionary has a key 'name' and a value equal to 'pluto', and returning the dictionary with matching key-value pair(s)."
}
{
    "question_id": "7900882-19",
    "nl": "extract dictionary from list of dictionaries based on a key's value.",
    "cmd": "[d for d in a if d['name'] == 'pluto']",
    "oracle_man": [],
    "canonical_cmd": "[d for d in a if d['name'] == 'pluto']",
    "cmd_name": "conala",
    "gpt35_response": " Extract dictionary from list of dictionaries based on a key's value. This requires iterating through the list of dictionaries, checking if each dictionary has the desired key-value pair, and returning the dictionary containing that pair."
}
{
    "question_id": "7670226-12",
    "nl": "get second array column length of array `a`",
    "cmd": "a.shape[1]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.shape[1]",
    "cmd_name": "conala",
    "gpt35_response": " Get second array column length of array `a`. This requires accessing column 1 of `a` and finding its length."
}
{
    "question_id": "17134716-54",
    "nl": "convert the dataframe column 'col' from string types to datetime types",
    "cmd": "df['col'] = pd.to_datetime(df['col'])",
    "oracle_man": [
        "pandas.reference.api.pandas.to_datetime"
    ],
    "canonical_cmd": "df['VAR_STR'] = pd.to_datetime(df['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Convert the dataframe column 'col' from string types to datetime types. This requires using the pandas `to_datetime` function to convert the column to datetime."
}
{
    "question_id": "11403474-99",
    "nl": "remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`",
    "cmd": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub(\"[^\\\\w' ]\", '', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove all non-word, whitespace, or apostrophe characters from string `doesn't this mean it -technically- works?`. This requires using a regular expression to match and remove all non-word, whitespace, or apostrophe characters."
}
{
    "question_id": "11530799-66",
    "nl": "find the index of the element with the maximum value from a list 'a'.",
    "cmd": "max(enumerate(a), key=lambda x: x[1])[0]",
    "oracle_man": [
        "python.library.functions#enumerate",
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(enumerate(VAR_STR), key=lambda x: x[1])[0]",
    "cmd_name": "conala",
    "gpt35_response": " Find the index of the element with the maximum value from a list 'a'. This requires using the `max` function to find the maximum value, and the `index` function to find its index in `a`."
}
{
    "question_id": "29454773-91",
    "nl": "Check if string 'a b' only contains letters and spaces",
    "cmd": "\"\"\"a b\"\"\".replace(' ', '').isalpha()",
    "oracle_man": [
        "python.library.stdtypes#str.isalpha",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace(' ', '').isalpha()",
    "cmd_name": "conala",
    "gpt35_response": " Check if string 'a b' only contains letters and spaces. This requires using a regular expression to match and check that the string contains only letters and spaces."
}
{
    "question_id": "4008546-45",
    "nl": "pad 'dog' up to a length of 5 characters with 'x'",
    "cmd": "\"\"\"{s:{c}^{n}}\"\"\".format(s='dog', n=5, c='x')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{s:{c}^{n}}\"\"\".format(s='VAR_STR', n=5, c='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Pad 'dog' up to a length of 5 characters with 'x'. This requires using string concatenation or formatting to add 'x' characters to the end of the string until it reaches a length of 5."
}
{
    "question_id": "32926587-42",
    "nl": "find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`",
    "cmd": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\b(?:b+a)+b+\\\\b', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`. This requires using a regular expression to match and extract all substrings that meet the specified pattern."
}
{
    "question_id": "14442636-72",
    "nl": "check if a checkbox is checked in selenium python webdriver",
    "cmd": "driver.find_element_by_name('<check_box_name>').is_selected()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_name('<check_box_name>').is_selected()",
    "cmd_name": "conala",
    "gpt35_response": " Check if a checkbox is checked in selenium python webdriver. This requires using the `is_selected` function to check if the checkbox is selected."
}
{
    "question_id": "14442636-50",
    "nl": "determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver",
    "cmd": "driver.find_element_by_id('<check_box_id>').is_selected()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_id('VAR_STR').is_selected()",
    "cmd_name": "conala",
    "gpt35_response": " Determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver. This requires finding the checkbox element using the provided id, and then checking its selected status using the `is_selected` function."
}
{
    "question_id": "7657457-75",
    "nl": "Find all keys from a dictionary `d` whose values are `desired_value`",
    "cmd": "[k for k, v in d.items() if v == desired_value]",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[k for k, v in VAR_STR.items() if v == VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Find all keys from a dictionary `d` whose values are `desired_value`. This requires iterating through the keys of `d`, checking if each associated value matches `desired_value`, and returning all keys with matching values."
}
{
    "question_id": "20183069-6",
    "nl": "sort a multidimensional array `a` by column with index 1",
    "cmd": "sorted(a, key=lambda x: x[1])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a multidimensional array `a` by column with index 1. This requires using the `sorted` function with a key argument that sorts by the second element of each sub-array in `a`."
}
{
    "question_id": "3780403-38",
    "nl": "sum the length of all strings in a list `strings`",
    "cmd": "length = sum(len(s) for s in strings)",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "length = sum(len(s) for s in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum the length of all strings in a list `strings`. This requires using a loop to iterate through the list and adding up the length of each string."
}
{
    "question_id": "14986218-40",
    "nl": "Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself",
    "cmd": "{x[1]: x for x in lol}",
    "oracle_man": [],
    "canonical_cmd": "{x[1]: x for x in VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself. This requires iterating through `lol`, extracting the second element of each sub-list as the key and using the sub-list itself as the value, and creating a new dictionary with these key-value pairs."
}
{
    "question_id": "14734533-87",
    "nl": "get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'",
    "cmd": "df.loc[gb.groups['foo'], ('A', 'B')]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc"
    ],
    "canonical_cmd": "VAR_STR.loc[gb.groups['VAR_STR'], ('VAR_STR', 'VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'. This requires using boolean indexing to filter rows of `df` where column 'A' is equal to 'foo', and selecting only columns 'A' and 'B'."
}
{
    "question_id": "21684346-78",
    "nl": "display a pdf  file that has been downloaded as `my_pdf.pdf`",
    "cmd": "webbrowser.open('file:\/\/\/my_pdf.pdf')",
    "oracle_man": [
        "python.library.webbrowser#webbrowser.open"
    ],
    "canonical_cmd": "webbrowser.open('file:\/\/\/my_pdf.pdf')",
    "cmd_name": "conala",
    "gpt35_response": " Display a pdf file that has been downloaded as `my_pdf.pdf`. This requires using a PDF viewer or library to display the contents of the downloaded file."
}
{
    "question_id": "2173797-93",
    "nl": "sort 2d array `matrix` by row with index 1",
    "cmd": "sorted(matrix, key=itemgetter(1))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=itemgetter(1))",
    "cmd_name": "conala",
    "gpt35_response": " Sort 2d array `matrix` by row with index 1. This requires using the `sorted` function with a key argument that sorts by the second element of each row in `matrix`."
}
{
    "question_id": "39373620-92",
    "nl": "get the max string length in list `i`",
    "cmd": "max(len(word) for word in i)",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(len(word) for word in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the max string length in list `i`. This requires using the `max` function with a key argument that computes the length of each string in `i`."
}
{
    "question_id": "39373620-74",
    "nl": "get the maximum string length in nested list `i`",
    "cmd": "len(max(i, key=len))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#max"
    ],
    "canonical_cmd": "len(max(VAR_STR, key=len))",
    "cmd_name": "conala",
    "gpt35_response": " Get the maximum string length in nested list `i`. This requires flattening the nested list into a one-dimensional list, and then using the `max` function with a key argument that computes the length of each string."
}
{
    "question_id": "17352321-10",
    "nl": "find all occurrences of the pattern '\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+' within `strs`",
    "cmd": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Find all occurrences of the pattern '\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+' within `strs`. This requires searching `strs` for all matches that fit the given pattern."
}
{
    "question_id": "12572362-45",
    "nl": "print a string after a specific substring ', ' in string `my_string `",
    "cmd": "print(my_string.split(', ', 1)[1])",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "print(VAR_STR.split(', ', 1)[1])",
    "cmd_name": "conala",
    "gpt35_response": " Print a string after a specific substring ', ' in string `my_string `. This requires finding the index of the substring ', ' in `my_string`, and then printing the substring that comes after it."
}
{
    "question_id": "677656-11",
    "nl": "extract attribute `my_attr` from each object in list `my_list`",
    "cmd": "[o.my_attr for o in my_list]",
    "oracle_man": [],
    "canonical_cmd": "[o.VAR_STR for o in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Extract attribute `my_attr` from each object in list `my_list`. This requires iterating through `my_list` and extracting the value of the attribute `my_attr` from each object."
}
{
    "question_id": "13842088-36",
    "nl": "set the value of cell `['x']['C']` equal to 10 in dataframe `df`",
    "cmd": "df['x']['C'] = 10",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[VAR_STR] = 10",
    "cmd_name": "conala",
    "gpt35_response": " Set the value of cell `['x']['C']` equal to 10 in dataframe `df`. This requires accessing cell `['x']['C']` in dataframe `df` and assigning it the value of 10."
}
{
    "question_id": "9621388-67",
    "nl": "how to get month name of datetime `today`",
    "cmd": "today.strftime('%B')",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "VAR_STR.strftime('%B')",
    "cmd_name": "conala",
    "gpt35_response": " How to get month name of datetime `today`. This requires getting the month number from `today`, and then mapping that number to the corresponding month name."
}
{
    "question_id": "9621388-54",
    "nl": "get month name from a datetime object `today`",
    "cmd": "today.strftime('%B')",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "VAR_STR.strftime('%B')",
    "cmd_name": "conala",
    "gpt35_response": " Get month name from a datetime object `today`. This requires getting the month number from `today`, and then mapping that number to the corresponding month name."
}
{
    "question_id": "18050937-57",
    "nl": "execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it",
    "cmd": "subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " Execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it. This requires executing the bash commands 'grep -r PASSED *.log', 'sort -u', and 'wc -l', with the output from each command being piped into the next command."
}
{
    "question_id": "4004550-67",
    "nl": "Converting string lists `s` to float list",
    "cmd": "floats = [float(x) for x in s.split()]",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "floats = [float(x) for x in VAR_STR.split()]",
    "cmd_name": "conala",
    "gpt35_response": " Converting string lists `s` to float list. This requires iterating through `s` and converting each element to a float, and then creating a new list with the resulting values."
}
{
    "question_id": "4004550-27",
    "nl": "Converting string lists `s` to float list",
    "cmd": "floats = map(float, s.split())",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "floats = map(float, VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Converting string lists `s` to float list. This requires iterating through `s` and converting each element to a float, and then creating a new list with the resulting values."
}
{
    "question_id": "3476732-50",
    "nl": "iterate backwards from 10 to 0",
    "cmd": "range(10, 0, -1)",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "range(10, 0, -1)",
    "cmd_name": "conala",
    "gpt35_response": " Iterate backwards from 10 to 0. This requires starting at 10 and decrementing by 1 until 0 is reached."
}
{
    "question_id": "18742657-57",
    "nl": "Execute Shell Script from python with variable",
    "cmd": "subprocess.call(['test.sh', str(domid)])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "subprocess.call(['test.sh', str(domid)])",
    "cmd_name": "conala",
    "gpt35_response": " Execute Shell Script from python with variable. This requires executing a bash command that contains a variable, with the value of the variable being passed in from the python script."
}
{
    "question_id": "25355705-76",
    "nl": "count the number of integers in list `a`",
    "cmd": "sum(isinstance(x, int) for x in a)",
    "oracle_man": [
        "python.library.functions#isinstance",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(isinstance(x, int) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of integers in list `a`. This requires iterating through `a` and counting the number of elements that are integers."
}
{
    "question_id": "307305-84",
    "nl": "play the wav file 'sound.wav'",
    "cmd": "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)",
    "oracle_man": [
        "python.library.winsound#winsound.PlaySound"
    ],
    "canonical_cmd": "winsound.PlaySound('VAR_STR', winsound.SND_FILENAME)",
    "cmd_name": "conala",
    "gpt35_response": " Play the wav file 'sound.wav'. This requires loading the contents of 'sound.wav' into a sound object, and then playing that sound object."
}
{
    "question_id": "3040904-33",
    "nl": "save json output from a url \u2018http:\/\/search.twitter.com\/search.json?q=hi\u2019 to file \u2018hi.json\u2019 in Python 2",
    "cmd": "urllib.request.urlretrieve('http:\/\/search.twitter.com\/search.json?q=hi', 'hi.json')",
    "oracle_man": [
        "python.library.urllib.request#urllib.request.urlretrieve"
    ],
    "canonical_cmd": "urllib.request.urlretrieve('http:\/\/search.twitter.com\/search.json?q=hi',\n    'hi.json')",
    "cmd_name": "conala",
    "gpt35_response": " Save json output from a url \u2018http:\/\/search.twitter.com\/search.json?q=hi\u2019 to file \u2018hi.json\u2019 in Python 2. This requires executing a http request to the given url, parsing the resulting json data, and then saving that data to a file named 'hi.json'."
}
{
    "question_id": "15886340-14",
    "nl": "remove uppercased characters in string `s`",
    "cmd": "re.sub('[^A-Z]', '', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^A-Z]', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove uppercased characters in string `s`. This requires iterating through `s` and removing any characters that are uppercase."
}
{
    "question_id": "37619348-38",
    "nl": "Get a list of lists with summing the values of the second element from each list of lists `data`",
    "cmd": "[[sum([x[1] for x in i])] for i in data]",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[[sum([x[1] for x in i])] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of lists with summing the values of the second element from each list of lists `data`. This requires iterating through `data` and summing the second element from each inner list, and then creating a new list with those sums."
}
{
    "question_id": "37619348-52",
    "nl": "summing the second item in a list of lists of lists",
    "cmd": "[sum([x[1] for x in i]) for i in data]",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[sum([x[1] for x in i]) for i in data]",
    "cmd_name": "conala",
    "gpt35_response": " Summing the second item in a list of lists of lists. This requires iterating through the outer list, then for each inner list, iterating through it and summing the second item from each innermost list."
}
{
    "question_id": "22128218-47",
    "nl": "apply functions `mean` and `std` to each column in dataframe `df`",
    "cmd": "df.groupby(lambda idx: 0).agg(['mean', 'std'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.agg"
    ],
    "canonical_cmd": "VAR_STR.groupby(lambda idx: 0).agg(['VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Apply functions `mean` and `std` to each column in dataframe `df`. This requires iterating through each column in `df` and applying the functions `mean` and `std` to each one."
}
{
    "question_id": "2269827-12",
    "nl": "convert an int 65 to hex string",
    "cmd": "hex(65)",
    "oracle_man": [
        "python.library.functions#hex"
    ],
    "canonical_cmd": "hex(65)",
    "cmd_name": "conala",
    "gpt35_response": " Convert an int 65 to hex string. This requires converting 65 to its hex equivalent, and then returning that value as a string."
}
{
    "question_id": "21778118-32",
    "nl": "count the number of non-nan elements in a numpy ndarray matrix `data`",
    "cmd": "np.count_nonzero(~np.isnan(data))",
    "oracle_man": [
        "numpy.reference.generated.numpy.count_nonzero",
        "numpy.reference.generated.numpy.isnan"
    ],
    "canonical_cmd": "np.count_nonzero(~np.isnan(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of non-nan elements in a numpy ndarray matrix `data`. This requires iterating through the matrix and counting the number of elements that are not nan."
}
{
    "question_id": "2261011-58",
    "nl": "How can I resize the root window in Tkinter?",
    "cmd": "root.geometry('500x500')",
    "oracle_man": [],
    "canonical_cmd": "root.geometry('500x500')",
    "cmd_name": "conala",
    "gpt35_response": "- To resize the root window in Tkinter, you need to modify the `geometry` method of the main application window object."
}
{
    "question_id": "19410585-47",
    "nl": "add header 'WWWAuthenticate' in a flask app with value 'Basic realm=\"test\"'",
    "cmd": "response.headers['WWW-Authenticate'] = 'Basic realm=\"test\"'",
    "oracle_man": [],
    "canonical_cmd": "response.headers['WWW-Authenticate'] = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " To add the header 'WWWAuthenticate' in a Flask app with value 'Basic realm=\"test\"', you need to modify the headers of the response object with Flask's `make_response` function and set the value of the 'WWWAuthenticate' header to 'Basic realm=\"test\"'."
}
{
    "question_id": "38331568-38",
    "nl": "return the column for value 38.15 in dataframe `df`",
    "cmd": "df.ix[:, (df.loc[0] == 38.15)].columns",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc"
    ],
    "canonical_cmd": "VAR_STR.ix[:, (VAR_STR.loc[0] == 38.15)].columns",
    "cmd_name": "conala",
    "gpt35_response": " To return the column for value 38.15 in dataframe `df`, you need to access the column by name or index with the `loc` method of the dataframe, and filter the rows by equality to 38.15."
}
{
    "question_id": "13668393-94",
    "nl": "sort two lists `list1` and `list2` together using lambda function",
    "cmd": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sorted",
        "python.library.functions#list"
    ],
    "canonical_cmd": "[list(x) for x in zip(*sorted(zip(VAR_STR, VAR_STR), key=lambda pair: pair[0]))]",
    "cmd_name": "conala",
    "gpt35_response": " To sort two lists `list1` and `list2` together using a lambda function, you need to use the `sorted` function and pass a lambda function as the `key` argument that returns the corresponding element in the other list."
}
{
    "question_id": "22918212-12",
    "nl": "drop duplicate indexes in a pandas data frame `df`",
    "cmd": "df[~df.index.duplicated()]",
    "oracle_man": [
        "pandas.reference.api.pandas.index.duplicated"
    ],
    "canonical_cmd": "VAR_STR[~VAR_STR.index.duplicated()]",
    "cmd_name": "conala",
    "gpt35_response": " To drop duplicate indexes in a Pandas data frame `df`, you need to use the `drop_duplicates` method of the dataframe with the `keep` argument set to either 'first' or 'last' depending on which row to keep."
}
{
    "question_id": "9354127-56",
    "nl": "grab one random item from a database `model` in django\/postgresql",
    "cmd": "model.objects.all().order_by('?')[0]",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "VAR_STR.objects.all().order_by('?')[0]",
    "cmd_name": "conala",
    "gpt35_response": " To grab one random item from a database `model` in Django\/PostgreSQL, you need to use the `Random` function in the database query with the `order_by` argument."
}
{
    "question_id": "2582580-92",
    "nl": "select a first form with no name in mechanize",
    "cmd": "br.select_form(nr=0)",
    "oracle_man": [],
    "canonical_cmd": "br.select_form(nr=0)",
    "cmd_name": "conala",
    "gpt35_response": " To select a first form with no name in Mechanize, you need to use the `select_form` method of the browser object and pass a `name` argument of `None`."
}
{
    "question_id": "753052-14",
    "nl": "strip html from strings",
    "cmd": "re.sub('<[^<]+?>', '', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('<[^<]+?>', '', text)",
    "cmd_name": "conala",
    "gpt35_response": " To strip HTML from strings, you can use the `BeautifulSoup` library and its `get_text()` method."
}
{
    "question_id": "26033239-78",
    "nl": "convert a list of objects `list_name` to json string `json_string`",
    "cmd": "json_string = json.dumps([ob.__dict__ for ob in list_name])",
    "oracle_man": [
        "python.library.json#json.dumps"
    ],
    "canonical_cmd": "VAR_STR = json.dumps([ob.__dict__ for ob in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " To convert a list of objects `list_name` to JSON string `json_string`, you can use the `json` library and its `dumps()` method."
}
{
    "question_id": "13168252-36",
    "nl": "Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`",
    "cmd": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "[x[0] for x in VAR_STR if any(x[0] == y[0] for y in VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " To get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with the first value in `l2`, you need to use a list comprehension that checks for membership of the first value of `l1` in a list comprehension that extracts the first value of each tuple in `l2`."
}
{
    "question_id": "27758657-77",
    "nl": "find the largest integer less than `x`",
    "cmd": "int(math.ceil(x)) - 1",
    "oracle_man": [
        "python.library.math#math.ceil",
        "python.library.functions#int"
    ],
    "canonical_cmd": "int(math.ceil(VAR_STR)) - 1",
    "cmd_name": "conala",
    "gpt35_response": " To find the largest integer less than `x`, you can use the `floor` function from the `math` module."
}
{
    "question_id": "18082130-81",
    "nl": "remove all words which contains number from a string `words` using regex",
    "cmd": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()",
    "oracle_man": [
        "python.library.re#re.sub",
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "re.sub('\\\\w*\\\\d\\\\w*', '', VAR_STR).strip()",
    "cmd_name": "conala",
    "gpt35_response": " To remove all words which contain a number from a string `words` using regex, you can use the `re.sub()` method with a regex pattern that matches words containing digits."
}
{
    "question_id": "18663644-86",
    "nl": "match a sharp, followed by letters (including accent characters) in string `str1` using a regex",
    "cmd": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "hashtags = re.findall('#(\\\\w+)', VAR_STR, re.UNICODE)",
    "cmd_name": "conala",
    "gpt35_response": " To match a sharp, followed by letters (including accent characters) in string `str1` using a regex, you can use a regex pattern that matches the '#' character followed by any number of letters (using the `\\w` and `\\p{L}` character classes)."
}
{
    "question_id": "2133571-79",
    "nl": "Concat a list of strings `lst` using string formatting",
    "cmd": "\"\"\"\"\"\".join(lst)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " To concat a list of strings `lst` using string formatting, you can use the `join()` method of a format string using curly braces as placeholders, and pass the list of strings as arguments to the `join()` method."
}
{
    "question_id": "7164679-63",
    "nl": "send cookies `cookie` in a post request to url 'http:\/\/wikipedia.org' with the python requests library",
    "cmd": "r = requests.post('http:\/\/wikipedia.org', cookies=cookie)",
    "oracle_man": [
        "pygame.ref.fastevent#pygame.fastevent.post"
    ],
    "canonical_cmd": "r = requests.post('VAR_STR', cookies=VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " To send cookies `cookie` in a POST request to URL 'http:\/\/wikipedia.org' with the Python Requests library, you need to create a dictionary of cookies and pass it as the `cookies` parameter in the `post()` method of a `requests.Session` object."
}
{
    "question_id": "15248272-21",
    "nl": "list comprehension that produces integers between 11 and 19",
    "cmd": "[i for i in range(100) if i > 10 if i < 20]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[i for i in range(100) if i > 10 if i < 20]",
    "cmd_name": "conala",
    "gpt35_response": " To create a list comprehension that produces integers between 11 and 19, you can use the `range()` function and filter out the values outside the range with a conditional expression."
}
{
    "question_id": "300445-24",
    "nl": "unquote a urlencoded unicode string '%0a'",
    "cmd": "urllib.parse.unquote('%0a')",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote"
    ],
    "canonical_cmd": "urllib.parse.unquote('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " To unquote a URL-encoded Unicode string `%0a`, you can use the `unquote()` method from the `urllib.parse` module."
}
{
    "question_id": "300445-76",
    "nl": "decode url `url` from UTF-16 code to UTF-8 code",
    "cmd": "urllib.parse.unquote(url).decode('utf8')",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "urllib.parse.unquote(VAR_STR).decode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " To decode a URL `url` from UTF-16 code to UTF-8 code, you can use the `decode()` method of the `bytes` object after encoding the string as UTF-16 with the `encode()` method."
}
{
    "question_id": "3961581-71",
    "nl": "display current time in readable format",
    "cmd": "time.strftime('%l:%M%p %z on %b %d, %Y')",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "time.strftime('%l:%M%p %z on %b %d, %Y')",
    "cmd_name": "conala",
    "gpt35_response": " To display the current time in a readable format, you can use the `strftime()` method of a `datetime.datetime` object with a format string of your choice."
}
{
    "question_id": "27905295-6",
    "nl": "replace nans by preceding values in pandas dataframe `df`",
    "cmd": "df.fillna(method='ffill', inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.fillna"
    ],
    "canonical_cmd": "VAR_STR.fillna(method='ffill', inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " To replace NaNs by preceding values in Pandas dataframe `df`, you can use the `fillna()` method of the dataframe with the `method` argument set to `'ffill'`."
}
{
    "question_id": "19643099-48",
    "nl": "sort list `list_` based on first element of each tuple and by the length of the second element of each tuple",
    "cmd": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: [x[0], len(x[1]), x[1]])",
    "cmd_name": "conala",
    "gpt35_response": "- Sort the list `list_` based on the first element of each tuple and by the length of the second element of each tuple. This requires accessing the first and second elements of each tuple, sorting by the first element, and in case of a tie, sorting by the length of the second element.\n"
}
{
    "question_id": "1683775-89",
    "nl": "sort a multidimensional list `a` by second and third column",
    "cmd": "a.sort(key=operator.itemgetter(2, 3))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.itemgetter(2, 3))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a multidimensional list `a` by the second and third column. This requires accessing the second and third column of each element in the list, sorting the list by the second column and then by the third column.\n"
}
{
    "question_id": "7270321-45",
    "nl": "Get all indexes of a list `a` where each value is greater than `2`",
    "cmd": "[i for i in range(len(a)) if a[i] > 2]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[i for i in range(len(VAR_STR)) if VAR_STR[i] > 2]",
    "cmd_name": "conala",
    "gpt35_response": " Get all indexes of a list `a` where each value is greater than `2`. This requires iterating over the elements in the list, checking if the value is greater than `2`, and appending the index of the element to a new list.\n"
}
{
    "question_id": "5399112-45",
    "nl": "replace special characters in url 'http:\/\/spam.com\/go\/' using the '%xx' escape",
    "cmd": "urllib.parse.quote('http:\/\/spam.com\/go\/')",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.quote"
    ],
    "canonical_cmd": "urllib.parse.quote('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace special characters in URL 'http:\/\/spam.com\/go\/' using the '%xx' escape. This requires iterating over the characters in the URL, checking if they are special characters, and replacing them with the corresponding escape sequence '%xx'.\n"
}
{
    "question_id": "5486725-74",
    "nl": "execute a command in the command prompt to list directory contents of the c drive `c:\\\\'",
    "cmd": "os.system('dir c:\\\\')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('dir c:\\\\')",
    "cmd_name": "conala",
    "gpt35_response": " Execute a command in the command prompt to list directory contents of the C drive `c:\\\\'. This requires opening the command prompt, executing the command 'dir C:\\', and storing the output.\n"
}
{
    "question_id": "17846545-92",
    "nl": "Compose keys from dictionary `d1` with respective values in dictionary `d2`",
    "cmd": "result = {k: d2.get(v) for k, v in list(d1.items())}",
    "oracle_man": [
        "python.library.functions#list",
        "django.ref.class-based-views.generic-display#django.views.generic.list.BaseListView.get",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "result = {k: VAR_STR.get(v) for k, v in list(VAR_STR.items())}",
    "cmd_name": "conala",
    "gpt35_response": " Compose keys from dictionary `d1` with respective values in dictionary `d2`. This requires iterating over the keys and values in `d1` and using them to form new keys in a new dictionary with values from `d2`.\n"
}
{
    "question_id": "2191699-35",
    "nl": "find all the elements that consists value '1' in a list of tuples 'a'",
    "cmd": "[item for item in a if 1 in item]",
    "oracle_man": [],
    "canonical_cmd": "[item for item in VAR_STR if 1 in item]",
    "cmd_name": "conala",
    "gpt35_response": " Find all the elements that consist of value '1' in a list of tuples `a`. This requires iterating over the tuples in the list, checking if the second element of each tuple is '1', and appending the tuple to a new list if it is.\n"
}
{
    "question_id": "2191699-81",
    "nl": "find all elements in a list of tuples `a` where the first element of each tuple equals 1",
    "cmd": "[item for item in a if item[0] == 1]",
    "oracle_man": [],
    "canonical_cmd": "[item for item in VAR_STR if item[0] == 1]",
    "cmd_name": "conala",
    "gpt35_response": " Find all the elements in a list of tuples `a` where the first element of each tuple equals 1. This requires iterating over the tuples in the list, checking if the first element of each tuple is equal to 1, and appending the tuple to a new list if it is.\n"
}
{
    "question_id": "5625524-90",
    "nl": "execute os command ''TASKKILL \/F \/IM firefox.exe''",
    "cmd": "os.system('TASKKILL \/F \/IM firefox.exe')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Execute OS command ''TASKKILL \/F \/IM firefox.exe'. This requires opening the command prompt and executing the command 'TASKKILL \/F \/IM firefox.exe' to force-close the Firefox browser.\n"
}
{
    "question_id": "123198-58",
    "nl": "copy a file from `src` to `dst`",
    "cmd": "copyfile(src, dst)",
    "oracle_man": [
        "python.library.shutil#shutil.copyfile"
    ],
    "canonical_cmd": "copyfile(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Copy a file from `src` to `dst`. This requires accessing the source file at `src`, creating a new file at `dst`, and copying the contents of `src` to `dst`.\n"
}
{
    "question_id": "123198-2",
    "nl": "copy file \"\/dir\/file.ext\" to \"\/new\/dir\/newname.ext\"",
    "cmd": "shutil.copy2('\/dir\/file.ext', '\/new\/dir\/newname.ext')",
    "oracle_man": [
        "python.library.shutil#shutil.copy2"
    ],
    "canonical_cmd": "shutil.copy2('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Copy file \"\/dir\/file.ext\" to \"\/new\/dir\/newname.ext\". This requires accessing the file at `\/dir\/file.ext`, creating a new file at `\/new\/dir\/newname.ext`, and copying the contents of the original file to the new file.\n"
}
{
    "question_id": "123198-90",
    "nl": "copy file '\/dir\/file.ext' to '\/new\/dir'",
    "cmd": "shutil.copy2('\/dir\/file.ext', '\/new\/dir')",
    "oracle_man": [
        "python.library.shutil#shutil.copy2"
    ],
    "canonical_cmd": "shutil.copy2('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Copy file '\/dir\/file.ext' to '\/new\/dir'. This requires accessing the file at `\/dir\/file.ext`, creating a new file at `\/new\/dir\/file.ext`, and copying the contents of the original file to the new file.\n"
}
{
    "question_id": "17462994-4",
    "nl": "Get a string with string formatting from dictionary `d`",
    "cmd": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])",
    "oracle_man": [
        "python.library.functions#format",
        "python.library.stdtypes#dict.items",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in VAR_STR.items()])",
    "cmd_name": "conala",
    "gpt35_response": " Get a string with string formatting from dictionary `d`. This requires accessing the values in the dictionary and using them to format a string.\n"
}
{
    "question_id": "227459-13",
    "nl": "get the ASCII value of a character 'a' as an int",
    "cmd": "ord('a')",
    "oracle_man": [
        "python.library.functions#ord"
    ],
    "canonical_cmd": "ord('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get the ASCII value of a character 'a' as an int. This requires accessing the ASCII table and finding the corresponding value of 'a'.\n"
}
{
    "question_id": "227459-75",
    "nl": "get the ASCII value of a character u'\u3042' as an int",
    "cmd": "ord('\\u3042')",
    "oracle_man": [
        "python.library.functions#ord"
    ],
    "canonical_cmd": "ord('\u3042')",
    "cmd_name": "conala",
    "gpt35_response": " Get the ASCII value of a character u'\u3042' as an int. This requires accessing the Unicode table and finding the corresponding value of '\u3042'.\n"
}
{
    "question_id": "227459-40",
    "nl": "get the ASCII value of a character as an int",
    "cmd": "ord()",
    "oracle_man": [
        "python.library.functions#ord"
    ],
    "canonical_cmd": "ord()",
    "cmd_name": "conala",
    "gpt35_response": " Get the ASCII value of a character as an int. This requires accessing the ASCII table and finding the corresponding value of the character.\n"
}
{
    "question_id": "1580270-33",
    "nl": "What's the best way to search for a Python dictionary value in a list of dictionaries?",
    "cmd": "any(d['site'] == 'Superuser' for d in data)",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(d['site'] == 'Superuser' for d in data)",
    "cmd_name": "conala",
    "gpt35_response": " What's the best way to search for a Python dictionary value in a list of dictionaries? This requires iterating over the list of dictionaries, accessing the values of each dictionary, and checking if the desired value is in any of them.\n"
}
{
    "question_id": "11414596-44",
    "nl": "return dataframe `df` with last row dropped",
    "cmd": "df.ix[:-1]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.ix[:-1]",
    "cmd_name": "conala",
    "gpt35_response": " Return dataframe `df` with last row dropped. This requires accessing the dataframe `df`, finding the last row, and dropping it from the dataframe.\n"
}
{
    "question_id": "15103484-71",
    "nl": "separate numbers from characters in string \"30m1000n20m\"",
    "cmd": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')",
    "cmd_name": "conala",
    "gpt35_response": " Separate numbers from characters in string \"30m1000n20m\". This requires iterating over the characters in the string, checking if they are numbers or letters, and appending them to separate lists.\n"
}
{
    "question_id": "15103484-54",
    "nl": "separate numbers and characters in string '20M10000N80M'",
    "cmd": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('([0-9]+|[A-Z])', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Separate numbers and characters in string '20M10000N80M'. This requires iterating over the characters in the string, checking if they are numbers or letters, and appending them to separate lists."
}
{
    "question_id": "15103484-24",
    "nl": "separate numbers and characters in string '20M10000N80M'",
    "cmd": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('([0-9]+)([A-Z])', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Separate numbers and characters in string '20M10000N80M'. This requires iterating through every character in the string and determining if it is a number or a character, and then building two separate lists of numbers and characters."
}
{
    "question_id": "2052390-4",
    "nl": "manually throw\/raise a `ValueError` exception with the message 'A very specific bad thing happened'",
    "cmd": "raise ValueError('A very specific bad thing happened')",
    "oracle_man": [
        "python.library.exceptions#ValueError"
    ],
    "canonical_cmd": "raise VAR_STR('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Manually throw\/raise a `ValueError` exception with the message 'A very specific bad thing happened'. This requires creating a value error and passing the message 'A very specific bad thing happened' to the exception raise method."
}
{
    "question_id": "2052390-88",
    "nl": "throw an exception \"I know Python!\"",
    "cmd": "raise Exception('I know Python!')",
    "oracle_man": [
        "python.library.exceptions#Exception"
    ],
    "canonical_cmd": "raise Exception('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Throw an exception \"I know Python!\". This requires creating an exception with the message \"I know Python!\" and passing it to the exception raise method."
}
{
    "question_id": "2052390-69",
    "nl": "Manually throw an exception \"I know python!\"",
    "cmd": "raise Exception('I know python!')",
    "oracle_man": [
        "python.library.exceptions#Exception"
    ],
    "canonical_cmd": "raise Exception('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Manually throw an exception \"I know python!\". This requires creating an exception with the message \"I know python!\" and passing it to the exception raise method."
}
{
    "question_id": "2052390-39",
    "nl": "throw a ValueError with message 'represents a hidden bug, do not catch this'",
    "cmd": "raise ValueError('represents a hidden bug, do not catch this')",
    "oracle_man": [
        "python.library.exceptions#ValueError"
    ],
    "canonical_cmd": "raise ValueError('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Throw a ValueError with message 'represents a hidden bug, do not catch this', 'foo', 'bar', 'baz'. This requires creating a ValueError with the message 'represents a hidden bug, do not catch this' and passing it along with the strings 'foo', 'bar', and 'baz' to the exception raise statement."
}
{
    "question_id": "2052390-95",
    "nl": "throw an Exception with message 'This is the exception you expect to handle'",
    "cmd": "raise Exception('This is the exception you expect to handle')",
    "oracle_man": [
        "python.library.exceptions#Exception"
    ],
    "canonical_cmd": "raise Exception('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Throw an Exception with message 'This is the exception you expect to handle'. This requires creating an Exception with the message 'This is the exception you expect to handle' and passing it to the exception raise statement."
}
{
    "question_id": "2052390-76",
    "nl": "throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'",
    "cmd": "raise ValueError('A very specific bad thing happened')",
    "oracle_man": [
        "python.library.exceptions#ValueError"
    ],
    "canonical_cmd": "raise ValueError('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'. This requires creating a ValueError with the message 'A very specific bad thing happened' and passing it along with the strings 'foo', 'bar', and 'baz' to the exception raise statement."
}
{
    "question_id": "2052390-99",
    "nl": "throw a runtime error with message 'specific message'",
    "cmd": "raise RuntimeError('specific message')",
    "oracle_man": [
        "python.library.exceptions#RuntimeError"
    ],
    "canonical_cmd": "raise RuntimeError('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Throw a runtime error with message 'specific message'. This requires creating a runtime error with message 'specific message' and passing it to the exception raise statement."
}
{
    "question_id": "2052390-32",
    "nl": "throw an assertion error with message \"Unexpected value of 'distance'!\", distance",
    "cmd": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)",
    "oracle_man": [
        "python.library.exceptions#AssertionError"
    ],
    "canonical_cmd": "raise AssertionError('VAR_STR', distance)",
    "cmd_name": "conala",
    "gpt35_response": " Throw an assertion error with message \"Unexpected value of 'distance'!\", distance. This requires creating an AssertionError with the message \"Unexpected value of 'distance'!\" and passing it along with the variable distance to the exception raise statement."
}
{
    "question_id": "12897374-47",
    "nl": "remove duplicates from list `myset`",
    "cmd": "mynewlist = list(myset)",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "mynewlist = list(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove duplicates from list `myset`. This requires creating a set from the list `myset` and then converting it back to a list."
}
{
    "question_id": "12897374-66",
    "nl": "get unique values from the list `['a', 'b', 'c', 'd']`",
    "cmd": "set(['a', 'b', 'c', 'd'])",
    "oracle_man": [
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "set([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Get unique values from the list `['a', 'b', 'c', 'd']`. This requires creating a set from the list and then converting it back into a list."
}
{
    "question_id": "35005907-50",
    "nl": "split string `s` based on white spaces",
    "cmd": "re.findall('\\\\s+|\\\\S+', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\s+|\\\\S+', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` based on white spaces. This requires calling the `split` method on the `s` string with whitespace as a parameter."
}
{
    "question_id": "2636755-57",
    "nl": "convert a hex string `x` to string",
    "cmd": "y = str(int(x, 16))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "y = str(int(VAR_STR, 16))",
    "cmd_name": "conala",
    "gpt35_response": " Convert a hex string `x` to string. This requires calling the `decode` method on the `x` string, passing `hex` as the encoding type."
}
{
    "question_id": "3925465-40",
    "nl": "get list of duplicated elements in range of 3",
    "cmd": "[y for x in range(3) for y in [x, x]]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[y for x in range(3) for y in [x, x]]",
    "cmd_name": "conala",
    "gpt35_response": " Get list of duplicated elements in range of 3. This requires iterating through the range of 3 and adding any duplicates to a new list."
}
{
    "question_id": "9053260-30",
    "nl": "remove elements in list `b` from list `a`",
    "cmd": "[x for x in a if x not in b]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x not in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Remove elements in list `b` from list `a`. This requires iterating through list `b` and removing any elements that are also in list `a`."
}
{
    "question_id": "6667201-23",
    "nl": "create a list `matrix` containing 5 lists, each of 5 items  all set to 0",
    "cmd": "matrix = [([0] * 5) for i in range(5)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [([0] * 5) for i in range(5)]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list `matrix` containing 5 lists, each of 5 items all set to 0. This requires creating a list `matrix` with 5 empty lists and then iterating through each list, appending 5 zeroes to each."
}
{
    "question_id": "3471999-53",
    "nl": "interleave the elements of two lists `a` and `b`",
    "cmd": "[j for i in zip(a, b) for j in i]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[j for i in zip(VAR_STR, VAR_STR) for j in i]",
    "cmd_name": "conala",
    "gpt35_response": " Interleave the elements of two lists `a` and `b`. This requires iterating through the lists, appending the first element of `a`, then the first element of `b`, then the second element of `a`, then the second element of `b`, and so on until all elements have been interleaved."
}
{
    "question_id": "3471999-1",
    "nl": "merge two lists `a` and `b` into a single list",
    "cmd": "[j for i in zip(a, b) for j in i]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[j for i in zip(VAR_STR, VAR_STR) for j in i]",
    "cmd_name": "conala",
    "gpt35_response": " Merge two lists `a` and `b` into a single list. This requires creating an empty list, iterating through both lists and appending all elements to the empty list, then returning the merged list."
}
{
    "question_id": "7831371-34",
    "nl": "SQLite get a list of column names from cursor object `cursor`",
    "cmd": "names = list(map(lambda x: x[0], cursor.description))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#list"
    ],
    "canonical_cmd": "names = list(map(lambda x: x[0], VAR_STR.description))",
    "cmd_name": "conala",
    "gpt35_response": " SQLite get a list of column names from cursor object `cursor`. This requires calling the `description` attribute of the cursor to get a list of the column names."
}
{
    "question_id": "27218543-39",
    "nl": "select the last business day of the month for each month in 2014 in pandas",
    "cmd": "pd.date_range('1\/1\/2014', periods=12, freq='BM')",
    "oracle_man": [
        "pandas.reference.api.pandas.date_range"
    ],
    "canonical_cmd": "pd.date_range('1\/1\/2014', periods=12, freq='BM')",
    "cmd_name": "conala",
    "gpt35_response": " Select the last business day of the month for each month in 2014 in pandas. This requires creating a pandas dataframe of all the business days in 2014 and selecting the last business day of each month."
}
{
    "question_id": "42142756-73",
    "nl": "rename `last` row index label in dataframe `df` to `a`",
    "cmd": "df = df.rename(index={last: 'a'})",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.rename"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.rename(index={VAR_STR: 'VAR_STR'})",
    "cmd_name": "conala",
    "gpt35_response": "- Rename the `last` row index label in dataframe `df` to `a`. This requires accessing the row index in dataframe `df` with label `last` and changing it to `a`."
}
{
    "question_id": "3428769-74",
    "nl": "Finding the largest delta between two integers in a list in python",
    "cmd": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#abs",
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))",
    "cmd_name": "conala",
    "gpt35_response": " Finding the largest delta between two integers in a list in python. This requires iterating through the list of integers, subtracting adjacent integers, and keeping track of the largest delta."
}
{
    "question_id": "510348-43",
    "nl": "delay for \"5\" seconds",
    "cmd": "time.sleep(5)",
    "oracle_man": [
        "python.library.time#time.sleep"
    ],
    "canonical_cmd": "time.sleep(5)",
    "cmd_name": "conala",
    "gpt35_response": " Delay for \"5\" seconds. This requires pausing program execution for 5 seconds."
}
{
    "question_id": "510348-64",
    "nl": "make a 60 seconds time delay",
    "cmd": "time.sleep(60)",
    "oracle_man": [
        "python.library.time#time.sleep"
    ],
    "canonical_cmd": "time.sleep(60)",
    "cmd_name": "conala",
    "gpt35_response": " Make a 60 seconds time delay. This requires pausing program execution for 60 seconds."
}
{
    "question_id": "510348-96",
    "nl": "make a 0.1 seconds time delay",
    "cmd": "sleep(0.1)",
    "oracle_man": [
        "python.library.time#time.sleep"
    ],
    "canonical_cmd": "sleep(0.1)",
    "cmd_name": "conala",
    "gpt35_response": " Make a 0.1 seconds time delay. This requires pausing program execution for 0.1 seconds."
}
{
    "question_id": "510348-83",
    "nl": "make a 60 seconds time delay",
    "cmd": "time.sleep(60)",
    "oracle_man": [
        "python.library.time#time.sleep"
    ],
    "canonical_cmd": "time.sleep(60)",
    "cmd_name": "conala",
    "gpt35_response": " Make a 60 seconds time delay. This requires pausing program execution for 60 seconds."
}
{
    "question_id": "510348-35",
    "nl": "make a 0.1 seconds time delay",
    "cmd": "time.sleep(0.1)",
    "oracle_man": [
        "python.library.time#time.sleep"
    ],
    "canonical_cmd": "time.sleep(0.1)",
    "cmd_name": "conala",
    "gpt35_response": " Make a 0.1 seconds time delay. This requires pausing program execution for 0.1 seconds."
}
{
    "question_id": "3505831-69",
    "nl": "pads string '5' on the left with 1 zero",
    "cmd": "print('{0}'.format('5'.zfill(2)))",
    "oracle_man": [
        "python.library.functions#format",
        "python.library.stdtypes#str.zfill"
    ],
    "canonical_cmd": "print('{0}'.format('VAR_STR'.zfill(2)))",
    "cmd_name": "conala",
    "gpt35_response": " Pads string '5' on the left with 1 zero. This requires adding a 0 to the beginning of string '5'."
}
{
    "question_id": "12974474-46",
    "nl": "Unzip a list of tuples `l` into a list of lists",
    "cmd": "zip(*l)",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Unzip a list of tuples `l` into a list of lists. This requires iterating through the tuples in `l`, creating a list for each tuple, and combining those lists into a new list of lists."
}
{
    "question_id": "27436748-64",
    "nl": "reduce the first element of list of strings `data` to a string, separated by '.'",
    "cmd": "print('.'.join([item[0] for item in data]))",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print('VAR_STR'.join([item[0] for item in VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": " Reduce the first element of list of strings `data` to a string, separated by '.'. This requires concatenating the first element of each string in list `data`, separated by a '.'."
}
{
    "question_id": "12440342-92",
    "nl": "get the first element of each tuple from a list of tuples `G`",
    "cmd": "[x[0] for x in G]",
    "oracle_man": [],
    "canonical_cmd": "[x[0] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get the first element of each tuple from a list of tuples `G`. This requires iterating through the tuples in `G` and appending the first element of each tuple to a new list."
}
{
    "question_id": "818949-51",
    "nl": "create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers",
    "cmd": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.isdigit"
    ],
    "canonical_cmd": "VAR_STR = [(int(f) if f.isdigit() else f) for f in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers. This requires iterating through `original_list`, checking if each element is a string containing digits, and appending the element as an integer to `changed_list` or as a string to `changed_list` if it does not contain digits."
}
{
    "question_id": "25440008-98",
    "nl": "flatten a dataframe df to a list",
    "cmd": "df.values.flatten()",
    "oracle_man": [],
    "canonical_cmd": "df.values.flatten()",
    "cmd_name": "conala",
    "gpt35_response": " Flatten a DataFrame `df` to a list. This requires iterating through the columns in DataFrame `df` and iterating through the rows to append each value to a new list."
}
{
    "question_id": "306400-38",
    "nl": "randomly select an item from list `foo`",
    "cmd": "random.choice(foo)",
    "oracle_man": [
        "python.library.random#random.choice"
    ],
    "canonical_cmd": "random.choice(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Randomly select an item from list `foo`. This requires using a random number generator to generate an index within the range of `foo` and returning the element at that index."
}
{
    "question_id": "940822-75",
    "nl": "regular expression match nothing",
    "cmd": "re.compile('$^')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('$^')",
    "cmd_name": "conala",
    "gpt35_response": " Regular expression match nothing. This involves creating a regular expression that specifies no characters to match."
}
{
    "question_id": "940822-88",
    "nl": "regular expression syntax for not to match anything",
    "cmd": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')",
    "cmd_name": "conala",
    "gpt35_response": " Regular expression syntax for not to match anything. This involves using the caret symbol (^) at the beginning of a regular expression to negate any character matches that follow."
}
{
    "question_id": "940822-67",
    "nl": "create a regular expression object with a pattern that will match nothing",
    "cmd": "re.compile('a^')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('a^')",
    "cmd_name": "conala",
    "gpt35_response": " Create a regular expression object with a pattern that will match nothing. This requires using an empty string as the pattern in the `re.compile()` function to create the regular expression object."
}
{
    "question_id": "34696853-20",
    "nl": "convert a list of strings `lst` to list of integers",
    "cmd": "[map(int, sublist) for sublist in lst]",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "[map(int, sublist) for sublist in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of strings `lst` to list of integers. This requires iterating through the list `lst`, converting each element to an integer, and appending it to a new list."
}
{
    "question_id": "34696853-89",
    "nl": "convert strings in list-of-lists `lst` to ints",
    "cmd": "[[int(x) for x in sublist] for sublist in lst]",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "[[int(x) for x in sublist] for sublist in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert strings in list-of-lists `lst` to ints. This requires iterating through the outer list, then iterating through each inner list and converting each string to an integer."
}
{
    "question_id": "5501641-12",
    "nl": "create a list with the characters of a string `5+6`",
    "cmd": "list('5+6')",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Create a list with the characters of a string `5+6`. This requires iterating through the string `5+6` and appending each character to a new list."
}
{
    "question_id": "11573817-17",
    "nl": "How to download a file via FTP with Python ftplib",
    "cmd": "ftp.retrbinary('RETR %s' % filename, file.write)",
    "oracle_man": [
        "python.library.ftplib#ftplib.FTP.retrbinary"
    ],
    "canonical_cmd": "ftp.retrbinary('RETR %s' % filename, file.write)",
    "cmd_name": "conala",
    "gpt35_response": "-How to download a file via FTP with Python ftplib:\nTo download a file via FTP with Python ftplib, you need to connect to the FTP server using ftplib, navigate to the directory containing the desired file, and then retrieve and save the file using `retrbinary()` function.\n"
}
{
    "question_id": "29422691-3",
    "nl": "print the number of occurences of not `none` in a list `lst` in Python 2",
    "cmd": "print(len([x for x in lst if x is not None]))",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "print(len([x for x in VAR_STR if x is not None]))",
    "cmd_name": "conala",
    "gpt35_response": "print the number of occurences of not `none` in a list `lst` in Python 2:\nTo print the number of occurrences of non-\"None\" values in a list `lst` in Python 2, count all values in the list that are not \"None\" using the `count()` function.\n"
}
{
    "question_id": "9339630-98",
    "nl": "encode string `s` to utf-8 code",
    "cmd": "s.encode('utf8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "VAR_STR.encode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": "encode string `s` to utf-8 code:\nTo encode string `s` to UTF-8 code, use the `encode()` method with \"utf-8\" as the encoding type.\n"
}
{
    "question_id": "24841306-8",
    "nl": "get a sum of 4d array `M`",
    "cmd": "M.sum(axis=0).sum(axis=0)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "VAR_STR.sum(axis=0).sum(axis=0)",
    "cmd_name": "conala",
    "gpt35_response": "get a sum of 4d array `M`:\nTo get the sum of a 4D array `M`, use the `sum()` function with a nested loop that iterates through each dimension of the array.\n"
}
{
    "question_id": "11932729-43",
    "nl": "sort a python dictionary `a_dict` by element `1` of the value",
    "cmd": "sorted(list(a_dict.items()), key=lambda item: item[1][1])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda item: item[1][1])",
    "cmd_name": "conala",
    "gpt35_response": "sort a python dictionary `a_dict` by element `1` of the value:\nTo sort a Python dictionary `a_dict` by element 1 of the value, use the `sorted()` function and pass `a_dict.items()` as the argument, along with a `key` parameter as `lambda x: x[1][1]`.\n"
}
{
    "question_id": "10201977-40",
    "nl": "Reverse list `x`",
    "cmd": "x[::-1]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[::-1]",
    "cmd_name": "conala",
    "gpt35_response": "Reverse list `x`:\nTo reverse list `x`, use the `reverse()` method on the list itself.\n"
}
{
    "question_id": "4915920-75",
    "nl": "delete an item `thing` in a list `some_list` if it exists",
    "cmd": "cleaned_list = [x for x in some_list if x is not thing]",
    "oracle_man": [],
    "canonical_cmd": "cleaned_list = [x for x in VAR_STR if x is not VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "delete an item `thing` in a list `some_list` if it exists:\nTo delete an item `thing` in a list `some_list` if it exists, use the `remove()` method if the item exists in the list, otherwise no action is taken.\n"
}
{
    "question_id": "35427814-67",
    "nl": "get the number of all keys in the nested dictionary `dict_list`",
    "cmd": "len(dict_test) + sum(len(v) for v in dict_test.values())",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#sum",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "len(dict_test) + sum(len(v) for v in dict_test.values())",
    "cmd_name": "conala",
    "gpt35_response": "get the number of all keys in the nested dictionary `dict_list`:\nTo get the number of all keys in the nested dictionary `dict_list`, use nested loops to iterate through each level of the dictionary and count the number of keys.\n"
}
{
    "question_id": "6133434-3",
    "nl": "find the sums of length 7 subsets of a list `daily`",
    "cmd": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(VAR_STR), 7)]",
    "cmd_name": "conala",
    "gpt35_response": "find the sums of length 7 subsets of a list `daily`:\nTo find the sums of length 7 subsets of a list `daily`, use the `combinations()` function from the `itertools` module to generate all possible combinations of length 7, then loop through each combination and find the sum of its elements.\n"
}
{
    "question_id": "14743454-13",
    "nl": "Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`",
    "cmd": "[k for k, v in dictA.items() if v.count('duck') > 1]",
    "oracle_man": [
        "python.library.stdtypes#dict.items",
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "[k for k, v in VAR_STR.items() if v.count('VAR_STR') > 1]",
    "cmd_name": "conala",
    "gpt35_response": "Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`:\nTo get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`, loop through the dictionary and store all keys that meet the condition in a new list using the `items()` function.\n"
}
{
    "question_id": "29558007-37",
    "nl": "generate a list of consecutive integers from 0 to 8",
    "cmd": "list(range(9))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(range(9))",
    "cmd_name": "conala",
    "gpt35_response": "generate a list of consecutive integers from 0 to 8:\nTo generate a list of consecutive integers from 0 to 8, use the `range()` function and convert the output to a list using the `list()` function.\n"
}
{
    "question_id": "5106228-78",
    "nl": "getting every possible combination of two elements in a list",
    "cmd": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))",
    "oracle_man": [
        "python.library.itertools#itertools.combinations",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))",
    "cmd_name": "conala",
    "gpt35_response": "getting every possible combination of two elements in a list:\nTo get every possible combination of two elements in a list, use the `combinations()` function from the `itertools` module.\n"
}
{
    "question_id": "18312447-81",
    "nl": "split string 'x+13.5*10x-4e1' into tokens",
    "cmd": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'VAR_STR') if i])",
    "cmd_name": "conala",
    "gpt35_response": "split string 'x+13.5*10x-4e1' into tokens:\nTo split string 'x+13.5*10x-4e1' into tokens, use the `split()` function to split the string on the specified delimiter.\n"
}
{
    "question_id": "13891559-42",
    "nl": "unpack elements of list `i` as arguments into function `foo`",
    "cmd": "foo(*i)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "unpack elements of list `i` as arguments into function `foo`:\nTo unpack elements of list `i` as arguments into function `foo`, use the `*` operator before the list name when passing it as an argument to the function.\n"
}
{
    "question_id": "9470142-61",
    "nl": "remove all square brackets from string 'abcd[e]yth[ac]ytwec'",
    "cmd": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\[.*?\\\\]', '', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "remove all square brackets from string 'abcd[e]yth[ac]ytwec':\nTo remove all square brackets from string 'abcd[e]yth[ac]ytwec', use the `replace()` function to replace each occurrence of `[` and `]` with an empty string.\n"
}
{
    "question_id": "15752422-54",
    "nl": "set dataframe `df` index using column 'month'",
    "cmd": "df.set_index('month')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "VAR_STR.set_index('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "set dataframe `df` index using column 'month':\nTo set dataframe `df` index using column 'month', use the `set_index()` function and pass `'month'` as the `keys` parameter.\n"
}
{
    "question_id": "26640145-30",
    "nl": "get a list of the row names from index of a pandas data frame",
    "cmd": "list(df.index)",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(df.index)",
    "cmd_name": "conala",
    "gpt35_response": "get a list of the row names from index of a pandas data frame:\nTo get a list of the row names from index of a pandas data frame, use the `.index.tolist()` method.\n"
}
{
    "question_id": "26640145-100",
    "nl": "get the row names from index in a pandas data frame",
    "cmd": "df.index",
    "oracle_man": [],
    "canonical_cmd": "df.index",
    "cmd_name": "conala",
    "gpt35_response": "get the row names from index in a pandas data frame:\nTo get the row names from index in a pandas data frame, access the `.index` attribute of the data frame.\n"
}
{
    "question_id": "2152898-7",
    "nl": "filtering out strings that contain 'ab' from a list of strings `lst`",
    "cmd": "[k for k in lst if 'ab' in k]",
    "oracle_man": [],
    "canonical_cmd": "[k for k in VAR_STR if 'VAR_STR' in k]",
    "cmd_name": "conala",
    "gpt35_response": "filtering out strings that contain 'ab' from a list of strings `lst`:\nTo filter out strings that contain 'ab' from a list of strings `lst`, use a list comprehension that only includes elements that do not contain 'ab'.\n"
}
{
    "question_id": "16084642-16",
    "nl": "From a list of strings `my_list`, remove the values that contains numbers.",
    "cmd": "[x for x in my_list if not any(c.isdigit() for c in x)]",
    "oracle_man": [
        "python.library.functions#any",
        "python.library.stdtypes#str.isdigit"
    ],
    "canonical_cmd": "[x for x in VAR_STR if not any(c.isdigit() for c in x)]",
    "cmd_name": "conala",
    "gpt35_response": "From a list of strings `my_list`, remove the values that contains numbers:\nTo remove the values that contain numbers from a list of strings `my_list`, use a list comprehension that only includes elements that are not numeric."
}
{
    "question_id": "3227624-52",
    "nl": "get file '~\/foo.ini'",
    "cmd": "config_file = os.path.expanduser('~\/foo.ini')",
    "oracle_man": [
        "python.library.os.path#os.path.expanduser"
    ],
    "canonical_cmd": "config_file = os.path.expanduser('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Get file '~\/foo.ini'. This requires specifying the file path as '~\/foo.ini' and retrieving the file."
}
{
    "question_id": "18551752-51",
    "nl": "split string `text` into chunks of 16 characters each",
    "cmd": "re.findall('.{,16}\\\\b', text)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('.{,16}\\\\b', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `text` into chunks of 16 characters each. This requires defining a chunk size of `16` and creating a loop to split `text` into chunks of that size."
}
{
    "question_id": "5075247-69",
    "nl": "remove line breaks from string `textblock` using regex",
    "cmd": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove line breaks from string `textblock` using regex. This requires using a regex pattern to match all line breaks (`\\n`) and removing them from the string."
}
{
    "question_id": "16962512-77",
    "nl": "convert scientific notation of variable `a` to decimal",
    "cmd": "\"\"\"{:.50f}\"\"\".format(float(a[0] \/ a[1]))",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{:.50f}\"\"\".format(float(VAR_STR[0] \/ VAR_STR[1]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert scientific notation of variable `a` to decimal. This requires using a conversion method to convert `a` from scientific notation to a decimal value."
}
{
    "question_id": "13717463-67",
    "nl": "create a list containing the indices of elements greater than 4 in list `a`",
    "cmd": "[i for i, v in enumerate(a) if v > 4]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, v in enumerate(VAR_STR) if v > 4]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing the indices of elements greater than 4 in list `a`. This requires iterating through `a`, checking if each element is greater than `4`, and adding the index of the element to a new list if it is."
}
{
    "question_id": "42098487-14",
    "nl": "split 1d array `a` into 2d array at the last element",
    "cmd": "np.split(a, [-1])",
    "oracle_man": [
        "numpy.reference.generated.numpy.split"
    ],
    "canonical_cmd": "np.split(VAR_STR, [-1])",
    "cmd_name": "conala",
    "gpt35_response": " Split 1d array `a` into 2d array at the last element. This requires finding the index of the last element in `a` and splitting `a` into two separate arrays at that index."
}
{
    "question_id": "29815129-54",
    "nl": "convert dataframe `df` to list of dictionaries including the index values",
    "cmd": "df.to_dict('index')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.to_dict"
    ],
    "canonical_cmd": "VAR_STR.to_dict('index')",
    "cmd_name": "conala",
    "gpt35_response": " Convert dataframe `df` to list of dictionaries including the index values. This requires iterating through each row in `df`, creating a dictionary for each row with the index value included, and appending each dictionary to a new list."
}
{
    "question_id": "29815129-23",
    "nl": "Create list of dictionaries from pandas dataframe `df`",
    "cmd": "df.to_dict('records')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.to_dict"
    ],
    "canonical_cmd": "VAR_STR.to_dict('records')",
    "cmd_name": "conala",
    "gpt35_response": " Create list of dictionaries from pandas dataframe `df`. This requires iterating through each row in `df`, creating a dictionary for each row without the index value, and appending each dictionary to a new list."
}
{
    "question_id": "15096021-2",
    "nl": "Flatten list `x`",
    "cmd": "x = [i[0] for i in x]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [i[0] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Flatten list `x`. This requires creating a loop to iterate through each element in `x` and adding it to a new list."
}
{
    "question_id": "15096021-36",
    "nl": "convert list `x` into a flat list",
    "cmd": "y = map(operator.itemgetter(0), x)",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#map"
    ],
    "canonical_cmd": "y = map(operator.itemgetter(0), VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `x` into a flat list. This requires using a flattening method to convert any nested lists within `x` into individual elements."
}
{
    "question_id": "15096021-51",
    "nl": "get a list `y` of the first element of every tuple in list `x`",
    "cmd": "y = [i[0] for i in x]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [i[0] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list `y` of the first element of every tuple in list `x`. This requires iterating through each tuple in `x`, accessing the first element of each tuple, and appending it to a new list."
}
{
    "question_id": "24082784-99",
    "nl": "Group a pandas data frame by monthly frequenct `M` using groupby",
    "cmd": "df.groupby(pd.TimeGrouper(freq='M'))",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby"
    ],
    "canonical_cmd": "df.groupby(pd.TimeGrouper(freq='VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Group a pandas data frame by monthly frequency `M` using groupby. This requires using the `groupby` function to group the dataframe by monthly frequency and applying an aggregate function to each group."
}
{
    "question_id": "2153444-1",
    "nl": "Find average of a nested list `a`",
    "cmd": "a = [(sum(x) \/ len(x)) for x in zip(*a)]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#len",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "VAR_STR = [(sum(x) \/ len(x)) for x in zip(*VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Find average of a nested list `a`. This requires creating a loop to iterate through each nested list within `a`, finding the sum of that list, and dividing by the length of the list to find the average."
}
{
    "question_id": "6879364-89",
    "nl": "Get the age of directory (or file) `\/tmp` in seconds.",
    "cmd": "print(os.path.getmtime('\/tmp'))",
    "oracle_man": [
        "python.library.os.path#os.path.getmtime"
    ],
    "canonical_cmd": "print(os.path.getmtime('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Get the age of directory (or file) `\/tmp` in seconds. This requires accessing the file or directory metadata and retrieving the creation or modification time, then calculating the age in seconds based on the current time."
}
{
    "question_id": "715417-70",
    "nl": "Convert string to boolean from defined set of strings",
    "cmd": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']",
    "oracle_man": [],
    "canonical_cmd": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']",
    "cmd_name": "conala",
    "gpt35_response": " Convert string to boolean from defined set of strings. This requires defining a set of strings that correspond to `True` values and checking if the input string is within that set."
}
{
    "question_id": "11921649-79",
    "nl": "Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once",
    "cmd": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format(VAR_STR='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once. This requires defining the string to be formatted, specifying the location of the formatting string (`{name}`), and passing the value `john` to replace each instance of `{name}` three times."
}
{
    "question_id": "3731426-92",
    "nl": "divide the members of a list `conversions` by the corresponding members of another list `trials`",
    "cmd": "[(c \/ t) for c, t in zip(conversions, trials)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(c \/ t) for c, t in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Divide the members of a list `conversions` by the corresponding members of another list `trials`. This requires creating a loop to iterate through each element in both `conversions` and `trials`, dividing the corresponding elements, and appending the result to a new list."
}
{
    "question_id": "8936030-9",
    "nl": "searche in HTML string for elements that have text 'Python'",
    "cmd": "soup.body.findAll(text='Python')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "soup.body.findAll(text='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Search in HTML string for elements that have text 'Python'. This requires using a library to parse the HTML string into a navigable tree and searching for elements that contain the text 'Python'."
}
{
    "question_id": "8936030-35",
    "nl": "BeautifulSoup find string 'Python Jobs' in HTML body `body`",
    "cmd": "soup.body.findAll(text='Python Jobs')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "soup.VAR_STR.findAll(text='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " BeautifulSoup find string 'Python Jobs' in HTML body `body`. This requires using the BeautifulSoup library to search for the string 'Python Jobs' within the HTML body `body`."
}
{
    "question_id": "36113747-21",
    "nl": "Initialize a list `a` with `10000` items and each item's value `0`",
    "cmd": "a = [0] * 10000",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [0] * 10000",
    "cmd_name": "conala",
    "gpt35_response": " Initialize a list `a` with `10000` items and each item's value `0`. This requires creating a loop to append `0` as an item to the list `a` `10000` times."
}
{
    "question_id": "17555218-63",
    "nl": "Sort lists in the list `unsorted_list` by the element at index 3 of each list",
    "cmd": "unsorted_list.sort(key=lambda x: x[3])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x[3])",
    "cmd_name": "conala",
    "gpt35_response": "- Sort lists in the list `unsorted_list` by the element at index 3 of each list. This requires accessing each list in `unsorted_list`, accessing the element at index 3 of each list, and sorting the lists based on this element."
}
{
    "question_id": "40682209-98",
    "nl": "Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`",
    "cmd": "df[['value']].fillna(df.groupby('group').transform('mean'))",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.fillna",
        "pandas.reference.api.pandas.dataframe.transform"
    ],
    "canonical_cmd": "VAR_STR[['VAR_STR']].fillna(VAR_STR.groupby('VAR_STR').transform('mean'))",
    "cmd_name": "conala",
    "gpt35_response": " Replace NaN values in column 'value' with the mean of data in column 'group' of dataframe `df`. This requires accessing the column 'value' of dataframe `df`, replacing NaN values with the mean of data in column 'group' of dataframe `df`, and assigning the new values to column 'value'."
}
{
    "question_id": "24722212-6",
    "nl": "add a path `\/path\/to\/2014_07_13_test` to system path",
    "cmd": "sys.path.append('\/path\/to\/2014_07_13_test')",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "sys.path.append('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Add a path `\/path\/to\/2014_07_13_test` to system path. This requires accessing the system path variable, adding the path `\/path\/to\/2014_07_13_test` to the variable, and saving the variable with the new path."
}
{
    "question_id": "16096754-83",
    "nl": "remove None value from list `L`",
    "cmd": "[x for x in L if x is not None]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x is not None]",
    "cmd_name": "conala",
    "gpt35_response": " Remove None value from list `L`. This requires accessing each element in list `L`, identifying any None values, and removing them from the list."
}
{
    "question_id": "21261330-82",
    "nl": "Split string with comma (,) and remove whitespace from a string 'my_string'",
    "cmd": "[item.strip() for item in my_string.split(',')]",
    "oracle_man": [
        "python.library.stdtypes#str.strip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[item.strip() for item in VAR_STR.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Split string with comma (,) and remove whitespace from a string 'my_string'. This requires splitting string 'my_string' at each comma (,), and removing any whitespace characters from the resulting substrings."
}
{
    "question_id": "3718657-91",
    "nl": "get current script directory",
    "cmd": "os.path.dirname(os.path.abspath(__file__))",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.abspath"
    ],
    "canonical_cmd": "os.path.dirname(os.path.abspath(__file__))",
    "cmd_name": "conala",
    "gpt35_response": " Get current script directory. This requires accessing the directory path of the script using the appropriate module or function."
}
{
    "question_id": "11985628-48",
    "nl": "Match regex pattern '((?:A|B|C)D)' on string 'BDE'",
    "cmd": "re.findall('((?:A|B|C)D)', 'BDE')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Match regex pattern '((?:A|B|C)D)' on string 'BDE'. This requires compiling the regex pattern '((?:A|B|C)D)', and using it to search for a match in string 'BDE'."
}
{
    "question_id": "9962293-50",
    "nl": "create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples",
    "cmd": "done = [(el, x) for el in [a, b, c, d]]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [(el, VAR_STR) for el in [VAR_STR]]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples. This requires accessing each element in list `[a, b, c, d]` and computing permutations with variable `x` as tuples, then saving the results to list `done`."
}
{
    "question_id": "17457793-83",
    "nl": "sort a set `s` by numerical value",
    "cmd": "sorted(s, key=float)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=float)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a set `s` by numerical value. This requires converting set `s` to a list, sorting the resulting list by numerical value, and converting the list back to a set."
}
{
    "question_id": "12323403-99",
    "nl": "How do I find an element that contains specific text in Selenium Webdriver (Python)?",
    "cmd": "driver.find_elements_by_xpath(\"\/\/*[contains(text(), 'My Button')]\")",
    "oracle_man": [],
    "canonical_cmd": "driver.find_elements_by_xpath(\"\/\/*[contains(text(), 'My Button')]\")",
    "cmd_name": "conala",
    "gpt35_response": " How do I find an element that contains specific text in Selenium Webdriver (Python)? This requires accessing the webpage using Selenium Webdriver, identifying the element containing the specific text using the appropriate method or function in Webdriver, and storing the result."
}
{
    "question_id": "11406091-7",
    "nl": "Selecting Element \"\/\/li\/label\/input\" followed by text \"polishpottery\" with Selenium WebDriver `driver`",
    "cmd": "driver.find_element_by_xpath(\"\/\/li\/label\/input[contains(..,'polishpottery')]\")",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.find_element_by_xpath(\"\/\/li\/label\/input[contains(..,'polishpottery')]\")",
    "cmd_name": "conala",
    "gpt35_response": " Selecting Element \"\/\/li\/label\/input\" followed by text \"polishpottery\" with Selenium WebDriver `driver`. This requires accessing the webpage using Selenium Webdriver, identifying the element that matches the XPath selector \"\/\/li\/label\/input\" followed by text \"polishpottery\", and storing the result with WebDriver `driver`."
}
{
    "question_id": "10020591-5",
    "nl": "Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`",
    "cmd": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.agg"
    ],
    "canonical_cmd": "VAR_STR.resample('VAR_STR').agg({'VAR_STR': np.sum, 'VAR_STR': np.mean})",
    "cmd_name": "conala",
    "gpt35_response": " Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation`, averaging those in column `tamb`. This requires accessing timeseries index of dataframe `frame`, resampling the index to resolution of 1 hour `1H`, summing values in column `radiation`, averaging those in column `tamb`."
}
{
    "question_id": "14050824-40",
    "nl": "sum each element `x` in list `first` with element `y` at the same index in list `second`.",
    "cmd": "[(x + y) for x, y in zip(first, second)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(VAR_STR + VAR_STR) for VAR_STR, VAR_STR in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Sum each element `x` in list `first` with element `y` at the same index in list `second`. This requires accessing each element in lists `first` and `second` using their indices, adding the corresponding values of each element together, and storing the result in a new list or in-place overwriting the original value in `first`."
}
{
    "question_id": "28780956-93",
    "nl": "get the context of a search by keyword 'My keywords' in beautifulsoup `soup`",
    "cmd": "k = soup.find(text=re.compile('My keywords')).parent.text",
    "oracle_man": [
        "python.library.re#re.compile",
        "python.library.stdtypes#str.find"
    ],
    "canonical_cmd": "k = VAR_STR.find(text=re.compile('VAR_STR')).parent.text",
    "cmd_name": "conala",
    "gpt35_response": " Get the context of a search by keyword 'My keywords' in beautifulsoup `soup`. This requires accessing the webpage using beautifulsoup `soup`, identifying the context of the search containing the keyword 'My keywords' using the appropriate method or function in beautifulsoup, and storing the result."
}
{
    "question_id": "2587402-45",
    "nl": "sort list `xs` based on the length of its elements",
    "cmd": "print(sorted(xs, key=len))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "print(sorted(VAR_STR, key=len))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `xs` based on the length of its elements. This requires accessing each element in list `xs`, taking the length of each element, building an intermediate dictionary with the length as the key pointing to the element, and sorting the dictionary based on its keys. The final sorted list is built by taking the values of the sorted dictionary."
}
{
    "question_id": "2587402-28",
    "nl": "sort list `xs` in ascending order of length of elements",
    "cmd": "xs.sort(lambda x, y: cmp(len(x), len(y)))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.filecmp#filecmp.cmp",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(lambda x, y: cmp(len(x), len(y)))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `xs` in ascending order of length of elements. This requires accessing each element in list `xs`, taking the length of each element, and sorting the list in ascending order based on the length."
}
{
    "question_id": "2587402-14",
    "nl": "sort list of strings `xs` by the length of string",
    "cmd": "xs.sort(key=lambda s: len(s))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda s: len(s))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list of strings `xs` by the length of string. This requires accessing each element in list `xs`, taking the length of each string, and sorting the list in ascending order based on the length."
}
{
    "question_id": "23914774-64",
    "nl": "Make a dictionary from list `f` which is in the format of four sets of  \"val, key, val\"",
    "cmd": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "{VAR_STR[i + 1]: [VAR_STR[i], VAR_STR[i + 2]] for i in range(0, len(VAR_STR), 3)}",
    "cmd_name": "conala",
    "gpt35_response": " Make a dictionary from list `f` which is in the format of four sets of \"val, key, val\". This requires accessing each element in list `f`, splitting it at each comma (,) to extract the key and value, and building a dictionary of the extracted values where the keys correspond to the extracted keys."
}
{
    "question_id": "5577501-79",
    "nl": "check if string `string` starts with a number",
    "cmd": "string[0].isdigit()",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit"
    ],
    "canonical_cmd": "VAR_STR[0].isdigit()",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `string` starts with a number. This requires accessing the first character in string `string`, checking if it is a digit, and returning a boolean result."
}
{
    "question_id": "5577501-18",
    "nl": "Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')",
    "cmd": "strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))",
    "oracle_man": [
        "python.library.stdtypes#str.startswith"
    ],
    "canonical_cmd": "VAR_STR.startswith(('VAR_STR', 'VAR_STR', 'VAR_STR', 'VAR_STR', 'VAR_STR', 'VAR_STR',\n    'VAR_STR', 'VAR_STR', 'VAR_STR', 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'). This requires accessing the first character in string `strg`, checking if it matches any of the elements in the list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), and returning a boolean result."
}
{
    "question_id": "4879641-52",
    "nl": "create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension",
    "cmd": "[y['baz'] for x in foos for y in x['bar']]",
    "oracle_man": [],
    "canonical_cmd": "[y['VAR_STR'] for x in VAR_STR for y in x['bar']]",
    "cmd_name": "conala",
    "gpt35_response": "- Create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension. This requires creating an empty list to store the values associated with the key 'baz'. Loop through each dictionary in list `foos` and access the value associated with the key 'baz'. Store the value in the list created earlier. Implement all these processes using list comprehension."
}
{
    "question_id": "5218948-78",
    "nl": "Make a auto scrolled window to the end of the list in gtk",
    "cmd": "self.treeview.connect('size-allocate', self.treeview_changed)",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.connect"
    ],
    "canonical_cmd": "self.treeview.connect('size-allocate', self.treeview_changed)",
    "cmd_name": "conala",
    "gpt35_response": " Make an auto scrolled window to the end of the list in gtk. This requires creating a scrolled window object, adding the list widget to it, and scrolling to the end of the list using the `gtk_adjustment` method."
}
{
    "question_id": "32490629-62",
    "nl": "Getting today's date in YYYY-MM-DD",
    "cmd": "datetime.datetime.today().strftime('%Y-%m-%d')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.today",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.today().strftime('%Y-%m-%d')",
    "cmd_name": "conala",
    "gpt35_response": " Getting today's date in YYYY-MM-DD. This requires getting the current date and time using the `datetime` module and formatting it to the desired string format of `YYYY-MM-DD`."
}
{
    "question_id": "35883459-33",
    "nl": "creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]",
    "cmd": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]",
    "oracle_man": [],
    "canonical_cmd": "[{'VAR_STR': 1, 'VAR_STR': 4, 'VAR_STR': 2, 'VAR_STR': 4}, {'VAR_STR': 1, 'VAR_STR': 4,\n    'VAR_STR': 1, 'VAR_STR': 5}]",
    "cmd_name": "conala",
    "gpt35_response": " Creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]. This involves creating two dictionary objects and storing them in a list."
}
{
    "question_id": "35883459-5",
    "nl": "Creating a list of dictionaries in python",
    "cmd": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]",
    "oracle_man": [],
    "canonical_cmd": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]",
    "cmd_name": "conala",
    "gpt35_response": " Creating a list of dictionaries in python. This requires creating an empty list to store dictionaries. Create one or multiple dictionary objects and add them to the previously created list."
}
{
    "question_id": "28669459-58",
    "nl": "print variable `value ` without spaces",
    "cmd": "print('Value is \"' + str(value) + '\"')",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "print('Value is \"' + str(VAR_STR) + '\"')",
    "cmd_name": "conala",
    "gpt35_response": " Print variable `value` without spaces. This requires using the `print` function and passing the `value` variable to it with the `sep` argument set to an empty string."
}
{
    "question_id": "28669459-58",
    "nl": "Print a string `value` with string formatting",
    "cmd": "print('Value is \"{}\"'.format(value))",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "print('Value is \"{}\"'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print a string `value` with string formatting. This requires using string formatting to insert the `value` variable into the string before passing it to the `print` function."
}
{
    "question_id": "13070461-75",
    "nl": "get index of the biggest 2 values of a list `a`",
    "cmd": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "sorted(list(range(len(VAR_STR))), key=lambda i: VAR_STR[i])[-2:]",
    "cmd_name": "conala",
    "gpt35_response": " Get the index of the biggest 2 values of a list `a`. This requires sorting the list in descending order using the `sorted` function. Take the first two elements and find their indices in the original list `a`."
}
{
    "question_id": "13070461-22",
    "nl": "get indexes of the largest `2` values from a list `a` using itemgetter",
    "cmd": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#zip",
        "python.library.functions#sorted",
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "zip(*sorted(enumerate(VAR_STR), key=operator.itemgetter(1)))[0][-2:]",
    "cmd_name": "conala",
    "gpt35_response": " Get indexes of the largest `2` values from a list `a` using `itemgetter`. This requires importing the `itemgetter` function. Sort the list in descending order using the `sorted` function and the `itemgetter` function as the key. Then take the first two elements and find their indices in the original list `a`."
}
{
    "question_id": "13070461-4",
    "nl": "get the indexes of the largest `2` values from a list of integers `a`",
    "cmd": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "sorted(list(range(len(VAR_STR))), key=lambda i: VAR_STR[i], reverse=True)[:2]",
    "cmd_name": "conala",
    "gpt35_response": " Get the indexes of the largest `2` values from a list of integers `a`. This requires sorting the list in descending order using the `sort` method. Then take the first two elements and determine their indices using the `index` method."
}
{
    "question_id": "13042013-50",
    "nl": "adding url `url` to mysql row",
    "cmd": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.Cursor.execute"
    ],
    "canonical_cmd": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (VAR_STR,))",
    "cmd_name": "conala",
    "gpt35_response": " Adding url `url` to mysql row. This requires crafting an SQL insert statement with the appropriate values, connecting to the MySQL database, and executing the SQL statement."
}
{
    "question_id": "7026131-18",
    "nl": "fill list `myList` with 4 0's",
    "cmd": "self.myList.extend([0] * (4 - len(self.myList)))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "self.VAR_STR.extend([0] * (4 - len(self.VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Fill list `myList` with 4 0's. This requires looping 4 times and adding 0 to the list `myList` in each iteration."
}
{
    "question_id": "5917537-9",
    "nl": "immediately see output of print statement that doesn't end in a newline",
    "cmd": "sys.stdout.flush()",
    "oracle_man": [
        "python.library.logging#logging.Handler.flush"
    ],
    "canonical_cmd": "sys.stdout.flush()",
    "cmd_name": "conala",
    "gpt35_response": " Immediately see output of print statement that doesn't end in a newline. This requires using the `flush` method immediately after the `print` statement to force the output to be displayed without waiting for a newline character."
}
{
    "question_id": "35253971-84",
    "nl": "check if all values of a dictionary `your_dict` are zero `0`",
    "cmd": "all(value == 0 for value in list(your_dict.values()))",
    "oracle_man": [
        "python.library.functions#all",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "all(value == 0 for value in list(VAR_STR.values()))",
    "cmd_name": "conala",
    "gpt35_response": " Check if all values of a dictionary `your_dict` are zero `0`. This requires accessing all values of the dictionary `your_dict` and comparing them with the integer 0 using the `all` method."
}
{
    "question_id": "8899905-32",
    "nl": "count number of occurrences of a substring 'ab' in a string \"abcdabcva\"",
    "cmd": "\"\"\"abcdabcva\"\"\".count('ab')",
    "oracle_man": [
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".count('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of occurrences of a substring 'ab' in a string \"abcdabcva\". This requires using the `count` method of the string object to count the number of occurrences of the substring 'ab'."
}
{
    "question_id": "2151517-74",
    "nl": "get the union set from list of lists `results_list`",
    "cmd": "results_union = set().union(*results_list)",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.union"
    ],
    "canonical_cmd": "results_union = set().union(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the union set from list of lists `results_list`. This requires flattening the list of lists into a single list and then converting it to a set to remove duplicates."
}
{
    "question_id": "2151517-30",
    "nl": "get the union of values in list of lists `result_list`",
    "cmd": "return list(set(itertools.chain(*result_list)))",
    "oracle_man": [
        "python.library.itertools#itertools.chain",
        "python.library.functions#list",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "return list(set(itertools.chain(*VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Get the union of values in list of lists `result_list`. This requires flattening the list of lists into a single list, converting it to a set to remove duplicates, and converting it back to a list."
}
{
    "question_id": "952914-55",
    "nl": "make a flat list from list of lists `sublist`",
    "cmd": "[item for sublist in l for item in sublist]",
    "oracle_man": [],
    "canonical_cmd": "[item for VAR_STR in l for item in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Make a flat list from list of lists `sublist`. This requires flattening the list of lists into a single list."
}
{
    "question_id": "952914-41",
    "nl": "make a flat list from list of lists `list2d`",
    "cmd": "list(itertools.chain(*list2d))",
    "oracle_man": [
        "python.library.itertools#itertools.chain",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(itertools.chain(*VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Make a flat list from list of lists `list2d`. This requires flattening the list of lists into a single list."
}
{
    "question_id": "952914-3",
    "nl": "make a flat list from list of lists `list2d`",
    "cmd": "list(itertools.chain.from_iterable(list2d))",
    "oracle_man": [
        "python.library.itertools#itertools.chain.from_iterable",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(itertools.chain.from_iterable(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Make a flat list from list of lists `list2d`. This requires flattening the list of lists into a single list."
}
{
    "question_id": "40221516-69",
    "nl": "join two dataframes based on values in selected columns",
    "cmd": "pd.merge(a, b, on=['A', 'B'], how='outer')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "pd.merge(a, b, on=['A', 'B'], how='outer')",
    "cmd_name": "conala",
    "gpt35_response": "- Join two dataframes based on values in selected columns. This requires selecting the desired columns, comparing the values, and merging the dataframes based on the matching values."
}
{
    "question_id": "17193850-16",
    "nl": "get all the values in column `b` from pandas data frame `df`",
    "cmd": "df['b']",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Get all the values in column `b` from pandas data frame `df`. This requires selecting the column `b` from the dataframe `df` and extracting all of its values."
}
{
    "question_id": "11619169-67",
    "nl": "convert Date object `dateobject` into a DateTime object",
    "cmd": "datetime.datetime.combine(dateobject, datetime.time())",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.combine",
        "python.library.datetime#datetime.time"
    ],
    "canonical_cmd": "datetime.datetime.combine(VAR_STR, datetime.time())",
    "cmd_name": "conala",
    "gpt35_response": " Convert Date object `dateobject` into a DateTime object. This requires casting the Date object as a DateTime object and utilizing any necessary conversion functions."
}
{
    "question_id": "4108561-37",
    "nl": "How to exclude a character from a regex group?",
    "cmd": "re.compile('[^a-zA-Z0-9-]+')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('[^a-zA-Z0-9-]+')",
    "cmd_name": "conala",
    "gpt35_response": " How to exclude a character from a regex group? This requires identifying the target character and modifying the regex pattern to exclude it."
}
{
    "question_id": "11620914-85",
    "nl": "remove Nan values from array `x`",
    "cmd": "x = x[numpy.logical_not(numpy.isnan(x))]",
    "oracle_man": [
        "numpy.reference.generated.numpy.logical_not",
        "numpy.reference.generated.numpy.isnan"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR[numpy.logical_not(numpy.isnan(VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": " Remove Nan values from array `x`. This requires identifying the Nan values within the array and removing them from the array."
}
{
    "question_id": "1012185-44",
    "nl": "index a list `L` with another list `Idx`",
    "cmd": "T = [L[i] for i in Idx]",
    "oracle_man": [],
    "canonical_cmd": "T = [VAR_STR[i] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Index a list `L` with another list `Idx`. This requires iterating over `Idx`, using each value in turn to retrieve specific elements from `L`, and storing them in a new list."
}
{
    "question_id": "17812978-84",
    "nl": "How to plot two columns of a pandas data frame using points?",
    "cmd": "df.plot(x='col_name_1', y='col_name_2', style='o')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "df.plot(x='col_name_1', y='col_name_2', style='o')",
    "cmd_name": "conala",
    "gpt35_response": " How to plot two columns of a pandas data frame using points? This requires selecting the desired columns in the data frame and plotting them using the correct graph type and options."
}
{
    "question_id": "1249388-47",
    "nl": "remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `",
    "cmd": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^0-9]', '', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `. This requires traversing the string and removing all non-numeric characters, leaving only the numeric characters."
}
{
    "question_id": "176918-30",
    "nl": "finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it",
    "cmd": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, j in enumerate(['VAR_STR', 'bar', 'baz']) if j == 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it. This requires iterating over the list and comparing each element to the target value until a match is found, then returning its index."
}
{
    "question_id": "11264005-71",
    "nl": "Validate IP address using Regex",
    "cmd": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')",
    "cmd_name": "conala",
    "gpt35_response": " Validate IP address using Regex. This requires crafting a regex pattern that matches valid IP addresses and running user input through the pattern to test for validity."
}
{
    "question_id": "8194156-97",
    "nl": "subtract elements of list `List1` from elements of list `List2`",
    "cmd": "[(x1 - x2) for x1, x2 in zip(List1, List2)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(x1 - x2) for x1, x2 in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Subtract elements of list `List1` from elements of list `List2`. This requires iterating over both lists and subtracting each corresponding element of `List1` from `List2`, storing the results in a new list."
}
{
    "question_id": "3276180-66",
    "nl": "extract date from a string 'monkey 2010-07-32 love banana'",
    "cmd": "dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)",
    "oracle_man": [
        "python.library.ast#ast.parse"
    ],
    "canonical_cmd": "dparser.parse('VAR_STR', fuzzy=True)",
    "cmd_name": "conala",
    "gpt35_response": " Extract date from a string 'monkey 2010-07-32 love banana'. This requires identifying the date within the string and extracting it using regex or string manipulation techniques."
}
{
    "question_id": "3276180-20",
    "nl": "extract date from a string 'monkey 20\/01\/1980 love banana'",
    "cmd": "dparser.parse('monkey 20\/01\/1980 love banana', fuzzy=True)",
    "oracle_man": [
        "python.library.ast#ast.parse"
    ],
    "canonical_cmd": "dparser.parse('VAR_STR', fuzzy=True)",
    "cmd_name": "conala",
    "gpt35_response": " Extract date from a string 'monkey 20\/01\/1980 love banana'. This requires identifying the date format within the string and parsing it using appropriate parsing functions."
}
{
    "question_id": "3276180-87",
    "nl": "extract date from a string `monkey 10\/01\/1980 love banana`",
    "cmd": "dparser.parse('monkey 10\/01\/1980 love banana', fuzzy=True)",
    "oracle_man": [
        "python.library.ast#ast.parse"
    ],
    "canonical_cmd": "dparser.parse('VAR_STR', fuzzy=True)",
    "cmd_name": "conala",
    "gpt35_response": " Extract date from a string `monkey 10\/01\/1980 love banana`. This requires identifying the date format within the string and parsing it using appropriate parsing functions."
}
{
    "question_id": "11277432-32",
    "nl": "remove a key 'key' from a dictionary `my_dict`",
    "cmd": "my_dict.pop('key', None)",
    "oracle_man": [
        "python.library.stdtypes#dict.pop"
    ],
    "canonical_cmd": "VAR_STR.pop('VAR_STR', None)",
    "cmd_name": "conala",
    "gpt35_response": " Remove a key 'key' from a dictionary `my_dict`. This requires identifying the target key and using the `del` statement to remove it from the dictionary."
}
{
    "question_id": "521502-6",
    "nl": "How to get the concrete class name as a string?",
    "cmd": "instance.__class__.__name__",
    "oracle_man": [],
    "canonical_cmd": "instance.__class__.__name__",
    "cmd_name": "conala",
    "gpt35_response": " How to get the concrete class name as a string? This requires invoking the `__class__` attribute of the object and converting its value to a string."
}
{
    "question_id": "17474211-72",
    "nl": "sort list `a` in ascending order based on its elements' float values",
    "cmd": "a = sorted(a, key=lambda x: float(x))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#float"
    ],
    "canonical_cmd": "VAR_STR = sorted(VAR_STR, key=lambda x: float(x))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `a` in ascending order based on its elements' float values. This requires casting every element within the list as a float value and sorting them using the appropriate sorting algorithm."
}
{
    "question_id": "11850425-35",
    "nl": "Sort list `alist` in ascending order based on each of its elements' attribute `foo`",
    "cmd": "alist.sort(key=lambda x: x.foo)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `alist` in ascending order based on each of its elements' attribute `foo`. This requires defining a comparison function that compares the `foo` attribute of any two objects within `alist` and using it as the key for sorting."
}
{
    "question_id": "13223737-73",
    "nl": "open file '5_1.txt' in directory `direct`",
    "cmd": "x_file = open(os.path.join(direct, '5_1.txt'), 'r')",
    "oracle_man": [
        "python.library.os.path#os.path.join",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "x_file = open(os.path.join(VAR_STR, 'VAR_STR'), 'r')",
    "cmd_name": "conala",
    "gpt35_response": " Open file '5_1.txt' in directory `direct`. This requires concatenating the filepath and filename, opening the file using the appropriate file access modes, and reading its contents."
}
{
    "question_id": "3685265-84",
    "nl": "save numpy array `x` into text file 'test.txt'",
    "cmd": "np.savetxt('test.txt', x)",
    "oracle_man": [
        "numpy.reference.generated.numpy.savetxt"
    ],
    "canonical_cmd": "np.savetxt('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Save numpy array `x` into text file 'test.txt'. This requires specifying the desired file name and path, opening the file with the appropriate file access modes, and writing the array contents into the file."
}
{
    "question_id": "29760130-12",
    "nl": "get the list with the highest sum value in list `x`",
    "cmd": "print(max(x, key=sum))",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "print(max(VAR_STR, key=sum))",
    "cmd_name": "conala",
    "gpt35_response": "- Get the list with the highest sum value in list `x`. This requires finding the sum of each list in `x`, comparing them all, and returning the list with the highest value."
}
{
    "question_id": "4800811-3",
    "nl": "get the value at index 1 for each tuple in the list of tuples `L`",
    "cmd": "[x[1] for x in L]",
    "oracle_man": [],
    "canonical_cmd": "[x[1] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get the value at index 1 for each tuple in the list of tuples `L`. This requires iterating over each tuple in `L`, accessing the value at index 1 in each tuple, and storing them in a new list."
}
{
    "question_id": "2508861-5",
    "nl": "Python: Convert a string to an integer",
    "cmd": "int('  23  ')",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('  23  ')",
    "cmd_name": "conala",
    "gpt35_response": " Python: Convert a string to an integer. This requires taking a string, converting it to an integer with the `int()` function, and storing the result."
}
{
    "question_id": "11348347-44",
    "nl": "create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]",
    "cmd": "set([1, 2, 3]) ^ set([3, 4, 5])",
    "oracle_man": [
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "set([1, 2, 3]) ^ set([3, 4, 5])",
    "cmd_name": "conala",
    "gpt35_response": " Create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]. This requires creating sets of the given lists, performing the exclusive or operation on them, and storing the result."
}
{
    "question_id": "7732125-28",
    "nl": "if Selenium textarea element `foo` is not empty, clear the field",
    "cmd": "driver.find_element_by_id('foo').clear()",
    "oracle_man": [
        "python.library.stdtypes#frozenset.clear"
    ],
    "canonical_cmd": "driver.find_element_by_id('VAR_STR').clear()",
    "cmd_name": "conala",
    "gpt35_response": " If Selenium textarea element `foo` is not empty, clear the field. This requires checking the value of the element, clearing it if it is not empty, and handling any exceptions that may arise."
}
{
    "question_id": "7732125-17",
    "nl": "clear text from textarea 'foo' with selenium",
    "cmd": "driver.find_element_by_id('foo').clear()",
    "oracle_man": [
        "python.library.stdtypes#frozenset.clear"
    ],
    "canonical_cmd": "driver.find_element_by_id('VAR_STR').clear()",
    "cmd_name": "conala",
    "gpt35_response": " Clear text from textarea 'foo' with selenium. This requires finding the textarea element `foo` with Selenium, accessing its value, clearing it, and handling any exceptions that may arise."
}
{
    "question_id": "7974442-3",
    "nl": "make a function `f` that calculates the sum of two integer variables `x` and `y`",
    "cmd": "f = lambda x, y: x + y",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = lambda VAR_STR, VAR_STR: VAR_STR + VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Make a function `f` that calculates the sum of two integer variables `x` and `y`. This requires defining the function `f`, taking two integer arguments `x` and `y`, calculating their sum, and returning the result."
}
{
    "question_id": "3365673-3",
    "nl": "throw an error window in python in windows",
    "cmd": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)",
    "oracle_man": [],
    "canonical_cmd": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)",
    "cmd_name": "conala",
    "gpt35_response": " Throw an error window in Python in windows. This requires using the `tkinter` module to create a new window with an error message."
}
{
    "question_id": "19585280-52",
    "nl": "convert rows in pandas data frame `df` into list",
    "cmd": "df.apply(lambda x: x.tolist(), axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.apply",
        "pandas.reference.api.pandas.series.tolist"
    ],
    "canonical_cmd": "VAR_STR.apply(lambda x: x.tolist(), axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Convert rows in pandas data frame `df` into list. This requires iterating over each row in `df`, converting it to a list with the `tolist()` method, and adding the result to a new list."
}
{
    "question_id": "2742784-42",
    "nl": "round 123 to 100",
    "cmd": "int(round(123, -2))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#round"
    ],
    "canonical_cmd": "int(round(123, -2))",
    "cmd_name": "conala",
    "gpt35_response": " Round 123 to 100. This requires using the `round()` function with a value of -2 to round 123 to the nearest hundred."
}
{
    "question_id": "367155-83",
    "nl": "split a unicode string `text` into a list of words and punctuation characters with a regex",
    "cmd": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\w+|[^\\\\w\\\\s]', VAR_STR, re.UNICODE)",
    "cmd_name": "conala",
    "gpt35_response": " Split a unicode string `text` into a list of words and punctuation characters with a regex. This requires using the `re` module to split the string using a regular expression pattern that matches words and punctuation characters."
}
{
    "question_id": "32511444-44",
    "nl": "sum all the values in a counter variable `my_counter`",
    "cmd": "sum(my_counter.values())",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(VAR_STR.values())",
    "cmd_name": "conala",
    "gpt35_response": " Sum all the values in a counter variable `my_counter`. This requires iterating over each key in `my_counter`, accessing the corresponding value, and adding it to a running total."
}
{
    "question_id": "7253907-19",
    "nl": "convert 3652458 to string represent a 32bit hex number",
    "cmd": "\"\"\"0x{0:08X}\"\"\".format(3652458)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"0x{0:08X}\"\"\".format(3652458)",
    "cmd_name": "conala",
    "gpt35_response": " Convert 3652458 to string representing a 32bit hex number. This requires using the `hex()` function to convert the integer to hexadecimal, stripping the result of its prefix and padding it with zeroes to 8 characters."
}
{
    "question_id": "17895835-63",
    "nl": "print two numbers `10` and `20` using string formatting",
    "cmd": "\"\"\"{0} {1}\"\"\".format(10, 20)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{0} {1}\"\"\".format(10, 20)",
    "cmd_name": "conala",
    "gpt35_response": " Print two numbers `10` and `20` using string formatting. This requires using string formatting to print the numbers with a format string like `\"{} {}\"`."
}
{
    "question_id": "17895835-19",
    "nl": "replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`",
    "cmd": "\"\"\"{1} {ham} {0} {foo} {1}\"\"\".format(10, 20, foo='bar', ham='spam')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`. This requires using string formatting with named placeholders to substitute the arguments into the string in the correct order."
}
{
    "question_id": "14431731-59",
    "nl": "insert string `string1` after each character of `string2`",
    "cmd": "string2.replace('', string1)[len(string1):-len(string1)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR.replace('', VAR_STR)[len(VAR_STR):-len(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Insert string `string1` after each character of `string2`. This requires iterating over each character in `string2`, concatenating it with `string1`, and storing the result."
}
{
    "question_id": "3899782-68",
    "nl": "check whether elements in list `a` appear only once",
    "cmd": "len(set(a)) == len(a)",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "len(set(VAR_STR)) == len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check whether elements in list `a` appear only once. This requires iterating over each element in `a`, counting its frequency with the `count()` method, and checking that the count is equal to 1."
}
{
    "question_id": "15839491-63",
    "nl": "clear Tkinter Canvas `canvas`",
    "cmd": "canvas.delete('all')",
    "oracle_man": [
        "python.library.ast#ast.Delete"
    ],
    "canonical_cmd": "VAR_STR.delete('all')",
    "cmd_name": "conala",
    "gpt35_response": " Clear Tkinter Canvas `canvas`. This requires deleting all items on the canvas with the `delete('all')` method."
}
{
    "question_id": "4524723-100",
    "nl": "take screenshot 'screen.png' on mac os x",
    "cmd": "os.system('screencapture screen.png')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('screencapture screen.png')",
    "cmd_name": "conala",
    "gpt35_response": " Take screenshot 'screen.png' on macOS. This requires using the built-in `screencapture` command with the appropriate options to save an image to a file named 'screen.png'."
}
{
    "question_id": "11621165-35",
    "nl": "Reset the indexes of a pandas data frame",
    "cmd": "df2 = df.reset_index()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "df2 = df.reset_index()",
    "cmd_name": "conala",
    "gpt35_response": " Reset the indexes of a pandas data frame. This requires using the `reset_index()` method to replace the existing index with a sequential integer index."
}
{
    "question_id": "17618981-15",
    "nl": "sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order",
    "cmd": "df.sort(['c1', 'c2'], ascending=[True, True])",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(['VAR_STR', 'VAR_STR'], ascending=[True, True])",
    "cmd_name": "conala",
    "gpt35_response": "- Sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order. This requires accessing columns `c1` and `c2` of the data frame `df`, sorting the values in ascending order, and then sorting the data frame based on these sorted column values."
}
{
    "question_id": "8372399-59",
    "nl": "Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`",
    "cmd": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#list"
    ],
    "canonical_cmd": "[list(a) for a in zip([VAR_STR], [VAR_STR], [VAR_STR])]",
    "cmd_name": "conala",
    "gpt35_response": " Get the zip output as a list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`. This requires calling the built-in `zip` function on the three lists, and then converting the resulting zip object to a list."
}
{
    "question_id": "14306852-84",
    "nl": "modify the width of a text control as `300` keeping default height in wxpython",
    "cmd": "wx.TextCtrl(self, -1, size=(300, -1))",
    "oracle_man": [],
    "canonical_cmd": "wx.TextCtrl(self, -1, size=(300, -1))",
    "cmd_name": "conala",
    "gpt35_response": " Modify the width of a text control as `300` keeping default height in wxpython. This requires accessing the text control in wxpython, and modifying the width property to be equal to `300`, while leaving the height property unchanged."
}
{
    "question_id": "2769061-34",
    "nl": "erase the contents of a file `filename`",
    "cmd": "open('filename', 'w').close()",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "open('VAR_STR', 'w').close()",
    "cmd_name": "conala",
    "gpt35_response": " Erase the contents of a file `filename`. This requires opening the file `filename` in write mode, and then writing an empty string to it to erase its contents."
}
{
    "question_id": "2769061-2",
    "nl": "How to erase the file contents of text file in Python?",
    "cmd": "open('file.txt', 'w').close()",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "open('file.txt', 'w').close()",
    "cmd_name": "conala",
    "gpt35_response": " How to erase the file contents of text file in Python? This requires opening the text file in write mode, and then writing an empty string to it to erase its contents."
}
{
    "question_id": "15650538-28",
    "nl": "Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)",
    "cmd": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy). This requires creating a new list, and populating it with the desired sub-matrix of the input list of lists by specifying the desired rows and columns."
}
{
    "question_id": "25817930-59",
    "nl": "sort each row in a pandas dataframe `df` in descending order",
    "cmd": "df.sort(axis=1, ascending=False)",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(axis=1, ascending=False)",
    "cmd_name": "conala",
    "gpt35_response": " Sort each row in a pandas dataframe `df` in descending order. This requires accessing each row of the data frame `df`, and sorting the values in each row in descending order."
}
{
    "question_id": "25817930-65",
    "nl": "Fastest way to sort each row in a pandas dataframe",
    "cmd": "df.sort(df.columns, axis=1, ascending=False)",
    "oracle_man": [],
    "canonical_cmd": "df.sort(df.columns, axis=1, ascending=False)",
    "cmd_name": "conala",
    "gpt35_response": " Fastest way to sort each row in a pandas dataframe. This requires accessing each row of the data frame `df`, and sorting the values in each row as efficiently as possible."
}
{
    "question_id": "18397805-56",
    "nl": "delete all rows in a numpy array `a` where any value in a row is zero `0`",
    "cmd": "a[np.all(a != 0, axis=1)]",
    "oracle_man": [
        "numpy.reference.generated.numpy.all"
    ],
    "canonical_cmd": "VAR_STR[np.all(VAR_STR != 0, axis=1)]",
    "cmd_name": "conala",
    "gpt35_response": " Delete all rows in a numpy array `a` where any value in a row is zero `0`. This requires identifying the rows in the numpy array `a` where any value is `0`, and then deleting these rows from the array."
}
{
    "question_id": "19156472-33",
    "nl": "sort array `order_array` based on column 'year', 'month' and 'day'",
    "cmd": "order_array.sort(order=['year', 'month', 'day'])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(order=['VAR_STR', 'VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Sort array `order_array` based on column 'year', 'month' and 'day'. This requires creating a new data frame from the array `order_array`, and then sorting the data frame based on the values in the 'year', 'month' and 'day' columns."
}
{
    "question_id": "19156472-7",
    "nl": "Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.",
    "cmd": "df.sort(['year', 'month', 'day'])",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(['VAR_STR', 'VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'. This requires sorting the structured numpy array 'df' based on the values in the 'year', 'month' and 'day' columns. "
}
{
    "question_id": "11303225-39",
    "nl": "remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.",
    "cmd": "del my_list[2:6]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[2:6]",
    "cmd_name": "conala",
    "gpt35_response": " Remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`. This requires accessing the correct slice of the list `my_list` to remove the desired elements from it."
}
{
    "question_id": "18366797-79",
    "nl": "pandas read comma-separated CSV file `s` and skip commented lines starting with '#'",
    "cmd": "pd.read_csv(StringIO(s), sep=',', comment='#')",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv",
        "python.library.io#io.StringIO"
    ],
    "canonical_cmd": "pd.read_csv(StringIO(VAR_STR), sep=',', comment='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Pandas read comma-separated CSV file `s` and skip commented lines starting with '#'. This requires using pandas' `read_csv` function and specifying the proper parameters to skip commented lines that start with `#`."
}
{
    "question_id": "251464-30",
    "nl": "get a name of function `my_function` as a string",
    "cmd": "my_function.__name__",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.__name__",
    "cmd_name": "conala",
    "gpt35_response": " Get a name of function `my_function` as a string. This requires accessing the function `my_function` and converting its name to a string."
}
{
    "question_id": "251464-61",
    "nl": "How to get a function name as a string in Python?",
    "cmd": "my_function.__name__",
    "oracle_man": [],
    "canonical_cmd": "my_function.__name__",
    "cmd_name": "conala",
    "gpt35_response": " How to get a function name as a string in Python? This requires accessing the desired function and converting its name to a string."
}
{
    "question_id": "962619-48",
    "nl": "get a random record from model 'MyModel' using django's orm",
    "cmd": "MyModel.objects.order_by('?').first()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.first"
    ],
    "canonical_cmd": "VAR_STR.objects.order_by('?').first()",
    "cmd_name": "conala",
    "gpt35_response": " Get a random record from model 'MyModel' using django's orm. This requires using django's orm to access the records in 'MyModel', and then selecting a single random record from among them."
}
{
    "question_id": "3506678-35",
    "nl": "in Django, select 100 random records from the database `Content.objects`",
    "cmd": "Content.objects.all().order_by('?')[:100]",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "Content.objects.all().order_by('?')[:100]",
    "cmd_name": "conala",
    "gpt35_response": " In Django, select 100 random records from the database `Content.objects`. This requires using Django's ORM to access the records in the `Content.objects` database, and then selecting 100 random records from among them."
}
{
    "question_id": "38549915-39",
    "nl": "Merge all columns in dataframe `df` into one column",
    "cmd": "df.apply(' '.join, axis=0)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.apply"
    ],
    "canonical_cmd": "VAR_STR.apply(' '.join, axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Merge all columns in dataframe `df` into one column. This requires accessing all of the columns in the dataframe `df` and combining them into a single column."
}
{
    "question_id": "8687568-13",
    "nl": "write a tuple of tuples `A` to a csv file using python",
    "cmd": "writer.writerow(A)",
    "oracle_man": [
        "python.library.csv#csv.csvwriter.writerow"
    ],
    "canonical_cmd": "writer.writerow(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Write a tuple of tuples `A` to a csv file using python. This requires opening a csv file in write mode, and writing the tuples from `A` to the file."
}
{
    "question_id": "8687568-40",
    "nl": "Write all tuple of tuples `A` at once into csv file",
    "cmd": "writer.writerows(A)",
    "oracle_man": [
        "python.library.csv#csv.csvwriter.writerows"
    ],
    "canonical_cmd": "writer.writerows(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Write all tuple of tuples `A` at once into csv file. This requires opening a csv file in write mode, and writing all of the tuples from `A` to the file at once."
}
{
    "question_id": "9905471-69",
    "nl": "split string `s` to list conversion by ','",
    "cmd": "[x.strip() for x in s.split(',')]",
    "oracle_man": [
        "python.library.stdtypes#str.strip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[x.strip() for x in VAR_STR.split('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": "- Split string `s` by ',' to convert it to a list. This requires splitting the string `s` by the delimiter ',' and storing the result in a list."
}
{
    "question_id": "3895424-5",
    "nl": "delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`",
    "cmd": "[x for x in lst if fn(x) != 0]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR for VAR_STR in lst if VAR_STR(VAR_STR) != 0]",
    "cmd_name": "conala",
    "gpt35_response": " Delete all elements from list `x` if function `fn` taking value as parameter returns `0`. This requires looping through each element in list `x`, calling function `fn` on the element, and deleting the element if `fn` returns `0`."
}
{
    "question_id": "6856119-91",
    "nl": "execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script",
    "cmd": "os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from Python script. This requires running the command 'source .bashrc' to load the bash profile, setting option 'expand_aliases' using 'shopt -s expand_aliases', and then executing the command 'nuke -x scriptPath'."
}
{
    "question_id": "2075128-48",
    "nl": "Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.",
    "cmd": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))",
    "oracle_man": [],
    "canonical_cmd": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (VAR_STR, VAR_STR, VAR_STR, var4))",
    "cmd_name": "conala",
    "gpt35_response": " Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places. This requires using the `.format()` method to format each variable with two decimal places."
}
{
    "question_id": "18816297-75",
    "nl": "Get the index value in list `p_list` using enumerate in list comprehension",
    "cmd": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(VAR_STR)}",
    "cmd_name": "conala",
    "gpt35_response": " Get the index value in list `p_list` using enumerate in list comprehension. This requires using a list comprehension to iterate through `p_list` and storing the index of each element."
}
{
    "question_id": "15863066-99",
    "nl": "Python regular expression match whole word",
    "cmd": "re.search('\\\\bis\\\\b', your_string)",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "re.search('\\\\bis\\\\b', your_string)",
    "cmd_name": "conala",
    "gpt35_response": " Python regular expression match whole word. This requires creating a regular expression that matches the entire word and using it to search a string."
}
{
    "question_id": "19954469-63",
    "nl": "Set the resolution of a monitor as `FULLSCREEN` in pygame",
    "cmd": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)",
    "oracle_man": [
        "pygame.ref.display#pygame.display.set_mode"
    ],
    "canonical_cmd": "pygame.display.set_mode((0, 0), pygame.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Set the resolution of a monitor as `FULLSCREEN` in Pygame. This requires setting the display mode to `FULLSCREEN`."
}
{
    "question_id": "20457174-80",
    "nl": "find button that is in li class `next` and assign it to variable `next`",
    "cmd": "next = driver.find_element_by_css_selector('li.next>a')",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = driver.find_element_by_css_selector('li.next>a')",
    "cmd_name": "conala",
    "gpt35_response": " Find button that is in `li` class `next` and assign it to variable `next`. This requires using this CSS selector to select the button and then storing it in the variable `next`."
}
{
    "question_id": "6018340-91",
    "nl": "match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'",
    "cmd": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'. This requires using a regular expression to search for the pattern 'abc(de)fg(123)' in the two strings."
}
{
    "question_id": "14332141-67",
    "nl": "Move the cursor of file pointer `fh1` at the end of the file.",
    "cmd": "fh1.seek(2)",
    "oracle_man": [
        "python.library.io#io.IOBase.seek"
    ],
    "canonical_cmd": "VAR_STR.seek(2)",
    "cmd_name": "conala",
    "gpt35_response": " Move the cursor of file pointer `fh1` to the end of the file. This requires using the `.seek()` method to move the file pointer to the end of the file."
}
{
    "question_id": "14956683-99",
    "nl": "Get the value of the minimum element in the second column of array `a`",
    "cmd": "a[np.argmin(a[:, (1)])]",
    "oracle_man": [
        "numpy.reference.generated.numpy.argmin"
    ],
    "canonical_cmd": "VAR_STR[np.argmin(VAR_STR[:, (1)])]",
    "cmd_name": "conala",
    "gpt35_response": " Get the value of the minimum element in the second column of array `a`. This requires looping through the rows of `a` and determining the smallest value in the second column."
}
{
    "question_id": "2655956-72",
    "nl": "create a list containing elements of list `a` if the sum of the element is greater than 10",
    "cmd": "[item for item in a if sum(item) > 10]",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[item for item in VAR_STR if sum(item) > 10]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing elements of list `a` if the sum of the element is greater than 10. This requires using a list comprehension to iterate through `a`, summing each element, and storing it in a new list if the sum is greater than 10."
}
{
    "question_id": "18637651-100",
    "nl": "to convert a list of tuples `list_of_tuples` into list of lists",
    "cmd": "[list(t) for t in zip(*list_of_tuples)]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#list"
    ],
    "canonical_cmd": "[list(t) for t in zip(*VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of tuples `list_of_tuples` into a list of lists. This requires using a list comprehension to iterate through each tuple in `list_of_tuples` and converting it into a list."
}
{
    "question_id": "18637651-49",
    "nl": "group a list `list_of_tuples` of tuples by values",
    "cmd": "zip(*list_of_tuples)",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Group a list `list_of_tuples` of tuples by values. This requires using the `sorted()` function to sort the list by the desired value, and then using the `groupby()` function to group the sorted list by those values."
}
{
    "question_id": "9304408-69",
    "nl": "Add 1 to each integer value in list `my_list`",
    "cmd": "new_list = [(x + 1) for x in my_list]",
    "oracle_man": [],
    "canonical_cmd": "new_list = [(x + 1) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Add 1 to each integer value in list `my_list`. This requires looping through each element in `my_list`, adding 1 to it if it is an integer."
}
{
    "question_id": "265960-7",
    "nl": "Strip punctuation from string `s`",
    "cmd": "s.translate(None, string.punctuation)",
    "oracle_man": [
        "python.library.stdtypes#str.translate"
    ],
    "canonical_cmd": "VAR_STR.translate(None, string.punctuation)",
    "cmd_name": "conala",
    "gpt35_response": " Strip punctuation from string `s`. This requires removing all punctuation marks from the string `s`."
}
{
    "question_id": "35118265-63",
    "nl": "remove the last dot and all text beyond it in string `s`",
    "cmd": "re.sub('\\\\.[^.]+$', '', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\.[^.]+$', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove the last dot and all text beyond it in string `s`. This requires finding the index of the last '.' in string `s`, and then slicing `s` to remove all text beyond that index."
}
{
    "question_id": "2407398-46",
    "nl": "merge lists `list_a` and `list_b` into a list of tuples",
    "cmd": "zip(list_a, list_b)",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Merge lists `list_a` and `list_b` into a list of tuples. This requires using the `zip()` function to combine the two lists into a list of tuples."
}
{
    "question_id": "2407398-69",
    "nl": "merge lists `a` and `a` into a list of tuples",
    "cmd": "list(zip(a, b))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(zip(VAR_STR, b))",
    "cmd_name": "conala",
    "gpt35_response": " Merge lists `a` and `a` into a list of tuples. This requires using the `zip()` function to combine the two lists into a list of tuples."
}
{
    "question_id": "19035186-84",
    "nl": "How to select element with Selenium Python xpath",
    "cmd": "driver.find_element_by_xpath(\"\/\/div[@id='a']\/\/a[@class='click']\")",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_xpath(\"\/\/div[@id='a']\/\/a[@class='click']\")",
    "cmd_name": "conala",
    "gpt35_response": " Select element with Selenium Python xpath. This requires using the `find_element_by_xpath()` method in Selenium to select the desired element."
}
{
    "question_id": "7741878-15",
    "nl": "apply `numpy.linalg.norm` to each row of a matrix `a`",
    "cmd": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)",
    "oracle_man": [
        "numpy.reference.generated.numpy.apply_along_axis"
    ],
    "canonical_cmd": "numpy.apply_along_axis(numpy.linalg.norm, 1, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Apply `numpy.linalg.norm` to each row of a matrix `a`, which requires calling the function `numpy.linalg.norm` on each row of matrix `a`."
}
{
    "question_id": "10895028-20",
    "nl": "append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`",
    "cmd": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "jsobj['a']['b']['VAR_STR'].append({VAR_STR})",
    "cmd_name": "conala",
    "gpt35_response": " Append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`, which requires accessing the dictionary, appending the new value, and updating the dictionary."
}
{
    "question_id": "21104592-91",
    "nl": "read json `elevations` to pandas dataframe `df`",
    "cmd": "pd.read_json(elevations)",
    "oracle_man": [
        "pandas.reference.api.pandas.read_json"
    ],
    "canonical_cmd": "pd.read_json(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Read json `elevations` to pandas dataframe `df`, which requires using the function `pandas.read_json` to read `elevations` and create `df`."
}
{
    "question_id": "12324456-53",
    "nl": "keep a list `dataList` of lists sorted as it is created by second element",
    "cmd": "dataList.sort(key=lambda x: x[1])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x[1])",
    "cmd_name": "conala",
    "gpt35_response": " Keep a list `dataList` of lists sorted as it is created by second element, which requires sorting the sublists based on the second element and keeping the outer list sorted."
}
{
    "question_id": "10213994-42",
    "nl": "sorting a list of tuples `list_of_tuples` where each tuple is reversed",
    "cmd": "sorted(list_of_tuples, key=lambda tup: tup[::-1])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda tup: tup[::-1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of tuples `list_of_tuples` where each tuple is reversed, which requires accessing each tuple in `list_of_tuples`, reversing the order of elements within each tuple, and then sorting the entire list."
}
{
    "question_id": "10213994-17",
    "nl": "sorting a list of tuples `list_of_tuples` by second key",
    "cmd": "sorted(list_of_tuples, key=lambda tup: tup[1])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda tup: tup[1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of tuples `list_of_tuples` by second key, which requires defining a custom comparison function and passing it to the `sorted` function."
}
{
    "question_id": "5251663-9",
    "nl": "check if any values in a list `input_list` is a list",
    "cmd": "any(isinstance(el, list) for el in input_list)",
    "oracle_man": [
        "python.library.functions#isinstance",
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(isinstance(el, list) for el in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if any values in a list `input_list` is a list, which requires iterating through each value in the list and testing if it is a list."
}
{
    "question_id": "4877844-81",
    "nl": "check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`",
    "cmd": "'x' in ['x', 'd', 'a', 's', 'd', 's']",
    "oracle_man": [],
    "canonical_cmd": "'VAR_STR' in ['VAR_STR', 'd', 'a', 's', 'd', 's']",
    "cmd_name": "conala",
    "gpt35_response": " Check if string 'x' is in list `['x', 'd', 'a', 's', 'd', 's']`, which requires iterating through the list and checking if 'x' is in the list."
}
{
    "question_id": "40016359-9",
    "nl": "Get the first and last 3 elements of list `l`",
    "cmd": "l[:3] + l[-3:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:3] + VAR_STR[-3:]",
    "cmd_name": "conala",
    "gpt35_response": " Get the first and last 3 elements of list `l`, which requires accessing the first and last three elements of the list."
}
{
    "question_id": "1038824-12",
    "nl": "remove a substring \".com\" from the end of string `url`",
    "cmd": "if url.endswith('.com'):\n    url = url[:(-4)]",
    "oracle_man": [
        "python.library.stdtypes#str.endswith"
    ],
    "canonical_cmd": "if VAR_STR.endswith('VAR_STR'):\n    VAR_STR = VAR_STR[:-4]",
    "cmd_name": "conala",
    "gpt35_response": " Remove a substring \".com\" from the end of string `url`, which requires slicing the string to remove the desired substring."
}
{
    "question_id": "1038824-99",
    "nl": "remove a substring \".com\" from the end of string `url`",
    "cmd": "url = re.sub('\\\\.com$', '', url)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('\\\\.com$', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove a substring \".com\" from the end of string `url`, which requires slicing the string to remove the desired substring."
}
{
    "question_id": "1038824-76",
    "nl": "remove a substring \".com\" from the end of string `url`",
    "cmd": "print(url.replace('.com', ''))",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "print(VAR_STR.replace('VAR_STR', ''))",
    "cmd_name": "conala",
    "gpt35_response": " Remove a substring \".com\" from the end of string `url`, which requires slicing the string to remove the desired substring."
}
{
    "question_id": "1038824-70",
    "nl": "remove a substring `suffix` from the end of string `text`",
    "cmd": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "if not VAR_STR.endswith(VAR_STR):\n    return VAR_STR\nreturn VAR_STR[:len(VAR_STR) - len(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Remove a substring `suffix` from the end of string `text`, which requires slicing the string to remove the desired substring."
}
{
    "question_id": "40319433-71",
    "nl": "find the euclidean distance between two 3-d arrays `A` and `B`",
    "cmd": "np.sqrt(((A - B) ** 2).sum(-1))",
    "oracle_man": [
        "numpy.reference.generated.numpy.sqrt",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "np.sqrt(((VAR_STR - VAR_STR) ** 2).sum(-1))",
    "cmd_name": "conala",
    "gpt35_response": " Find the euclidean distance between two 3-d arrays `A` and `B`, which requires calling the function `numpy.linalg.norm` on the difference between `A` and `B`."
}
{
    "question_id": "2094176-57",
    "nl": "split string `a` using new-line character '\\n' as separator",
    "cmd": "a.rstrip().split('\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.rstrip().split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string `a` using new-line character '\\n' as separator, which requires using the `split` method on `a`."
}
{
    "question_id": "2094176-44",
    "nl": "split a string `a` with new line character",
    "cmd": "a.split('\\n')[:-1]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('\\n')[:-1]",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `a` with new line character, which requires using the `split` method on `a`."
}
{
    "question_id": "4979542-63",
    "nl": "unpack the arguments out of list `params` to function `some_func`",
    "cmd": "some_func(*params)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Unpack the arguments out of list `params` to function `some_func`, which requires using the `*` suffix to unpack the list when calling `some_func`."
}
{
    "question_id": "8383213-96",
    "nl": "python regex for hyphenated words in `text`",
    "cmd": "re.findall('\\\\w+(?:-\\\\w+)+', text)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\w+(?:-\\\\w+)+', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Use python regex for hyphenated words in `text`, which requires using the `re.findall` function with the appropriate regex pattern and `text`."
}
{
    "question_id": "31029560-17",
    "nl": "plot a bar graph from the column 'color' in the DataFrame 'df'",
    "cmd": "df.colour.value_counts().plot(kind='bar')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.value_counts",
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "VAR_STR.colour.value_counts().plot(kind='bar')",
    "cmd_name": "conala",
    "gpt35_response": " Plot a bar graph from the column 'color' in the DataFrame 'df', which requires accessing the column 'color' in `df` and plotting it using matplotlib."
}
{
    "question_id": "31029560-68",
    "nl": "plot categorical data in series `df` with kind `bar` using pandas and matplotlib",
    "cmd": "df.groupby('colour').size().plot(kind='bar')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.plot",
        "pandas.reference.api.pandas.dataframe.size"
    ],
    "canonical_cmd": "VAR_STR.groupby('colour').size().plot(kind='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Plot categorical data in series `df` with kind `bar` using pandas and matplotlib, which requires using the `pandas.DataFrame.plot` method with the appropriate specifications for plot type and data source."
}
{
    "question_id": "18319101-1",
    "nl": "generate random upper-case ascii string of 12 characters length",
    "cmd": "print(''.join(choice(ascii_uppercase) for i in range(12)))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.random#random.choice",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(''.join(choice(ascii_uppercase) for i in range(12)))",
    "cmd_name": "conala",
    "gpt35_response": "- Generate random upper-case ascii string of 12 characters length. This requires using a random generator function to generate a string of 12 characters consisting of upper-case ascii characters."
}
{
    "question_id": "7934620-36",
    "nl": "python: dots in the name of variable in a format string",
    "cmd": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})",
    "cmd_name": "conala",
    "gpt35_response": " Python: dots in the name of variable in a format string. This requires formatting a string with variable(s) containing dot(s) in their name(s) using a valid syntax for dot-containing variable names"
}
{
    "question_id": "13954840-33",
    "nl": "open the file 'words.txt' in 'rU' mode",
    "cmd": "f = open('words.txt', 'rU')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "f = open('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Open the file 'words.txt' in 'rU' mode. This requires using the `open` function to open the file 'words.txt' in read mode with universal line-endings."
}
{
    "question_id": "39602824-29",
    "nl": "Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'",
    "cmd": "df['prod_type'] = 'responsive'",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'. This requires accessing the 'prod_type' column of dataframe `df` and replacing each value with the string 'responsive'."
}
{
    "question_id": "16994696-65",
    "nl": "python get time stamp on file `file` in '%m\/%d\/%Y' format",
    "cmd": "time.strftime('%m\/%d\/%Y', time.gmtime(os.path.getmtime(file)))",
    "oracle_man": [
        "python.library.time#time.gmtime",
        "python.library.time#time.strftime",
        "python.library.os.path#os.path.getmtime"
    ],
    "canonical_cmd": "time.strftime('VAR_STR', time.gmtime(os.path.getmtime(VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Python get time stamp on file `file` in '%m\/%d\/%Y' format. This requires using the `os.path.getmtime` function to get the time stamp of file `file` and then converting it to the specified format."
}
{
    "question_id": "23887881-8",
    "nl": "duplicate data in pandas dataframe `x` for 5 times",
    "cmd": "pd.concat([x] * 5, ignore_index=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat"
    ],
    "canonical_cmd": "pd.concat([VAR_STR] * 5, ignore_index=True)",
    "cmd_name": "conala",
    "gpt35_response": " Duplicate data in pandas dataframe `x` for 5 times. This requires using the `pandas.DataFrame` function to duplicate the data in the dataframe `x` for 5 times."
}
{
    "question_id": "23887881-70",
    "nl": "Get a repeated pandas data frame object `x` by `5` times",
    "cmd": "pd.concat([x] * 5)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat"
    ],
    "canonical_cmd": "pd.concat([VAR_STR] * 5)",
    "cmd_name": "conala",
    "gpt35_response": " Get a repeated pandas data frame object `x` by `5` times. This requires using the `pandas.DataFrame` function to repeat the dataframe `x` for 5 times and storing it as a new dataframe object."
}
{
    "question_id": "6278847-2",
    "nl": "kill a process `make.exe` from python script on windows",
    "cmd": "os.system('taskkill \/im make.exe')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('taskkill \/im make.exe')",
    "cmd_name": "conala",
    "gpt35_response": " Kill a process `make.exe` from python script on windows. This requires using the `subprocess` module to execute the command to kill the process `make.exe` on a Windows operating system from a python script."
}
{
    "question_id": "22240602-20",
    "nl": "check if all elements in list `mylist` are the same",
    "cmd": "len(set(mylist)) == 1",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "len(set(VAR_STR)) == 1",
    "cmd_name": "conala",
    "gpt35_response": " Check if all elements in list `mylist` are the same. This requires using the `all` function to check if all elements in the list `mylist` are the same."
}
{
    "question_id": "8209568-32",
    "nl": "draw a grid line on every tick of plot `plt`",
    "cmd": "plt.grid(True)",
    "oracle_man": [
        "matplotlib._as_gen.mpl_toolkits.axisartist.axislines.axes#mpl_toolkits.axisartist.axislines.Axes.grid"
    ],
    "canonical_cmd": "VAR_STR.grid(True)",
    "cmd_name": "conala",
    "gpt35_response": " Draw a grid line on every tick of plot `plt`. This requires using the `grid` function of the matplotlib `pyplot` interface to draw grid lines on every tick of `plt`."
}
{
    "question_id": "11303238-52",
    "nl": "find recurring patterns in a string '42344343434'",
    "cmd": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('^(.+?)((.+)\\\\3+)$', 'VAR_STR')[0][:-1]",
    "cmd_name": "conala",
    "gpt35_response": " Find recurring patterns in a string '42344343434'. This requires using regular expressions to find recurring patterns in the string '42344343434'."
}
{
    "question_id": "6294179-66",
    "nl": "How to find all occurrences of an element in a list?",
    "cmd": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']",
    "cmd_name": "conala",
    "gpt35_response": " How to find all occurrences of an element in a list? This requires using the `list.index` method to find the index of each occurrence of the element in the list."
}
{
    "question_id": "15183084-19",
    "nl": "create a dictionary using two lists`x` and `y`",
    "cmd": "dict(zip(x, y))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary using two lists `x` and `y`. This requires using the `zip` function to combine lists `x` and `y` into a list of tuples, and then using a dictionary comprehension to create a dictionary from the resulting list of tuples."
}
{
    "question_id": "3430372-86",
    "nl": "get full path of current directory",
    "cmd": "os.path.dirname(os.path.abspath(__file__))",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.abspath"
    ],
    "canonical_cmd": "os.path.dirname(os.path.abspath(__file__))",
    "cmd_name": "conala",
    "gpt35_response": " Get full path of current directory. This requires using the `os` module to get the current working directory and `os.path.abspath` function to get the absolute path of the current working directory."
}
{
    "question_id": "11811392-43",
    "nl": "generate a list from a pandas dataframe `df` with the column name and column values",
    "cmd": "df.values.tolist()",
    "oracle_man": [
        "pandas.reference.api.pandas.series.tolist"
    ],
    "canonical_cmd": "VAR_STR.values.tolist()",
    "cmd_name": "conala",
    "gpt35_response": " Generate a list from a pandas dataframe `df` with the column name and column values. This requires using the `pandas.DataFrame` function to create a dataframe from the pandas dataframe `df`, and then using the `to_dict` function with the `'list'` orientation to convert the dataframe to a list of dictionaries containing column name and column values."
}
{
    "question_id": "12310141-33",
    "nl": "check if all lists in list `L` have three elements of integer 1",
    "cmd": "all(x.count(1) == 3 for x in L)",
    "oracle_man": [
        "python.library.functions#all",
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "all(x.count(1) == 3 for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if all lists in list `L` have three elements of integer 1. This requires using a for loop to iterate through each list in the list `L` and checking if each list has three elements of integer 1."
}
{
    "question_id": "5048841-98",
    "nl": "Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list",
    "cmd": "my_list.sort(key=operator.itemgetter('name'))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=operator.itemgetter('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list. This requires using the `sorted` function with a lambda function to sort the list `my_list` based on the values associated with key 'name' of each dictionary in the list."
}
{
    "question_id": "24076297-68",
    "nl": "display first 5 characters of string 'aaabbbccc'",
    "cmd": "\"\"\"{:.5}\"\"\".format('aaabbbccc')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{:.5}\"\"\".format('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Display first 5 characters of string 'aaabbbccc'. This requires using string slicing to display the first 5 characters of the string 'aaabbbccc'."
}
{
    "question_id": "16374540-19",
    "nl": "Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary",
    "cmd": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#dict",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "dict(map(lambda s: s.split(':'), [VAR_STR]))",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary. This requires using the `dict` function with a list comprehension to convert the list to a dictionary."
}
{
    "question_id": "13571134-46",
    "nl": "recursively go through all subdirectories and files in `rootdir`",
    "cmd": "for (root, subFolders, files) in os.walk(rootdir):\n    pass",
    "oracle_man": [
        "python.library.os#os.walk"
    ],
    "canonical_cmd": "for root, subFolders, files in os.walk(VAR_STR):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Recursively go through all subdirectories and files in `rootdir`. This requires using a recursive function that iterates through all subdirectories and files in `rootdir` and performing the desired action on each file."
}
{
    "question_id": "6618515-54",
    "nl": "sort list `X` based on values from another list `Y`",
    "cmd": "[x for y, x in sorted(zip(Y, X))]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "[x for y, x in sorted(zip(VAR_STR, VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": "- Sort list `X` based on values from another list `Y`. This requires creating a mapping between the elements of `X` and `Y`, sorting `X` using the mapped values, and returning the sorted list."
}
{
    "question_id": "6618515-6",
    "nl": "sorting list 'X' based on values from another list 'Y'",
    "cmd": "[x for y, x in sorted(zip(Y, X))]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "[x for y, x in sorted(zip(VAR_STR, VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": " Sorting list `X` based on values from another list `Y`. This requires creating a mapping between the elements of `X` and `Y`, sorting `X` using the mapped values, and returning the sorted list."
}
{
    "question_id": "640001-87",
    "nl": "remove parentheses and text within it in string `filename`",
    "cmd": "re.sub('\\\\([^)]*\\\\)', '', filename)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\([^)]*\\\\)', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove parentheses and text within it in string `filename`. This requires identifying substrings enclosed in parentheses using string manipulation, removing them, and returning the modified string."
}
{
    "question_id": "14853243-64",
    "nl": "find all `owl:Class` tags by parsing xml with namespace",
    "cmd": "root.findall('{http:\/\/www.w3.org\/2002\/07\/owl#}Class')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "root.findall('{http:\/\/www.w3.org\/2002\/07\/owl#}Class')",
    "cmd_name": "conala",
    "gpt35_response": " Find all `owl:Class` tags by parsing xml with namespace. This requires parsing the xml file, identifying tags with `owl:Class` as their name using the namespace, and returning a list of the identified tags."
}
{
    "question_id": "6740865-68",
    "nl": "print a unicode string `text`",
    "cmd": "print(text.encode('windows-1252'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print(VAR_STR.encode('windows-1252'))",
    "cmd_name": "conala",
    "gpt35_response": " Print a unicode string `text`. This simply requires using the print function to display the content of `text`."
}
{
    "question_id": "41192805-11",
    "nl": "Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'",
    "cmd": "pd.concat([df_1, df_2.sort_values('y')])",
    "oracle_man": [
        "pandas.reference.api.pandas.concat",
        "pandas.reference.api.pandas.dataframe.sort_values"
    ],
    "canonical_cmd": "pd.concat([VAR_STR, VAR_STR.sort_values('VAR_STR')])",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'. This requires sorting `df_1` and `df_2` by the values of the column `y`, concatenating the sorted dataframes, and returning the result."
}
{
    "question_id": "15014276-86",
    "nl": "sum values greater than 0 in dictionary `d`",
    "cmd": "sum(v for v in list(d.values()) if v > 0)",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(v for v in list(VAR_STR.values()) if v > 0)",
    "cmd_name": "conala",
    "gpt35_response": " Sum values greater than 0 in dictionary `d`. This requires iterating over the key-value pairs in `d`, collecting the values that are greater than 0, and returning their sum."
}
{
    "question_id": "18131367-54",
    "nl": "Get all the items from a list of tuple 'l' where second item in tuple is '1'.",
    "cmd": "[x for x in l if x[1] == 1]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x[1] == 1]",
    "cmd_name": "conala",
    "gpt35_response": " Get all the items from a list of tuple `l` where second item in tuple is '1'. This requires iterating over the tuples in `l`, checking the value of the second item in each, and collecting all tuples that have a second item equal to '1'."
}
{
    "question_id": "12030074-25",
    "nl": "generate list of numbers in specific format using string formatting precision.",
    "cmd": "[('%.2d' % i) for i in range(16)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "[('%.2d' % i) for i in range(16)]",
    "cmd_name": "conala",
    "gpt35_response": " Generate list of numbers in specific format using string formatting precision. This requires using string formatting with a precision specifier to create a list of numbers with the specified format."
}
{
    "question_id": "41133414-48",
    "nl": "strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end",
    "cmd": "url.split('&')[-1].replace('=', '') + '.html'",
    "oracle_man": [
        "python.library.stdtypes#str.replace",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR')[-1].replace('VAR_STR', '') + 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end. This requires using string manipulation to strip the desired characters from the original string and concatenate the resulting string with the desired suffix."
}
{
    "question_id": "1058712-18",
    "nl": "select a random element from array `[1, 2, 3]`",
    "cmd": "random.choice([1, 2, 3])",
    "oracle_man": [
        "python.library.random#random.choice"
    ],
    "canonical_cmd": "random.choice([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Select a random element from array `[1, 2, 3]`. This requires selecting a random index within the bounds of the array and returning the value at that index."
}
{
    "question_id": "22520932-13",
    "nl": "remove all non-alphabet chars from string `s`",
    "cmd": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])",
    "oracle_man": [
        "python.library.stdtypes#str.isalpha",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([i for i in VAR_STR if i.isalpha()])",
    "cmd_name": "conala",
    "gpt35_response": " Remove all non-alphabet chars from string `s`. This requires iterating over the characters in `s`, checking if each is an alphabet character, and returning a new string with only the alphabet characters."
}
{
    "question_id": "23797491-57",
    "nl": "convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y'",
    "cmd": "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')",
    "oracle_man": [
        "pandas.reference.api.pandas.to_datetime"
    ],
    "canonical_cmd": "df['date'] = pd.to_datetime(df['date'], format='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert date strings in pandas dataframe column `df['date']` to pandas timestamps using the format '%d%b%Y'. This requires iterating over the values in the `date` column of `df`, converting each to a pandas timestamp using the specified format, and updating the dataframe in place."
}
{
    "question_id": "21822054-79",
    "nl": "force bash interpreter '\/bin\/bash' to be used instead of shell",
    "cmd": "os.system('GREPDB=\"echo 123\"; \/bin\/bash -c \"$GREPDB\"')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('GREPDB=\"echo 123\"; \/bin\/bash -c \"$GREPDB\"')",
    "cmd_name": "conala",
    "gpt35_response": " Force bash interpreter '\/bin\/bash' to be used instead of shell. This requires specifying the path to the desired interpreter as an argument when executing the script."
}
{
    "question_id": "21822054-28",
    "nl": "Run a command `echo hello world` in bash instead of shell",
    "cmd": "os.system('\/bin\/bash -c \"echo hello world\"')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('\/bin\/bash -c \"echo hello world\"')",
    "cmd_name": "conala",
    "gpt35_response": " Run a command `echo hello world` in bash instead of shell. This simply requires executing the `echo` command with the specified arguments in a bash terminal."
}
{
    "question_id": "18358938-63",
    "nl": "get index values of pandas dataframe `df` as list",
    "cmd": "df.index.values.tolist()",
    "oracle_man": [
        "pandas.reference.api.pandas.index.tolist"
    ],
    "canonical_cmd": "VAR_STR.index.values.tolist()",
    "cmd_name": "conala",
    "gpt35_response": " Get index values of pandas dataframe `df` as list. This requires accessing the index of `df` and converting it to a list."
}
{
    "question_id": "30241279-15",
    "nl": "run app `app` on host '192.168.0.58' and port 9000 in Flask",
    "cmd": "app.run(host='192.168.0.58', port=9000, debug=False)",
    "oracle_man": [
        "python.library.pdb#pdb.run"
    ],
    "canonical_cmd": "VAR_STR.run(host='VAR_STR', port=9000, debug=False)",
    "cmd_name": "conala",
    "gpt35_response": " Run app `app` on host '192.168.0.58' and port 9000 in Flask. This requires configuring the Flask app with the specified host and port, and running the app."
}
{
    "question_id": "727507-53",
    "nl": "print unicode string `ex\\xe1mple` in uppercase",
    "cmd": "print('ex\\xe1mple'.upper())",
    "oracle_man": [
        "python.library.stdtypes#str.upper"
    ],
    "canonical_cmd": "print('VAR_STR'.upper())",
    "cmd_name": "conala",
    "gpt35_response": " Print unicode string `ex\\xe1mple` in uppercase. This requires converting the string to uppercase and printing the resulting string."
}
{
    "question_id": "40639071-13",
    "nl": "Get the sum of values to the power of their indices in a list `l`",
    "cmd": "sum(j ** i for i, j in enumerate(l, 1))",
    "oracle_man": [
        "python.library.functions#enumerate",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(j ** i for i, j in enumerate(VAR_STR, 1))",
    "cmd_name": "conala",
    "gpt35_response": " Get the sum of values to the power of their indices in a list `l`. This requires iterating over the elements of `l`, raising each to the power of its index, and returning the sum of the resulting values."
}
{
    "question_id": "14162026-97",
    "nl": "get the first row, second column; second row, first column, and first row third column values of numpy array `arr`",
    "cmd": "arr[[0, 1, 1], [1, 0, 2]]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[[0, 1, 1], [1, 0, 2]]",
    "cmd_name": "conala",
    "gpt35_response": " Get the first row, second column; second row, first column, and first row third column values of numpy array `arr`. This requires indexing into `arr` to obtain the desired values and returning them."
}
{
    "question_id": "28538536-94",
    "nl": "Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`",
    "cmd": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.drop(['VAR_STR', 'VAR_STR'], axis=1, inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": "- Delete multiple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`. This requires selecting `columnheading1` and `columnheading2` from the data frame `yourdf` and deleting them. "
}
{
    "question_id": "40079728-79",
    "nl": "Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'",
    "cmd": "User.objects.order_by('-pet__age')[:10]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.objects.order_by('-pet__age')[:10]",
    "cmd_name": "conala",
    "gpt35_response": " Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'. This requires querying model `User` and sorting them by age using the related model `pet` and getting the first 10 records. "
}
{
    "question_id": "8924173-17",
    "nl": "print bold text 'Hello'",
    "cmd": "print('\\x1b[1m' + 'Hello')",
    "oracle_man": [],
    "canonical_cmd": "print('\\x1b[1m' + 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Print bold text 'Hello'. This requires printing the text 'Hello' in bold format. "
}
{
    "question_id": "3781851-15",
    "nl": "run python script 'script2.py' from another python script, passing in 1 as an argument",
    "cmd": "os.system('script2.py 1')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('script2.py 1')",
    "cmd_name": "conala",
    "gpt35_response": " Run python script 'script2.py' from another python script, passing in 1 as an argument. This requires invoking `script2.py` within the parent script using `subprocess.Popen` and passing the argument value of 1. "
}
{
    "question_id": "18504967-17",
    "nl": "create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`",
    "cmd": "df['A_perc'] = df['A'] \/ df['sum']",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'] \/ VAR_STR['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`. This requires creating a new column `A_perc` in dataframe `df` and computing its value by dividing the corresponding value in column `A` by the value in column `sum` for each row. "
}
{
    "question_id": "11697709-100",
    "nl": "list duplicated elements in two lists `listA` and `listB`",
    "cmd": "list(set(listA) & set(listB))",
    "oracle_man": [
        "python.library.stdtypes#set",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(set(VAR_STR) & set(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " List duplicated elements in two lists `listA` and `listB`. This requires finding the elements that appear in both `listA` and `listB` and listing them. "
}
{
    "question_id": "10365225-64",
    "nl": "extract digits in a simple way from a python string",
    "cmd": "map(int, re.findall('\\\\d+', s))",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(int, re.findall('\\\\d+', s))",
    "cmd_name": "conala",
    "gpt35_response": " Extract digits in a simple way from a python string. This requires identifying all digits present in the python string and extracting them. "
}
{
    "question_id": "11430863-98",
    "nl": "find overlapping matches from a string `hello` using regex",
    "cmd": "re.findall('(?=(\\\\w\\\\w))', 'hello')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(?=(\\\\w\\\\w))', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Find overlapping matches from a string `hello` using regex. This requires constructing a regular expression pattern and using it to find overlapping matches in the string `hello`. "
}
{
    "question_id": "25991612-67",
    "nl": "Python \/ Remove special character from string",
    "cmd": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)",
    "cmd_name": "conala",
    "gpt35_response": " Python \/ Remove special character from string. This requires identifying the special character in the string and removing it. "
}
{
    "question_id": "2597099-85",
    "nl": "Sort list `keys` based on its elements' dot-seperated numbers",
    "cmd": "keys.sort(key=lambda x: map(int, x.split('.')))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#list.sort",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: map(int, x.split('.')))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `keys` based on its elements' dot-separated numbers. This requires extracting the numbers from the dot-separated elements, sorting them and returning the list with the sorted elements. "
}
{
    "question_id": "2597099-42",
    "nl": "Sort a list of integers `keys` where each value is in string format",
    "cmd": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#list.sort",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: [int(y) for y in x.split('.')])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of integers `keys` where each value is in string format. This requires converting the string values to integer, sorting the integer list and returning the list with str formatted integers. "
}
{
    "question_id": "1874194-65",
    "nl": "get the tuple in list `a_list` that has the largest item in the second index",
    "cmd": "max_item = max(a_list, key=operator.itemgetter(1))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#max"
    ],
    "canonical_cmd": "max_item = max(VAR_STR, key=operator.itemgetter(1))",
    "cmd_name": "conala",
    "gpt35_response": " Get the tuple in list `a_list` that has the largest item in the second index. This requires iterating through the list `a_list`, comparing the second element of each tuple to identify the largest one and then returning the corresponding tuple. "
}
{
    "question_id": "1874194-25",
    "nl": "find tuple in list of tuples `a_list` with the largest second element",
    "cmd": "max(a_list, key=operator.itemgetter(1))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(VAR_STR, key=operator.itemgetter(1))",
    "cmd_name": "conala",
    "gpt35_response": " Find tuple in list of tuples `a_list` with the largest second element. This requires iterating through the list `a_list`, comparing the second element of each tuple to identify the largest one and then returning the corresponding tuple. "
}
{
    "question_id": "16196712-48",
    "nl": "wait for shell command `p` evoked by  subprocess.Popen to complete",
    "cmd": "p.wait()",
    "oracle_man": [
        "python.library.os#os.wait"
    ],
    "canonical_cmd": "VAR_STR.wait()",
    "cmd_name": "conala",
    "gpt35_response": " Wait for shell command `p` evoked by subprocess.Popen to complete. This requires invoking shell command `p` using `subprocess.Popen` and then waiting for its completion using `p.wait()`. "
}
{
    "question_id": "42462530-4",
    "nl": "replace white spaces in dataframe `df` with '_'",
    "cmd": "df.replace(' ', '_', regex=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "VAR_STR.replace(' ', 'VAR_STR', regex=True)",
    "cmd_name": "conala",
    "gpt35_response": " Replace white spaces in dataframe `df` with '_'. This requires identifying the white spaces present in dataframe `df` and replacing them with '_'. "
}
{
    "question_id": "30628176-5",
    "nl": "switch positions of each two adjacent characters in string `a`",
    "cmd": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#len",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(''.join(''.join(i) for i in zip(a2, a1)) + VAR_STR[-1] if len(VAR_STR) % \n    2 else '')",
    "cmd_name": "conala",
    "gpt35_response": " Switch positions of each two adjacent characters in string `a`. This requires iterating through the string `a`, swapping adjacent characters pairwise and returning the modified string. "
}
{
    "question_id": "4289331-11",
    "nl": "Python: Extract numbers from a string",
    "cmd": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.functions#int"
    ],
    "canonical_cmd": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]",
    "cmd_name": "conala",
    "gpt35_response": " Python: Extract numbers from a string. This requires identifying all numbers present in a string `a` and extracting them. "
}
{
    "question_id": "4241757-59",
    "nl": "remove extra white spaces & tabs from a string `s`",
    "cmd": "\"\"\" \"\"\".join(s.split())",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Remove extra white spaces & tabs from a string `s`. This requires identifying all extra white spaces in the string `s` and removing them. "
}
{
    "question_id": "4810537-49",
    "nl": "clear terminal screen on windows",
    "cmd": "os.system('cls')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('cls')",
    "cmd_name": "conala",
    "gpt35_response": " Clear terminal screen on windows. This requires invoking the `cls` command from the `os` module to clear the terminal screen. "
}
{
    "question_id": "4810537-55",
    "nl": "clear the terminal screen in Linux",
    "cmd": "os.system('clear')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('clear')",
    "cmd_name": "conala",
    "gpt35_response": " Clear the terminal screen in Linux. This requires invoking the `clear` command from the `os` module to clear the terminal screen."
}
{
    "question_id": "23306653-53",
    "nl": "get value of key `post code` associated with first index of key `places` of dictionary `data`",
    "cmd": "print(data['places'][0]['post code'])",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR['VAR_STR'][0]['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": "- Obtain the value associated with the key `post code` of the first index of the key `places` in the dictionary `data`. This requires accessing the dictionary `data`, accessing the key `places`, accessing the first index of the list, and accessing the value of the key `post code`."
}
{
    "question_id": "4111412-34",
    "nl": "get a list of indices of non zero elements in a list `a`",
    "cmd": "[i for i, e in enumerate(a) if e != 0]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, e in enumerate(VAR_STR) if e != 0]",
    "cmd_name": "conala",
    "gpt35_response": " Obtain a list of indices of non-zero elements in the list `a`. This requires accessing the list `a`, iterating over each element of the list, and appending the indices of non-zero elements to a new list."
}
{
    "question_id": "17589590-99",
    "nl": "Define a list with string values `['a', 'c', 'b', 'obj']`",
    "cmd": "['a', 'c', 'b', 'obj']",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Define a list containing the string values of `['a', 'c', 'b', 'obj']`. This requires creating a new list and assigning the string values to each index of that list."
}
{
    "question_id": "38273353-74",
    "nl": "repeat every character for 7 times in string 'map'",
    "cmd": "\"\"\"\"\"\".join(map(lambda x: x * 7, 'map'))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(VAR_STR(lambda x: x * 7, 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Repeat every character in the string `'map'` for 7 times. This requires accessing the string `'map'` and repeating each character in the string for 7 times."
}
{
    "question_id": "817087-38",
    "nl": "call a function with argument list `args`",
    "cmd": "func(*args)",
    "oracle_man": [
        "python.library.functools#functools.partial.func"
    ],
    "canonical_cmd": "func(*VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Call a function with the argument list `args`. This requires invoking a function and passing the argument list `args` to the function."
}
{
    "question_id": "14764126-22",
    "nl": "restart a computer after `900` seconds using subprocess",
    "cmd": "subprocess.call(['shutdown', '\/r', '\/t', '900'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['shutdown', '\/r', '\/t', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Restart the computer after `900` seconds using subprocess. This requires importing the subprocess module, using the `sleep()` method to wait for `900` seconds, and using the `restart()` method of the subprocess module to restart the computer."
}
{
    "question_id": "14764126-20",
    "nl": "shutdown a computer using subprocess",
    "cmd": "subprocess.call(['shutdown', '\/s'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['shutdown', '\/s'])",
    "cmd_name": "conala",
    "gpt35_response": " Shutdown the computer using subprocess. This requires importing the subprocess module, using the `shutdown()` method of the subprocess module to shut down the computer."
}
{
    "question_id": "14764126-37",
    "nl": "abort a computer shutdown using subprocess",
    "cmd": "subprocess.call(['shutdown', '\/a '])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['shutdown', '\/a '])",
    "cmd_name": "conala",
    "gpt35_response": " Abort a computer shutdown using subprocess. This requires importing the subprocess module and using the `abort()` method of the subprocess module to abort the computer shutdown."
}
{
    "question_id": "14764126-39",
    "nl": "logoff computer having windows operating system using python",
    "cmd": "subprocess.call(['shutdown', '\/l '])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['shutdown', '\/l '])",
    "cmd_name": "conala",
    "gpt35_response": " Log off a computer having Windows operating system using Python. This requires importing the subprocess module and using the `logoff()` method of the subprocess module to log off the computer."
}
{
    "question_id": "14764126-27",
    "nl": "shutdown and restart a computer running windows from script",
    "cmd": "subprocess.call(['shutdown', '\/r'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['shutdown', '\/r'])",
    "cmd_name": "conala",
    "gpt35_response": " Shutdown and restart a computer running Windows from script. This requires importing the subprocess module and using the `shutdown()` method of the subprocess module with the appropriate arguments to shut down and restart the computer."
}
{
    "question_id": "6996603-67",
    "nl": "delete an empty directory",
    "cmd": "os.rmdir()",
    "oracle_man": [
        "python.library.os#os.rmdir"
    ],
    "canonical_cmd": "os.rmdir()",
    "cmd_name": "conala",
    "gpt35_response": " Delete an empty directory. This requires deleting a directory that is empty."
}
{
    "question_id": "6996603-65",
    "nl": "recursively delete all contents in directory `path`",
    "cmd": "shutil.rmtree(path, ignore_errors=False, onerror=None)",
    "oracle_man": [
        "python.library.shutil#shutil.rmtree"
    ],
    "canonical_cmd": "shutil.rmtree(VAR_STR, ignore_errors=False, onerror=None)",
    "cmd_name": "conala",
    "gpt35_response": " Recursively delete all contents in the directory `path`. This requires deleting all files and directories within the directory `path` recursively."
}
{
    "question_id": "6996603-99",
    "nl": "recursively remove folder `name`",
    "cmd": "os.removedirs(name)",
    "oracle_man": [
        "python.library.os#os.removedirs"
    ],
    "canonical_cmd": "os.removedirs(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Recursively remove folder `name`. This requires removing the folder `name` and all subfolders and files within it recursively."
}
{
    "question_id": "18695605-99",
    "nl": "convert pandas DataFrame `df` to a dictionary using `id` field as the key",
    "cmd": "df.set_index('id').to_dict()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index",
        "pandas.reference.api.pandas.dataframe.to_dict"
    ],
    "canonical_cmd": "VAR_STR.set_index('VAR_STR').to_dict()",
    "cmd_name": "conala",
    "gpt35_response": " Convert a Pandas DataFrame `df` to a dictionary using the `id` field as the key. This requires using the `set_index()` method of Pandas DataFrame to set the index to the `id` field and using the `to_dict()` method to convert the DataFrame to a dictionary."
}
{
    "question_id": "18695605-31",
    "nl": "convert pandas dataframe `df` with fields 'id', 'value' to dictionary",
    "cmd": "df.set_index('id')['value'].to_dict()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index",
        "pandas.reference.api.pandas.dataframe.to_dict"
    ],
    "canonical_cmd": "VAR_STR.set_index('VAR_STR')['VAR_STR'].to_dict()",
    "cmd_name": "conala",
    "gpt35_response": " Convert a Pandas DataFrame `df` with fields 'id' and 'value' to a dictionary. This requires using the `set_index()` method of Pandas DataFrame to set the index to the `id` field and using the `to_dict()` method to convert the DataFrame to a dictionary."
}
{
    "question_id": "8556076-78",
    "nl": "create list `new_list` containing the last 10 elements of list `my_list`",
    "cmd": "new_list = my_list[-10:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[-10:]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `new_list` containing the last 10 elements of list `my_list`. This requires creating a new list and assigning the last 10 elements of `my_list` to it."
}
{
    "question_id": "8556076-43",
    "nl": "get the last 10 elements from a list `my_list`",
    "cmd": "my_list[-10:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-10:]",
    "cmd_name": "conala",
    "gpt35_response": " Get the last 10 elements from a list `my_list`. This requires accessing the list `my_list` and obtaining the last 10 elements from it."
}
{
    "question_id": "33218968-14",
    "nl": "Run 'test2.py' file with python location 'path\/to\/python' and arguments 'neededArgumetGoHere' as a subprocess",
    "cmd": "call(['path\/to\/python', 'test2.py', 'neededArgumetGoHere'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "call(['VAR_STR', 'VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Run 'test2.py' file with python location 'path\/to\/python' and arguments 'neededArgumetGoHere' as a subprocess. This requires importing the subprocess module and using the `run()` method of the subprocess module with the appropriate arguments to run the 'test2.py' file with the specified python location and arguments."
}
{
    "question_id": "1101508-32",
    "nl": "parse date string '2009\/05\/13 19:19:30 -0400' using format '%Y\/%m\/%d %H:%M:%S %z'",
    "cmd": "datetime.strptime('2009\/05\/13 19:19:30 -0400', '%Y\/%m\/%d %H:%M:%S %z')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse the date string '2009\/05\/13 19:19:30 -0400' using the format '%Y\/%m\/%d %H:%M:%S %z'. This requires using the `strptime()` method of the datetime module with the specified date string and format to obtain a datetime object."
}
{
    "question_id": "34023918-59",
    "nl": "make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'",
    "cmd": "df['C'] = df['A'] + df['B']",
    "oracle_man": [],
    "canonical_cmd": "df['VAR_STR'] = df['VAR_STR'] + df['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Make a new column 'C' in the Pandas DataFrame by adding values from columns 'A' and 'B'. This requires using the `apply()` method of the DataFrame with a lambda function that adds the values from columns 'A' and 'B' to create a new column 'C'."
}
{
    "question_id": "35707224-41",
    "nl": "sum the length of lists in list `x` that are more than 1 item in length",
    "cmd": "sum(len(y) for y in x if len(y) > 1)",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(len(y) for y in VAR_STR if len(y) > 1)",
    "cmd_name": "conala",
    "gpt35_response": "- Sum the length of lists in list `x` that are more than 1 item in length. This requires looping through all lists in `x`, checking the length of each list, and adding the length of lists that are more than 1 item long."
}
{
    "question_id": "1749466-50",
    "nl": "Normalize line ends in a string 'mixed'",
    "cmd": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR.replace('\\r\\n', '\\n').replace('\\r', '\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Normalize line ends in a string 'mixed'. This requires replacing occurrences of common line endings like \"\\r\\n\" and \"\\r\" with just \"\\n\" in the 'mixed' string."
}
{
    "question_id": "4695143-39",
    "nl": "replace each occurrence of the pattern '(http:\/\/\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)' within `a` with ''",
    "cmd": "re.sub('(http:\/\/\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('VAR_STR', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Replace each occurrence of the pattern '(http:\/\/\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)' within `a` with ''. This requires finding all instances of the pattern within `a` and replacing them with an empty string."
}
{
    "question_id": "9323749-54",
    "nl": "check if dictionary `subset` is a subset of dictionary `superset`",
    "cmd": "all(item in list(superset.items()) for item in list(subset.items()))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.functions#all",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "all(item in list(VAR_STR.items()) for item in list(VAR_STR.items()))",
    "cmd_name": "conala",
    "gpt35_response": " Check if dictionary `subset` is a subset of dictionary `superset`. This requires checking that all key\/value pairs in `subset` are in `superset`."
}
{
    "question_id": "24525111-6",
    "nl": "Save plot `plt` as svg file 'test.svg'",
    "cmd": "plt.savefig('test.svg')",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure.savefig"
    ],
    "canonical_cmd": "VAR_STR.savefig('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Save plot `plt` as svg file 'test.svg'. This requires saving plot `plt` to file 'test.svg' in svg format."
}
{
    "question_id": "18131741-100",
    "nl": "check if elements in list `my_list` are coherent in order",
    "cmd": "return my_list == list(range(my_list[0], my_list[-1] + 1))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "return VAR_STR == list(range(VAR_STR[0], VAR_STR[-1] + 1))",
    "cmd_name": "conala",
    "gpt35_response": " Check if elements in list `my_list` are coherent in order. This requires looping through `my_list` and comparing the order of each consecutive pair of elements."
}
{
    "question_id": "9880173-43",
    "nl": "decode encodeuricomponent in GAE",
    "cmd": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote",
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')",
    "cmd_name": "conala",
    "gpt35_response": " Decode encodeuricomponent in GAE. This requires decoding the URI component in GAE, which involves using the appropriate decoding function or method."
}
{
    "question_id": "29218750-37",
    "nl": "remove items from dictionary `myDict` if the item's value `val` is equal to 42",
    "cmd": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "VAR_STR = {key: VAR_STR for key, VAR_STR in list(VAR_STR.items()) if VAR_STR != 42}",
    "cmd_name": "conala",
    "gpt35_response": " Remove items from dictionary `myDict` if the item's value `val` is equal to 42. This requires looping through all key\/value pairs in `myDict`, checking if the value is equal to 42, and removing the corresponding key\/value pair if it is."
}
{
    "question_id": "29218750-94",
    "nl": "Remove all items from a dictionary `myDict` whose values are `42`",
    "cmd": "{key: val for key, val in list(myDict.items()) if val != 42}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "{key: val for key, val in list(VAR_STR.items()) if val != 42}",
    "cmd_name": "conala",
    "gpt35_response": " Remove all items from a dictionary `myDict` whose values are `42`. This requires looping through all key\/value pairs in `myDict`, checking if the value is equal to 42, and removing the corresponding key\/value pairs if it is."
}
{
    "question_id": "11833266-99",
    "nl": "read the first line of a string `my_string`",
    "cmd": "my_string.splitlines()[0]",
    "oracle_man": [
        "python.library.stdtypes#str.splitlines"
    ],
    "canonical_cmd": "VAR_STR.splitlines()[0]",
    "cmd_name": "conala",
    "gpt35_response": " Read the first line of a string `my_string`. This requires finding the first occurrence of the end of the first line (which may be \"\\n\", \"\\r\", \"\\r\\n\", etc.) in `my_string` and returning the substring up to that point."
}
{
    "question_id": "11833266-33",
    "nl": "How do I read the first line of a string?",
    "cmd": "my_string.split('\\n', 1)[0]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "my_string.split('\\n', 1)[0]",
    "cmd_name": "conala",
    "gpt35_response": " Retrieve the first line of a string `my_string`. This requires finding the first occurrence of the end of the first line (which may be \"\\n\", \"\\r\", \"\\r\\n\", etc.) in `my_string` and returning the substring up to that point."
}
{
    "question_id": "8386675-18",
    "nl": "extracting column `1` and `9` from array `data`",
    "cmd": "data[:, ([1, 9])]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:, ([1, 9])]",
    "cmd_name": "conala",
    "gpt35_response": " Extract column `1` and `9` from array `data`. This requires selecting only the elements in column `1` and `9` from the `data` array."
}
{
    "question_id": "30650254-82",
    "nl": "serve a static html page 'your_template.html' at the root of a django project",
    "cmd": "url('^$', TemplateView.as_view(template_name='your_template.html'))",
    "oracle_man": [
        "flask.api.index#flask.views.View.as_view",
        "django.ref.request-response#django.http.HttpResponseRedirect.url"
    ],
    "canonical_cmd": "url('^$', TemplateView.as_view(template_name='VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Serve a static html page 'your_template.html' at the root of a django project. This requires setting up a django view function that loads and renders the 'your_template.html' file and associating it with the appropriate url pattern in the project's urls.py file."
}
{
    "question_id": "5796238-23",
    "nl": "return the conversion of decimal `d` to hex without the '0x' prefix",
    "cmd": "hex(d).split('x')[1]",
    "oracle_man": [
        "python.library.functions#hex",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "hex(VAR_STR).split('x')[1]",
    "cmd_name": "conala",
    "gpt35_response": " Return the conversion of decimal `d` to hex without the '0x' prefix. This requires converting `d` to hexadecimal format and storing in a string, then removing the leading '0x' characters from the string."
}
{
    "question_id": "17407691-98",
    "nl": "Get multiple matched strings using regex pattern `(?:review: )?(http:\/\/url.com\/(\\\\d+))\\\\s?`",
    "cmd": "pattern = re.compile('(?:review: )?(http:\/\/url.com\/(\\\\d+))\\\\s?', re.IGNORECASE)",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "pattern = re.compile('VAR_STR', re.IGNORECASE)",
    "cmd_name": "conala",
    "gpt35_response": " Get multiple matched strings using regex pattern `(?:review: )?(http:\/\/url.com\/(\\\\d+))\\\\s?`. This requires executing the regex pattern on a string and returning a list of all non-overlapping matches."
}
{
    "question_id": "9560207-5",
    "nl": "get count of values in numpy array `a` that are between values `25` and `100`",
    "cmd": "((25 < a) & (a < 100)).sum()",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "((25 < VAR_STR) & (VAR_STR < 100)).sum()",
    "cmd_name": "conala",
    "gpt35_response": " Get the count of values in numpy array `a` that are between values `25` and `100`. This requires selecting only the elements in `a` that are between 25 and 100, and then counting the number of selected elements."
}
{
    "question_id": "4628618-90",
    "nl": "replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`",
    "cmd": "'longlongTESTstringTEST'.replace('TEST', '?', 1)",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace('VAR_STR', '?', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Replace only the first occurrence of string `TEST` from a string `longlongTESTstringTEST`. This requires finding the first occurrence of 'TEST' in `longlongTESTstringTEST` and replacing it with the desired replacement string."
}
{
    "question_id": "21618351-81",
    "nl": "format current date to pattern '{%Y-%m-%d %H:%M:%S}'",
    "cmd": "time.strftime('{%Y-%m-%d %H:%M:%S}')",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "time.strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Format the current date to the pattern '{%Y-%m-%d %H:%M:%S}'. This requires calling a function to get the current date, formatting the date string using the specified pattern, and returning the resulting string."
}
{
    "question_id": "13462365-6",
    "nl": "count the number of pairs in dictionary `d` whose value equal to `chosen_value`",
    "cmd": "sum(x == chosen_value for x in list(d.values()))",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(x == VAR_STR for x in list(VAR_STR.values()))",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of key\/value pairs in dictionary `d` whose value is equal to `chosen_value`. This requires looping through all key\/value pairs in `d`, comparing the value of each pair to `chosen_value`, and incrementing a counter for each match."
}
{
    "question_id": "13462365-75",
    "nl": "count the number of values in `d` dictionary that are predicate to function `some_condition`",
    "cmd": "sum(1 for x in list(d.values()) if some_condition(x))",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(1 for x in list(VAR_STR.values()) if VAR_STR(x))",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of values in `d` dictionary that are predicate to function `some_condition`. This requires looping through all values in `d`, checking if each value satisfies the `some_condition` predicate, and incrementing a counter for each match."
}
{
    "question_id": "17057544-4",
    "nl": "Get absolute folder path and filename for file `existGDBPath `",
    "cmd": "os.path.split(os.path.abspath(existGDBPath))",
    "oracle_man": [
        "python.library.os.path#os.path.abspath",
        "python.library.os.path#os.path.split"
    ],
    "canonical_cmd": "os.path.split(os.path.abspath(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "- Get absolute folder path and filename for file `existGDBPath `. This requires getting the absolute file path for `existGDBPath` and splitting it into the directory and filename components."
}
{
    "question_id": "17057544-2",
    "nl": "extract folder path from file path",
    "cmd": "os.path.dirname(os.path.abspath(existGDBPath))",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.abspath"
    ],
    "canonical_cmd": "os.path.dirname(os.path.abspath(existGDBPath))",
    "cmd_name": "conala",
    "gpt35_response": " Extract folder path from file path. This requires splitting the file path into directory and filename components and returning the directory component."
}
{
    "question_id": "41923906-34",
    "nl": "align values in array `b` to the order of corresponding values in array `a`",
    "cmd": "a[np.in1d(a, b)]",
    "oracle_man": [
        "numpy.reference.generated.numpy.in1d"
    ],
    "canonical_cmd": "VAR_STR[np.in1d(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Align values in array `b` to the order of corresponding values in array `a`. This requires creating a new array with the same values as `b`, but in the same order as the corresponding values in `a`."
}
{
    "question_id": "20375561-45",
    "nl": "Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`",
    "cmd": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "pd.merge(VAR_STR, VAR_STR, left_on='VAR_STR', right_on='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`. This requires merging `frame_1` and `frame_2` on `county_ID` and `countyid` respectively, and returning all rows from `frame_1` and matching rows from `frame_2`."
}
{
    "question_id": "983855-47",
    "nl": "Python JSON encoding",
    "cmd": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})",
    "oracle_man": [
        "python.library.json#json.dumps"
    ],
    "canonical_cmd": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})",
    "cmd_name": "conala",
    "gpt35_response": " Python JSON encoding. This requires converting a Python object into a JSON string using the `json.dumps()` function."
}
{
    "question_id": "9932549-12",
    "nl": "get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`",
    "cmd": "dict(zip(my_list, map(my_dictionary.get, my_list)))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip(VAR_STR, map(VAR_STR.get, VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`. This requires iterating over `my_list`, getting the corresponding value from `my_dictionary`, and storing the key-value pair in a new dictionary in the order they appear in `my_list`."
}
{
    "question_id": "34148637-13",
    "nl": "sort json `ips_data` by a key 'data_two'",
    "cmd": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted_list_of_keyvalues = sorted(list(VAR_STR.items()), key=item[1]['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Sort json `ips_data` by a key 'data_two'. This requires sorting the list of dictionaries `ips_data` by the value associated with the key 'data_two'."
}
{
    "question_id": "3845423-4",
    "nl": "remove empty strings from list `str_list`",
    "cmd": "str_list = list([_f for _f in str_list if _f])",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "VAR_STR = list([_f for _f in VAR_STR if _f])",
    "cmd_name": "conala",
    "gpt35_response": " Remove empty strings from list `str_list`. This requires iterating over `str_list`, removing any empty string values, and returning the updated list."
}
{
    "question_id": "20206615-96",
    "nl": "do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`",
    "cmd": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge",
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "VAR_STR.reset_index().merge(VAR_STR, how='VAR_STR', on='VAR_STR', sort=False).sort(\n    'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`. This requires merging `x` and `y` on the `state` column using a `left` join, then sorting the resulting dataframe by its index."
}
{
    "question_id": "32458541-85",
    "nl": "Confirm urls in Django properly",
    "cmd": "url('^$', include('sms.urls')),",
    "oracle_man": [
        "django.ref.urls#django.urls.include",
        "django.ref.request-response#django.http.HttpResponseRedirect.url"
    ],
    "canonical_cmd": "url('^$', include('sms.urls')),",
    "cmd_name": "conala",
    "gpt35_response": " Confirm urls in Django properly. This requires manually visiting each url and confirming that it is being served correctly without errors."
}
{
    "question_id": "32458541-57",
    "nl": "Configure url in django properly",
    "cmd": "url('^', include('sms.urls')),",
    "oracle_man": [
        "django.ref.urls#django.urls.include",
        "django.ref.request-response#django.http.HttpResponseRedirect.url"
    ],
    "canonical_cmd": "url('^', include('sms.urls')),",
    "cmd_name": "conala",
    "gpt35_response": " Configure url in django properly. This requires adding a new URL pattern to `urls.py` and mapping it to the correct view function or class."
}
{
    "question_id": "39804375-37",
    "nl": "sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`",
    "cmd": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: x[VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`. This requires sorting the list of dictionaries `persons` by the value associated with the key `['passport']['birth_info']['date']`."
}
{
    "question_id": "10941229-55",
    "nl": "flatten list of tuples `a`",
    "cmd": "list(chain.from_iterable(a))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.itertools#itertools.chain.from_iterable"
    ],
    "canonical_cmd": "list(chain.from_iterable(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Flatten list of tuples `a`. This requires flattening a list of tuples `a` into a single list."
}
{
    "question_id": "20668060-74",
    "nl": "change the background colour of the button `pushbutton` to red",
    "cmd": "self.pushButton.setStyleSheet('background-color: red')",
    "oracle_man": [],
    "canonical_cmd": "self.pushButton.setStyleSheet('background-color: red')",
    "cmd_name": "conala",
    "gpt35_response": " Change the background colour of the button `pushbutton` to red. This requires changing the background color property of `pushbutton` to the color value for red."
}
{
    "question_id": "19617355-91",
    "nl": "Change log level dynamically to 'DEBUG' without restarting the application",
    "cmd": "logging.getLogger().setLevel(logging.DEBUG)",
    "oracle_man": [
        "python.library.logging#logging.getLogger",
        "python.library.logging#logging.Handler.setLevel"
    ],
    "canonical_cmd": "logging.getLogger().setLevel(logging.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Change log level dynamically to 'DEBUG' without restarting the application. This requires updating the log level setting for the application at runtime without restarting the application."
}
{
    "question_id": "29100599-74",
    "nl": "resample series `s` into 3 months bins and sum each bin",
    "cmd": "s.resample('3M', how='sum')",
    "oracle_man": [
        "sklearn.modules.generated.sklearn.utils.resample#sklearn.utils.resample"
    ],
    "canonical_cmd": "VAR_STR.resample('3M', how='sum')",
    "cmd_name": "conala",
    "gpt35_response": " Resample series `s` into 3 months bins and sum each bin. This requires resampling `s` using `s.resample('3M')` and returning the sum of each bin using `.sum()`."
}
{
    "question_id": "15282189-27",
    "nl": "Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib",
    "cmd": "quadmesh.set_clim(vmin=0, vmax=15)",
    "oracle_man": [
        "matplotlib.collections_api#matplotlib.collections.QuadMesh.set_clim"
    ],
    "canonical_cmd": "VAR_STR.set_clim(vmin=0, vmax=15)",
    "cmd_name": "conala",
    "gpt35_response": " Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib. This requires setting the range for `quadmesh` colorbar using `quadmesh.set_clim(0, 15)`."
}
{
    "question_id": "2806611-99",
    "nl": "check if all boolean values in a python dictionary `dict` are true",
    "cmd": "all(dict.values())",
    "oracle_man": [
        "python.library.stdtypes#dict.values",
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(VAR_STR.values())",
    "cmd_name": "conala",
    "gpt35_response": " Check if all boolean values in a python dictionary `dict` are true. This requires iterating over all values in the dictionary and checking that all boolean values are true."
}
{
    "question_id": "1456617-78",
    "nl": "return a random word from a word list 'words'",
    "cmd": "print(random.choice(words))",
    "oracle_man": [
        "python.library.random#random.choice"
    ],
    "canonical_cmd": "print(random.choice(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Return a random word from a word list 'words'. This requires selecting a random element from the list `words`."
}
{
    "question_id": "6275762-86",
    "nl": "escaping quotes in string",
    "cmd": "replace('\"', '\\\\\"')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "replace('\"', '\\\\\"')",
    "cmd_name": "conala",
    "gpt35_response": " Escaping quotes in string. This requires replacing any single or double quotes in a string with the appropriate escape sequence so that they are properly interpreted by the parser."
}
{
    "question_id": "4703390-2",
    "nl": "extract floating number from string 'Current Level: 13.4 db.'",
    "cmd": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\d+\\\\.\\\\d+', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- Extract floating number from string 'Current Level: 13.4 db.' by finding the position of the space after the colon, and then finding the position of the space after the number. Then, use string slicing to extract the number as a float."
}
{
    "question_id": "4703390-17",
    "nl": "extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'",
    "cmd": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3' by using regular expressions to match all floating point numbers in the string and then converting each match to a float."
}
{
    "question_id": "4998629-17",
    "nl": "split string `str` with delimiter '; ' or delimiter ', '",
    "cmd": "re.split('; |, ', str)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('; |, ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `str` with delimiter '; ' or delimiter ', ' by using the `split()` function with the two delimiters as arguments to create two different lists, and then concatenating them into one list."
}
{
    "question_id": "3704731-64",
    "nl": "replace non-ascii chars from a unicode string u'm\\xfasica'",
    "cmd": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')",
    "oracle_man": [
        "python.library.unicodedata#unicodedata.normalize",
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "unicodedata.normalize('NFKD', 'VAR_STR').encode('ascii', 'ignore')",
    "cmd_name": "conala",
    "gpt35_response": " Replace non-ascii chars from a unicode string u'm\\xfasica' by iterating through each character in the string and using the `isascii()` function to determine if it is an ASCII character. If it is not, replace it with an empty string."
}
{
    "question_id": "33147992-55",
    "nl": "convert a string `a` of letters embedded in squared brackets into embedded lists",
    "cmd": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.re#re.split"
    ],
    "canonical_cmd": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string `a` of letters embedded in squared brackets into embedded lists by replacing each bracket with a comma and splitting the resulting string at the commas. Then, iterate through the resulting list and use `eval()` function to convert the string to a list datatype."
}
{
    "question_id": "40173569-0",
    "nl": "Parse DateTime object `datetimevariable` using format '%Y-%m-%d'",
    "cmd": "datetimevariable.strftime('%Y-%m-%d')",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "VAR_STR.strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse DateTime object `datetimevariable` using format '%Y-%m-%d' by using the `strftime()` function to convert the DateTime object to a string with the specified format, and then using the `strptime()` function to convert the string back to a DateTime object."
}
{
    "question_id": "3989016-64",
    "nl": "get index of the first biggest element in list `a`",
    "cmd": "a.index(max(a))",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "VAR_STR.index(max(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get index of the first biggest element in list `a` by using the `index()` function with the `max()` function to find the first occurrence of the largest element in the list."
}
{
    "question_id": "22086116-75",
    "nl": "create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014",
    "cmd": "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[(VAR_STR[VAR_STR] == 'VAR_STR') & (VAR_STR[VAR_STR] == 2014)]",
    "cmd_name": "conala",
    "gpt35_response": " Create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014 by using boolean indexing with the two conditions on the original dataframe `df` to create a new dataframe with only the desired rows and columns."
}
{
    "question_id": "663171-65",
    "nl": "get a new string from the 3rd character to the end of the string `x`",
    "cmd": "x[2:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[2:]",
    "cmd_name": "conala",
    "gpt35_response": " Get a new string from the 3rd character to the end of the string `x` by using string slicing with the start index at position 3 and the end index omitted."
}
{
    "question_id": "663171-26",
    "nl": "get a new string including the first two characters of string `x`",
    "cmd": "x[:2]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:2]",
    "cmd_name": "conala",
    "gpt35_response": " Get a new string including the first two characters of string `x` by using string slicing with the start index at 0 and the end index at position 2."
}
{
    "question_id": "663171-13",
    "nl": "get a new string including all but the last character of string `x`",
    "cmd": "x[:(-2)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:-2]",
    "cmd_name": "conala",
    "gpt35_response": " Get a new string including all but the last character of string `x` by using string slicing with the end index at -1 to exclude the last character."
}
{
    "question_id": "663171-83",
    "nl": "get a new string including the last two characters of string `x`",
    "cmd": "x[(-2):]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-2:]",
    "cmd_name": "conala",
    "gpt35_response": " Get a new string including the last two characters of string `x` by using string slicing with the start index at -2 to include the second to last and last characters."
}
{
    "question_id": "663171-42",
    "nl": "get a new string with the 3rd to the second-to-last characters of string `x`",
    "cmd": "x[2:(-2)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[2:-2]",
    "cmd_name": "conala",
    "gpt35_response": " Get a new string with the 3rd to the second-to-last characters of string `x` by using string slicing with the start index at 2 and the end index at -2."
}
{
    "question_id": "663171-55",
    "nl": "reverse a string `some_string`",
    "cmd": "some_string[::(-1)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[::-1]",
    "cmd_name": "conala",
    "gpt35_response": " Reverse a string `some_string` by using string slicing with a step size of -1, starting from the end of the string."
}
{
    "question_id": "663171-82",
    "nl": "select alternate characters of \"H-e-l-l-o- -W-o-r-l-d\"",
    "cmd": "'H-e-l-l-o- -W-o-r-l-d'[::2]",
    "oracle_man": [],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\"[::2]",
    "cmd_name": "conala",
    "gpt35_response": " Select alternate characters of \"H-e-l-l-o- -W-o-r-l-d\" by using string slicing with a step size of 2, starting from index 0."
}
{
    "question_id": "663171-31",
    "nl": "select a substring of `s` beginning at `beginning` of length `LENGTH`",
    "cmd": "s = s[beginning:(beginning + LENGTH)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[VAR_STR:VAR_STR + VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Select a substring of `s` beginning at `beginning` of length `LENGTH` by using string slicing with the start index at `beginning` and the end index at `beginning + LENGTH`."
}
{
    "question_id": "9089043-68",
    "nl": "Get a list of items in the list `container` with attribute equal to `value`",
    "cmd": "items = [item for item in container if item.attribute == value]",
    "oracle_man": [],
    "canonical_cmd": "items = [item for item in VAR_STR if item.attribute == VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of items in the list `container` with attribute equal to `value` by iterating through the list and checking the value of the attribute for each item. If the value is equal to `value`, append the item to a new list."
}
{
    "question_id": "32191029-91",
    "nl": "Get the indices in array `b` of each element appearing in array `a`",
    "cmd": "np.in1d(b, a).nonzero()[0]",
    "oracle_man": [
        "numpy.reference.generated.numpy.in1d",
        "numpy.reference.generated.numpy.nonzero"
    ],
    "canonical_cmd": "np.in1d(VAR_STR, VAR_STR).nonzero()[0]",
    "cmd_name": "conala",
    "gpt35_response": " Get the indices in array `b` of each element appearing in array `a` by using a list comprehension with the `index()` method of `a` to find the index of each element in `b` which appears in `a`."
}
{
    "question_id": "4174941-83",
    "nl": "sort a list of lists `L` by index 2 of the inner list",
    "cmd": "sorted(L, key=itemgetter(2))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=itemgetter(2))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of lists `L` by index 2 of the inner list by using the `sort()` method of `L` with a lambda function as the `key` argument to sort by the value of index 2 of each inner list."
}
{
    "question_id": "4174941-52",
    "nl": "sort a list of lists `l` by index 2 of the inner list",
    "cmd": "l.sort(key=(lambda x: x[2]))",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x[2])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of lists `l` by index 2 of the inner list, converting the value at index 2 to a float before sorting with the `float()` function."
}
{
    "question_id": "4174941-58",
    "nl": "sort list `l` by index 2 of the item",
    "cmd": "sorted(l, key=(lambda x: x[2]))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: x[2])",
    "cmd_name": "conala",
    "gpt35_response": "- Sort list `l` by index 2 of the item. This requires accessing the index 2 of each item in list `l` and sorting the list based on those values."
}
{
    "question_id": "4174941-60",
    "nl": "sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list",
    "cmd": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "sorted_list = sorted(VAR_STR, key=itemgetter(2, 0, 1))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of lists `list_to_sort` by indices 2, 0, 1 of the inner list. This requires accessing index 2, 0 and 1 of each inner list in `list_to_sort` and sorting the list of lists based on those values."
}
{
    "question_id": "40707158-98",
    "nl": "Change data type of data in column 'grade' of dataframe `data_df` into float and then to int",
    "cmd": "data_df['grade'] = data_df['grade'].astype(float).astype(int)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.astype"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].astype(float).astype(int)",
    "cmd_name": "conala",
    "gpt35_response": " Change the data type of data in column 'grade' of dataframe `data_df` into float and then to int. This requires converting the data in column 'grade' of dataframe `data_df` into a float and then to an integer."
}
{
    "question_id": "15985339-6",
    "nl": "get current url in selenium webdriver `browser`",
    "cmd": "print(browser.current_url)",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR.current_url)",
    "cmd_name": "conala",
    "gpt35_response": " Get the current URL in selenium webdriver `browser`. This requires accessing the current URL in the `browser`."
}
{
    "question_id": "15411107-8",
    "nl": "Delete an item with key \"key\" from `mydict`",
    "cmd": "mydict.pop('key', None)",
    "oracle_man": [
        "python.library.stdtypes#dict.pop"
    ],
    "canonical_cmd": "VAR_STR.pop('VAR_STR', None)",
    "cmd_name": "conala",
    "gpt35_response": " Delete an item with key \"key\" from `mydict`. This requires accessing the item with key \"key\" in `mydict` and deleting it."
}
{
    "question_id": "15411107-89",
    "nl": "Delete an item with key `key` from `mydict`",
    "cmd": "del mydict[key]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Delete an item with key `key` from `mydict`. This requires accessing the item with key `key` in `mydict` and deleting it."
}
{
    "question_id": "15411107-82",
    "nl": "Delete an item with key `key` from `mydict`",
    "cmd": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "try:\n    del VAR_STR[VAR_STR]\nexcept KeyError:\n    pass\ntry:\n    del VAR_STR[VAR_STR]\nexcept KeyError:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Delete an item with key `key` from `mydict`. This requires accessing the item with key `key` in `mydict` and deleting it."
}
{
    "question_id": "19819863-80",
    "nl": "convert hex '\\xff' to integer",
    "cmd": "ord('\\xff')",
    "oracle_man": [
        "python.library.functions#ord"
    ],
    "canonical_cmd": "ord('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert hex '\\xff' to integer. This requires converting the hexadecimal value '\\xff' to an integer."
}
{
    "question_id": "32722143-13",
    "nl": "run flask application `app` in debug mode.",
    "cmd": "app.run(debug=True)",
    "oracle_man": [
        "python.library.pdb#pdb.run"
    ],
    "canonical_cmd": "VAR_STR.run(debug=True)",
    "cmd_name": "conala",
    "gpt35_response": " Run flask application `app` in debug mode. This requires running flask application `app` in debug mode."
}
{
    "question_id": "4581646-14",
    "nl": "Get total number of values in a nested dictionary `food_colors`",
    "cmd": "sum(len(x) for x in list(food_colors.values()))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#sum",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(len(x) for x in list(VAR_STR.values()))",
    "cmd_name": "conala",
    "gpt35_response": " Get the total number of values in a nested dictionary `food_colors`. This requires accessing every value in the nested dictionary `food_colors` and counting the number of values."
}
{
    "question_id": "4581646-42",
    "nl": "count all elements in a nested dictionary `food_colors`",
    "cmd": "sum(len(v) for v in food_colors.values())",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#sum",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(len(v) for v in VAR_STR.values())",
    "cmd_name": "conala",
    "gpt35_response": " Count all elements in a nested dictionary `food_colors`. This requires accessing every element in the nested dictionary `food_colors` and counting the number of elements."
}
{
    "question_id": "27516849-33",
    "nl": "concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis",
    "cmd": "numpy.concatenate(LIST, axis=0)",
    "oracle_man": [
        "numpy.reference.generated.numpy.concatenate"
    ],
    "canonical_cmd": "numpy.concatenate(VAR_STR, axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate sequence of numpy arrays `LIST` into a one dimensional array along the first axis. This requires concatenating the numpy arrays in the list `LIST` into a one-dimensional array along the first axis."
}
{
    "question_id": "517355-78",
    "nl": "print '[1, 2, 3]'",
    "cmd": "print('[%s, %s, %s]' % (1, 2, 3))",
    "oracle_man": [],
    "canonical_cmd": "print('[%s, %s, %s]' % (1, 2, 3))",
    "cmd_name": "conala",
    "gpt35_response": " Print '[1, 2, 3]'. This requires printing the string '[1, 2, 3]'."
}
{
    "question_id": "517355-35",
    "nl": "Display `1 2 3` as a list of string",
    "cmd": "print('[{0}, {1}, {2}]'.format(1, 2, 3))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('[{0}, {1}, {2}]'.format(1, 2, 3))",
    "cmd_name": "conala",
    "gpt35_response": " Display `1 2 3` as a list of string. This requires converting the integers 1, 2, and 3 into string values and displaying them as a list."
}
{
    "question_id": "16883447-58",
    "nl": "read file 'myfile' using encoding 'iso-8859-1'",
    "cmd": "codecs.open('myfile', 'r', 'iso-8859-1').read()",
    "oracle_man": [
        "python.library.codecs#codecs.open",
        "python.library.codecs#codecs.StreamReader.read"
    ],
    "canonical_cmd": "codecs.open('VAR_STR', 'r', 'VAR_STR').read()",
    "cmd_name": "conala",
    "gpt35_response": " Read file 'myfile' using encoding 'iso-8859-1'. This requires reading the file 'myfile' using the specified encoding 'iso-8859-1'."
}
{
    "question_id": "26367812-93",
    "nl": "append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist",
    "cmd": "dates_dict.setdefault(key, []).append(date)",
    "oracle_man": [
        "python.library.stdtypes#dict.setdefault",
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.setdefault(VAR_STR, []).append(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Append `date` to the list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist. This requires checking if `key` exists in `dates_dict`, and if it does, appending `date` to the value list. If it does not, then adding a new key-value pair with key `key` and value `date`."
}
{
    "question_id": "19121722-38",
    "nl": "build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter",
    "cmd": "{_key: _value(_key) for _key in _container}",
    "oracle_man": [],
    "canonical_cmd": "{_key: VAR_STR(_key) for _key in VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": " Build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter. This requires iterating through the keys of dictionary `_container`, calling function `_value` with the key as parameter, and creating a new dictionary with the keys of `_container` and the returned values as values."
}
{
    "question_id": "9652832-83",
    "nl": "load a tsv file `c:\/~\/trainSetRel3.txt` into a pandas data frame",
    "cmd": "DataFrame.from_csv('c:\/~\/trainSetRel3.txt', sep='\\t')",
    "oracle_man": [],
    "canonical_cmd": "DataFrame.from_csv('VAR_STR', sep='\\t')",
    "cmd_name": "conala",
    "gpt35_response": " Load a tsv file `c:\/~\/trainSetRel3.txt` into a pandas data frame. This requires loading the tsv file located at `c:\/~\/trainSetRel3.txt` into a pandas data frame."
}
{
    "question_id": "39600161-2",
    "nl": "regular expression matching all but 'aa' and 'bb' for string `string`",
    "cmd": "re.findall('-(?!aa-|bb-)([^-]+)', string)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('-(?!aa-|bb-)([^-]+)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Regular expression matching all but 'aa' and 'bb' for string `string`. This requires creating a regular expression pattern that matches any string except for 'aa' and 'bb'."
}
{
    "question_id": "39600161-59",
    "nl": "regular expression matching all but 'aa' and 'bb'",
    "cmd": "re.findall('-(?!aa|bb)([^-]+)', string)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('-(?!aa|bb)([^-]+)', string)",
    "cmd_name": "conala",
    "gpt35_response": " Regular expression matching all but 'aa' and 'bb'. This requires creating a regular expression pattern that matches any string except for 'aa' and 'bb'."
}
{
    "question_id": "34527388-67",
    "nl": "click on the text button 'section-select-all' using selenium python",
    "cmd": "browser.find_element_by_class_name('section-select-all').click()",
    "oracle_man": [],
    "canonical_cmd": "browser.find_element_by_class_name('VAR_STR').click()",
    "cmd_name": "conala",
    "gpt35_response": "- Click on the text button 'section-select-all' using selenium python. This requires locating the text button 'section-select-all' using selenium python and clicking on it."
}
{
    "question_id": "25474338-15",
    "nl": "regex for repeating words in a string `s`",
    "cmd": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Regex for repeating words in a string `s`. This requires applying a regex pattern to string `s` to match and capture repeating words."
}
{
    "question_id": "27966626-90",
    "nl": "clear the textbox `text` in tkinter",
    "cmd": "tex.delete('1.0', END)",
    "oracle_man": [
        "python.library.ast#ast.Delete"
    ],
    "canonical_cmd": "tex.delete('1.0', END)",
    "cmd_name": "conala",
    "gpt35_response": " Clear the textbox `text` in tkinter. This requires accessing the textbox `text` in tkinter and setting its text to an empty string."
}
{
    "question_id": "11613284-26",
    "nl": "get a dictionary with keys from one list `keys` and values from other list `data`",
    "cmd": "dict(zip(keys, zip(*data)))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip(VAR_STR, zip(*VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Get a dictionary with keys from one list `keys` and values from other list `data`. This requires creating an empty dictionary and iterating through both lists `keys` and `data` to add the corresponding key-value pairs to the dictionary."
}
{
    "question_id": "4152376-23",
    "nl": "create a list containing the `n` next values of generator `it`",
    "cmd": "[next(it) for _ in range(n)]",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#next"
    ],
    "canonical_cmd": "[next(VAR_STR) for _ in range(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing the `n` next values of generator `it`. This requires creating an empty list and iterating `n` times over generator `it` using a for loop to append the next value of the generator to the list."
}
{
    "question_id": "4152376-40",
    "nl": "get list of n next values of a generator `it`",
    "cmd": "list(itertools.islice(it, 0, n, 1))",
    "oracle_man": [
        "python.library.itertools#itertools.islice",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(itertools.islice(VAR_STR, 0, n, 1))",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of n next values of a generator `it`. This requires using the built-in function `zip()` to combine `it` with a range of `n` and iterating over the resulting iterator to generate a list of the next `n` values of the generator."
}
{
    "question_id": "4315506-84",
    "nl": "convert csv file 'test.csv' into two-dimensional matrix",
    "cmd": "numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)",
    "oracle_man": [
        "numpy.reference.generated.numpy.loadtxt",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "numpy.loadtxt(open('VAR_STR', 'rb'), delimiter=',', skiprows=1)",
    "cmd_name": "conala",
    "gpt35_response": " Convert csv file 'test.csv' into two-dimensional matrix. This requires reading csv file 'test.csv' using the `csv` module and storing the contents in a two-dimensional matrix format, such as a list of lists."
}
{
    "question_id": "775296-19",
    "nl": "MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`",
    "cmd": "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))",
    "oracle_man": [
        "python.library.msilib#msilib.View.Execute"
    ],
    "canonical_cmd": "c.execute('VAR_STR', (VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`. This requires connecting to a MySQL database, creating a cursor object, and executing a SQL query with the specified parameters `param1` and `param2`."
}
{
    "question_id": "14247586-5",
    "nl": "get data of columns with Null values in dataframe `df`",
    "cmd": "df[pd.isnull(df).any(axis=1)]",
    "oracle_man": [
        "pandas.reference.api.pandas.isnull",
        "python.library.functions#any"
    ],
    "canonical_cmd": "VAR_STR[pd.isnull(VAR_STR).any(axis=1)]",
    "cmd_name": "conala",
    "gpt35_response": " Get data of columns with Null values in dataframe `df`. This requires accessing the `df` dataframe and selecting columns with Null values to generate a new dataframe with just the selected columns."
}
{
    "question_id": "14507794-7",
    "nl": "Collapse hierarchical column index to level 0 in dataframe `df`",
    "cmd": "df.columns = df.columns.get_level_values(0)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.columns = VAR_STR.columns.get_level_values(0)",
    "cmd_name": "conala",
    "gpt35_response": " Collapse hierarchical column index to level 0 in dataframe `df`. This requires accessing `df` dataframe and resetting the column index to level zero using the `.reset_index()` method."
}
{
    "question_id": "24958010-61",
    "nl": "get keys with same value in dictionary `d`",
    "cmd": "print([key for key in d if d[key] == 1])",
    "oracle_man": [],
    "canonical_cmd": "print([key for key in VAR_STR if VAR_STR[key] == 1])",
    "cmd_name": "conala",
    "gpt35_response": " Get keys with same value in dictionary `d`. This requires accessing dictionary `d` and iterating over its key-value pairs to find keys with the same value and adding them to a list."
}
{
    "question_id": "24958010-12",
    "nl": "get keys with same value in dictionary `d`",
    "cmd": "print([key for key, value in d.items() if value == 1])",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "print([key for key, value in VAR_STR.items() if value == 1])",
    "cmd_name": "conala",
    "gpt35_response": " Get keys with same value in dictionary `d`. This requires accessing dictionary `d` and iterating over its key-value pairs to find keys with the same value and adding them to a list."
}
{
    "question_id": "24958010-69",
    "nl": "Get keys from a dictionary 'd' where the value is '1'.",
    "cmd": "print([key for key, value in list(d.items()) if value == 1])",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "print([key for key, value in list(VAR_STR.items()) if value == 1])",
    "cmd_name": "conala",
    "gpt35_response": " Get keys from a dictionary 'd' where the value is '1'. This requires iterating over the key-value pairs in dictionary `d` to find keys whose value is `1` and adding them to a list."
}
{
    "question_id": "2813829-29",
    "nl": "coalesce non-word-characters in string `a`",
    "cmd": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Coalesce non-word-characters in string `a`. This requires using a regex pattern to match and replace sequences of non-word characters in string `a`."
}
{
    "question_id": "14932247-15",
    "nl": "variable number of digits `digits` in variable `value` in format string \"{0:.{1}%}\"",
    "cmd": "\"\"\"{0:.{1}%}\"\"\".format(value, digits)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Variable number of digits `digits` in variable `value` in format string \"{0:.{1}%}\". This requires applying the format string \"{0:.{1}%}\" to `value`, where `digits` is used to determine the number of digits to render as a percentage."
}
{
    "question_id": "40384599-21",
    "nl": "sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it",
    "cmd": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: (sum(x[1:3]), x[0]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it. This requires using the built-in `sort()` function or the `sorted()` function with a lambda function that returns the sum of the second and third elements of each tuple in `a`."
}
{
    "question_id": "40384599-36",
    "nl": "sort a list of tuples `a` by the sum of second and third element of each tuple",
    "cmd": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of tuples `a` by the sum of second and third element of each tuple. This requires using the `sorted()` function with a lambda function that returns the sum of the second and third elements of each tuple in `a`."
}
{
    "question_id": "40384599-2",
    "nl": "sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple",
    "cmd": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: (sum(x[1:]), x[0]))",
    "cmd_name": "conala",
    "gpt35_response": " Sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple. This requires using the `sorted()` function with a lambda function that returns the sum of the second elements onwards and the third element of each tuple in `lst`."
}
{
    "question_id": "40384599-2",
    "nl": "sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order",
    "cmd": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: (sum(x[1:]), x[0]), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order. This requires using the `sorted()` function with a lambda function that returns the sum of every value except the first and the first value in reverse order of each tuple in `lst`."
}
{
    "question_id": "13840379-89",
    "nl": "multiply all items in a list `[1, 2, 3, 4, 5, 6]` together",
    "cmd": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])",
    "oracle_man": [],
    "canonical_cmd": "from functools import reduce\nreduce(lambda x, y: x * y, [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Multiply all items in a list `[1, 2, 3, 4, 5, 6]` together. This requires using the built-in function `reduce()` from the `functools` module and a lambda function that returns the product of the two arguments for each pair of adjacent values in the list."
}
{
    "question_id": "4029436-9",
    "nl": "create a list containing the subtraction of each item in list `L` from the item prior to it",
    "cmd": "[(y - x) for x, y in zip(L, L[1:])]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(y - x) for x, y in zip(VAR_STR, VAR_STR[1:])]",
    "cmd_name": "conala",
    "gpt35_response": "- Create a list `subtractionList` containing the subtraction of each item in list `L` from the item prior to it. This requires creating a new list `subtractionList`, iterating through list `L`, and performing subtraction on each item using its prior item."
}
{
    "question_id": "31547657-16",
    "nl": "sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`",
    "cmd": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))",
    "oracle_man": [
        "numpy.reference.generated.numpy.matrix"
    ],
    "canonical_cmd": "linsolve(Matrix(VAR_STR), (VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`. This requires creating a matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))`, defining variables `(x, y, z)`, and solving the matrix using the `sympy` library."
}
{
    "question_id": "27060098-88",
    "nl": "replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'",
    "cmd": "df['BrandName'].replace(['ABC', 'AB'], 'A')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].replace(['VAR_STR', 'VAR_STR'], 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'. This requires selecting the 'BrandName' column in `df`, identifying cells with 'ABC' or 'AB' values, and replacing them with the value 'A'."
}
{
    "question_id": "27060098-9",
    "nl": "replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A'",
    "cmd": "df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].replace([VAR_STR], 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace values `['ABC', 'AB']` in a column 'BrandName' of pandas dataframe `df` with another value 'A'. This requires selecting the 'BrandName' column in `df`, identifying cells with 'ABC' or 'AB' values, and replacing them with the value 'A'."
}
{
    "question_id": "29311354-62",
    "nl": "Set time zone `Europe\/Istanbul` in Django",
    "cmd": "TIME_ZONE = 'Europe\/Istanbul'",
    "oracle_man": [],
    "canonical_cmd": "TIME_ZONE = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Set time zone `Europe\/Istanbul` in Django. This requires identifying the file where the Django settings are located, locating the time zone setting, and changing the value to 'Europe\/Istanbul'."
}
{
    "question_id": "9618050-97",
    "nl": "match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`",
    "cmd": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`. This requires importing the `re` library, defining the regex pattern 'TAA(?:[ATGC]{3})+?TAA', and applying the pattern to `seq`."
}
{
    "question_id": "41071947-3",
    "nl": "remove the space between subplots in matplotlib.pyplot",
    "cmd": "fig.subplots_adjust(wspace=0, hspace=0)",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.FigureBase.subplots_adjust"
    ],
    "canonical_cmd": "fig.subplots_adjust(wspace=0, hspace=0)",
    "cmd_name": "conala",
    "gpt35_response": " Remove the space between subplots in matplotlib.pyplot. This requires importing `matplotlib.pyplot`, accessing the subplot function, and setting the `wspace` parameter to 0."
}
{
    "question_id": "8153631-25",
    "nl": "convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime",
    "cmd": "datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('VAR_STR', '%a, %d %b %Y %H:%M:%S %Z')",
    "cmd_name": "conala",
    "gpt35_response": " Convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime. This requires importing the `datetime` library, defining the input string 'Tue, 22 Nov 2011 06:00:00 GMT', and using the `datetime.strptime()` function to convert it to a datetime object."
}
{
    "question_id": "40744328-73",
    "nl": "order a list of lists `l1` by the first value",
    "cmd": "l1.sort(key=lambda x: int(x[0]))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: int(x[0]))",
    "cmd_name": "conala",
    "gpt35_response": " Order a list of lists `l1` by the first value. This requires using the `sorted()` function on `l1` and setting a key parameter to sort by the first value of each nested list."
}
{
    "question_id": "40744328-93",
    "nl": "order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list",
    "cmd": "sorted([[1, 'mike'], [1, 'bob']])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list. This requires using the `sorted()` function on the list and setting a key parameter to sort by the first value of each nested list."
}
{
    "question_id": "6586310-21",
    "nl": "convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary",
    "cmd": "dict([('A', 1), ('B', 2), ('C', 3)])",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary. This requires creating an empty dictionary, iterating through the list of tuples, and adding each key-value pair to the dictionary."
}
{
    "question_id": "10406130-25",
    "nl": "Check if 3 is not in a list [2, 3, 4]",
    "cmd": "(3 not in [2, 3, 4])",
    "oracle_man": [],
    "canonical_cmd": "3 not in [2, 3, 4]",
    "cmd_name": "conala",
    "gpt35_response": " Check if 3 is not in a list [2, 3, 4]. This requires evaluating the condition `3 not in [2, 3, 4]`."
}
{
    "question_id": "10406130-84",
    "nl": "Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]",
    "cmd": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])",
    "oracle_man": [],
    "canonical_cmd": "(2, 3) not in [(2, 3), (5, 6), (9, 1)]",
    "cmd_name": "conala",
    "gpt35_response": " Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]. This requires evaluating the condition `(2, 3) not in [(2, 3), (5, 6), (9, 1)]`."
}
{
    "question_id": "10406130-41",
    "nl": "Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), \"hi\"]",
    "cmd": "((2, 3) not in [(2, 7), (7, 3), 'hi'])",
    "oracle_man": [],
    "canonical_cmd": "(2, 3) not in [(2, 7), (7, 3), 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), \"hi\"]. This requires evaluating the condition `(2, 3) not in [(2, 7), (7, 3), \"hi\"]`."
}
{
    "question_id": "10406130-74",
    "nl": "Check if 3 is not in the list [4,5,6]",
    "cmd": "(3 not in [4, 5, 6])",
    "oracle_man": [],
    "canonical_cmd": "3 not in [4, 5, 6]",
    "cmd_name": "conala",
    "gpt35_response": " Check if 3 is not in the list [4,5,6]. This requires evaluating the condition `3 not in [4,5,6]`."
}
{
    "question_id": "27744882-82",
    "nl": "find consecutive consonants in a word `CONCENTRATION` using regex",
    "cmd": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)",
    "cmd_name": "conala",
    "gpt35_response": " Find consecutive consonants in a word `CONCENTRATION` using regex. This requires importing the `re` library, defining the regex pattern to match consecutive consonants, and applying the pattern to the word `CONCENTRATION`."
}
{
    "question_id": "5254445-10",
    "nl": "add string `-` in `4th` position of a string `s`",
    "cmd": "s[:4] + '-' + s[4:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:4] + 'VAR_STR' + VAR_STR[4:]",
    "cmd_name": "conala",
    "gpt35_response": " Add string '-' in `4th` position of a string `s`. This requires defining the position in the string to insert the new string, and using string manipulation to insert the new string at the desired position."
}
{
    "question_id": "39299703-19",
    "nl": "check if character '-' exists in a dataframe `df` cell 'a'",
    "cmd": "df['a'].str.contains('-')",
    "oracle_man": [
        "pandas.reference.api.pandas.series.str.contains"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].str.contains('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Check if character '-' exists in a dataframe `df` cell 'a'. This requires selecting the cell 'a' in dataframe `df` and checking if the '-' character is in the cell's string value."
}
{
    "question_id": "794995-38",
    "nl": "Jinja2 formate date `item.date` accorto pattern 'Y M d'",
    "cmd": "{{(item.date | date): 'Y M d'}}",
    "oracle_man": [],
    "canonical_cmd": "{{(item.date | date): 'VAR_STR'}}",
    "cmd_name": "conala",
    "gpt35_response": " Jinja2 formate date `item.date` according to pattern 'Y M d'. This requires importing the `jinja2` library, defining the date format string 'Y M d', and using the Jinja2 syntax to format the `item.date` variable using the defined format."
}
{
    "question_id": "10664430-91",
    "nl": "Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'",
    "cmd": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.fromtimestamp",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.fromtimestamp(VAR_STR).strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'. This requires importing the `datetime` library, defining the epoch time corresponding to `myNumber`, and using the `datetime.strftime()` function to convert the epoch time to the desired string format."
}
{
    "question_id": "13142347-60",
    "nl": "remove leading and trailing zeros in the string 'your_Strip'",
    "cmd": "your_string.strip('0')",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "your_string.strip('0')",
    "cmd_name": "conala",
    "gpt35_response": "- Remove leading and trailing zeros in the string `your_Strip`. This requires removing leading zeros, removing trailing zeros, and returning the resulting string."
}
{
    "question_id": "19300174-53",
    "nl": "destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`",
    "cmd": "a, b, c = [1, 2, 3]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR, VAR_STR, VAR_STR = [VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Destruct elements of list `[1, 2, 3]` to variables `a`, `b`, and `c`. This requires destructuring elements of the list `[1, 2, 3]` and assigning then to variables `a`, `b`, and `c`."
}
{
    "question_id": "40094588-66",
    "nl": "get a list of characters in string `x` matching regex pattern `pattern`",
    "cmd": "print(re.findall(pattern, x))",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "print(re.findall(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of characters in string `x` matching regex pattern `pattern`. This requires getting all matches of the regex pattern `pattern` in string `x` and returning a list of the matching characters."
}
{
    "question_id": "17277100-38",
    "nl": "get a list `slice` of array slices of the first two rows and columns from array `arr`",
    "cmd": "slice = [arr[i][0:2] for i in range(0, 2)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [VAR_STR[i][0:2] for i in range(0, 2)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list `slice` of array slices of the first two rows and columns from array `arr`. This requires selecting the first two rows and columns from array `arr` and returning the resulting list of slices."
}
{
    "question_id": "12808420-37",
    "nl": "Create new list `result` by splitting each item in list `words`",
    "cmd": "result = [item for word in words for item in word.split(',')]",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = [item for word in VAR_STR for item in word.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Create new list `result` by splitting each item in list `words`. This requires splitting each item in list `words`, creating a new list `result`, and adding the split strings to `result`."
}
{
    "question_id": "42394627-10",
    "nl": "sort list `lst` based on each element's number of occurrences",
    "cmd": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#str.index"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: (-1 * c[x], VAR_STR.index(x)))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `lst` based on each element's number of occurrences. This requires counting the number of occurrences of each element in `lst`, sorting `lst` based on the occurrence count of each element, and returning the sorted list."
}
{
    "question_id": "21669374-19",
    "nl": "convert string 'a' to hex",
    "cmd": "hex(ord('a'))",
    "oracle_man": [
        "python.library.functions#ord",
        "python.library.functions#hex"
    ],
    "canonical_cmd": "hex(ord('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Convert string 'a' to hex. This requires converting the ASCII string 'a' to the hexadecimal equivalent and returning the resulting string."
}
{
    "question_id": "3258573-36",
    "nl": "Insert a character `-` after every two elements in a string `s`",
    "cmd": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join(a + b for a, b in zip(VAR_STR[::2], VAR_STR[1::2]))",
    "cmd_name": "conala",
    "gpt35_response": " Insert a character `-` after every two elements in a string `s`. This requires inserting the character `-` after every two characters in string `s` and returning the resulting modified string."
}
{
    "question_id": "2847272-82",
    "nl": "replace fields delimited by braces {} in string \"Day old bread, 50% sale {0}\" with string 'today'",
    "cmd": "\"\"\"Day old bread, 50% sale {0}\"\"\".format('today')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace fields delimited by braces {} in string \"Day old bread, 50% sale {0}\" with string 'today'. This requires replacing the fields delimited by braces {} in string \"Day old bread, 50% sale {0}\" with the string 'today' and returning the resulting modified string."
}
{
    "question_id": "13704860-74",
    "nl": "zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list",
    "cmd": "zip([1, 2], [3, 4])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip([VAR_STR], [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list. This requires zipping together the two lists `[1, 2]` and `[3, 4]`, creating a new list of tuples, and adding these tuples to the new list."
}
{
    "question_id": "37584492-24",
    "nl": "remove all instances of parenthesesis containing text beginning with `as ` from string `line`",
    "cmd": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('\\\\(+as .*?\\\\) ', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove all instances of parentheses containing text beginning with `as ` from string `line`. This requires identifying all parentheses containing the text beginning with `as`, removing these instances, and returning the resulting modified string."
}
{
    "question_id": "16566069-85",
    "nl": "decode url `url` with utf8 and print it",
    "cmd": "print(urllib.parse.unquote(url).decode('utf8'))",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "print(urllib.parse.unquote(VAR_STR).decode('utf8'))",
    "cmd_name": "conala",
    "gpt35_response": " Decode url `url` with utf8 and print it. This requires decoding the URL using the UTF-8 encoding, printing out the decoded URL, and returning None."
}
{
    "question_id": "16566069-92",
    "nl": "decode a urllib escaped url string `url` with `utf8`",
    "cmd": "url = urllib.parse.unquote(url).decode('utf8')",
    "oracle_man": [
        "python.library.urllib.parse#urllib.parse.unquote",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR = urllib.parse.unquote(VAR_STR).decode('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Decode a urllib escaped url string `url` with `utf8`. This requires decoding the URL using UTF-8 encoding and returning the resulting decoded URL string."
}
{
    "question_id": "2077897-31",
    "nl": "substitute multiple whitespace with single whitespace in string `mystring`",
    "cmd": "\"\"\" \"\"\".join(mystring.split())",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Substitute multiple whitespace with single whitespace in string `mystring`. This requires replacing all occurrences of multiple whitespace characters with a single whitespace character and returning the resulting modified string."
}
{
    "question_id": "5749195-27",
    "nl": "How can I split and parse a string in Python?",
    "cmd": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')",
    "cmd_name": "conala",
    "gpt35_response": " How can I split and parse a string in Python? There is no additional context to add to this statement."
}
{
    "question_id": "9376384-34",
    "nl": "sort a list of tuples 'unsorted' based on two elements, second and third",
    "cmd": "sorted(unsorted, key=lambda element: (element[1], element[2]))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda element: (element[1], element[2]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of tuples 'unsorted' based on two elements, second and third. This requires sorting the list of tuples `unsorted` based on the second and third elements of each tuple and returning the resulting sorted list."
}
{
    "question_id": "13837848-67",
    "nl": "converting byte string `c` in unicode string",
    "cmd": "c.decode('unicode_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('unicode_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Converting byte string `c` to a unicode string. This requires decoding the byte string `c` using the appropriate encoding format, creating a corresponding unicode string and returning it."
}
{
    "question_id": "9466017-43",
    "nl": "sort list `files` based on variable `file_number`",
    "cmd": "files.sort(key=file_number)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `files` based on variable `file_number`. This requires sorting the `files` list based on the value of `file_number` in each file and returning the resulting sorted list."
}
{
    "question_id": "2953746-47",
    "nl": "parse a comma-separated string number '1,000,000' into int",
    "cmd": "int('1,000,000'.replace(',', ''))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "int('VAR_STR'.replace(',', ''))",
    "cmd_name": "conala",
    "gpt35_response": " Parse a comma-separated string number '1,000,000' into an int. This requires parsing the comma-separated number string '1,000,000', removing the commas, casting the resulting string to an integer, and returning the resulting integer value."
}
{
    "question_id": "13163145-86",
    "nl": "multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`",
    "cmd": "numpy.dot(numpy.dot(a, m), a)",
    "oracle_man": [
        "numpy.reference.generated.numpy.dot"
    ],
    "canonical_cmd": "numpy.dot(numpy.dot(VAR_STR, VAR_STR), VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`. This requires multiplying the columns of the sparse matrix `m` by the array `a` using matrix multiplication, multiplying the rows of the resulting matrix by the array `a` again, using matrix multiplication, and returning the resulting matrix."
}
{
    "question_id": "70797-30",
    "nl": "print \"Please enter something: \" to console, and read user input to `var`",
    "cmd": "var = input('Please enter something: ')",
    "oracle_man": [
        "python.library.functions#input"
    ],
    "canonical_cmd": "VAR_STR = input('Please enter something: ')",
    "cmd_name": "conala",
    "gpt35_response": "- Print message \"Please enter something: \" to console and read user input to variable `var`. This requires printing the message \"Please enter something: \" to the console and then reading user input into variable `var`."
}
{
    "question_id": "8704952-19",
    "nl": "convert a set of tuples `queryresult` to a string `emaillist`",
    "cmd": "emaillist = '\\n'.join(item[0] for item in queryresult)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "VAR_STR = '\\n'.join(item[0] for item in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert a set of tuples `queryresult` to a string `emaillist`. This requires looping through each tuple in `queryresult`, converting it to a string, and then concatenating each string with a comma separator to form the final `emaillist` string."
}
{
    "question_id": "8704952-43",
    "nl": "convert a set of tuples `queryresult` to a list of strings",
    "cmd": "[item[0] for item in queryresult]",
    "oracle_man": [],
    "canonical_cmd": "[item[0] for item in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a set of tuples `queryresult` to a list of strings. This requires looping through each tuple in `queryresult` and converting it to a string, then adding the resulting string to a list of strings."
}
{
    "question_id": "8704952-35",
    "nl": "convert a list of tuples `queryresult` to a string from the first indexes.",
    "cmd": "emaillist = '\\n'.join([item[0] for item in queryresult])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "emaillist = '\\n'.join([item[0] for item in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of tuples `queryresult` to a string from the first indexes. This requires looping through each tuple in `queryresult` and extracting the first index value, then concatenating each value with a comma separator to form the final string."
}
{
    "question_id": "2759323-25",
    "nl": "list the contents of a directory '\/home\/username\/www\/'",
    "cmd": "os.listdir('\/home\/username\/www\/')",
    "oracle_man": [
        "python.library.os#os.listdir"
    ],
    "canonical_cmd": "os.listdir('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " List the contents of a directory '\/home\/username\/www\/'. This requires accessing the specified directory using proper file path syntax and printing out a list of all contents within."
}
{
    "question_id": "2759323-64",
    "nl": "list all the contents of the directory 'path'.",
    "cmd": "os.listdir('path')",
    "oracle_man": [
        "python.library.os#os.listdir"
    ],
    "canonical_cmd": "os.listdir('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " List all the contents of the directory `path`. This requires accessing the specified directory using proper file path syntax and printing out a list of all contents within."
}
{
    "question_id": "24041436-36",
    "nl": "Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.",
    "cmd": "df.set_index(['Company', 'date'], inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "VAR_STR.set_index(['VAR_STR', 'VAR_STR'], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Set multi index on columns 'Company' and 'date' of data frame `df` in pandas. This requires setting `Company` and `date` as indexes on the `df` dataframe using pandas' `.set_index()` method."
}
{
    "question_id": "13277440-73",
    "nl": "use upper case letters to print hex value `value`",
    "cmd": "print('0x%X' % value)",
    "oracle_man": [],
    "canonical_cmd": "print('0x%X' % VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Use upper case letters to print hex value `value`. This requires converting `value` to uppercase using python's `.upper()` string method and then printing the resulting string to the console."
}
{
    "question_id": "34587346-8",
    "nl": "Find all Chinese characters in string `ipath`",
    "cmd": "re.findall('[\\u4e00-\\u9fff]+', ipath)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('[\u4e00-\\u9fff]+', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all Chinese characters in string `ipath`. This requires looping through each character in `ipath` and checking if it is a Chinese character using python's `unicodedata` module and adding it to a list of Chinese characters."
}
{
    "question_id": "466345-98",
    "nl": "parse string \"Jun 1 2005  1:33PM\" into datetime by format \"%b %d %Y %I:%M%p\"",
    "cmd": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse string \"Jun 1 2005 1:33PM\" into datetime by format \"%b %d %Y %I:%M%p\". This requires using python's `datetime` module to parse the string by the specified format string."
}
{
    "question_id": "466345-79",
    "nl": "parse string \"Aug 28 1999 12:00AM\" into datetime",
    "cmd": "parser.parse('Aug 28 1999 12:00AM')",
    "oracle_man": [
        "python.library.email.parser#email.parser.Parser.parse"
    ],
    "canonical_cmd": "parser.parse('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse string \"Aug 28 1999 12:00AM\" into datetime. This requires using python's `datetime` module to parse the string by its default format."
}
{
    "question_id": "40620804-62",
    "nl": "sort list `lst` with positives coming before negatives with values sorted respectively",
    "cmd": "sorted(lst, key=lambda x: (x < 0, x))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: (x < 0, x))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `lst` with positives coming before negatives with values sorted respectively. This requires using python's `.sort()` method with a specialized key function to sort the list."
}
{
    "question_id": "18990069-2",
    "nl": "get tuples of the corresponding elements from lists `lst` and `lst2`",
    "cmd": "[(x, lst2[i]) for i, x in enumerate(lst)]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[(x, VAR_STR[i]) for i, x in enumerate(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get tuples of the corresponding elements from lists `lst` and `lst2`. This requires looping through both lists and creating a tuple with the corresponding elements of each list."
}
{
    "question_id": "18990069-9",
    "nl": "create tuples containing elements that are at the same index of list `lst` and list `lst2`",
    "cmd": "[(i, j) for i, j in zip(lst, lst2)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(i, j) for i, j in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Create tuples containing elements that are at the same index of list `lst` and list `lst2`. This requires using python's `zip()` function to create tuples with elements at the same index in both lists."
}
{
    "question_id": "18990069-82",
    "nl": "get tuples from lists `lst` and `lst2` using list comprehension in python 2",
    "cmd": "[(lst[i], lst2[i]) for i in range(len(lst))]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[(VAR_STR[i], VAR_STR[i]) for i in range(len(VAR_STR))]",
    "cmd_name": "conala",
    "gpt35_response": " Get tuples from lists `lst` and `lst2` using list comprehension in python 2. This requires using a list comprehension with zip to create tuples with elements at the same index in both `lst` and `lst2`."
}
{
    "question_id": "4928526-31",
    "nl": "python, format string \"{} %s {}\" to have 'foo' and 'bar' in the first and second positions",
    "cmd": "\"\"\"{} %s {}\"\"\".format('foo', 'bar')",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Python format string \"{} %s {}\" to have 'foo' and 'bar' in the first and second positions. This requires using python's string `.format()` method with specified values to format the string."
}
{
    "question_id": "10037742-54",
    "nl": "replace string ' and ' in string `stuff` with character '\/'",
    "cmd": "stuff.replace(' and ', '\/')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR.replace(' and ', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace string ' and ' in string `stuff` with character '\/'. This requires using python's `.replace()` method to replace the specified substring in the string."
}
{
    "question_id": "9336270-77",
    "nl": "Execute SQL statement `sql` with values of dictionary `myDict` as parameters",
    "cmd": "cursor.execute(sql, list(myDict.values()))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.sqlite3#sqlite3.Cursor.execute",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "cursor.execute(VAR_STR, list(VAR_STR.values()))",
    "cmd_name": "conala",
    "gpt35_response": " Execute SQL statement `sql` with values of dictionary `myDict` as parameters. This requires substituting the values of `myDict` into the SQL statement using proper SQL parameter syntax."
}
{
    "question_id": "15882395-40",
    "nl": "set the size of figure `fig` in inches to width height of `w`, `h`",
    "cmd": "fig.set_size_inches(w, h, forward=True)",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure.set_size_inches"
    ],
    "canonical_cmd": "VAR_STR.set_size_inches(VAR_STR, VAR_STR, forward=True)",
    "cmd_name": "conala",
    "gpt35_response": " Set the size of figure `fig` in inches to width `w` and height `h`. This requires using the `.set_size_inches()` method on the `fig` figure object and specifying the `w` and `h` values in inches."
}
{
    "question_id": "30062429-44",
    "nl": "get value of first index of each element in list `a`",
    "cmd": "[x[0] for x in a]",
    "oracle_man": [],
    "canonical_cmd": "[x[0] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get value of first index of each element in list `a`. This requires using a list comprehension to extract the first index value of each element in the list."
}
{
    "question_id": "30062429-17",
    "nl": "python how to get every first element in 2 dimensional list `a`",
    "cmd": "[i[0] for i in a]",
    "oracle_man": [],
    "canonical_cmd": "[i[0] for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "- Get every first element in 2 dimensional list `a`. This requires looping through each list in the 2 dimensional list and retrieving the first element in each list."
}
{
    "question_id": "3277503-53",
    "nl": "read file `fname` line by line into a list `content`",
    "cmd": "with open(fname) as f:\n    content = f.readlines()",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.io#io.IOBase.readlines"
    ],
    "canonical_cmd": "with open(VAR_STR) as f:\n    VAR_STR = f.readlines()",
    "cmd_name": "conala",
    "gpt35_response": " Read file `fname` line by line into a list `content`. This requires opening the file `fname` and reading each line, appending it to the `content` list."
}
{
    "question_id": "3277503-95",
    "nl": "read file 'filename' line by line into a list `lines`",
    "cmd": "with open('filename') as f:\n    lines = f.readlines()",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.io#io.IOBase.readlines"
    ],
    "canonical_cmd": "with open('VAR_STR') as f:\n    VAR_STR = f.readlines()",
    "cmd_name": "conala",
    "gpt35_response": " Read file 'filename' line by line into a list `lines`. This requires opening the file 'filename' and reading each line, appending it to the `lines` list."
}
{
    "question_id": "3277503-68",
    "nl": "read file 'filename' line by line into a list `lines`",
    "cmd": "lines = [line.rstrip('\\n') for line in open('filename')]",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "VAR_STR = [line.rstrip('\\n') for line in open('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Read file 'filename' line by line into a list `lines`. This requires opening the file 'filename' and reading each line, appending it to the `lines` list."
}
{
    "question_id": "3277503-73",
    "nl": "read file \"file.txt\" line by line into a list `array`",
    "cmd": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.array#array.array.append"
    ],
    "canonical_cmd": "with open('VAR_STR', 'r') as ins:\n    VAR_STR = []\n    for line in ins:\n        VAR_STR.append(line)",
    "cmd_name": "conala",
    "gpt35_response": " Read file \"file.txt\" line by line into a list `array`. This requires opening the file \"file.txt\" and reading each line, appending it to the `array` list."
}
{
    "question_id": "19794051-87",
    "nl": "Remove anything in parenthesis from string `item` with a regex",
    "cmd": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub(' ?\\\\([^)]+\\\\)', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove anything in parenthesis from string `item` with a regex. This requires using a regular expression to find and remove anything in parentheses from the string `item`."
}
{
    "question_id": "19794051-95",
    "nl": "Remove word characters in parenthesis from string `item` with a regex",
    "cmd": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub(' ?\\\\(\\\\w+\\\\)', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove word characters in parenthesis from string `item` with a regex. This requires using a regular expression to find and remove all word characters in parentheses from the string `item`."
}
{
    "question_id": "19794051-37",
    "nl": "Remove all data inside parenthesis in string `item`",
    "cmd": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub(' \\\\(\\\\w+\\\\)', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove all data inside parenthesis in string `item`. This requires using a regular expression to find and remove all characters inside the parentheses in the string `item`."
}
{
    "question_id": "15974730-10",
    "nl": "retrieve the path from a Flask request",
    "cmd": "request.url",
    "oracle_man": [],
    "canonical_cmd": "request.url",
    "cmd_name": "conala",
    "gpt35_response": " Retrieve the path from a Flask request. This requires accessing the Flask `request` object and retrieving the path attribute."
}
{
    "question_id": "14465279-6",
    "nl": "delete all values in a list `mylist`",
    "cmd": "del mylist[:]",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR[:]",
    "cmd_name": "conala",
    "gpt35_response": " Delete all values in a list `mylist`. This requires using the `del` keyword to delete each element of the list `mylist`."
}
{
    "question_id": "38708621-19",
    "nl": "calculate ratio of sparsity in a numpy array `a`",
    "cmd": "np.isnan(a).sum() \/ np.prod(a.shape)",
    "oracle_man": [
        "numpy.reference.generated.numpy.isnan",
        "numpy.reference.generated.numpy.prod",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "np.isnan(VAR_STR).sum() \/ np.prod(VAR_STR.shape)",
    "cmd_name": "conala",
    "gpt35_response": " Calculate ratio of sparsity in a numpy array `a`. This requires counting the number of zeros in the array `a` and dividing it by the total number of elements in the array."
}
{
    "question_id": "12005558-73",
    "nl": "get digits in string `my_string`",
    "cmd": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(c for c in VAR_STR if c.isdigit())",
    "cmd_name": "conala",
    "gpt35_response": " Get digits in string `my_string`. This requires using a regular expression to find and extract all digits from the string `my_string`."
}
{
    "question_id": "15043326-39",
    "nl": "get all characters between two `$` characters in string `string`",
    "cmd": "re.findall('\\\\$([^$]*)\\\\$', string)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\$([^$]*)\\\\$', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get all characters between two `$` characters in string `string`. This requires using a regular expression to find and extract all characters between two `$` characters in the string `string`."
}
{
    "question_id": "15043326-41",
    "nl": "getting the string between 2 '$' characters in '$sin (x)$ is an function of x'",
    "cmd": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\$(.*?)\\\\$', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Getting the string between 2 '$' characters in '$sin (x)$ is a function of x'. This requires using a regular expression to find and extract the string between the two `$` characters in the string '$sin (x)$ is a function of x'."
}
{
    "question_id": "2606976-16",
    "nl": "get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings",
    "cmd": "[(int(x) if x else 0) for x in data.split(',')]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[(int(x) if x else 0) for x in VAR_STR.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings. This requires splitting the string `data` by commas and replacing empty strings with `0`."
}
{
    "question_id": "2606976-27",
    "nl": "split string `s` into a list of strings based on ',' then replace empty strings with zero",
    "cmd": "\"\"\",\"\"\".join(x or '0' for x in s.split(','))",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join(x or '0' for x in VAR_STR.split('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` into a list of strings based on ',' then replace empty strings with zero. This requires splitting the string `s` by commas and replacing empty strings with `0`."
}
{
    "question_id": "41251391-88",
    "nl": "get a list of the keys in each dictionary in a dictionary of dictionaries `foo`",
    "cmd": "[k for d in list(foo.values()) for k in d]",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "[k for d in list(VAR_STR.values()) for k in d]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of the keys in each dictionary in a dictionary of dictionaries `foo`. This requires looping through each dictionary in `foo` and appending all keys to a list."
}
{
    "question_id": "35561743-31",
    "nl": "count `True` values associated with key 'one' in dictionary `tadas`",
    "cmd": "sum(item['one'] for item in list(tadas.values()))",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "sum(item['VAR_STR'] for item in list(VAR_STR.values()))",
    "cmd_name": "conala",
    "gpt35_response": " Count `True` values associated with key 'one' in dictionary `tadas`. This requires looping through the dictionary `tadas`, finding all values associated with the key 'one' that are `True`, and counting them."
}
{
    "question_id": "6764909-58",
    "nl": "remove all duplicate items from a list `lseperatedOrblist`",
    "cmd": "woduplicates = list(set(lseperatedOrblist))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "woduplicates = list(set(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Remove all duplicate items from a list `lseperatedOrblist`. This requires creating a new, empty list and looping through each item in `lseperatedOrblist`, appending it to the new list if it has not already been appended."
}
{
    "question_id": "983354-40",
    "nl": "prompt string 'Press Enter to continue...' to the console",
    "cmd": "input('Press Enter to continue...')",
    "oracle_man": [
        "python.library.functions#input"
    ],
    "canonical_cmd": "input('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Prompt string 'Press Enter to continue...' to the console. This requires printing the string 'Press Enter to continue...' to the console and waiting for the user to press enter before continuing."
}
{
    "question_id": "3220284-47",
    "nl": "customize the time format in python logging",
    "cmd": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')",
    "oracle_man": [],
    "canonical_cmd": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')",
    "cmd_name": "conala",
    "gpt35_response": "- Customize the time format in Python logging. This requires accessing the Python logging library, setting the time format according to the desired custom format, and applying the new format to the logging statement."
}
{
    "question_id": "21129020-99",
    "nl": "set the default encoding to 'utf-8'",
    "cmd": "sys.setdefaultencoding('utf8')",
    "oracle_man": [],
    "canonical_cmd": "sys.setdefaultencoding('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " Set the default encoding to 'utf-8'. This requires accessing the encoding configuration, specifying 'utf-8' as the default encoding, and applying the configuration to the relevant code."
}
{
    "question_id": "20110170-28",
    "nl": "reset index of dataframe `df`so that existing index values are transferred into `df`as columns",
    "cmd": "df.reset_index(inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "VAR_STR.reset_index(inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Reset index of dataframe `df` so that existing index values are transferred into `df` as columns. This requires accessing the dataframe `df`, resetting its index, and making sure the original index values are preserved and added as new columns in the dataframe."
}
{
    "question_id": "1920145-91",
    "nl": "Get all the keys from dictionary `y` whose value is `1`",
    "cmd": "[i for i in y if y[i] == 1]",
    "oracle_man": [],
    "canonical_cmd": "[i for i in VAR_STR if VAR_STR[i] == 1]",
    "cmd_name": "conala",
    "gpt35_response": " Get all the keys from dictionary `y` whose value is `1`. This requires iterating over all key-value pairs in the dictionary `y`, and creating a new list of only the keys whose values are equal to `1`."
}
{
    "question_id": "18142090-6",
    "nl": "Sort list `li` in descending order based on the second element of each list inside list`li`",
    "cmd": "sorted(li, key=operator.itemgetter(1), reverse=True)",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=operator.itemgetter(1), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `li` in descending order based on the second element of each list inside list `li`. This requires accessing the list `li`, defining a comparison function based on the second element of each inner list, and applying the function to sort the outer list in descending order."
}
{
    "question_id": "15158599-50",
    "nl": "remove false entries from a dictionary `hand`",
    "cmd": "{k: v for k, v in list(hand.items()) if v}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "{k: v for k, v in list(VAR_STR.items()) if v}",
    "cmd_name": "conala",
    "gpt35_response": " Remove false entries from a dictionary `hand`. This requires accessing the dictionary `hand`, iterating over all key-value pairs, removing the key-value pair if the value is `False`, and updating the dictionary accordingly."
}
{
    "question_id": "15158599-74",
    "nl": "Get a dictionary from a dictionary `hand` where the values are present",
    "cmd": "dict((k, v) for k, v in hand.items() if v)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict((k, v) for k, v in VAR_STR.items() if v)",
    "cmd_name": "conala",
    "gpt35_response": " Get a dictionary from a dictionary `hand` where the values are present. This requires accessing the dictionary `hand`, selecting only the key-value pairs where the value is not `None`, and creating a new dictionary from the selected key-value pairs."
}
{
    "question_id": "34705205-97",
    "nl": "sort a nested list by the inverse of element 2, then by element 1",
    "cmd": "sorted(l, key=lambda x: (-int(x[1]), x[0]))",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#int"
    ],
    "canonical_cmd": "sorted(l, key=lambda x: (-int(x[1]), x[0]))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a nested list by the inverse of element 2, then by element 1. This requires accessing the nested list, defining a comparison function based on the second element of the inner list (in reverse order) and the first element of the inner list (in normal order), and applying the function to sort the list."
}
{
    "question_id": "19410018-13",
    "nl": "count the number of words in a string `s`",
    "cmd": "len(s.split())",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "len(VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of words in a string `s`. This requires defining what constitutes a \"word\" in the context of the string `s`, splitting the string into individual words, and counting the number of words in the resulting list."
}
{
    "question_id": "1450393-15",
    "nl": "read line by line from stdin",
    "cmd": "for line in fileinput.input():\n    pass",
    "oracle_man": [
        "python.library.fileinput#fileinput.input"
    ],
    "canonical_cmd": "for line in fileinput.input():\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Read line by line from stdin. This requires accessing the standard input stream, reading lines from the stream one at a time, and processing each line appropriately."
}
{
    "question_id": "1450393-89",
    "nl": "read line by line from stdin",
    "cmd": "for line in sys.stdin:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "for line in sys.stdin:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Read line by line from stdin. This requires accessing the standard input stream, reading lines from the stream one at a time, and processing each line appropriately."
}
{
    "question_id": "3673428-56",
    "nl": "convert ascii value 'a' to int",
    "cmd": "ord('a')",
    "oracle_man": [
        "python.library.functions#ord"
    ],
    "canonical_cmd": "ord('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert ascii value 'a' to int. This requires accessing the ASCII character 'a', converting it to its corresponding integer value, and storing the result."
}
{
    "question_id": "13418405-19",
    "nl": "get name of primary field `name` of django model `CustomPK`",
    "cmd": "CustomPK._meta.pk.name",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR._meta.pk.VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Get name of primary field `name` of Django model `CustomPK`. This requires accessing the Django model `CustomPK`, checking its attributes to determine which field is designated as its primary key, and retrieving the name of that field."
}
{
    "question_id": "13636592-2",
    "nl": "sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order",
    "cmd": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.sort_values"
    ],
    "canonical_cmd": "df.sort_values(['VAR_STR', 'VAR_STR'], ascending=[True, False], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a Pandas DataFrame according to column `Peak` in ascending and `Weeks` in descending order. This requires accessing the Pandas DataFrame, defining a sorting function that sorts the DataFrame by `Peak` in ascending order and `Weeks` in descending order, and applying the function to sort the DataFrame accordingly."
}
{
    "question_id": "13636592-66",
    "nl": "sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order",
    "cmd": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.index.sort"
    ],
    "canonical_cmd": "df.sort(['VAR_STR', 'VAR_STR'], ascending=[True, False], inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a Pandas DataFrame by column `Peak` in ascending and `Weeks` in descending order. This requires accessing the Pandas DataFrame, defining criteria for sorting, i.e., sorting by `Peak` in ascending order and `Weeks` in descending order, and applying the criteria to sort the DataFrame."
}
{
    "question_id": "12030179-56",
    "nl": "setup a smtp mail server to `smtp.gmail.com` with port `587`",
    "cmd": "server = smtplib.SMTP('smtp.gmail.com', 587)",
    "oracle_man": [
        "python.library.smtplib#smtplib.SMTP"
    ],
    "canonical_cmd": "server = smtplib.SMTP('VAR_STR', 587)",
    "cmd_name": "conala",
    "gpt35_response": " Setup a SMTP mail server to `smtp.gmail.com` with port `587`. This requires accessing the SMTP library, setting up a connection to the specified SMTP mail server, and setting the port to `587`."
}
{
    "question_id": "533398-65",
    "nl": "execute external commands\/script `your_own_script` with csh instead of bash",
    "cmd": "os.system('tcsh your_own_script')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('tcsh your_own_script')",
    "cmd_name": "conala",
    "gpt35_response": " Execute external commands\/script `your_own_script` with csh instead of bash. This requires accessing the operating system's command-line interface, executing the external command or script `your_own_script` and specifying the shell to use as csh instead of the default bash."
}
{
    "question_id": "533398-90",
    "nl": "execute command 'echo $0' in Z shell",
    "cmd": "os.system(\"zsh -c 'echo $0'\")",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system(\"zsh -c 'echo $0'\")",
    "cmd_name": "conala",
    "gpt35_response": " Execute command 'echo $0' in Z shell. This requires accessing the Z shell, executing the command 'echo $0', which outputs the name of the current shell in use."
}
{
    "question_id": "34437284-35",
    "nl": "sum of product of combinations in a list `l`",
    "cmd": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])",
    "oracle_man": [
        "python.library.itertools#itertools.combinations",
        "python.library.functions#sum",
        "python.library.functions#list"
    ],
    "canonical_cmd": "sum([(i * j) for i, j in list(itertools.combinations(VAR_STR, 2))])",
    "cmd_name": "conala",
    "gpt35_response": " Sum of product of combinations in a list `l`. This requires accessing the list `l`, computing all possible pair combinations from the list elements, multiplying the pairs and summing up the resulting products."
}
{
    "question_id": "13781828-57",
    "nl": "Truncate `\\r\\n` from each string in a list of string `example`",
    "cmd": "example = [x.replace('\\r\\n', '') for x in example]",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = [x.replace('VAR_STR', '') for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Truncate `\\r\\n` from each string in a list of string `example`. This requires accessing the list of strings `example`, iterating through each element of the list, and removing any instances of the characters '\\r' and '\\n' in each element."
}
{
    "question_id": "16159228-35",
    "nl": "right align string `mystring` with a width of 7",
    "cmd": "\"\"\"{:>7s}\"\"\".format(mystring)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{:>7s}\"\"\".format(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Right-align string `mystring` with a width of 7. This requires using the `str.ljust()` function to add spaces to the left of the string until it reaches a total length of 7."
}
{
    "question_id": "18253210-93",
    "nl": "creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`",
    "cmd": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T",
    "oracle_man": [
        "numpy.reference.generated.numpy.meshgrid",
        "numpy.reference.generated.numpy.vstack",
        "numpy.reference.generated.numpy.reshape"
    ],
    "canonical_cmd": "np.vstack(np.meshgrid(VAR_STR, VAR_STR, VAR_STR)).reshape(3, -1).T",
    "cmd_name": "conala",
    "gpt35_response": " Create a NumPy array of 3D coordinates from three 1D arrays `x_p`, `y_p`, and `z_p`. This requires using the `numpy.array()` function to create a new array with dimensions of `(len(x_p), 3)` and setting each column of the array to `x_p`, `y_p`, and `z_p`."
}
{
    "question_id": "12845112-46",
    "nl": "move last item of array `a` to the first position",
    "cmd": "a[-1:] + a[:-1]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-1:] + VAR_STR[:-1]",
    "cmd_name": "conala",
    "gpt35_response": " Move the last item of array `a` to the first position. This requires using the `list.pop()` function to remove the last item of the list, and using the `list.insert()` function to insert it at the first position of the list."
}
{
    "question_id": "113655-47",
    "nl": "split string `Word to Split` into a list of characters",
    "cmd": "list('Word to Split')",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string `Word to Split` into a list of characters. This requires using the `list()` function to convert the string to a list of individual characters."
}
{
    "question_id": "15465204-13",
    "nl": "Sum of sums of each list, in a list of lists named 'lists'.",
    "cmd": "sum(sum(x) for x in lists)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(sum(x) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum the sums of each list, in a list of lists named 'lists'. This requires using a nested loop to iterate through the lists, and using the `sum()` function to calculate the sum of each sub-list."
}
{
    "question_id": "21899953-68",
    "nl": "Set a window size to `1400, 1000` using selenium webdriver",
    "cmd": "driver.set_window_size(1400, 1000)",
    "oracle_man": [],
    "canonical_cmd": "driver.set_window_size(1400, 1000)",
    "cmd_name": "conala",
    "gpt35_response": " Set a window size to `1400, 1000` using Selenium webdriver. This requires using the `webdriver.set_window_size()` function and passing in the dimensions of the window as arguments."
}
{
    "question_id": "4223923-88",
    "nl": "change the case of the first letter in string `s`",
    "cmd": "return s[0].upper() + s[1:]",
    "oracle_man": [
        "python.library.stdtypes#str.upper"
    ],
    "canonical_cmd": "return VAR_STR[0].upper() + VAR_STR[1:]",
    "cmd_name": "conala",
    "gpt35_response": " Change the case of the first letter in string `s`. This requires using the `str.capitalize()` or `str.title()` function to change the first character of the string to uppercase."
}
{
    "question_id": "41821112-71",
    "nl": "get the sum of the products of each pair of corresponding elements in lists `a` and `b`",
    "cmd": "sum(x * y for x, y in zip(a, b))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(x * y for x, y in zip(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get the sum of the products of each pair of corresponding elements in lists `a` and `b`. This requires using a loop to iterate through both lists simultaneously, and multiplying each pair of corresponding elements together before summing the resulting products."
}
{
    "question_id": "41821112-50",
    "nl": "sum the products of each two elements at the same index of list `a` and list `b`",
    "cmd": "list(x * y for x, y in list(zip(a, b)))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.functions#zip"
    ],
    "canonical_cmd": "list(x * y for x, y in list(zip(VAR_STR, VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Sum the products of each two elements at the same index of list `a` and list `b`. This requires using a loop to iterate through both lists simultaneously, multiplying the elements with the same index together and summing the resulting products."
}
{
    "question_id": "41821112-48",
    "nl": "sum the product of each two items at the same index of list `a` and list `b`",
    "cmd": "sum(i * j for i, j in zip(a, b))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(i * j for i, j in zip(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Sum the product of each two items at the same index of list `a` and list `b`. This requires using a loop to iterate through both lists simultaneously, multiplying the items with the same index together and summing the resulting products."
}
{
    "question_id": "41821112-6",
    "nl": "sum the product of elements of two lists named `a` and `b`",
    "cmd": "sum(x * y for x, y in list(zip(a, b)))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sum",
        "python.library.functions#list"
    ],
    "canonical_cmd": "sum(x * y for x, y in list(zip(VAR_STR, VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Sum the product of elements of two lists named `a` and `b`. This requires using the `zip()` function to pair up the corresponding elements of list `a` and `b`, multiplying them together, and summing the resulting products."
}
{
    "question_id": "14737222-31",
    "nl": "Split string `Hello` into a string of letters seperated by `,`",
    "cmd": "\"\"\",\"\"\".join('Hello')",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string `Hello` into a string of letters separated by `,`. This requires using the `str.join()` function to join the individual characters of the string with a comma separator."
}
{
    "question_id": "19948732-25",
    "nl": "Matplotlib change marker size to 500",
    "cmd": "scatter(x, y, s=500, color='green', marker='h')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot.scatter"
    ],
    "canonical_cmd": "scatter(x, y, s=500, color='green', marker='h')",
    "cmd_name": "conala",
    "gpt35_response": " Matplotlib change marker size to 500. This requires using the `matplotlib.pyplot.scatter()` function to create a scatterplot, and passing in the argument `s=500` to set the marker size."
}
{
    "question_id": "3842155-75",
    "nl": "change the state of the Tkinter `Text` widget to read only i.e. `disabled`",
    "cmd": "text.config(state=DISABLED)",
    "oracle_man": [
        "flask.api.index#flask.Config"
    ],
    "canonical_cmd": "text.config(state=DISABLED)",
    "cmd_name": "conala",
    "gpt35_response": " Change the state of the Tkinter `Text` widget to read-only, i.e. `disabled`. This requires using the `text_widget.configure()` function to set the `state` option to `'disabled'`."
}
{
    "question_id": "2375335-29",
    "nl": "clear session key 'mykey'",
    "cmd": "del request.session['mykey']",
    "oracle_man": [],
    "canonical_cmd": "del request.session['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Clear session key 'mykey'. This requires using the `session.pop()` function to remove the key-value pair associated with `'mykey'` from the session dictionary."
}
{
    "question_id": "444058-10",
    "nl": "display attribute `attr` for each object `obj` in list `my_list_of_objs`",
    "cmd": "print([obj.attr for obj in my_list_of_objs])",
    "oracle_man": [],
    "canonical_cmd": "print([VAR_STR.VAR_STR for VAR_STR in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Display attribute `attr` for each object `obj` in list `my_list_of_objs`. This requires using a loop to iterate through each object in the list and using the `getattr()` function to retrieve its value for the specified attribute."
}
{
    "question_id": "19745091-95",
    "nl": "lookup dictionary key `key1` in Django template `json`",
    "cmd": "{{json.key1}}",
    "oracle_man": [],
    "canonical_cmd": "{{VAR_STR.VAR_STR}}",
    "cmd_name": "conala",
    "gpt35_response": " Lookup dictionary key `key1` in Django template `json`. This requires using the Django template language syntax to access the value associated with the `key1` key in the `json` variable e.g. `{{ json.key1 }}`."
}
{
    "question_id": "40313203-39",
    "nl": "Sum elements of tuple `b` to their respective elements of each tuple in list `a`",
    "cmd": "c = [[(i + j) for i, j in zip(e, b)] for e in a]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "c = [[(i + j) for i, j in zip(e, VAR_STR)] for e in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Sum elements of tuple `b` to their respective elements of each tuple in list `a`. This requires using a loop to iterate through each tuple in `a`, adding the corresponding elements from `b`, and creating a new tuple with the resulting values."
}
{
    "question_id": "2556108-6",
    "nl": "replace the last occurence of an expression '<\/div>' with '<\/bad>' in a string `s`",
    "cmd": "re.sub('(.*)<\/div>', '\\\\1<\/bad>', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(.*)<\/div>', '\\\\1<\/bad>', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Replace the last occurrence of an expression '<\/div>' with '<\/bad>' in a string `s`. This requires using the `str.rfind()` function to find the index of the last occurrence of the expression, using string slicing to split the string into two parts before and after the expression, and concatenating the parts with the new expression in the middle."
}
{
    "question_id": "13411544-24",
    "nl": "delete column 'column_name' from dataframe `df`",
    "cmd": "df = df.drop('column_name', 1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.drop('VAR_STR', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Delete column 'column_name' from dataframe `df`. This requires using the `df.drop()` function to remove the column with the specified name from the dataframe."
}
{
    "question_id": "13411544-67",
    "nl": "delete 1st, 2nd and 4th columns from dataframe `df`",
    "cmd": "df.drop(df.columns[[0, 1, 3]], axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.drop(VAR_STR.columns[[0, 1, 3]], axis=1)",
    "cmd_name": "conala",
    "gpt35_response": "-Delete 1st, 2nd and 4th columns from dataframe `df`. This requires accessing dataframe `df` and deleting the 1st, 2nd, and 4th columns."
}
{
    "question_id": "13411544-59",
    "nl": "delete a column `column_name` without having to reassign from pandas data frame `df`",
    "cmd": "df.drop('column_name', axis=1, inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.drop('VAR_STR', axis=1, inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": "Delete a column `column_name` without having to reassign from pandas data frame `df`. This requires accessing and removing `column_name` from dataframe `df`."
}
{
    "question_id": "3766633-89",
    "nl": "Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function",
    "cmd": "a = sorted(a, key=lambda x: x.modified, reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "VAR_STR = sorted(VAR_STR, key=lambda x: x.VAR_STR, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": "Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function. This requires accessing list `a` and sorting in descending order using the `modified` attribute of elements with a lambda function."
}
{
    "question_id": "20059427-99",
    "nl": "create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key",
    "cmd": "list_dict = {t[0]: t for t in tuple_list}",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = {t[0]: t for t in VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": "Create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key. This requires iterating through `tuple_list`, creating a dictionary key from the first element of the tuple, and adding the corresponding tuple as a value to the key in dictionary `list_dict`."
}
{
    "question_id": "16677816-22",
    "nl": "print list `t` into a table-like shape",
    "cmd": "print('\\n'.join('  '.join(map(str, row)) for row in t))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print('\\n'.join('  '.join(map(str, row)) for row in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Print list `t` into a table-like shape. This requires looping through list `t` and formatting the output to create a table-like shape."
}
{
    "question_id": "42458734-13",
    "nl": "factorize all string values in dataframe `s` into floats",
    "cmd": "(s.factorize()[0] + 1).astype('float')",
    "oracle_man": [
        "pandas.reference.api.pandas.factorize",
        "pandas.reference.api.pandas.dataframe.astype"
    ],
    "canonical_cmd": "(VAR_STR.factorize()[0] + 1).astype('float')",
    "cmd_name": "conala",
    "gpt35_response": "Factorize all string values in dataframe `s` into floats. This requires accessing dataframe `s`, identifying string values, and converting them into floats using a factorization function."
}
{
    "question_id": "14914615-30",
    "nl": "find out the number of non-matched elements at the same index of list `a` and list `b`",
    "cmd": "sum(1 for i, j in zip(a, b) if i != j)",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(1 for i, j in zip(VAR_STR, VAR_STR) if i != j)",
    "cmd_name": "conala",
    "gpt35_response": "Find out the number of non-matched elements at the same index of list `a` and list `b`. This requires comparing the values at each index of `a` to the corresponding index of `b` and counting the mismatches."
}
{
    "question_id": "903853-42",
    "nl": "Get all the second values from a list of lists `A`",
    "cmd": "[row[1] for row in A]",
    "oracle_man": [],
    "canonical_cmd": "[row[1] for row in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Get all the second values from a list of lists `A`. This requires iterating through the lists in `A` and extracting the second element from each list."
}
{
    "question_id": "903853-19",
    "nl": "extract first column from a multi-dimensional array `a`",
    "cmd": "[row[0] for row in a]",
    "oracle_man": [],
    "canonical_cmd": "[row[0] for row in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "Extract first column from a multi-dimensional array `a`. This requires accessing the first element of each list within `a` and creating a new list with only the first elements."
}
{
    "question_id": "8440117-70",
    "nl": "print a celsius symbol on x axis of a plot `ax`",
    "cmd": "ax.set_xlabel('Temperature (\\u2103)')",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.axes.axes.set_xlabel"
    ],
    "canonical_cmd": "VAR_STR.set_xlabel('Temperature (\u2103)')",
    "cmd_name": "conala",
    "gpt35_response": "Print a celsius symbol on x axis of a plot `ax`. This requires accessing `ax` and setting the x-axis label to 'Temperature (\u00b0C)' or adding the degree symbol to the existing label."
}
{
    "question_id": "8440117-34",
    "nl": "Print a celsius symbol with matplotlib",
    "cmd": "ax.set_xlabel('Temperature ($^\\\\circ$C)')",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.axes.axes.set_xlabel"
    ],
    "canonical_cmd": "ax.set_xlabel('Temperature ($^\\\\circ$C)')",
    "cmd_name": "conala",
    "gpt35_response": "Print a celsius symbol with matplotlib. This requires importing the degree symbol from the matplotlib library and printing it alongside the numerical value."
}
{
    "question_id": "3494906-84",
    "nl": "Convert list of dictionaries `L` into a flat dictionary",
    "cmd": "dict(pair for d in L for pair in list(d.items()))",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "dict(pair for d in VAR_STR for pair in list(d.items()))",
    "cmd_name": "conala",
    "gpt35_response": "Convert list of dictionaries `L` into a flat dictionary. This requires iterating through `L`, extracting the keys and values from all dictionaries, and creating a new dictionary with all key-value pairs."
}
{
    "question_id": "3494906-48",
    "nl": "merge a list of dictionaries in list `L` into a single dict",
    "cmd": "{k: v for d in L for k, v in list(d.items())}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "{k: v for d in VAR_STR for k, v in list(d.items())}",
    "cmd_name": "conala",
    "gpt35_response": "Merge a list of dictionaries in list `L` into a single dict. This requires iterating through `L`, extracting the key-value pairs from all dictionaries, and adding them to a new dictionary or updating keys if keys exist."
}
{
    "question_id": "498106-72",
    "nl": "compile Visual Studio project `project.sln` from the command line through python",
    "cmd": "os.system('msbuild project.sln \/p:Configuration=Debug')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('msbuild project.sln \/p:Configuration=Debug')",
    "cmd_name": "conala",
    "gpt35_response": "Compile Visual Studio project `project.sln` from the command line through python. This requires accessing the command line through python and executing the necessary commands to compile the Visual Studio project `project.sln`."
}
{
    "question_id": "1532810-2",
    "nl": "read lines from a csv file `.\/urls-eu.csv` into a list of lists `arr`",
    "cmd": "arr = [line.split(',') for line in open('.\/urls-eu.csv')]",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = [line.split(',') for line in open('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": "Read lines from a csv file `.\/urls-eu.csv` into a list of lists `arr`. This requires opening the csv file `.\/urls-eu.csv`, reading each line, and appending each list of values to a larger list `arr`."
}
{
    "question_id": "943809-13",
    "nl": "replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`",
    "cmd": "re.sub(' +', ' ', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub(' +', ' ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`. This requires identifying any occurrences of two or more whitespaces in string `s` and replacing them with a single whitespace ' '."
}
{
    "question_id": "28199524-81",
    "nl": "count the number of rows with missing values in a pandas dataframe `df`",
    "cmd": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)",
    "oracle_man": [
        "python.library.functions#sum",
        "pandas.reference.api.pandas.dataframe.apply",
        "pandas.reference.api.pandas.dataframe.isnull"
    ],
    "canonical_cmd": "sum(VAR_STR.apply(lambda x: sum(x.isnull().values), axis=1) > 0)",
    "cmd_name": "conala",
    "gpt35_response": "Count the number of rows with missing values in a pandas dataframe `df`. This requires accessing the pandas dataframe `df`, identifying rows with missing values, and counting the number of such rows."
}
{
    "question_id": "17498027-0",
    "nl": "Clicking a link using selenium using python",
    "cmd": "driver.find_element_by_xpath('xpath').click()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_xpath('xpath').click()",
    "cmd_name": "conala",
    "gpt35_response": "Clicking a link using selenium using python. This requires using selenium to locate and click the desired link on a web page through python."
}
{
    "question_id": "7262828-60",
    "nl": "convert a string literal `s` with values `\\\\` to raw string literal",
    "cmd": "s = s.replace('\\\\', '\\\\\\\\')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.replace('VAR_STR', '\\\\\\\\')",
    "cmd_name": "conala",
    "gpt35_response": "Convert a string literal `s` with values `\\\\` to raw string literal. This requires identifying the escape character `\\\\` in string literal `s` and converting it to a raw string literal with a single backslash."
}
{
    "question_id": "11339210-72",
    "nl": "get multiple integer values from a string 'string1'",
    "cmd": "map(int, re.findall('\\\\d+', string1))",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(int, re.findall('\\\\d+', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Get multiple integer values from a string 'string1'. This requires identifying all integer values within string 'string1' and extracting them as a list of integers."
}
{
    "question_id": "39129846-99",
    "nl": "sort list `l` based on its elements' digits",
    "cmd": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.functions#sorted",
        "python.library.functions#int",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: int(re.search('\\\\d+', x).group(0)))",
    "cmd_name": "conala",
    "gpt35_response": "- Sort list `l` based on its elements' digits. This requires accessing the digits of each element, and comparing and rearranging the elements accordingly."
}
{
    "question_id": "31302904-21",
    "nl": "get first element of each tuple in list `A`",
    "cmd": "[tup[0] for tup in A]",
    "oracle_man": [],
    "canonical_cmd": "[tup[0] for tup in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get the first element of each tuple in list `A`. This requires looping through each tuple, and retrieving the first element."
}
{
    "question_id": "30994370-39",
    "nl": "Write a comment `# Data for Class A\\n` to a file object `f`",
    "cmd": "f.write('# Data for Class A\\n')",
    "oracle_man": [
        "python.library.os#os.write"
    ],
    "canonical_cmd": "VAR_STR.write('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Write a comment `# Data for Class A\\n` to a file object `f`. This requires accessing file object `f`, and appending the comment string to its contents."
}
{
    "question_id": "3090175-87",
    "nl": "Find the greatest number in set `(1, 2, 3)`",
    "cmd": "print(max(1, 2, 3))",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "print(max(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Find the greatest number in set `(1, 2, 3)`. This requires looping through the set, and comparing each element to find the greatest number."
}
{
    "question_id": "19894478-99",
    "nl": "split string 'Words, words, words.' on punctuation",
    "cmd": "re.split('\\\\W+', 'Words, words, words.')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('\\\\W+', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string 'Words, words, words.' on punctuation. This requires identifying punctuation marks in the string, and splitting the string at those points."
}
{
    "question_id": "18500541-37",
    "nl": "flatten a tuple `l`",
    "cmd": "[(a, b, c) for a, (b, c) in l]",
    "oracle_man": [],
    "canonical_cmd": "[(a, b, c) for a, (b, c) in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Flatten a tuple `l`. This requires accessing each element of the tuple, and adding them to a new list in a flattened format."
}
{
    "question_id": "42172204-74",
    "nl": "replace value '-' in any column of pandas dataframe to \"NaN\"",
    "cmd": "df.replace('-', 'NaN')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "df.replace('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace value '-' in any column of pandas dataframe to \"NaN\". This requires accessing each column of the dataframe, and replacing '-' values with \"NaN\"."
}
{
    "question_id": "3996904-78",
    "nl": "Generate a random integer between 0 and 9",
    "cmd": "randint(0, 9)",
    "oracle_man": [
        "python.library.random#random.randint"
    ],
    "canonical_cmd": "randint(0, 9)",
    "cmd_name": "conala",
    "gpt35_response": " Generate a random integer between 0 and 9. This requires using a random integer generator function to generate the integer within the specified range."
}
{
    "question_id": "3996904-29",
    "nl": "Generate a random integer between `a` and `b`",
    "cmd": "random.randint(a, b)",
    "oracle_man": [
        "python.library.random#random.randint"
    ],
    "canonical_cmd": "random.randint(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Generate a random integer between `a` and `b`. This requires using a random integer generator function to generate the integer within the specified range of `a` and `b`."
}
{
    "question_id": "3996904-34",
    "nl": "Generate random integers between 0 and 9",
    "cmd": "print((random.randint(0, 9)))",
    "oracle_man": [
        "python.library.random#random.randint"
    ],
    "canonical_cmd": "print(random.randint(0, 9))",
    "cmd_name": "conala",
    "gpt35_response": " Generate random integers between 0 and 9. This requires using a random integer generator function to generate multiple integers within the specified range."
}
{
    "question_id": "3582601-40",
    "nl": "get an element at index `[1,1]`in a numpy array `arr`",
    "cmd": "print(arr[1, 1])",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR[1, 1])",
    "cmd_name": "conala",
    "gpt35_response": " Get an element at index `[1,1]`in a numpy array `arr`. This requires accessing the row and column at index `[1,1]` in the numpy array."
}
{
    "question_id": "730764-0",
    "nl": "call `doSomething()` in a try-except without handling the exception",
    "cmd": "try:\n    doSomething()\nexcept:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "try:\n    doSomething()\nexcept:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Call `doSomething()` in a try-except without handling the exception. This requires calling the function `doSomething()` within a try-except block without providing any code to handle the exception if it occurs."
}
{
    "question_id": "730764-10",
    "nl": "call `doSomething()` in a try-except without handling the exception",
    "cmd": "try:\n    doSomething()\nexcept Exception:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "try:\n    doSomething()\nexcept Exception:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Call `doSomething()` in a try-except without handling the exception. This requires calling the function `doSomething()` within a try-except block without providing any code to handle the exception if it occurs."
}
{
    "question_id": "38862349-53",
    "nl": "Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'",
    "cmd": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'. This requires accessing the contents of the file, identifying words that meet the specified criteria, and adding them to a new list."
}
{
    "question_id": "39381222-81",
    "nl": "print a rational number `3\/2`",
    "cmd": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')",
    "oracle_man": [],
    "canonical_cmd": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')",
    "cmd_name": "conala",
    "gpt35_response": " Print a rational number `3\/2`. This requires accessing the rational number `3\/2` and printing its value."
}
{
    "question_id": "4641765-34",
    "nl": "append 4 to list `foo`",
    "cmd": "foo.append(4)",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.append(4)",
    "cmd_name": "conala",
    "gpt35_response": " Append 4 to list `foo`. This requires accessing list `foo`, and adding 4 to the end of the list."
}
{
    "question_id": "4641765-55",
    "nl": "append a list [8, 7] to list `foo`",
    "cmd": "foo.append([8, 7])",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.append([8, 7])",
    "cmd_name": "conala",
    "gpt35_response": " Append a list [8, 7] to list `foo`. This requires accessing list `foo`, and adding the list [8, 7] to the end of the list."
}
{
    "question_id": "4641765-97",
    "nl": "insert 77 to index 2 of list `x`",
    "cmd": "x.insert(2, 77)",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "VAR_STR.insert(2, 77)",
    "cmd_name": "conala",
    "gpt35_response": " Insert 77 to index 2 of list `x`. This requires accessing list `x`, and inserting the value 77 at index 2."
}
{
    "question_id": "4231345-36",
    "nl": "apply a list of functions named 'functions' over a list of values named 'values'",
    "cmd": "[x(y) for x, y in zip(functions, values)]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[x(y) for x, y in zip(VAR_STR, VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Apply a list of functions named 'functions' over a list of values named 'values'. This requires looping through the list of values, and applying each function in the list of functions to the corresponding value."
}
{
    "question_id": "18432823-76",
    "nl": "Convert array `x` into a correlation matrix",
    "cmd": "np.corrcoef(x)",
    "oracle_man": [
        "numpy.reference.generated.numpy.corrcoef"
    ],
    "canonical_cmd": "np.corrcoef(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert array `x` into a correlation matrix. This requires accessing array `x`, and performing the necessary calculations to create a correlation matrix."
}
{
    "question_id": "27896214-81",
    "nl": "reading tab-delimited csv file `filename` with pandas on mac",
    "cmd": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')",
    "oracle_man": [
        "pandas.reference.api.pandas.read_csv"
    ],
    "canonical_cmd": "pandas.read_csv(VAR_STR, sep='\\t', lineterminator='\\r')",
    "cmd_name": "conala",
    "gpt35_response": "- Read tab-delimited csv file `filename` with pandas on Mac. This requires using pandas to read the csv file `filename` that is delimited by tabs on a Mac."
}
{
    "question_id": "30026815-9",
    "nl": "add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`",
    "cmd": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.apply"
    ],
    "canonical_cmd": "VAR_STR[['VAR_STR', 'VAR_STR', 'VAR_STR']] = VAR_STR.apply(VAR_STR, axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`. This requires defining a lambda function `lambdafunc` to extract information for `hour`, `weekday`, and `weeknum`, and then using pandas to apply this function to `df` to create new columns with these extracted values."
}
{
    "question_id": "1602934-33",
    "nl": "Check if key 'key1' in `dict`",
    "cmd": "('key1' in dict)",
    "oracle_man": [],
    "canonical_cmd": "'VAR_STR' in VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Check if key 'key1' in `dict`. This requires using the python `in` operator to check if key 'key1' is a key in the dictionary `dict`."
}
{
    "question_id": "1602934-63",
    "nl": "Check if key 'a' in `d`",
    "cmd": "('a' in d)",
    "oracle_man": [],
    "canonical_cmd": "'VAR_STR' in VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Check if key 'a' in `d`. This requires using the python `in` operator to check if key 'a' is a key in the dictionary `d`."
}
{
    "question_id": "1602934-89",
    "nl": "Check if key 'c' in `d`",
    "cmd": "('c' in d)",
    "oracle_man": [],
    "canonical_cmd": "'VAR_STR' in VAR_STR",
    "cmd_name": "conala",
    "gpt35_response": " Check if key 'c' in `d`. This requires using the python `in` operator to check if key 'c' is a key in the dictionary `d`."
}
{
    "question_id": "1602934-96",
    "nl": "Check if a given key 'key1' exists in dictionary `dict`",
    "cmd": "if ('key1' in dict):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if 'VAR_STR' in VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if a given key 'key1' exists in dictionary `dict`. This requires using the python `in` operator to check if key 'key1' is a key in the dictionary `dict`."
}
{
    "question_id": "1602934-21",
    "nl": "Check if a given key `key` exists in dictionary `d`",
    "cmd": "if (key in d):\n    pass",
    "oracle_man": [],
    "canonical_cmd": "if VAR_STR in VAR_STR:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Check if a given key `key` exists in dictionary `d`. This requires using the python `in` operator to check if key `key` is a key in the dictionary `d`."
}
{
    "question_id": "1546226-68",
    "nl": "remove multiple spaces in a string `foo`",
    "cmd": "\"\"\" \"\"\".join(foo.split())",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Remove multiple spaces in a string `foo`. This requires using python's `replace()` function to replace two or more spaces in string `foo` with a single space."
}
{
    "question_id": "3886669-57",
    "nl": "convert tuple `tst` to string `tst2`",
    "cmd": "tst2 = str(tst)",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "VAR_STR = str(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert tuple `tst` to string `tst2`. This requires using python's `join()` function to join items in `tst` and store the resulting string as `tst2`."
}
{
    "question_id": "2674391-16",
    "nl": "Get the position of a regex match for word `is` in a string `String`",
    "cmd": "re.search('\\\\bis\\\\b', String).start()",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.re#re.Match.start"
    ],
    "canonical_cmd": "re.search('\\\\bis\\\\b', VAR_STR).start()",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of a regex match for word `is` in a string `String`. This requires using python's `re` module to compile a regex pattern and extract the position of the first match for the word `is` in the string `String`."
}
{
    "question_id": "2674391-66",
    "nl": "Get the position of a regex match `is` in a string `String`",
    "cmd": "re.search('is', String).start()",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.re#re.Match.start"
    ],
    "canonical_cmd": "re.search('VAR_STR', VAR_STR).start()",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of a regex match `is` in a string `String`. This requires using python's `re` module to compile a regex pattern and extract the position of the first match for the regex pattern `is` in the string `String`."
}
{
    "question_id": "9542738-42",
    "nl": "check if 3 is inside list `[1, 2, 3]`",
    "cmd": "3 in [1, 2, 3]",
    "oracle_man": [],
    "canonical_cmd": "3 in [VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Check if 3 is inside list `[1, 2, 3]`. This requires using python's `in` operator to check if the integer 3 is an element in the list `[1, 2, 3]`."
}
{
    "question_id": "15474933-42",
    "nl": "get items from list `a` that don't appear in list `b`",
    "cmd": "[y for y in a if y not in b]",
    "oracle_man": [],
    "canonical_cmd": "[y for y in VAR_STR if y not in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get items from list `a` that don't appear in list `b`. This requires using python's list comprehension to create a new list that consists of elements from list `a` that are not present in list `b`."
}
{
    "question_id": "37497559-37",
    "nl": "identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`",
    "cmd": "df.groupby(['PplNum', 'RoomNum']).cumcount() + 1",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.core.groupby.groupby.cumcount"
    ],
    "canonical_cmd": "VAR_STR.groupby(['VAR_STR', 'VAR_STR']).cumcount() + 1",
    "cmd_name": "conala",
    "gpt35_response": " Identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`. This requires using pandas to group the dataframe `df` by columns 'PplNum' and 'RoomNum', and then adding a new column that counts the number of occurrences for each group greater than 1 to identify duplicated rows."
}
{
    "question_id": "13002848-88",
    "nl": "Jinja join elements of array `tags` with space string ' '",
    "cmd": "{{tags | join(' ')}}",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "{{VAR_STR | join(' ')}}",
    "cmd_name": "conala",
    "gpt35_response": " Jinja join elements of array `tags` with space string ' '. This requires using the Jinja template engine to apply the `join()` filter to the array `tags` using a space string ' ' as the delimiter."
}
{
    "question_id": "2229827-41",
    "nl": "django urlsafe base64 decode string `uenc` with decryption",
    "cmd": "base64.urlsafe_b64decode(uenc.encode('ascii'))",
    "oracle_man": [
        "python.library.base64#base64.urlsafe_b64decode",
        "python.library.base64#base64.encode"
    ],
    "canonical_cmd": "base64.urlsafe_b64decode(VAR_STR.encode('ascii'))",
    "cmd_name": "conala",
    "gpt35_response": " Django urlsafe base64 decode string `uenc` with decryption. This requires using Django's built-in urlsafe base64 decoding and decryption functions to decode and decrypt the string `uenc`."
}
{
    "question_id": "2612802-18",
    "nl": "copy list `old_list` as `new_list`",
    "cmd": "new_list = old_list[:]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[:]",
    "cmd_name": "conala",
    "gpt35_response": " Copy list `old_list` as `new_list`. This requires copying the references from `old_list` to `new_list` using python's `=` symbol."
}
{
    "question_id": "2612802-25",
    "nl": "copy list `old_list` as `new_list`",
    "cmd": "new_list = list(old_list)",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "VAR_STR = list(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Copy list `old_list` as `new_list`. This requires copying the references from `old_list` to `new_list` using python's `=` symbol."
}
{
    "question_id": "2612802-99",
    "nl": "copy list `old_list` as `new_list`",
    "cmd": "new_list = copy.copy(old_list)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = copy.copy(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Copy list `old_list` as `new_list`. This requires copying the references from `old_list` to `new_list` using python's `=` symbol."
}
{
    "question_id": "2612802-37",
    "nl": "deep copy list `old_list` as `new_list`",
    "cmd": "new_list = copy.deepcopy(old_list)",
    "oracle_man": [
        "python.library.copy#copy.deepcopy"
    ],
    "canonical_cmd": "VAR_STR = copy.deepcopy(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Deep copy list `old_list` as `new_list`. This requires creating a new list `new_list` with copies of all items in `old_list` using python's `copy` module."
}
{
    "question_id": "2612802-26",
    "nl": "make a copy of list `old_list`",
    "cmd": "[i for i in old_list]",
    "oracle_man": [],
    "canonical_cmd": "[i for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "- Make a copy of list `old_list`. This requires creating a new list called `new_list` with the same values as `old_list`."
}
{
    "question_id": "16735786-56",
    "nl": "generate unique equal hash for equal dictionaries `a` and `b`",
    "cmd": "hash(pformat(a)) == hash(pformat(b))",
    "oracle_man": [
        "python.library.functions#hash",
        "python.library.pprint#pprint.pformat"
    ],
    "canonical_cmd": "hash(pformat(VAR_STR)) == hash(pformat(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Generate unique equal hash for equal dictionaries `a` and `b`. This requires converting dictionaries `a` and `b` to JSON strings and computing their hash values using a cryptographic hash function."
}
{
    "question_id": "13128565-88",
    "nl": "split string `s` by letter 's'",
    "cmd": "s.split('s')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` by letter 's'. This requires creating a new list called `split_list` and iterating through the characters in `s`, adding characters to `split_list` until an 's' is encountered. Then a new list is created and the iteration continues until the end of `s`."
}
{
    "question_id": "6372228-68",
    "nl": "Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`",
    "cmd": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "split_list = [VAR_STR[i:i + VAR_STR] for i in range(0, len(VAR_STR), VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`. This requires splitting `the_list` into chunks of size `n` and then appending these chunks as separate strings to a new list called `split_text`."
}
{
    "question_id": "26894227-7",
    "nl": "sum of squares values in a list `l`",
    "cmd": "sum(i * i for i in l)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(i * i for i in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum of squares values in a list `l`. This requires iterating through each value in `l`, squaring it, and adding the resulting value to a running sum called `sum_of_squares`."
}
{
    "question_id": "26894227-0",
    "nl": "calculate the sum of the squares of each value in list `l`",
    "cmd": "sum(map(lambda x: x * x, l))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(map(lambda x: x * x, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Calculate the sum of the squares of each value in list `l`. This requires squaring each value in `l`, adding the resulting values together, and storing the sum in a new variable called `sum_of_squares`."
}
{
    "question_id": "41127441-97",
    "nl": "get a list each value `i` in the implicit tuple `range(3)`",
    "cmd": "list(i for i in range(3))",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(VAR_STR for VAR_STR in range(3))",
    "cmd_name": "conala",
    "gpt35_response": " Get a list each value `i` in the implicit tuple `range(3)`. This requires iterating through `range(3)` and appending the values to a list called `new_list`."
}
{
    "question_id": "12681945-62",
    "nl": "revers correlating bits of integer `n`",
    "cmd": "int('{:08b}'.format(n)[::-1], 2)",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#format"
    ],
    "canonical_cmd": "int('{:08b}'.format(VAR_STR)[::-1], 2)",
    "cmd_name": "conala",
    "gpt35_response": " Reverse correlating bits of integer `n`. This requires reversing the order of the bits in `n` and storing the result in a new variable called `reversed_bits`."
}
{
    "question_id": "5301996-48",
    "nl": "Filter Django objects by `author` with ids `1` and `2`",
    "cmd": "Book.objects.filter(author__id=1).filter(author__id=2)",
    "oracle_man": [
        "python.library.functions#filter"
    ],
    "canonical_cmd": "Book.objects.filter(author__id=1).filter(author__id=2)",
    "cmd_name": "conala",
    "gpt35_response": " Filter Django objects by `author` with ids `1` and `2`. This requires calling a filtering function on the Django objects, passing in the criteria of `author` and `ids` as parameters."
}
{
    "question_id": "3895874-90",
    "nl": "Write a regex statement to match 'lol' to 'lolllll'.",
    "cmd": "re.sub('l+', 'l', 'lollll')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('l+', 'l', 'lollll')",
    "cmd_name": "conala",
    "gpt35_response": " Write a regex statement to match 'lol' to 'lolllll'. This requires writing a regex pattern that matches one or more occurrences of the letter 'l' followed by the letter 'o' and then the letter 'l'."
}
{
    "question_id": "3241594-99",
    "nl": "printing numbers rounding up to third decimal place",
    "cmd": "print('%.3f' % 3.1415)",
    "oracle_man": [],
    "canonical_cmd": "print('%.3f' % 3.1415)",
    "cmd_name": "conala",
    "gpt35_response": " Printing numbers rounding up to third decimal place. This requires using a print statement to output the value of the number rounded to the third decimal place."
}
{
    "question_id": "6027690-60",
    "nl": "Plot using the color code `#112233` in matplotlib pyplot",
    "cmd": "pyplot.plot(x, y, color='#112233')",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.pyplot.plot"
    ],
    "canonical_cmd": "pyplot.plot(x, y, color='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Plot using the color code `#112233` in matplotlib pyplot. This requires specifying the `color` parameter as `#112233` when calling the `plot` function in matplotlib.pyplot."
}
{
    "question_id": "4358701-40",
    "nl": "remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'",
    "cmd": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('.{20}(.mkv)', '\\\\1', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'. This requires finding the index of the '.' character in the string and then using string slicing to remove the 20 characters before the '.'."
}
{
    "question_id": "8122079-23",
    "nl": "check if any element of list `substring_list` are in string `string`",
    "cmd": "any(substring in string for substring in substring_list)",
    "oracle_man": [
        "python.library.functions#any"
    ],
    "canonical_cmd": "any(substring in VAR_STR for substring in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if any element of list `substring_list` are in string `string`. This requires iterating through each element in `substring_list`, checking if it is a substring of `string`, and returning a Boolean value indicating whether any matches were found."
}
{
    "question_id": "3855093-58",
    "nl": "convert list `myintegers` into a unicode string",
    "cmd": "\"\"\"\"\"\".join(chr(i) for i in myintegers)",
    "oracle_man": [
        "python.library.functions#chr",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(chr(i) for i in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `myintegers` into a unicode string. This requires calling the `join` function on the list and passing in an empty Unicode string as the parameter."
}
{
    "question_id": "1854-80",
    "nl": "get os name",
    "cmd": "import platform\nplatform.system()",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "import platform\nplatform.system()",
    "cmd_name": "conala",
    "gpt35_response": " Get OS name. This requires calling a function that retrieves the name of the current operating system."
}
{
    "question_id": "1854-31",
    "nl": "get os version",
    "cmd": "import platform\nplatform.release()",
    "oracle_man": [
        "python.library.stdtypes#memoryview.release"
    ],
    "canonical_cmd": "import platform\nplatform.release()",
    "cmd_name": "conala",
    "gpt35_response": " Get OS version. This requires calling a function that retrieves the version number of the current operating system."
}
{
    "question_id": "1854-51",
    "nl": "get the name of the OS",
    "cmd": "print(os.name)",
    "oracle_man": [],
    "canonical_cmd": "print(os.name)",
    "cmd_name": "conala",
    "gpt35_response": " Get the name of the OS. This requires calling a function that retrieves both the name and version number of the current operating system."
}
{
    "question_id": "7668141-64",
    "nl": "Make function `WRITEFUNCTION` output nothing in curl `p`",
    "cmd": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR.setopt(pycurl.VAR_STR, lambda x: None)",
    "cmd_name": "conala",
    "gpt35_response": " Make function `WRITEFUNCTION` output nothing in curl `p`. This requires defining a function that does not output anything and then setting the `WRITEFUNCTION` parameter in the curl `p` request to this function."
}
{
    "question_id": "21205074-1",
    "nl": "split a string `s` at line breaks `\\r\\n`",
    "cmd": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[map(int, x.split('\\t')) for x in VAR_STR.rstrip().split('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `s` at line breaks `\\r\\n`. This requires splitting the string at each occurrence of the `\\r\\n` characters and storing the results in a new list called `split_strings`."
}
{
    "question_id": "38704545-19",
    "nl": "binarize the values in columns of list `order` in a pandas data frame",
    "cmd": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]",
    "oracle_man": [
        "pandas.reference.api.pandas.get_dummies",
        "pandas.reference.api.pandas.concat",
        "pandas.reference.api.pandas.index.astype"
    ],
    "canonical_cmd": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": "- Binarize the values in columns of list `order` in a pandas data frame. This requires accessing the pandas data frame, selecting each column in `order`, and binarizing the values in each column."
}
{
    "question_id": "4363072-10",
    "nl": "Parse string '21\/11\/06 16:30' according to format '%d\/%m\/%y %H:%M'",
    "cmd": "datetime.strptime('21\/11\/06 16:30', '%d\/%m\/%y %H:%M')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse string '21\/11\/06 16:30' according to format '%d\/%m\/%y %H:%M'. This requires using the datetime library to parse the string based on the given format '%d\/%m\/%y %H:%M'."
}
{
    "question_id": "6018916-82",
    "nl": "Get the value with the maximum length in each column in array `foo`",
    "cmd": "[max(len(str(x)) for x in line) for line in zip(*foo)]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#len",
        "python.library.functions#max",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "[max(len(str(x)) for x in line) for line in zip(*VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get the value with the maximum length in each column in array `foo`. This requires accessing each column in the array `foo`, finding the value with the maximum length, and storing it."
}
{
    "question_id": "6633678-69",
    "nl": "finding words in string `s` after keyword 'name'",
    "cmd": "re.search('name (.*)', s)",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "re.search('name (.*)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Finding words in string `s` after keyword 'name'. This requires accessing the string `s`, finding the index of the word 'name', and selecting the words that come after that keyword."
}
{
    "question_id": "38147447-67",
    "nl": "set data in column 'value' of dataframe `df` equal to first element of each list",
    "cmd": "df['value'] = df['value'].str[0]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].str[0]",
    "cmd_name": "conala",
    "gpt35_response": " Set data in column 'value' of dataframe `df` equal to first element of each list. This requires accessing the pandas data frame `df`, selecting the column 'value', and setting the data in the column equal to the first element of each list."
}
{
    "question_id": "38147447-11",
    "nl": "get element at index 0 of each list in column 'value' of dataframe `df`",
    "cmd": "df['value'] = df['value'].str.get(0)",
    "oracle_man": [
        "pandas.reference.api.pandas.series.str.get"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].str.get(0)",
    "cmd_name": "conala",
    "gpt35_response": " Get element at index 0 of each list in column 'value' of dataframe `df`. This requires accessing the pandas data frame `df`, selecting the column 'value', and getting the element at index 0 for each list."
}
{
    "question_id": "38147447-21",
    "nl": "remove square bracket '[]' from pandas dataframe `df` column 'value'",
    "cmd": "df['value'] = df['value'].str.strip('[]')",
    "oracle_man": [
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].str.strip('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove square bracket '[]' from pandas dataframe `df` column 'value'. This requires accessing the pandas data frame `df`, selecting the column 'value', and removing the square brackets from each element in the column."
}
{
    "question_id": "18649884-25",
    "nl": "Get a list from two strings `12345` and `ab` with values as each character concatenated",
    "cmd": "[(x + y) for x in '12345' for y in 'ab']",
    "oracle_man": [],
    "canonical_cmd": "[(x + y) for x in 'VAR_STR' for y in 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Get a list from two strings `12345` and `ab` with values as each character concatenated. This requires accessing the two strings, iterating over each character in the two strings, and concatenating each character to create a new list."
}
{
    "question_id": "4690094-53",
    "nl": "sort keys of dictionary 'd' based on their values",
    "cmd": "sorted(d, key=lambda k: d[k][1])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda k: VAR_STR[k][1])",
    "cmd_name": "conala",
    "gpt35_response": " Sort keys of dictionary 'd' based on their values. This requires accessing the dictionary 'd', sorting the values of the dictionary, and storing the keys based on the sorted values."
}
{
    "question_id": "16537636-23",
    "nl": "sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending",
    "cmd": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "print(sorted(VAR_STR, key=lambda t: (-t[2], t[0])))",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending. This requires accessing the list `student_tuples`, sorting the list based on the second element of each tuple in ascending order and then the third element of each tuple in descending order."
}
{
    "question_id": "18022241-97",
    "nl": "convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''",
    "cmd": "[''.join(l) for l in list_of_lists]",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "['VAR_STR'.join(l) for l in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''. This requires accessing each sub-list in `list_of_lists`, converting the sub-list into a string, and keeping empty sub-lists as an empty string in the new list of strings."
}
{
    "question_id": "35097130-6",
    "nl": "sort objects in `Articles` in descending order of counts of `likes`",
    "cmd": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')",
    "oracle_man": [
        "python.library.stdtypes#str.count",
        "matplotlib._as_gen.matplotlib.pyplot.annotate"
    ],
    "canonical_cmd": "Article.objects.annotate(like_count=Count('VAR_STR')).order_by('-like_count')",
    "cmd_name": "conala",
    "gpt35_response": " Sort objects in `Articles` in descending order of counts of `likes`. This requires accessing the `likes` attribute of each object in `Articles`, sorting the objects based on the `likes` count in descending order."
}
{
    "question_id": "8244915-81",
    "nl": "divide each element in list `myList` by integer `myInt`",
    "cmd": "myList[:] = [(x \/ myInt) for x in myList]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:] = [(x \/ VAR_STR) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Divide each element in list `myList` by integer `myInt`. This requires accessing each element in the list `myList` and dividing it by the integer `myInt`."
}
{
    "question_id": "20677660-40",
    "nl": "format string with dict `{'5': 'you'}` with integer keys",
    "cmd": "'hello there %(5)s' % {'5': 'you'}",
    "oracle_man": [],
    "canonical_cmd": "'hello there %(5)s' % {VAR_STR}",
    "cmd_name": "conala",
    "gpt35_response": " Format string with dict `{'5': 'you'}` with integer keys. This requires accessing the dictionary `{'5': 'you'}`, converting the integer keys into string keys, and using the dictionary to format a string."
}
{
    "question_id": "13252333-55",
    "nl": "Check if all elements in list `lst` are tupples of long and int",
    "cmd": "all(isinstance(x, int) for x in lst)",
    "oracle_man": [
        "python.library.functions#isinstance",
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(isinstance(x, int) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if all elements in list `lst` are tuples of long and int. This requires accessing the list `lst`, iterating through each element, and checking if each element is a tuple of long and int."
}
{
    "question_id": "13252333-39",
    "nl": "check if all elements in a list 'lst' are the same type 'int'",
    "cmd": "all(isinstance(x, int) for x in lst)",
    "oracle_man": [
        "python.library.functions#isinstance",
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(isinstance(x, VAR_STR) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if all elements in a list 'lst' are the same type 'int'. This requires accessing the list `lst`, checking the type of the first element, and checking if the rest of the elements have the same type as the first element."
}
{
    "question_id": "7742752-61",
    "nl": "sort a dictionary `y` by value then by key",
    "cmd": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda x: (x[1], x[0]), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a dictionary `y` by value then by key. This requires accessing the dictionary `y`, sorting the items in the dictionary based on their value first, and then sorting them based on their key."
}
{
    "question_id": "36454494-31",
    "nl": "get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`",
    "cmd": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.mean",
        "pandas.reference.api.pandas.dataframe.loc"
    ],
    "canonical_cmd": "VAR_STR.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`. This requires accessing the pandas data frame `df`, selecting columns `2, 5, 6, 7, 8`, and calculating the mean for each row."
}
{
    "question_id": "12905999-80",
    "nl": "Create a key `key` if it does not exist in dict `dic` and append element `value` to value.",
    "cmd": "dic.setdefault(key, []).append(value)",
    "oracle_man": [
        "python.library.stdtypes#dict.setdefault",
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.setdefault(VAR_STR, []).append(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Create a key `key` if it does not exist in dict `dic` and append element `value` to value. This requires accessing the dictionary `dic`, checking if the key `key` exists, creating the key `key` if it does not exist, and appending the element `value` to its value."
}
{
    "question_id": "31676133-11",
    "nl": "Convert each list in list `main_list` into a tuple",
    "cmd": "map(list, zip(*main_list))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(list, zip(*VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Convert each list in list `main_list` into a tuple. This requires accessing each list in `main_list` and converting it into a tuple."
}
{
    "question_id": "15769246-18",
    "nl": "print list of items `myList`",
    "cmd": "print('\\n'.join(str(p) for p in myList))",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print('\\n'.join(str(p) for p in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "-Print list of items `myList`. This requires calling the print function on the list `myList`."
}
{
    "question_id": "13079852-67",
    "nl": "stack two dataframes next to each other in pandas",
    "cmd": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.concat"
    ],
    "canonical_cmd": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)",
    "cmd_name": "conala",
    "gpt35_response": "Stack two dataframes next to each other in pandas. This requires using the pandas.concat function and specifying the axis parameter as 1."
}
{
    "question_id": "37855490-47",
    "nl": "add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`",
    "cmd": "dic['Test'].update({'class': {'section': 5}})",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].update({VAR_STR})",
    "cmd_name": "conala",
    "gpt35_response": "Add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`. This requires accessing the key 'Test' of dictionary `dic`, assigning it to a new dictionary that includes the key-value pair `'class': {'section': 5}`, and updating `dic` with the new dictionary."
}
{
    "question_id": "6323296-29",
    "nl": "replace everything that is not an alphabet or a digit with '' in 's'.",
    "cmd": "re.sub('[\\\\W_]+', '', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[\\\\W_]+', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Replace everything that is not an alphabet or a digit with '' in 's'. This requires using regular expressions to replace the specified characters with an empty string."
}
{
    "question_id": "15571267-95",
    "nl": "set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches",
    "cmd": "figure(figsize=(11.69, 8.27))",
    "oracle_man": [
        "matplotlib.figure_api#matplotlib.figure.Figure"
    ],
    "canonical_cmd": "VAR_STR(figsize=(11.69, 8.27))",
    "cmd_name": "conala",
    "gpt35_response": "Set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches. This requires using matplotlib's figure function and specifying the size parameter as `(11.69, 8.27)`."
}
{
    "question_id": "23422542-68",
    "nl": "django jinja slice list `mylist` by '3:8'",
    "cmd": "{{(mylist | slice): '3:8'}}",
    "oracle_man": [],
    "canonical_cmd": "{{(VAR_STR | slice): 'VAR_STR'}}",
    "cmd_name": "conala",
    "gpt35_response": "Django jinja slice list `mylist` by '3:8'. This requires using Jinja's slice function on `mylist` and passing the arguments '3' and '8'."
}
{
    "question_id": "10562778-75",
    "nl": "replace character 'a' with character 'e' and character 's' with character '3' in file `contents`",
    "cmd": "newcontents = contents.replace('a', 'e').replace('s', '3')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "newcontents = VAR_STR.replace('VAR_STR', 'VAR_STR').replace('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Replace character 'a' with character 'e' and character 's' with character '3' in file `contents`. This requires reading the contents of the file into memory, replacing the specified characters, and writing the new contents back to the file."
}
{
    "question_id": "6612769-92",
    "nl": "unpack keys and values of a dictionary `d` into two lists",
    "cmd": "keys, values = zip(*list(d.items()))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "keys, values = zip(*list(VAR_STR.items()))",
    "cmd_name": "conala",
    "gpt35_response": "Unpack keys and values of a dictionary `d` into two lists. This requires using Python's built-in `zip()` function with `d.keys()` and `d.values()` as arguments."
}
{
    "question_id": "4644025-48",
    "nl": "Sort a list 'lst' in descending order.",
    "cmd": "sorted(lst, reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": "Sort a list 'lst' in descending order. This requires using the list object's `sort()` method and passing the argument `reverse=True`."
}
{
    "question_id": "28253102-16",
    "nl": "Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`",
    "cmd": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])",
    "oracle_man": [
        "numpy.reference.generated.numpy.dot"
    ],
    "canonical_cmd": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])",
    "cmd_name": "conala",
    "gpt35_response": "Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`. This requires using NumPy's `dot()` function on the two matrices."
}
{
    "question_id": "30651487-40",
    "nl": "get a random item from list `choices`",
    "cmd": "random_choice = random.choice(choices)",
    "oracle_man": [
        "python.library.random#random.choice"
    ],
    "canonical_cmd": "random_choice = random.choice(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "Get a random item from list `choices`. This requires using Python's built-in `random.choice()` function on the list `choices`."
}
{
    "question_id": "4901483-87",
    "nl": "apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`",
    "cmd": "{{my_variable | forceescape | linebreaks}}",
    "oracle_man": [],
    "canonical_cmd": "{{VAR_STR | VAR_STR | VAR_STR}}",
    "cmd_name": "conala",
    "gpt35_response": "Apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`. This requires calling the two filters sequentially on `my_variable` with Jinja's `|` operator."
}
{
    "question_id": "17888152-82",
    "nl": "parse string `s` to int when string contains a number",
    "cmd": "int(''.join(c for c in s if c.isdigit()))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.isdigit",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "int(''.join(c for c in VAR_STR if c.isdigit()))",
    "cmd_name": "conala",
    "gpt35_response": "Parse string `s` to int when string contains a number. This requires using Python's built-in `int()` function on `s` that should only contain numeric characters."
}
{
    "question_id": "16138015-5",
    "nl": "check if any elements in one list `list1` are in another list `list2`",
    "cmd": "len(set(list1).intersection(list2)) > 0",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#set",
        "python.library.stdtypes#frozenset.intersection"
    ],
    "canonical_cmd": "len(set(VAR_STR).intersection(VAR_STR)) > 0",
    "cmd_name": "conala",
    "gpt35_response": "Check if any elements in one list `list1` are in another list `list2`. This requires using Python's built-in `any()` function and a list comprehension that iterates over each element in `list1` and checks if it is in `list2`."
}
{
    "question_id": "11354544-77",
    "nl": "strip and split each line `line` on white spaces",
    "cmd": "line.strip().split(' ')",
    "oracle_man": [
        "python.library.stdtypes#str.strip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.strip().split(' ')",
    "cmd_name": "conala",
    "gpt35_response": "Strip and split each line `line` on white spaces. This requires using the string object's `strip()` and `split()` methods with a white-space delimiter on `line`."
}
{
    "question_id": "8215686-82",
    "nl": "Insert records in bulk from \"table1\" of \"master\" DB to \"table1\" of  sqlite3 `cursor` object",
    "cmd": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')",
    "oracle_man": [
        "python.library.sqlite3#sqlite3.Cursor.execute"
    ],
    "canonical_cmd": "VAR_STR.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')",
    "cmd_name": "conala",
    "gpt35_response": "Insert records in bulk from \"table1\" of \"master\" DB to \"table1\" of  SQLite3 `cursor` object. This requires using the SQLite3 `executemany()` function to execute an INSERT statement on \"table1\" of the target database using the rows from a SELECT statement on \"table1\" of the source database."
}
{
    "question_id": "17331290-99",
    "nl": "check if string `str` is palindrome",
    "cmd": "str(n) == str(n)[::-1]",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "VAR_STR(n) == VAR_STR(n)[::-1]",
    "cmd_name": "conala",
    "gpt35_response": "Check if string `str` is palindrome. This requires comparing `str` with its reversed form, using either string slicing or the built-in `reversed()` function."
}
{
    "question_id": "7458689-47",
    "nl": "Remove duplicates elements from list `sequences` and sort it in ascending order",
    "cmd": "sorted(set(itertools.chain.from_iterable(sequences)))",
    "oracle_man": [
        "python.library.itertools#itertools.chain.from_iterable",
        "python.library.functions#sorted",
        "python.library.stdtypes#set"
    ],
    "canonical_cmd": "sorted(set(itertools.chain.from_iterable(VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": "Remove duplicate elements from list `sequences` and sort it in ascending order. This requires using the built-in `set()` function to generate a set of unique elements from `sequences`, converting it back to a sorted list using the built-in `sorted()` function."
}
{
    "question_id": "8901996-28",
    "nl": "decode utf-8 code `x` into a raw unicode literal",
    "cmd": "print(str(x).decode('raw_unicode_escape'))",
    "oracle_man": [
        "python.library.stdtypes#str",
        "pandas.reference.api.pandas.series.str.decode"
    ],
    "canonical_cmd": "print(str(VAR_STR).decode('raw_unicode_escape'))",
    "cmd_name": "conala",
    "gpt35_response": "Decode utf-8 code `x` into a raw unicode literal. This requires using the built-in `decode()` function on `x` with the 'unicode-escape' argument."
}
{
    "question_id": "28767642-83",
    "nl": "Compare if each value in list `a` is less than respective index value in list `b`",
    "cmd": "all(i < j for i, j in zip(a, b))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(i < j for i, j in zip(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Compare if each value in list `a` is less than respective index value in list `b`. This requires using a list comprehension to iterate over the indices of `a` and calculate the comparison between each value in `a` and the corresponding value in `b`, then returning a list of Boolean values."
}
{
    "question_id": "575819-43",
    "nl": "create a list containing keys of dictionary `d` and sort it alphabetically",
    "cmd": "sorted(d, key=d.get)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=VAR_STR.get)",
    "cmd_name": "conala",
    "gpt35_response": "- Create a list containing keys of dictionary `d` and sort it alphabetically. This requires creating a list from dictionary `d`, sorting it alphabetically and saving it as a new list."
}
{
    "question_id": "577234-9",
    "nl": "extend dictionary `a` with key\/value pairs of dictionary `b`",
    "cmd": "a.update(b)",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Extend dictionary `a` with key\/value pairs of dictionary `b`. This requires extending dictionary `a` with the key\/value pairs from dictionary `b`."
}
{
    "question_id": "3559559-67",
    "nl": "Delete character \"M\" from a string `s` using python",
    "cmd": "s = s.replace('M', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = VAR_STR.replace('VAR_STR', '')",
    "cmd_name": "conala",
    "gpt35_response": " Delete character \"M\" from a string `s` using python. This requires identifying the index of character \"M\" in string `s` and removing it."
}
{
    "question_id": "3559559-70",
    "nl": "How to delete a character from a string using python?",
    "cmd": "newstr = oldstr.replace('M', '')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "newstr = oldstr.replace('M', '')",
    "cmd_name": "conala",
    "gpt35_response": " How to delete a character from a string using python? This question is unclear and needs additional information to provide an adequate answer."
}
{
    "question_id": "22904654-17",
    "nl": "save xlsxwriter file in 'app\/smth1\/smth2\/Expenses01.xlsx' path and assign to variable `workbook`",
    "cmd": "workbook = xlsxwriter.Workbook('app\/smth1\/smth2\/Expenses01.xlsx')",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = xlsxwriter.Workbook('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Save xlsxwriter file in 'app\/smth1\/smth2\/Expenses01.xlsx' path and assign to variable `workbook`. This requires creating the xlsxwriter workbook and saving it as `Expenses01.xlsx` in 'app\/smth1\/smth2' path."
}
{
    "question_id": "22904654-42",
    "nl": "save xlsxwriter file to 'C:\/Users\/Steven\/Documents\/demo.xlsx' path",
    "cmd": "workbook = xlsxwriter.Workbook('C:\/Users\/Steven\/Documents\/demo.xlsx')",
    "oracle_man": [],
    "canonical_cmd": "workbook = xlsxwriter.Workbook('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Save xlsxwriter file to 'C:\/Users\/Steven\/Documents\/demo.xlsx' path. This requires creating the xlsxwriter workbook and saving it as `demo.xlsx` in 'C:\/Users\/Steven\/Documents' path."
}
{
    "question_id": "4230000-64",
    "nl": "creating a 5x6 matrix filled with `None` and save it as `x`",
    "cmd": "x = [[None for _ in range(5)] for _ in range(6)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [[None for _ in range(5)] for _ in range(6)]",
    "cmd_name": "conala",
    "gpt35_response": " Creating a 5x6 matrix filled with `None` and save it as `x`. This requires creating a 5x6 matrix filled with `None` and saving it as variable `x`."
}
{
    "question_id": "17484631-67",
    "nl": "insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46",
    "cmd": "format(12345678.46, ',').replace(',', ' ').replace('.', ',')",
    "oracle_man": [
        "python.library.functions#format",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "format(12345678.46, 'VAR_STR').replace('VAR_STR', ' ').replace('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46. This requires identifying the index of the '.' in the string and, starting from the index of the '.', inserting a ' ' every three characters. Additionally, it requires replacing all ',' with '.'"
}
{
    "question_id": "23823206-75",
    "nl": "upload uploaded file from path '\/upload' to Google cloud storage 'my_bucket' bucket",
    "cmd": "upload_url = blobstore.create_upload_url('\/upload', gs_bucket_name='my_bucket')",
    "oracle_man": [],
    "canonical_cmd": "upload_url = blobstore.create_upload_url('VAR_STR', gs_bucket_name='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Upload uploaded file from path '\/upload' to Google cloud storage 'my_bucket' bucket. This requires specifying the path of the upload file and the location (bucket) where the file is to be uploaded."
}
{
    "question_id": "1908741-46",
    "nl": "Group the values from django model `Article` with group by value `pub_date` and annotate by `title`",
    "cmd": "Article.objects.values('pub_date').annotate(article_count=Count('title'))",
    "oracle_man": [
        "python.library.stdtypes#dict.values",
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "VAR_STR.objects.values('VAR_STR').annotate(article_count=Count('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Group the values from django model `Article` with group by value `pub_date` and annotate by `title`. This requires grouping the values from `Article` model by the `pub_date` value and annotating by `title`."
}
{
    "question_id": "16228248-100",
    "nl": "Retrieve list of values from dictionary 'd'",
    "cmd": "list(d.values())",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "list(VAR_STR.values())",
    "cmd_name": "conala",
    "gpt35_response": " Retrieve list of values from dictionary 'd'. This requires retrieving all values from dictionary `d` and saving them as a list."
}
{
    "question_id": "7522533-5",
    "nl": "Convert a string into a list",
    "cmd": "list('hello')",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list('hello')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string into a list. This requires taking the string and splitting it into a list of individual characters."
}
{
    "question_id": "4843173-34",
    "nl": "check if type of variable `s` is a string",
    "cmd": "isinstance(s, str)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, str)",
    "cmd_name": "conala",
    "gpt35_response": " Check if type of variable `s` is a string. This requires checking the type of `s` to see if it is a string."
}
{
    "question_id": "4843173-74",
    "nl": "check if type of a variable `s` is string",
    "cmd": "isinstance(s, str)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, str)",
    "cmd_name": "conala",
    "gpt35_response": " Check if type of a variable `s` is string. This task is the same as the previous one and the post-enhancement is the same."
}
{
    "question_id": "1093322-99",
    "nl": "check python version",
    "cmd": "sys.version",
    "oracle_man": [],
    "canonical_cmd": "sys.version",
    "cmd_name": "conala",
    "gpt35_response": " Check python version. This requires accessing the system to check the currently installed python version."
}
{
    "question_id": "1093322-38",
    "nl": "check python version",
    "cmd": "sys.version_info",
    "oracle_man": [],
    "canonical_cmd": "sys.version_info",
    "cmd_name": "conala",
    "gpt35_response": " Check python version. This requires accessing the system to check the currently installed python version."
}
{
    "question_id": "8916302-70",
    "nl": "select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.",
    "cmd": "df[(df['A'] > 1) | (df['B'] < -1)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[(VAR_STR['VAR_STR'] > 1) | (VAR_STR['VAR_STR'] < -1)]",
    "cmd_name": "conala",
    "gpt35_response": " Select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'. This requires filtering the rows of the `DataFrame` where the condition is validated."
}
{
    "question_id": "14859458-75",
    "nl": "check if all values in the columns of a numpy matrix `a` are same",
    "cmd": "np.all(a == a[(0), :], axis=0)",
    "oracle_man": [
        "numpy.reference.generated.numpy.all"
    ],
    "canonical_cmd": "np.all(VAR_STR == VAR_STR[(0), :], axis=0)",
    "cmd_name": "conala",
    "gpt35_response": " Check if all values in the columns of a numpy matrix `a` are same. This requires comparing all values in the columns of the matrix and checking if they are all identical."
}
{
    "question_id": "2951701-85",
    "nl": "replace `0` with `2` in the list `[0, 1, 0, 3]`",
    "cmd": "[(a if a else 2) for a in [0, 1, 0, 3]]",
    "oracle_man": [],
    "canonical_cmd": "[(a if a else 2) for a in [VAR_STR]]",
    "cmd_name": "conala",
    "gpt35_response": " Replace `0` with `2` in the list `[0, 1, 0, 3]`. This requires iterating through the list and replacing all 0's with 2's."
}
{
    "question_id": "22712292-60",
    "nl": "Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`",
    "cmd": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])",
    "oracle_man": [
        "numpy.reference.generated.numpy.savez"
    ],
    "canonical_cmd": "VAR_STR.savez(VAR_STR, *[getarray[0], getarray[1], getarray[8]])",
    "cmd_name": "conala",
    "gpt35_response": " Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`. This requires creating a temporary file `tmp` and saving the values at index 0, index 1 and index 8 of array `np` to the file."
}
{
    "question_id": "930397-17",
    "nl": "Getting the last element of list `some_list`",
    "cmd": "some_list[(-1)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-1]",
    "cmd_name": "conala",
    "gpt35_response": "- Get the last element of list `some_list`. This requires accessing the element at index `len(some_list)-1`."
}
{
    "question_id": "930397-2",
    "nl": "Getting the second to last element of list `some_list`",
    "cmd": "some_list[(-2)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-2]",
    "cmd_name": "conala",
    "gpt35_response": " Get the second to last element of list `some_list`. This requires accessing the element at index `len(some_list)-2`."
}
{
    "question_id": "930397-12",
    "nl": "gets the `n` th-to-last element in list `some_list`",
    "cmd": "some_list[(- n)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Gets the `n` th-to-last element in list `some_list`. This requires accessing the element at index `len(some_list)-(n+1)`."
}
{
    "question_id": "930397-75",
    "nl": "get the last element in list `alist`",
    "cmd": "alist[(-1)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-1]",
    "cmd_name": "conala",
    "gpt35_response": " Get the last element in list `alist`. This requires accessing the element at index `len(alist)-1`."
}
{
    "question_id": "930397-92",
    "nl": "get the last element in list `astr`",
    "cmd": "astr[(-1)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[-1]",
    "cmd_name": "conala",
    "gpt35_response": " Get the last element in list `astr`. This requires accessing the character at index `len(astr)-1`."
}
{
    "question_id": "30747705-14",
    "nl": "Produce a string that is suitable as Unicode literal from string 'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'",
    "cmd": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.encode().decode('unicode-escape')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".encode().decode('unicode-escape')",
    "cmd_name": "conala",
    "gpt35_response": " Produce a string that is suitable as Unicode literal from string 'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'. This requires replacing the escape sequences with their corresponding Unicode literal, resulting in 'M\\u0026M\\u0027s'."
}
{
    "question_id": "30747705-97",
    "nl": "Parse a unicode string `M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s`",
    "cmd": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".decode('unicode-escape')",
    "cmd_name": "conala",
    "gpt35_response": " Parse a unicode string `M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s`. This requires replacing the Unicode literals with their corresponding characters, resulting in 'M&M's'."
}
{
    "question_id": "11692613-80",
    "nl": "sum values in list of dictionaries `example_list` with key 'gold'",
    "cmd": "sum(item['gold'] for item in example_list)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(item['VAR_STR'] for item in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum values in list of dictionaries `example_list` with key 'gold'. This requires iterating through the list of dictionaries, accessing the value with key 'gold', and adding it to a running total."
}
{
    "question_id": "11692613-33",
    "nl": "get a sum of all values from key `gold` in a list of dictionary `example_list`",
    "cmd": "sum([item['gold'] for item in example_list])",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum([item['VAR_STR'] for item in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Get a sum of all values from key `gold` in a list of dictionary `example_list`. This requires using the `sum` function along with a list comprehension to extract the values with key 'gold' from each dictionary in the list."
}
{
    "question_id": "11692613-31",
    "nl": "Get all the values in key `gold` summed from a list of dictionary `myLIst`",
    "cmd": "sum(item['gold'] for item in myLIst)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(item['VAR_STR'] for item in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get all the values in key `gold` summed from a list of dictionary `myList`. This requires using the `sum` function along with the `map` function to extract the values with key 'gold' from each dictionary in the list."
}
{
    "question_id": "17097236-34",
    "nl": "replace '-' in pandas dataframe `df` with `np.nan`",
    "cmd": "df.replace('-', np.nan)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "VAR_STR.replace('VAR_STR', np.nan)",
    "cmd_name": "conala",
    "gpt35_response": " Replace '-' in pandas dataframe `df` with `np.nan`. This requires using the `replace` function of the pandas dataframe with the parameters `to_replace='-', value=np.nan`."
}
{
    "question_id": "5255657-81",
    "nl": "disable logging while running unit tests in python django",
    "cmd": "logging.disable(logging.CRITICAL)",
    "oracle_man": [
        "python.library.logging#logging.disable"
    ],
    "canonical_cmd": "logging.disable(logging.CRITICAL)",
    "cmd_name": "conala",
    "gpt35_response": " Disable logging while running unit tests in python django. This requires configuring the logging settings to disable logging during the unit tests."
}
{
    "question_id": "18524112-81",
    "nl": "normalize the dataframe `df` along the rows",
    "cmd": "np.sqrt(np.square(df).sum(axis=1))",
    "oracle_man": [
        "numpy.reference.generated.numpy.square",
        "numpy.reference.generated.numpy.sqrt",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "np.sqrt(np.square(VAR_STR).sum(axis=1))",
    "cmd_name": "conala",
    "gpt35_response": " Normalize the dataframe `df` along the rows. This requires using the `apply` function of the pandas dataframe with the parameter `axis=1` to apply the normalization function to each row."
}
{
    "question_id": "7371935-12",
    "nl": "Sort a string `s` in lexicographic order",
    "cmd": "sorted(s, key=str.upper)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=str.upper)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a string `s` in lexicographic order. This requires using the `sorted` function to sort the characters of the string, resulting in a sorted list of the characters."
}
{
    "question_id": "7371935-89",
    "nl": "sort string `s` in lexicographic order",
    "cmd": "sorted(sorted(s), key=str.upper)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(sorted(VAR_STR), key=str.upper)",
    "cmd_name": "conala",
    "gpt35_response": " Sort string `s` in lexicographic order. This requires using the `sorted` function to sort the characters of the string, resulting in a sorted list of the characters."
}
{
    "question_id": "7371935-26",
    "nl": "get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first",
    "cmd": "sorted(s, key=str.lower)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=str.lower)",
    "cmd_name": "conala",
    "gpt35_response": " Get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first. This requires using the `sorted` function with the parameter `key=str.lower` to sort the characters of the string in a case-insensitive manner."
}
{
    "question_id": "15666169-3",
    "nl": "insert a new field 'geolocCountry' on an existing document  'b' using pymongo",
    "cmd": "db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})",
    "oracle_man": [
        "python.library.turtle#turtle.update"
    ],
    "canonical_cmd": "db.Doc.update({'_id': VAR_STR['_id']}, {'$set': {'VAR_STR': myGeolocCountry}})",
    "cmd_name": "conala",
    "gpt35_response": " Insert a new field 'geolocCountry' on an existing document  'b' using pymongo. This requires using the `update_one` function of pymongo with the parameter `{'$set': {'geolocCountry': 'value'}}` to insert the new field."
}
{
    "question_id": "2527892-27",
    "nl": "pars a string 'http:\/\/example.org\/#comments' to extract hashtags into an array",
    "cmd": "re.findall('#(\\\\w+)', 'http:\/\/example.org\/#comments')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('#(\\\\w+)', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Parse a string 'http:\/\/example.org\/#comments' to extract hashtags into an array. This requires using a regular expression to match the hashtags in the string and storing them in an array."
}
{
    "question_id": "34438901-83",
    "nl": "assign the index of the last occurence of `x` in list `s` to the variable `last`",
    "cmd": "last = len(s) - s[::-1].index(x) - 1",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#str.index"
    ],
    "canonical_cmd": "VAR_STR = len(VAR_STR) - VAR_STR[::-1].index(VAR_STR) - 1",
    "cmd_name": "conala",
    "gpt35_response": " Assign the index of the last occurrence of `x` in list `s` to the variable `last`. This requires using the `index` function of the list with the parameter `x` and subtracting the result from `len(s)-1`."
}
{
    "question_id": "29530232-39",
    "nl": "check if datafram `df` has any NaN vlaues",
    "cmd": "df.isnull().values.any()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.isnull",
        "pandas.reference.api.pandas.dataframe.any"
    ],
    "canonical_cmd": "VAR_STR.isnull().values.any()",
    "cmd_name": "conala",
    "gpt35_response": " Check if dataframe `df` has any NaN values. This requires using the `isnull` function of the pandas dataframe and checking if any elements are `True`."
}
{
    "question_id": "9497290-5",
    "nl": "sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`",
    "cmd": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum([sum(x) for x in [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": "- Sum all elements of two-dimensional list `[[1, 2, 3, 4], [2, 4, 5, 6]]`. This requires accessing each element of the list and adding them together."
}
{
    "question_id": "29035168-66",
    "nl": "Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting",
    "cmd": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"Hello {user[name]}\"\"\".format(**{VAR_STR})",
    "cmd_name": "conala",
    "gpt35_response": " Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting. This requires accessing the value for the key 'name' and using string formatting to insert it into a string to be printed."
}
{
    "question_id": "4112265-53",
    "nl": "zip lists `[1, 2], [3, 4], [5, 6]` in a list",
    "cmd": "zip(*[[1, 2], [3, 4], [5, 6]])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*[[VAR_STR]])",
    "cmd_name": "conala",
    "gpt35_response": " Zip lists `[1, 2], [3, 4], [5, 6]` in a list. This requires accessing each list and using the `zip()` function to combine them into a list of tuples."
}
{
    "question_id": "4112265-19",
    "nl": "zip lists in a list [[1, 2], [3, 4], [5, 6]]",
    "cmd": "zip(*[[1, 2], [3, 4], [5, 6]])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*[[1, 2], [3, 4], [5, 6]])",
    "cmd_name": "conala",
    "gpt35_response": " Zip lists in a list `[[1, 2], [3, 4], [5, 6]]`. This requires accessing each inner list and using the `zip()` function to combine them into a list of tuples."
}
{
    "question_id": "21188504-9",
    "nl": "Add 100 to each element of column \"x\" in dataframe `a`",
    "cmd": "a['x'].apply(lambda x, y: x + y, args=(100,))",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.apply"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].apply(lambda VAR_STR, y: VAR_STR + y, args=(100,))",
    "cmd_name": "conala",
    "gpt35_response": " Add 100 to each element of column \"x\" in dataframe `a`. This requires accessing the column \"x\" of the dataframe and adding 100 to each element."
}
{
    "question_id": "1397827-4",
    "nl": "get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`",
    "cmd": "[s.strip() for s in input().split(',')]",
    "oracle_man": [
        "python.library.functions#input",
        "python.library.stdtypes#str.strip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[VAR_STR.strip() for VAR_STR in input().split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`. This requires accessing the user input string, splitting it into a list using the comma as a delimiter, and then stripping white space from each element in the resulting list."
}
{
    "question_id": "4267019-49",
    "nl": "encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8",
    "cmd": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"X\u00c3\u00bcY\u00c3\u009f\"\"\".encode('raw_unicode_escape').decode('utf-8')",
    "cmd_name": "conala",
    "gpt35_response": " Encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8. This requires encoding the string using the `unicode()` function and then decoding it using the `decode()` method with utf-8 as the argument."
}
{
    "question_id": "4830535-51",
    "nl": "Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`",
    "cmd": "{{car.date_of_manufacture | datetime}}",
    "oracle_man": [],
    "canonical_cmd": "{{car.date_of_manufacture | VAR_STR}}",
    "cmd_name": "conala",
    "gpt35_response": " Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`. This requires accessing the `date_of_manufacture` attribute of the `car` object and using the Jinja `datetime` filter to format it."
}
{
    "question_id": "4830535-54",
    "nl": "Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'",
    "cmd": "{{car.date_of_manufacture.strftime('%Y-%m-%d')}}",
    "oracle_man": [
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "{{VAR_STR.VAR_STR.strftime('VAR_STR')}}",
    "cmd_name": "conala",
    "gpt35_response": " Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'. This requires accessing the `date_of_manufacture` attribute of the `car` object and using the `strftime()` method to format it as a string."
}
{
    "question_id": "4170655-54",
    "nl": "convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'",
    "cmd": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.strptime('2010-11-13 10:33:54.227806', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'. This requires using the `strptime()` method to convert the string to a DateTime object with the specified format."
}
{
    "question_id": "34962104-52",
    "nl": "Pandas: How can I use the apply() function for a single column?",
    "cmd": "df['a'] = df['a'].apply(lambda x: x + 1)",
    "oracle_man": [
        "pandas.reference.api.pandas.series.apply"
    ],
    "canonical_cmd": "df['a'] = df['a'].apply(lambda x: x + 1)",
    "cmd_name": "conala",
    "gpt35_response": " Pandas: How can I use the `apply()` function for a single column? This requires accessing a single column of a dataframe and using the `apply()` method with a specified function to apply to each element in the column."
}
{
    "question_id": "11479392-70",
    "nl": "Get a list `myList` from 1 to 10",
    "cmd": "myList = [i for i in range(10)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [i for i in range(10)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list `myList` from 1 to 10. This requires using the `range()` function with specified arguments to create the list."
}
{
    "question_id": "9039961-94",
    "nl": "find the mean of elements in list `l`",
    "cmd": "sum(l) \/ float(len(l))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#float",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(VAR_STR) \/ float(len(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Find the mean of elements in list `l`. This requires accessing each element in the list and calculating the mean."
}
{
    "question_id": "34410358-72",
    "nl": "split string 'happy_hats_for_cats' using string '_for_'",
    "cmd": "re.split('_for_', 'happy_hats_for_cats')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string 'happy_hats_for_cats' using string '_for_'. This requires using the `split()` method with the specified delimiter to split the string into a list."
}
{
    "question_id": "34410358-16",
    "nl": "Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for'",
    "cmd": "re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('_(?:for|or|and)_', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or', or 'for'. This requires using the `split()` method with a regular expression pattern to split the string into a list based on the specified keywords."
}
{
    "question_id": "34410358-18",
    "nl": "Split a string `l` by multiple words `for` or `or` or `and`",
    "cmd": "[re.split('_(?:f?or|and)_', s) for s in l]",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "[re.split('_(?:f?or|and)_', s) for s in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `l` by multiple words `for` or `or` or `and`. This requires using the `split()` method with a regular expression pattern to split the string into a list based on multiple specified keywords."
}
{
    "question_id": "647515-26",
    "nl": "get the path of Python executable under windows",
    "cmd": "os.path.dirname(sys.executable)",
    "oracle_man": [
        "python.library.os.path#os.path.dirname"
    ],
    "canonical_cmd": "os.path.dirname(sys.executable)",
    "cmd_name": "conala",
    "gpt35_response": " Get the path of Python executable under windows. This requires using the `sys` module to access the path of the Python executable."
}
{
    "question_id": "18391059-36",
    "nl": "how to format a list of arguments `my_args` into a string",
    "cmd": "'Hello %s' % ', '.join(my_args)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "'Hello %s' % ', '.join(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " How to format a list of arguments `my_args` into a string. This requires using string formatting and the `format()` method with the specified arguments to create a formatted string."
}
{
    "question_id": "2990121-19",
    "nl": "loop through 0 to 10 with step 2",
    "cmd": "for i in range(0, 10, 2):\n    pass",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "for i in range(0, 10, 2):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Loop through 0 to 10 with step 2. This requires using the `range()` function with specified arguments to loop through the specified range with the specified step size."
}
{
    "question_id": "2990121-50",
    "nl": "loop through `mylist` with step 2",
    "cmd": "for i in mylist[::2]:\n    pass",
    "oracle_man": [],
    "canonical_cmd": "for i in VAR_STR[::2]:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Loop through `mylist` with step 2. This requires using the `enumerate()` function and specifying a step of 2 to loop through every other element in the `mylist` list."
}
{
    "question_id": "8970524-33",
    "nl": "search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'",
    "cmd": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('VAR_STR', 'VAR_STR', 1)",
    "cmd_name": "conala",
    "gpt35_response": "- Search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'. This requires searching for the delimiter '(ddd)' in the string 'aaa bbb ccc ddd eee fff' and splitting the string based on the delimiter."
}
{
    "question_id": "8970524-8",
    "nl": "regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'",
    "cmd": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('VAR_STR', 'VAR_STR', 1)",
    "cmd_name": "conala",
    "gpt35_response": " Regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'. This requires using regular expressions to search for the pattern '(d(d)d)' in the string 'aaa bbb ccc ddd eee fff' and splitting the string based on the pattern."
}
{
    "question_id": "20876077-34",
    "nl": "unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`",
    "cmd": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])",
    "cmd_name": "conala",
    "gpt35_response": " Unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`. This requires unescaping special characters in the array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']` without splitting any data within the strings."
}
{
    "question_id": "3486384-86",
    "nl": "output first 100 characters in a string `my_string`",
    "cmd": "print(my_string[0:100])",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR[0:100])",
    "cmd_name": "conala",
    "gpt35_response": " Output first 100 characters in a string `my_string`. This requires selecting the first 100 characters of the string `my_string`."
}
{
    "question_id": "19095796-93",
    "nl": "print backslash",
    "cmd": "print('\\\\')",
    "oracle_man": [],
    "canonical_cmd": "print('\\\\')",
    "cmd_name": "conala",
    "gpt35_response": " Print backslash. This requires printing the backslash character."
}
{
    "question_id": "42100344-66",
    "nl": "convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters",
    "cmd": "pd.to_datetime(df.ID.str[1:-3])",
    "oracle_man": [
        "pandas.reference.api.pandas.to_datetime"
    ],
    "canonical_cmd": "pd.to_datetime(VAR_STR.VAR_STR.str[1:-3])",
    "cmd_name": "conala",
    "gpt35_response": " Convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters. This requires removing the first and last 3 letters from all values in column `ID` of dataframe `df`, and then converting each value to a datetime object."
}
{
    "question_id": "15451958-12",
    "nl": "create 3 by 3 matrix of random numbers",
    "cmd": "numpy.random.random((3, 3))",
    "oracle_man": [],
    "canonical_cmd": "numpy.random.random((3, 3))",
    "cmd_name": "conala",
    "gpt35_response": " Create 3 by 3 matrix of random numbers. This requires generating 9 random numbers and arranging them in a 3 by 3 matrix."
}
{
    "question_id": "1482308-10",
    "nl": "create a list with permutations of string 'abcd'",
    "cmd": "list(powerset('abcd'))",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(powerset('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Create a list with permutations of string 'abcd'. This requires generating all possible permutations of the string 'abcd' and appending them to a list."
}
{
    "question_id": "13331419-85",
    "nl": "prepend string 'hello' to all items in list 'a'",
    "cmd": "['hello{0}'.format(i) for i in a]",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "['hello{0}'.format(i) for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Prepend string 'hello' to all items in list 'a'. This requires iterating through each item in list 'a' and adding the string 'hello' to the beginning of the item."
}
{
    "question_id": "16114333-7",
    "nl": "get the opposite diagonal of a numpy array `array`",
    "cmd": "np.diag(np.rot90(array))",
    "oracle_man": [
        "numpy.reference.generated.numpy.rot90",
        "numpy.reference.generated.numpy.diag"
    ],
    "canonical_cmd": "np.diag(np.rot90(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get the opposite diagonal of a numpy array `array`. This requires selecting the diagonal elements of the numpy array `array` in reverse order."
}
{
    "question_id": "29565452-57",
    "nl": "get the average of a list values for each key in dictionary `d`)",
    "cmd": "[(i, sum(j) \/ len(j)) for i, j in list(d.items())]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#sum",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[(i, sum(j) \/ len(j)) for i, j in list(VAR_STR.items())]",
    "cmd_name": "conala",
    "gpt35_response": " Get the average of a list values for each key in dictionary `d`. This requires iterating through each key in dictionary `d`, selecting the values associated with each key, and calculating the average of the values for that key."
}
{
    "question_id": "29945684-49",
    "nl": "get domain\/host name from request object in Django",
    "cmd": "request.META['HTTP_HOST']",
    "oracle_man": [],
    "canonical_cmd": "request.META['HTTP_HOST']",
    "cmd_name": "conala",
    "gpt35_response": " Get domain\/host name from request object in Django. This requires accessing the request object's `META` dictionary and extracting the value associated with the key `'HTTP_HOST'`."
}
{
    "question_id": "4768151-85",
    "nl": "sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order",
    "cmd": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: (x.VAR_STR, x.VAR_STR), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order. This requires sorting the list `bar` first by each element's attribute `attrb2` in reverse order and then by attribute `attrb1` in reverse order."
}
{
    "question_id": "10541640-99",
    "nl": "Represent DateTime object '10\/05\/2012' with format '%d\/%m\/%Y' into format '%Y-%m-%d'",
    "cmd": "datetime.datetime.strptime('10\/05\/2012', '%d\/%m\/%Y').strftime('%Y-%m-%d')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.strptime('VAR_STR', 'VAR_STR').strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Represent DateTime object '10\/05\/2012' with format '%d\/%m\/%Y' into format '%Y-%m-%d'. This requires converting the DateTime object '10\/05\/2012' from format '%d\/%m\/%Y' to format '%Y-%m-%d'."
}
{
    "question_id": "32874539-7",
    "nl": "find a tag `option` whose `value` attribute is `state` in selenium",
    "cmd": "driver.find_element_by_xpath(\"\/\/option[@value='\" + state + \"']\").click()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_xpath(\"\/\/option[@value='\" + VAR_STR + \"']\").click()",
    "cmd_name": "conala",
    "gpt35_response": " Find a tag `option` whose `value` attribute is `state` in selenium. This requires searching for the tag `option` whose `value` attribute is `state`, using the Selenium web driver."
}
{
    "question_id": "2045175-76",
    "nl": "write a regex pattern to match even number of letter `A`",
    "cmd": "re.compile('^([^A]*)AA([^A]|AA)*$')",
    "oracle_man": [
        "python.library.re#re.compile"
    ],
    "canonical_cmd": "re.compile('^([^A]*)AA([^A]|AA)*$')",
    "cmd_name": "conala",
    "gpt35_response": " Write a regex pattern to match even number of letter `A`. This requires writing a regular expression pattern that matches all strings containing an even number of letter `A`."
}
{
    "question_id": "34776651-9",
    "nl": "group rows of pandas dataframe `df` with same 'id'",
    "cmd": "df.groupby('id').agg(lambda x: x.tolist())",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.agg",
        "pandas.reference.api.pandas.series.tolist"
    ],
    "canonical_cmd": "VAR_STR.groupby('VAR_STR').agg(lambda x: x.tolist())",
    "cmd_name": "conala",
    "gpt35_response": " Group rows of pandas dataframe `df` with same 'id'. This requires grouping all rows of the pandas dataframe `df` that have the same 'id' value."
}
{
    "question_id": "3207219-21",
    "nl": "list all files of a directory `mypath`",
    "cmd": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]",
    "oracle_man": [
        "python.library.os#os.listdir",
        "python.library.tarfile#tarfile.TarInfo.isfile",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "onlyfiles = [f for f in listdir(VAR_STR) if isfile(join(VAR_STR, f))]",
    "cmd_name": "conala",
    "gpt35_response": " List all files of a directory `mypath`. This requires accessing the directory `mypath` and listing all files within it."
}
{
    "question_id": "3207219-76",
    "nl": "list all files of a directory `mypath`",
    "cmd": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break",
    "oracle_man": [
        "python.library.os#os.walk",
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "f = []\nfor dirpath, dirnames, filenames in walk(VAR_STR):\n    f.extend(filenames)\n    break",
    "cmd_name": "conala",
    "gpt35_response": " List all files of a directory `mypath`. This requires accessing the directory `mypath` and listing all files within it."
}
{
    "question_id": "3207219-42",
    "nl": "list all \".txt\" files of a directory \"\/home\/adam\/\"",
    "cmd": "print(glob.glob('\/home\/adam\/*.txt'))",
    "oracle_man": [],
    "canonical_cmd": "print(glob.glob('\/home\/adam\/*.txt'))",
    "cmd_name": "conala",
    "gpt35_response": " List all \".txt\" files of a directory \"\/home\/adam\/\". This requires accessing the directory \"\/home\/adam\/\" and listing all files within it that have the file extension \".txt\"."
}
{
    "question_id": "3207219-15",
    "nl": "list all files of a directory \"somedirectory\"",
    "cmd": "os.listdir('somedirectory')",
    "oracle_man": [
        "python.library.os#os.listdir"
    ],
    "canonical_cmd": "os.listdir('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "- List all files of directory `somedirectory`. This requires using the appropriate function to list files in directory `somedirectory`."
}
{
    "question_id": "12557612-50",
    "nl": "call parent class `Instructor` of child class constructor",
    "cmd": "super(Instructor, self).__init__(name, year)",
    "oracle_man": [
        "python.library.functions#super",
        "python.library.logging#logging.Handler.__init__"
    ],
    "canonical_cmd": "super(VAR_STR, self).__init__(name, year)",
    "cmd_name": "conala",
    "gpt35_response": " Call parent class `Instructor` of child class constructor. This requires calling the constructor of parent class `Instructor` from the constructor of the child class."
}
{
    "question_id": "2416823-80",
    "nl": "Get all the texts without tags from beautiful soup object `soup`",
    "cmd": "\"\"\"\"\"\".join(soup.findAll(text=True))",
    "oracle_man": [
        "python.library.re#re.findall",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(VAR_STR.findAll(text=True))",
    "cmd_name": "conala",
    "gpt35_response": " Get all the texts without tags from Beautiful Soup object `soup`. This requires using the appropriate Beautiful Soup function to extract the text from the `soup` object without tags."
}
{
    "question_id": "2389846-77",
    "nl": "format a string `num` using string formatting",
    "cmd": "\"\"\"{0:.3g}\"\"\".format(num)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"{0:.3g}\"\"\".format(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Format string `num` using string formatting. This requires using the appropriate string method or function to format the string `num`."
}
{
    "question_id": "9257094-100",
    "nl": "change string `s` to upper case",
    "cmd": "s.upper()",
    "oracle_man": [
        "python.library.stdtypes#str.upper"
    ],
    "canonical_cmd": "VAR_STR.upper()",
    "cmd_name": "conala",
    "gpt35_response": " Change string `s` to upper case. This requires using the appropriate string method to change all characters in `s` to upper case."
}
{
    "question_id": "40987319-40",
    "nl": "extract the first four rows of the column `ID` from a pandas dataframe `df`",
    "cmd": "df.groupby('ID').head(4)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.head"
    ],
    "canonical_cmd": "VAR_STR.groupby('VAR_STR').head(4)",
    "cmd_name": "conala",
    "gpt35_response": " Extract the first four rows of the column `ID` from the pandas dataframe `df`. This requires using the appropriate pandas function to extract the first four rows of the `ID` column from the `df` dataframe."
}
{
    "question_id": "42548362-27",
    "nl": "Convert escaped utf string to utf string in `your string`",
    "cmd": "print('your string'.decode('string_escape'))",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "print('VAR_STR'.decode('string_escape'))",
    "cmd_name": "conala",
    "gpt35_response": " Convert escaped UTF string to UTF string in `your string`. This requires using the appropriate function to convert escaped UTF string to UTF string in `your string`."
}
{
    "question_id": "17713873-84",
    "nl": "sort list `['14:10:01', '03:12:08']`",
    "cmd": "sorted(['14:10:01', '03:12:08'])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `['14:10:01', '03:12:08']`. This requires using the appropriate function to sort the list in ascending or descending order."
}
{
    "question_id": "35269374-86",
    "nl": "count the number of True values associated with key 'success' in dictionary `d`",
    "cmd": "sum(1 if d['success'] else 0 for d in s)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(1 if VAR_STR['VAR_STR'] else 0 for VAR_STR in s)",
    "cmd_name": "conala",
    "gpt35_response": " Count the number of True values associated with key 'success' in dictionary `d`. This requires iterating through the `d` dictionary and counting the number of times the value associated with key 'success' is True."
}
{
    "question_id": "35269374-25",
    "nl": "get the sum of values associated with the key \u2018success\u2019 for a list of dictionaries `s`",
    "cmd": "sum(d['success'] for d in s)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(d['success'] for d in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the sum of values associated with the key \u2018success\u2019 for a list of dictionaries `s`. This requires iterating through each dictionary in the `s` list and getting the sum of the values associated with the key 'success'."
}
{
    "question_id": "13093727-42",
    "nl": "replace unicode character '\\u2022' in string 'str' with '*'",
    "cmd": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#str.replace",
        "pandas.reference.api.pandas.series.str.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('utf-8').replace('VAR_STR', 'VAR_STR').encode('utf-8')",
    "cmd_name": "conala",
    "gpt35_response": " Replace unicode character '\\u2022' in string 'str' with '*'. This requires using the appropriate string method to replace all occurrences of the specified unicode character in the string with '*'."
}
{
    "question_id": "13093727-83",
    "nl": "replace unicode characters ''\\u2022' in string 'str' with '*'",
    "cmd": "str.decode('utf-8').replace('\\u2022', '*')",
    "oracle_man": [
        "python.library.stdtypes#str.replace",
        "pandas.reference.api.pandas.series.str.decode"
    ],
    "canonical_cmd": "str.decode('utf-8').replace('\u2022', '*')",
    "cmd_name": "conala",
    "gpt35_response": " Replace unicode characters '\\u2022' in string 'str' with '*'. This requires using the appropriate string method to replace all occurrences of the specified unicode characters in the string with '*'."
}
{
    "question_id": "4362586-5",
    "nl": "sum a list of numbers `list_of_nums`",
    "cmd": "sum(list_of_nums)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum a list of numbers `list_of_nums`. This requires using the appropriate function to sum all the numbers in `list_of_nums`."
}
{
    "question_id": "41246071-1",
    "nl": "Spawn a process to run python script `myscript.py` in C++",
    "cmd": "system('python myscript.py')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "system('python myscript.py')",
    "cmd_name": "conala",
    "gpt35_response": " Spawn a process to run python script `myscript.py` in C++. This requires using the appropriate C++ function or library to initiate a new process that runs the Python script `myscript.py`."
}
{
    "question_id": "1348026-75",
    "nl": "create file 'x' if file 'x' does not exist",
    "cmd": "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)",
    "oracle_man": [
        "python.library.os#os.open"
    ],
    "canonical_cmd": "fd = os.open('VAR_STR', os.O_WRONLY | os.O_CREAT | os.O_EXCL)",
    "cmd_name": "conala",
    "gpt35_response": " Create file 'x' if file 'x' does not exist. This requires using the appropriate function to check if file 'x' exists and, if it does not exist, create the file."
}
{
    "question_id": "6429638-16",
    "nl": "split a string `s` into integers",
    "cmd": "l = (int(x) for x in s.split())",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "l = (int(x) for x in VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` into integers. This requires using the appropriate function to split the string into a list of strings, and then converting each string to an integer."
}
{
    "question_id": "6429638-63",
    "nl": "split a string `42 0` by white spaces.",
    "cmd": "\"\"\"42 0\"\"\".split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string '42 0' by white spaces. This requires using the appropriate function to split the string '42 0' into a list of strings using white space as the delimiter."
}
{
    "question_id": "6429638-62",
    "nl": "How to split a string into integers in Python?",
    "cmd": "map(int, '42 0'.split())",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "map(int, '42 0'.split())",
    "cmd_name": "conala",
    "gpt35_response": " How to split a string into integers in Python? This requires using the appropriate function to split the string into a list of strings, and then converting each string to an integer."
}
{
    "question_id": "973473-86",
    "nl": "getting a list of all subdirectories in the directory `directory`",
    "cmd": "os.walk(directory)",
    "oracle_man": [
        "python.library.os#os.walk"
    ],
    "canonical_cmd": "os.walk(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Getting a list of all subdirectories in the directory `directory`. This requires using the appropriate function to list all directories located within the `directory` and then filtering out any non-directory objects. "
}
{
    "question_id": "973473-48",
    "nl": "get a list of all subdirectories in the directory `directory`",
    "cmd": "[x[0] for x in os.walk(directory)]",
    "oracle_man": [
        "python.library.os#os.walk"
    ],
    "canonical_cmd": "[x[0] for x in os.walk(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of all subdirectories in the directory `directory`. This requires using the appropriate function to list all directories located within the `directory` and then filtering out any non-directory objects."
}
{
    "question_id": "579856-6",
    "nl": "combine two sequences into a dictionary",
    "cmd": "dict(zip(keys, values))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(zip(keys, values))",
    "cmd_name": "conala",
    "gpt35_response": "- Combine two sequences into a dictionary. This requires creating an empty dictionary, zipping the two sequences together, and then adding the resulting key-value pairs to the dictionary."
}
{
    "question_id": "13860026-30",
    "nl": "update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`",
    "cmd": "mydic.update({i: o['name']})",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update({VAR_STR: VAR_STR['VAR_STR']})",
    "cmd_name": "conala",
    "gpt35_response": " Update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`. This requires iterating over the keys in the dictionary `o`, creating a new key-value pair for each key `i` in `mydict` with value from `o` and updating `mydict`."
}
{
    "question_id": "9759820-64",
    "nl": "get a list of variables from module 'adfix.py' in current module.",
    "cmd": "print([item for item in dir(adfix) if not item.startswith('__')])",
    "oracle_man": [
        "python.library.functions#dir",
        "python.library.stdtypes#str.startswith"
    ],
    "canonical_cmd": "print([item for item in dir(adfix) if not item.startswith('__')])",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of variables from module 'adfix.py' in current module. This requires importing module 'adfix.py' and then using `dir` function to list all attributes in the module."
}
{
    "question_id": "12717716-47",
    "nl": "update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`",
    "cmd": "b.update(d)",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`. This requires iterating over the keys in dictionary `d`, updating the corresponding values in `b` if the key already exists, and adding the key-value pairs to `b` if the key does not exist."
}
{
    "question_id": "6532881-46",
    "nl": "make a row-by-row copy `y` of array `x`",
    "cmd": "y = [row[:] for row in x]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [row[:] for row in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Make a row-by-row copy `y` of array `x`. This requires creating a new array with the same dimensions as `x`, and then copying each row of `x` into the corresponding row of `y`."
}
{
    "question_id": "16888888-32",
    "nl": "read excel file `file_name` using pandas",
    "cmd": "dfs = pd.read_excel(file_name, sheetname=None)",
    "oracle_man": [
        "pandas.reference.api.pandas.read_excel"
    ],
    "canonical_cmd": "dfs = pd.read_excel(VAR_STR, sheetname=None)",
    "cmd_name": "conala",
    "gpt35_response": " Read excel file `file_name` using pandas. This requires importing the pandas library, and then using the `read_excel` function to read the contents of the excel file into a pandas dataframe."
}
{
    "question_id": "13840883-15",
    "nl": "Find all words containing letters between A and Z in string `formula`",
    "cmd": "re.findall('\\\\b[A-Z]', formula)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\b[A-Z]', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all words containing letters between A and Z in string `formula`. This requires splitting the string into individual words, and then testing each word to see if it contains any letters between A and Z. If so, add the word to a list of matching words."
}
{
    "question_id": "247724-56",
    "nl": "How can I launch an instance of an application using Python?",
    "cmd": "os.system('start excel.exe <path\/to\/file>')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('start excel.exe <path\/to\/file>')",
    "cmd_name": "conala",
    "gpt35_response": " How can I launch an instance of an application using Python? This requires using the `subprocess` module to call the appropriate system command to launch the application."
}
{
    "question_id": "974678-36",
    "nl": "create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`",
    "cmd": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])",
    "cmd_name": "conala",
    "gpt35_response": " Create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`. This requires creating an empty dictionary, iterating over each dictionary in `dictlist`, iterating over each key-value pair in each dictionary, and adding the value to the corresponding key in the new dictionary. If the key does not yet exist in the new dictionary, add it with value from the current dictionary."
}
{
    "question_id": "8425046-90",
    "nl": "Remove all items from a dictionary `d` where the values are less than `1`",
    "cmd": "d = dict((k, v) for k, v in d.items() if v > 0)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "VAR_STR = dict((k, v) for k, v in VAR_STR.items() if v > 0)",
    "cmd_name": "conala",
    "gpt35_response": " Remove all items from a dictionary `d` where the values are less than `1`. This requires iterating over each key-value pair in the dictionary and removing any pairs where the value is less than `1`."
}
{
    "question_id": "8425046-64",
    "nl": "Filter dictionary `d` to have items with value greater than 0",
    "cmd": "d = {k: v for k, v in list(d.items()) if v > 0}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "VAR_STR = {k: v for k, v in list(VAR_STR.items()) if v > 0}",
    "cmd_name": "conala",
    "gpt35_response": " Filter dictionary `d` to have items with value greater than 0. This requires iterating over each key-value pair in the dictionary and keeping only those pairs where the value is greater than `0`."
}
{
    "question_id": "8993904-11",
    "nl": "split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'",
    "cmd": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')",
    "oracle_man": [
        "python.library.re#re.compile",
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.compile('VAR_STR', re.IGNORECASE).split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'. This requires using the `re.split` function with appropriate regex pattern to split the string 'fooxyzbar'."
}
{
    "question_id": "3945750-54",
    "nl": "BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`",
    "cmd": "soup.findAll('div', style='width=300px;')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "VAR_STR.findAll('VAR_STR', style='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`. This requires using the `BeautifulSoup` object to parse the HTML string, and then using the `find` method with appropriate tag name and attributes to locate the desired tag(s)."
}
{
    "question_id": "15080500-99",
    "nl": "send a signal `signal.SIGUSR1` to the current process",
    "cmd": "os.kill(os.getpid(), signal.SIGUSR1)",
    "oracle_man": [
        "python.library.os#os.getpid",
        "python.library.os#os.kill"
    ],
    "canonical_cmd": "os.kill(os.getpid(), signal.SIGUSR1)",
    "cmd_name": "conala",
    "gpt35_response": " Send a signal `signal.SIGUSR1` to the current process. This requires using the `os.kill` function with appropriate arguments to send the signal to the current process."
}
{
    "question_id": "3844801-14",
    "nl": "check if all elements in list `myList` are identical",
    "cmd": "all(x == myList[0] for x in myList)",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(x == VAR_STR[0] for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if all elements in list `myList` are identical. This requires using the `set` function to create a set from the list, and then checking if the size of the set is `1`."
}
{
    "question_id": "4302166-0",
    "nl": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`",
    "cmd": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))",
    "oracle_man": [],
    "canonical_cmd": "print('%*s : %*s' % (20, 'VAR_STR', 20, 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Format number of spaces between strings `Python`, `:` and `Very Good` to be `20`. This requires using the `format` method to insert spaces in between the strings as needed to achieve the desired length."
}
{
    "question_id": "7555335-11",
    "nl": "How to convert a string from CP-1251 to UTF-8?",
    "cmd": "d.decode('cp1251').encode('utf8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "d.decode('cp1251').encode('utf8')",
    "cmd_name": "conala",
    "gpt35_response": " How to convert a string from CP-1251 to UTF-8? This requires using the `decode` method to convert the string from CP-1251 to Unicode, and then using the `encode` method to convert to UTF-8."
}
{
    "question_id": "2544710-74",
    "nl": "get rid of None values in dictionary `kwargs`",
    "cmd": "res = {k: v for k, v in list(kwargs.items()) if v is not None}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "res = {k: v for k, v in list(VAR_STR.items()) if v is not None}",
    "cmd_name": "conala",
    "gpt35_response": " Get rid of None values in dictionary `kwargs`. This requires iterating over the key-value pairs in the dictionary and removing any pairs where the value is `None`."
}
{
    "question_id": "2544710-4",
    "nl": "get rid of None values in dictionary `kwargs`",
    "cmd": "res = dict((k, v) for k, v in kwargs.items() if v is not None)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "res = dict((k, v) for k, v in VAR_STR.items() if v is not None)",
    "cmd_name": "conala",
    "gpt35_response": " Get rid of None values in dictionary `kwargs`. This requires iterating over the key-value pairs in the dictionary and removing any pairs where the value is `None`."
}
{
    "question_id": "6726636-88",
    "nl": "concatenate a list of strings `['a', 'b', 'c']`",
    "cmd": "\"\"\"\"\"\".join(['a', 'b', 'c'])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate a list of strings `['a', 'b', 'c']`. This requires using the `join` method to concatenate the strings in the list with a specified separator (e.g. `,` or `|`)."
}
{
    "question_id": "8315209-12",
    "nl": "sending http headers to `client`",
    "cmd": "client.send('HTTP\/1.0 200 OK\\r\\n')",
    "oracle_man": [
        "python.library.http.client#http.client.HTTPConnection.send"
    ],
    "canonical_cmd": "VAR_STR.send('HTTP\/1.0 200 OK\\r\\n')",
    "cmd_name": "conala",
    "gpt35_response": "- Sending http headers to `client`. This requires setting the appropriate http headers for the `client` to receive."
}
{
    "question_id": "172439-45",
    "nl": "split a multi-line string `inputString` into separate strings",
    "cmd": "inputString.split('\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Splitting a multi-line string `inputString` into separate strings. This requires splitting `inputString` by the new line character `\\n`."
}
{
    "question_id": "172439-30",
    "nl": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`",
    "cmd": "' a \\n b \\r\\n c '.split('\\n')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "' a \\n b \\r\\n c '.split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Splitting a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`. This requires splitting the multi-line string using the new line character `\\n`."
}
{
    "question_id": "13954222-2",
    "nl": "concatenate elements of list `b` by a colon \":\"",
    "cmd": "\"\"\":\"\"\".join(str(x) for x in b)",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join(str(x) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating elements of list `b` by a colon \":\". This requires joining the elements of list `b` using the colon character \":\"."
}
{
    "question_id": "13567345-100",
    "nl": "Calculate sum over all rows of 2D numpy array",
    "cmd": "a.sum(axis=1)",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "a.sum(axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Calculating sum over all rows of 2D numpy array. This requires summing all rows of the 2D numpy array together."
}
{
    "question_id": "13550423-44",
    "nl": "concatenate items of list `l` with a space ' '",
    "cmd": "print(' '.join(map(str, l)))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print(' '.join(map(str, VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": " Concatenating items of list `l` with a space ' '. This requires joining the items of list `l` using a space ' '."
}
{
    "question_id": "25651990-82",
    "nl": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable",
    "cmd": "subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['python.exe', 'VAR_STR', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Running script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable. This requires executing the script 'hello.py' with the argument 'htmlfilename.htm' using the Python executable."
}
{
    "question_id": "698223-79",
    "nl": "How can I parse a time string containing milliseconds in it with python?",
    "cmd": "time.strptime('30\/03\/09 16:31:32.123', '%d\/%m\/%y %H:%M:%S.%f')",
    "oracle_man": [
        "python.library.time#time.strptime"
    ],
    "canonical_cmd": "time.strptime('30\/03\/09 16:31:32.123', '%d\/%m\/%y %H:%M:%S.%f')",
    "cmd_name": "conala",
    "gpt35_response": " Parsing a time string containing milliseconds in it with Python. This requires using a Python function like `strptime()` to convert the time string into a datetime object."
}
{
    "question_id": "6633523-61",
    "nl": "convert a string `my_string` with dot and comma into a float number `my_float`",
    "cmd": "my_float = float(my_string.replace(',', ''))",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "VAR_STR = float(VAR_STR.replace(',', ''))",
    "cmd_name": "conala",
    "gpt35_response": " Converting a string `my_string` with dot and comma into a float number `my_float`. This requires replacing the dot and comma characters in the string `my_string` with a dot (if the comma is the decimal separator) or a comma (if the dot is the decimal separator) and then converting the resulting string to a float."
}
{
    "question_id": "6633523-78",
    "nl": "convert a string `123,456.908` with dot and comma into a floating number",
    "cmd": "float('123,456.908'.replace(',', ''))",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "float('VAR_STR'.replace(',', ''))",
    "cmd_name": "conala",
    "gpt35_response": " Converting a string `123,456.908` with dot and comma into a floating number. This requires replacing the comma with a dot and then converting the resulting string to a float."
}
{
    "question_id": "3108285-59",
    "nl": "set pythonpath in python script.",
    "cmd": "sys.path.append('\/path\/to\/whatever')",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "sys.path.append('\/path\/to\/whatever')",
    "cmd_name": "conala",
    "gpt35_response": " Setting `PYTHONPATH` in a Python script. This requires setting the environment variable `PYTHONPATH` to the desired value in the Python script."
}
{
    "question_id": "2195340-19",
    "nl": "split string 'Words, words, words.' using a regex '(\\\\W+)'",
    "cmd": "re.split('(\\\\W+)', 'Words, words, words.')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Splitting string 'Words, words, words.' using a regex '(\\\\W+)'. This requires splitting the string using the regular expression `\\W+`."
}
{
    "question_id": "17977584-11",
    "nl": "open a file `Output.txt` in append mode",
    "cmd": "file = open('Output.txt', 'a')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "file = open('VAR_STR', 'a')",
    "cmd_name": "conala",
    "gpt35_response": " Opening a file `Output.txt` in append mode. This requires opening the file `Output.txt` with the mode `'a'` (append mode)."
}
{
    "question_id": "15405636-62",
    "nl": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`",
    "cmd": "parser.add_argument('--version', action='version', version='%(prog)s 2.0')",
    "oracle_man": [
        "python.library.argparse#argparse.ArgumentParser.add_argument"
    ],
    "canonical_cmd": "VAR_STR.add_argument('VAR_STR', action='version', version='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Adding argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser` using argparse. This requires creating an argument with the specified flag and version action using `parser.add_argument()`."
}
{
    "question_id": "17665809-31",
    "nl": "remove key 'c' from dictionary `d`",
    "cmd": "{i: d[i] for i in d if i != 'c'}",
    "oracle_man": [],
    "canonical_cmd": "{i: VAR_STR[i] for i in VAR_STR if i != 'VAR_STR'}",
    "cmd_name": "conala",
    "gpt35_response": " Removing key 'c' from dictionary `d`. This requires deleting the key-value pair associated with key 'c' from the dictionary `d`."
}
{
    "question_id": "41861705-8",
    "nl": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively",
    "cmd": "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "pd.merge(VAR_STR, VAR_STR, on=['VAR_STR'], suffixes=('VAR_STR', 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Creating new DataFrame object by merging columns \"key\" of dataframes `split_df` and `csv_df` and renaming the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively. This requires merging the specified columns of the two dataframes using `pandas.merge()` and renaming the resulting columns using `pandas.DataFrame.rename()`."
}
{
    "question_id": "10697757-85",
    "nl": "Split a string `s` by space with `4` splits",
    "cmd": "s.split(' ', 4)",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split(' ', 4)",
    "cmd_name": "conala",
    "gpt35_response": " Splitting a string `s` by space with `4` splits. This requires splitting the string `s` into a maximum of `4` substrings using the space character as the delimiter."
}
{
    "question_id": "5404068-69",
    "nl": "read keyboard-input",
    "cmd": "input('Enter your input:')",
    "oracle_man": [
        "python.library.functions#input"
    ],
    "canonical_cmd": "input('Enter your input:')",
    "cmd_name": "conala",
    "gpt35_response": " Reading keyboard-input. This requires using a Python function like `input()` to read keyboard input from the user."
}
{
    "question_id": "16344756-59",
    "nl": "enable debug mode on Flask application `app`",
    "cmd": "app.run(debug=True)",
    "oracle_man": [
        "python.library.pdb#pdb.run"
    ],
    "canonical_cmd": "VAR_STR.run(debug=True)",
    "cmd_name": "conala",
    "gpt35_response": " Enabling debug mode on Flask application `app`. This requires setting the `debug` attribute of the Flask application `app` to `True`."
}
{
    "question_id": "40133826-8",
    "nl": "python save list `mylist` to file object 'save.txt'",
    "cmd": "pickle.dump(mylist, open('save.txt', 'wb'))",
    "oracle_man": [
        "python.library.pickle#pickle.dump",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "pickle.dump(VAR_STR, open('VAR_STR', 'wb'))",
    "cmd_name": "conala",
    "gpt35_response": " Saving list `mylist` to file object 'save.txt' in Python. This requires opening the file object 'save.txt' with `'w'` (write) mode, converting `mylist` to a string using `str()`, and writing the resulting string to the file object."
}
{
    "question_id": "2173087-86",
    "nl": "Create 3d array of zeroes of size `(3,3,3)`",
    "cmd": "numpy.zeros((3, 3, 3))",
    "oracle_man": [
        "numpy.reference.generated.numpy.zeros"
    ],
    "canonical_cmd": "numpy.zeros((3, 3, 3))",
    "cmd_name": "conala",
    "gpt35_response": "- Create a 3D array of zeroes of size `(3,3,3)`. This requires initializing a 3D array with zeroes, and specifying the size as `(3,3,3)`."
}
{
    "question_id": "6266727-11",
    "nl": "cut off the last word of a sentence `content`",
    "cmd": "\"\"\" \"\"\".join(content.split(' ')[:-1])",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR.split(' ')[:-1])",
    "cmd_name": "conala",
    "gpt35_response": " Cut off the last word of a sentence `content`. This requires identifying the last space character in `content` and removing the last word after it."
}
{
    "question_id": "30385151-65",
    "nl": "convert scalar `x` to array",
    "cmd": "x = np.asarray(x).reshape(1, -1)[(0), :]",
    "oracle_man": [
        "numpy.reference.generated.numpy.asarray",
        "numpy.reference.generated.numpy.reshape"
    ],
    "canonical_cmd": "VAR_STR = np.asarray(VAR_STR).reshape(1, -1)[(0), :]",
    "cmd_name": "conala",
    "gpt35_response": " Convert scalar `x` to an array. This requires creating an empty array, and adding the scalar value `x` as the only element."
}
{
    "question_id": "15856127-74",
    "nl": "sum all elements of nested list `L`",
    "cmd": "sum(sum(i) if isinstance(i, list) else i for i in L)",
    "oracle_man": [
        "python.library.functions#sum",
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "sum(sum(i) if isinstance(i, list) else i for i in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Sum all elements of the nested list `L`. This requires iterating through each element of the nested list `L`, summing its elements recursively."
}
{
    "question_id": "5010536-34",
    "nl": "Multiple each value by `2` for all keys in a dictionary `my_dict`",
    "cmd": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "VAR_STR.update((x, y * 2) for x, y in list(VAR_STR.items()))",
    "cmd_name": "conala",
    "gpt35_response": " Multiply each value by `2` for all keys in a dictionary `my_dict`. This requires iterating through each key in `my_dict`, and multiplying its value by `2`."
}
{
    "question_id": "13745648-71",
    "nl": "running bash script 'sleep.sh'",
    "cmd": "subprocess.call('sleep.sh', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " Run bash script 'sleep.sh'. This requires executing the bash command `bash sleep.sh`."
}
{
    "question_id": "44778-8",
    "nl": "Join elements of list `l` with a comma `,`",
    "cmd": "\"\"\",\"\"\".join(l)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Join elements of list `l` with a comma `,`. This requires concatenating the elements of list `l` with a comma `,`."
}
{
    "question_id": "44778-82",
    "nl": "make a comma-separated string from a list `myList`",
    "cmd": "myList = ','.join(map(str, myList))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "VAR_STR = ','.join(map(str, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Make a comma-separated string from a list `myList`. This requires concatenating the elements of `myList` with a comma `,`."
}
{
    "question_id": "18454570-61",
    "nl": "remove substring 'bag,' from a string 'lamp, bag, mirror'",
    "cmd": "print('lamp, bag, mirror'.replace('bag,', ''))",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "print('VAR_STR'.replace('VAR_STR', ''))",
    "cmd_name": "conala",
    "gpt35_response": " Remove substring 'bag,' from a string 'lamp, bag, mirror'. This requires identifying the position of 'bag,' in the string and removing it."
}
{
    "question_id": "4357787-45",
    "nl": "Reverse the order of words, delimited by `.`, in string `s`",
    "cmd": "\"\"\".\"\"\".join(s.split('.')[::-1])",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join(VAR_STR.split('VAR_STR')[::-1])",
    "cmd_name": "conala",
    "gpt35_response": " Reverse the order of words, delimited by `.`, in string `s`. This requires splitting the string `s` by '.' delimiter, reversing the order of each split string, and rejoining them with '.' delimiter."
}
{
    "question_id": "21787496-34",
    "nl": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'",
    "cmd": "datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.fromtimestamp",
        "python.library.datetime#datetime.datetime.strftime"
    ],
    "canonical_cmd": "datetime.datetime.fromtimestamp(VAR_STR).strftime('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert epoch time represented as milliseconds `s` to a string using format '%Y-%m-%d %H:%M:%S.%f'. This requires converting epoch time in milliseconds to datetime object and then to string using the format '%Y-%m-%d %H:%M:%S.%f'."
}
{
    "question_id": "21787496-31",
    "nl": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'",
    "cmd": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 \/ 1000.0))",
    "oracle_man": [
        "python.library.time#time.gmtime",
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "time.strftime('VAR_STR', time.gmtime(1236472051807 \/ 1000.0))",
    "cmd_name": "conala",
    "gpt35_response": " Parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'. This requires converting milliseconds epoch time to datetime object and then to string using the format '%Y-%m-%d %H:%M:%S'."
}
{
    "question_id": "15352457-25",
    "nl": "sum elements at index `column` of each list in list `data`",
    "cmd": "print(sum(row[column] for row in data))",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "print(sum(row[VAR_STR] for row in VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Sum elements at index `column` of each list in list `data`. This requires iterating through each list in list `data` and summing the element at index `column`."
}
{
    "question_id": "15352457-58",
    "nl": "sum columns of a list `array`",
    "cmd": "[sum(row[i] for row in array) for i in range(len(array[0]))]",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[sum(row[i] for row in VAR_STR) for i in range(len(VAR_STR[0]))]",
    "cmd_name": "conala",
    "gpt35_response": " Sum columns of a list `array`. This requires iterating through each column of the list `array` and summing its elements."
}
{
    "question_id": "11533274-85",
    "nl": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary",
    "cmd": "dict((k, [d[k] for d in dicts]) for k in dicts[0])",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict((k, [d[k] for d in VAR_STR]) for k in VAR_STR[0])",
    "cmd_name": "conala",
    "gpt35_response": " Combine a list of dictionaries `dicts` with the same keys in each list to a single dictionary. This requires iterating through each dictionary in `dicts` and adding its key-value pairs to the final dictionary."
}
{
    "question_id": "11533274-2",
    "nl": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`",
    "cmd": "{k: [d[k] for d in dicts] for k in dicts[0]}",
    "oracle_man": [],
    "canonical_cmd": "{VAR_STR: [d[VAR_STR] for d in VAR_STR] for VAR_STR in VAR_STR[0]}",
    "cmd_name": "conala",
    "gpt35_response": " Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`. This requires recursively iterating through the nested dictionary `dicts`, and concatenating the values for each key `k` into a flat dictionary."
}
{
    "question_id": "14026704-65",
    "nl": "How do I get the url parameter in a Flask view",
    "cmd": "request.args['myParam']",
    "oracle_man": [],
    "canonical_cmd": "request.args['myParam']",
    "cmd_name": "conala",
    "gpt35_response": " How do I get the URL parameter in a Flask view? This requires using the Flask `request` object's `args` attribute to retrieve the desired URL parameter."
}
{
    "question_id": "2354166-0",
    "nl": "Insert directory 'apps' into directory `__file__`",
    "cmd": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.join"
    ],
    "canonical_cmd": "sys.path.insert(1, os.path.join(os.path.dirname(VAR_STR), 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Insert directory 'apps' into directory `__file__`. This requires modifying the `__file__` string to include the directory 'apps'."
}
{
    "question_id": "2354166-42",
    "nl": "modify sys.path for python module `subdir`",
    "cmd": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))",
    "oracle_man": [
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.join"
    ],
    "canonical_cmd": "sys.path.append(os.path.join(os.path.dirname(__file__), 'VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Modify `sys.path` for Python module `subdir`. This requires appending the path to the module `subdir` to the `sys.path` list."
}
{
    "question_id": "20211942-18",
    "nl": "Insert a 'None' value into a SQLite3 table.",
    "cmd": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))",
    "oracle_man": [
        "python.library.msilib#msilib.View.Execute"
    ],
    "canonical_cmd": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))",
    "cmd_name": "conala",
    "gpt35_response": " Insert a 'None' value into a SQLite3 table. This requires executing an SQL `INSERT` statement with the value 'None'."
}
{
    "question_id": "406121-90",
    "nl": "flatten list `list_of_menuitems`",
    "cmd": "[image for menuitem in list_of_menuitems for image in menuitem]",
    "oracle_man": [],
    "canonical_cmd": "[image for menuitem in VAR_STR for image in menuitem]",
    "cmd_name": "conala",
    "gpt35_response": "- Flatten list `list_of_menuitems`. This requires iterating over `list_of_menuitems`, checking each element if it is a list, and flattening any sub-lists."
}
{
    "question_id": "4741537-60",
    "nl": "append elements of a set `b` to a list `a`",
    "cmd": "a.extend(b)",
    "oracle_man": [
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "VAR_STR.extend(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Append elements of a set `b` to a list `a`. This requires iterating over `b` and appending each element to `a`."
}
{
    "question_id": "4741537-84",
    "nl": "Append elements of a set to a list in Python",
    "cmd": "a.extend(list(b))",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "a.extend(list(b))",
    "cmd_name": "conala",
    "gpt35_response": " Append elements of a set to a list in Python. This requires iterating over the set and appending each element to the list."
}
{
    "question_id": "17438096-75",
    "nl": "upload file using FTP",
    "cmd": "ftp.storlines('STOR ' + filename, open(filename, 'r'))",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.ftplib#ftplib.FTP.storlines"
    ],
    "canonical_cmd": "ftp.storlines('STOR ' + filename, open(filename, 'r'))",
    "cmd_name": "conala",
    "gpt35_response": " Upload file using FTP. This requires connecting to an FTP server, authenticating with a username and password, and uploading the file to the designated directory."
}
{
    "question_id": "15049182-63",
    "nl": "add one to the hidden web element with id 'XYZ' with selenium python script",
    "cmd": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")",
    "oracle_man": [],
    "canonical_cmd": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")",
    "cmd_name": "conala",
    "gpt35_response": " Add one to the hidden web element with id 'XYZ' with Selenium Python script. This requires locating the web element by its id 'XYZ' and using the Selenium command to add one to its value."
}
{
    "question_id": "28742436-20",
    "nl": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`",
    "cmd": "np.maximum([2, 3, 4], [1, 5, 2])",
    "oracle_man": [
        "numpy.reference.generated.numpy.maximum"
    ],
    "canonical_cmd": "np.maximum([VAR_STR], [VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`. This requires creating two arrays, iterating over each element at the same index of both arrays, and adding the maximum value to a new array."
}
{
    "question_id": "34280147-9",
    "nl": "print a list `l` and move first 3 elements to the end of the list",
    "cmd": "print(l[3:] + l[:3])",
    "oracle_man": [],
    "canonical_cmd": "print(VAR_STR[3:] + VAR_STR[:3])",
    "cmd_name": "conala",
    "gpt35_response": " Print a list `l` and move first 3 elements to the end of the list. This requires printing the contents of list `l`, removing the first 3 elements and adding them to the end of the list."
}
{
    "question_id": "11801309-71",
    "nl": "loop over files in directory '.'",
    "cmd": "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass",
    "oracle_man": [
        "python.library.os.path#os.path.isfile",
        "python.library.os#os.listdir"
    ],
    "canonical_cmd": "for fn in os.listdir('VAR_STR'):\n    if os.path.isfile(fn):\n        pass",
    "cmd_name": "conala",
    "gpt35_response": " Loop over files in directory '.'. This requires iterating over files in the current directory using a for loop."
}
{
    "question_id": "11801309-27",
    "nl": "loop over files in directory `source`",
    "cmd": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass",
    "oracle_man": [
        "python.library.os#os.walk"
    ],
    "canonical_cmd": "for root, dirs, filenames in os.walk(VAR_STR):\n    for f in filenames:\n        pass",
    "cmd_name": "conala",
    "gpt35_response": " Loop over files in directory `source`. This requires accessing a specific directory, iterating over the files in that directory using a for loop."
}
{
    "question_id": "852055-44",
    "nl": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`",
    "cmd": "db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())",
    "oracle_man": [
        "python.library.zoneinfo#zoneinfo.ZoneInfo.key"
    ],
    "canonical_cmd": "db.GqlQuery('VAR_STR', foo.key())",
    "cmd_name": "conala",
    "gpt35_response": " Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`. This requires setting up a connection to the Google App Engine, generating and executing the GQL query, passing `'foo.key()'` as a parameter to the query."
}
{
    "question_id": "15325182-98",
    "nl": "filter rows in pandas starting with alphabet 'f' using regular expression.",
    "cmd": "df.b.str.contains('^f')",
    "oracle_man": [
        "pandas.reference.api.pandas.series.str.contains"
    ],
    "canonical_cmd": "df.b.str.contains('^f')",
    "cmd_name": "conala",
    "gpt35_response": " Filter rows in Pandas starting with alphabet 'f' using regular expression. This requires using a regular expression to match rows starting with alphabet 'f', and filtering out all non-matching rows."
}
{
    "question_id": "38535931-67",
    "nl": "pandas: delete rows in dataframe `df` based on multiple columns values",
    "cmd": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index",
        "python.library.functions#list",
        "pandas.reference.api.pandas.dataframe.reset_index",
        "pandas.reference.api.pandas.dataframe.drop"
    ],
    "canonical_cmd": "VAR_STR.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()",
    "cmd_name": "conala",
    "gpt35_response": " Pandas: Delete rows in dataframe `df` based on multiple columns values. This requires iterating over all rows in `df`, checking the value of the specified columns and deleting any rows that match the specified value(s)."
}
{
    "question_id": "13945749-18",
    "nl": "format the variables `self.goals` and `self.penalties` using string formatting",
    "cmd": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)",
    "cmd_name": "conala",
    "gpt35_response": " Format the variables `self.goals` and `self.penalties` using string formatting. This requires using Python's string formatting syntax to substitute the values of `self.goals` and `self.penalties` into a formatted string."
}
{
    "question_id": "13945749-85",
    "nl": "format string \"({} goals, ${})\" with variables `goals` and `penalties`",
    "cmd": "\"\"\"({} goals, ${})\"\"\".format(self.goals, self.penalties)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format(self.VAR_STR, self.VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Format string \"({} goals, ${})\" with variables `goals` and `penalties`. This requires using Python's string formatting syntax to substitute the values of `goals` and `penalties` into the formatted string."
}
{
    "question_id": "13945749-39",
    "nl": "format string \"({0.goals} goals, ${0.penalties})\"",
    "cmd": "\"\"\"({0.goals} goals, ${0.penalties})\"\"\".format(self)",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".format(self)",
    "cmd_name": "conala",
    "gpt35_response": " Format string \"({0.goals} goals, ${0.penalties})\". This requires using Python's string formatting syntax to substitute the values of `goals` and `penalties` from the first argument into the formatted string."
}
{
    "question_id": "18524642-58",
    "nl": "convert list of lists `L` to list of integers",
    "cmd": "[int(''.join(str(d) for d in x)) for x in L]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "[int(''.join(str(d) for d in x)) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of lists `L` to list of integers. This requires iterating over every element in the list of lists, converting it to an `int`, and appending it to a new list of integers."
}
{
    "question_id": "18524642-5",
    "nl": "combine elements of each list in list `L` into digits of a single integer",
    "cmd": "[''.join(str(d) for d in x) for x in L]",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "[''.join(str(d) for d in x) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Combine elements of each list in list `L` into digits of a single integer. This requires iterating over every list in the list of lists, joining the elements of each list into a single string, and converting that string to an `int`."
}
{
    "question_id": "18524642-53",
    "nl": "convert a list of lists `L` to list of integers",
    "cmd": "L = [int(''.join([str(y) for y in x])) for x in L]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "VAR_STR = [int(''.join([str(y) for y in x])) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list of lists `L` to list of integers. This requires iterating over every element in the list of lists, converting it to an `int`, and appending it to a new list of integers."
}
{
    "question_id": "7138686-35",
    "nl": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`",
    "cmd": "myfile.write('\\n'.join(lines))",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "VAR_STR.write('VAR_STR'.join(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Write the elements of list `lines` concatenated by special character '\\n' to file `myfile`. This requires opening `myfile` for writing, iterating over `lines` and writing each element to file `myfile`, separated by the special character '\\n'."
}
{
    "question_id": "1866343-84",
    "nl": "removing an element from a list based on a predicate 'X' or 'N'",
    "cmd": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'VAR_STR' not in x and 'VAR_STR' not in\n    x]",
    "cmd_name": "conala",
    "gpt35_response": " Removing an element from a list based on a predicate 'X' or 'N'. This requires iterating over the list, checking if each element matches the predicate 'X' or 'N', and removing any element that matches the predicate."
}
{
    "question_id": "17238587-5",
    "nl": "Remove duplicate words from a string `text` using regex",
    "cmd": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Remove duplicate words from a string `text` using regex. This requires using regex to search for occurring patterns of a word followed by a repetition of the same word, and replacing them with a single instance of the word."
}
{
    "question_id": "15534223-34",
    "nl": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'",
    "cmd": "re.search('(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "re.search('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'. This requires using regex to search for the pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in the string 'C:\\\\SomeDir\\\\AcroTray.exe'."
}
{
    "question_id": "5453026-19",
    "nl": "split string 'QH QD JC KD JS' into a list on white spaces",
    "cmd": "\"\"\"QH QD JC KD JS\"\"\".split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string 'QH QD JC KD JS' into a list on white spaces. This requires splitting the string on the whitespace character to create a list with each space-separated word as a separate list item."
}
{
    "question_id": "18168684-38",
    "nl": "search for occurrences of regex pattern '>.*<' in xml string `line`",
    "cmd": "print(re.search('>.*<', line).group(0))",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "print(re.search('VAR_STR', VAR_STR).group(0))",
    "cmd_name": "conala",
    "gpt35_response": " Search for occurrences of regex pattern '>.*<' in xml string `line`. This requires searching for any string containing the regex pattern '>.*<' within the xml string `line`."
}
{
    "question_id": "4914277-19",
    "nl": "erase all the contents of a file `filename`",
    "cmd": "open(filename, 'w').close()",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "open(VAR_STR, 'w').close()",
    "cmd_name": "conala",
    "gpt35_response": " Erase all the contents of a file `filename`. This requires opening `filename`, deleting all the contents of the file, and saving changes to the file."
}
{
    "question_id": "19068269-99",
    "nl": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'",
    "cmd": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')",
    "oracle_man": [
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "datetime.datetime.strptime(string_date, 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'. This requires converting the string into a datetime object using the specified format."
}
{
    "question_id": "20683167-59",
    "nl": "find the index of a list with the first element equal to '332' within the list of lists `thelist`",
    "cmd": "[index for index, item in enumerate(thelist) if item[0] == '332']",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[index for index, item in enumerate(VAR_STR) if item[0] == 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Find the index of a list with the first element equal to '332' within the list of lists `thelist`. This requires iterating over the list of lists `thelist` and searching for the first sublist with the first element equal to '332'."
}
{
    "question_id": "17138464-49",
    "nl": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.",
    "cmd": "plt.plot(x, y, label='H\\u2082O')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "plt.plot(VAR_STR, VAR_STR, label='H\u2082O')",
    "cmd_name": "conala",
    "gpt35_response": " Subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'. This requires using the provided matplotlib subscripting syntax to replace 'H20' with 'H$_2$O' in the labels for arrays 'x' and 'y'."
}
{
    "question_id": "17138464-97",
    "nl": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.",
    "cmd": "plt.plot(x, y, label='$H_2O$')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "plt.plot(VAR_STR, VAR_STR, label='$H_2O$')",
    "cmd_name": "conala",
    "gpt35_response": " Subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'. This requires using the provided matplotlib subscripting syntax to replace 'H20' with 'H$_2$O' in the labels for arrays 'x' and 'y'."
}
{
    "question_id": "9138112-44",
    "nl": "loop over a list `mylist` if sublists length equals 3",
    "cmd": "[x for x in mylist if len(x) == 3]",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "[x for x in VAR_STR if len(x) == 3]",
    "cmd_name": "conala",
    "gpt35_response": " Loop over a list `mylist` if sublists length equals 3. This requires iterating over `mylist` and checking the length of each sublist, running any desired code only if the length of the sublist is 3."
}
{
    "question_id": "1807026-63",
    "nl": "initialize a list `lst` of 100 objects Object()",
    "cmd": "lst = [Object() for _ in range(100)]",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#object"
    ],
    "canonical_cmd": "VAR_STR = [Object() for _ in range(100)]",
    "cmd_name": "conala",
    "gpt35_response": " Initialize a list `lst` of 100 objects Object(). This requires creating a list `lst`, instantiating 100 instances of the object `Object()`, and adding them to the list."
}
{
    "question_id": "1807026-43",
    "nl": "create list `lst` containing 100 instances of object `Object`",
    "cmd": "lst = [Object() for i in range(100)]",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#object"
    ],
    "canonical_cmd": "VAR_STR = [VAR_STR() for i in range(100)]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `lst` containing 100 instances of object `Object`. This requires creating an empty list `lst`, iterating 100 times, instantiating an instance of object `Object()` for each loop iteration, and appending it to `lst`."
}
{
    "question_id": "19664253-74",
    "nl": "get the content of child tag with`href` attribute whose parent has css `someclass`",
    "cmd": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')",
    "oracle_man": [
        "python.library.test#test.support.get_attribute"
    ],
    "canonical_cmd": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get the content of child tag with`href` attribute whose parent has css `someclass`. This requires finding the parent tag with css `someclass`, finding the child tag with the attribute `href`, and accessing its content."
}
{
    "question_id": "13793321-59",
    "nl": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes",
    "cmd": "df1.merge(df2, on='Date_Time')",
    "oracle_man": [
        "pandas.reference.api.pandas.merge"
    ],
    "canonical_cmd": "VAR_STR.merge(VAR_STR, on='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes. This requires merging dataframes `df1` and `df2` based on their common 'Date_Time' column values."
}
{
    "question_id": "3367288-60",
    "nl": "use `%s` operator to print variable values `str1` inside a string",
    "cmd": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')",
    "oracle_man": [],
    "canonical_cmd": "'first string is: %s, second one is: %s' % (VAR_STR, 'geo.tif')",
    "cmd_name": "conala",
    "gpt35_response": " Use `%s` operator to print variable values `str1` inside a string. This requires using the `%s` operator to format a string, inserting the value of `str1` at the desired location within the string."
}
{
    "question_id": "3475251-5",
    "nl": "Split a string by a delimiter in python",
    "cmd": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]",
    "oracle_man": [
        "python.library.stdtypes#str.strip",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]",
    "cmd_name": "conala",
    "gpt35_response": " Split a string by a delimiter in python. This requires using the `split()` method on the string, with the delimiter as an argument, to split the string on the specified delimiter."
}
{
    "question_id": "273192-100",
    "nl": "check if directory `directory ` exists and create it if necessary",
    "cmd": "if (not os.path.exists(directory)):\n    os.makedirs(directory)",
    "oracle_man": [
        "python.library.os.path#os.path.exists",
        "python.library.os#os.makedirs"
    ],
    "canonical_cmd": "if not os.path.exists(VAR_STR):\n    os.makedirs(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if directory `directory ` exists and create it if necessary. This requires checking if `directory` exists, creating it if it does not exist, and taking any desired action upon the existence\/creation of the directory."
}
{
    "question_id": "273192-60",
    "nl": "check if a directory `path` exists and create it if necessary",
    "cmd": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise",
    "oracle_man": [
        "python.library.os.path#os.path.isdir",
        "python.library.os#os.makedirs"
    ],
    "canonical_cmd": "try:\n    os.makedirs(VAR_STR)\nexcept OSError:\n    if not os.VAR_STR.isdir(VAR_STR):\n        raise",
    "cmd_name": "conala",
    "gpt35_response": " Check if a directory `path` exists and create it if necessary. This requires checking if `path` exists, creating it if it does not exist, and performing any desired actions upon the existence\/creation of the directory."
}
{
    "question_id": "273192-76",
    "nl": "check if a directory `path` exists and create it if necessary",
    "cmd": "distutils.dir_util.mkpath(path)",
    "oracle_man": [],
    "canonical_cmd": "distutils.dir_util.mkpath(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if a directory `path` exists and create it if necessary. This requires checking if `path` exists, creating it if it does not exist, and performing any desired actions upon the existence\/creation of the directory."
}
{
    "question_id": "273192-21",
    "nl": "check if a directory `path` exists and create it if necessary",
    "cmd": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise",
    "oracle_man": [
        "python.library.os#os.makedirs"
    ],
    "canonical_cmd": "try:\n    os.makedirs(VAR_STR)\nexcept OSError as exception:\n    if exception.errno != errno.EEXIST:\n        raise",
    "cmd_name": "conala",
    "gpt35_response": " Check if a directory `path` exists and create it if necessary. This requires checking if `path` exists, creating it if it does not exist, and performing any desired actions upon the existence\/creation of the directory."
}
{
    "question_id": "18785032-56",
    "nl": "Replace a separate word 'H3' by 'H1' in a string 'text'",
    "cmd": "re.sub('\\\\bH3\\\\b', 'H1', text)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\bH3\\\\b', 'VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Replace a separate word 'H3' by 'H1' in a string 'text'. This requires locating the word 'H3' in the string 'text' and replacing it with 'H1'."
}
{
    "question_id": "1450897-93",
    "nl": "substitute ASCII letters in string 'aas30dsa20' with empty string ''",
    "cmd": "re.sub('\\\\D', '', 'aas30dsa20')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('\\\\D', 'VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Substitute ASCII letters in string 'aas30dsa20' with empty string ''. This requires locating all ASCII letters in the string 'aas30dsa20' and replacing them with an empty string."
}
{
    "question_id": "1450897-99",
    "nl": "get digits only from a string `aas30dsa20` using lambda function",
    "cmd": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])",
    "oracle_man": [
        "python.library.stdtypes#str.isdigit",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([x for x in 'VAR_STR' if x.isdigit()])",
    "cmd_name": "conala",
    "gpt35_response": " Get digits only from a string `aas30dsa20` using lambda function. This requires using a lambda function to filter out all non-digit characters from the string `aas30dsa20`."
}
{
    "question_id": "4928274-56",
    "nl": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`",
    "cmd": "records = dict((record['_id'], record) for record in cursor)",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "VAR_STR = dict((record['_id'], record) for record in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`. This requires iterating over the PyMongo cursor `cursor`, extracting key-value pairs from each record, and appending them to a new dictionary `records`."
}
{
    "question_id": "20180210-37",
    "nl": "Create new matrix object  by concatenating data from matrix A and matrix B",
    "cmd": "np.concatenate((A, B))",
    "oracle_man": [
        "numpy.reference.generated.numpy.concatenate"
    ],
    "canonical_cmd": "np.concatenate((A, B))",
    "cmd_name": "conala",
    "gpt35_response": " Create new matrix object by concatenating data from matrix A and matrix B. This requires creating a new matrix object, concatenating the data from matrix A and matrix B, and assigning it to the new matrix object."
}
{
    "question_id": "20180210-35",
    "nl": "concat two matrices `A` and `B` in numpy",
    "cmd": "np.vstack((A, B))",
    "oracle_man": [
        "numpy.reference.generated.numpy.vstack"
    ],
    "canonical_cmd": "np.vstack((VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate two matrices `A` and `B` in numpy. This requires using the `numpy.concatenate` function to concatenate matrices A and B into a new matrix object."
}
{
    "question_id": "1555968-67",
    "nl": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value",
    "cmd": "max(k for k, v in x.items() if v != 0)",
    "oracle_man": [
        "python.library.functions#max",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "max(k for k, v in VAR_STR.items() if v != 0)",
    "cmd_name": "conala",
    "gpt35_response": " Find the key associated with the largest value in dictionary `x` whilst key is non-zero value. This requires iterating over the dictionary `x`, sorting its key-value pairs by value in decreasing order, and returning the first key that has a non-zero value."
}
{
    "question_id": "1555968-13",
    "nl": "get the largest key whose not associated with value of 0 in dictionary `x`",
    "cmd": "(k for k, v in x.items() if v != 0)",
    "oracle_man": [
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "(k for k, v in VAR_STR.items() if v != 0)",
    "cmd_name": "conala",
    "gpt35_response": " Get the largest key whose not associated with value of 0 in dictionary `x`. This requires iterating over the dictionary `x`, sorting its key-value pairs by key in decreasing order, and returning the first key that has a non-zero value."
}
{
    "question_id": "1555968-62",
    "nl": "get the largest key in a dictionary `x` with non-zero value",
    "cmd": "max(k for k, v in x.items() if v != 0)",
    "oracle_man": [
        "python.library.functions#max",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "max(k for k, v in VAR_STR.items() if v != 0)",
    "cmd_name": "conala",
    "gpt35_response": " Get the largest key in a dictionary `x` with non-zero value. This requires iterating over the dictionary `x`, sorting its key-value pairs by key in decreasing order, and returning the first key that has a non-zero value."
}
{
    "question_id": "17021863-48",
    "nl": "Put the curser at beginning of the file",
    "cmd": "file.seek(0)",
    "oracle_man": [
        "python.library.io#io.IOBase.seek"
    ],
    "canonical_cmd": "file.seek(0)",
    "cmd_name": "conala",
    "gpt35_response": " Put the cursor at beginning of the file. This requires moving the cursor to the start of the file handle."
}
{
    "question_id": "4175686-32",
    "nl": "remove key 'ele' from dictionary `d`",
    "cmd": "del d['ele']",
    "oracle_man": [],
    "canonical_cmd": "del VAR_STR['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Remove key 'ele' from dictionary `d`. This requires removing the key 'ele' and its corresponding value from the dictionary `d`."
}
{
    "question_id": "5871168-82",
    "nl": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years",
    "cmd": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))",
    "oracle_man": [
        "pandas.reference.api.pandas.timedelta",
        "python.library.turtle#turtle.update"
    ],
    "canonical_cmd": "VAR_STR.objects.update(VAR_STR=F('VAR_STR') + timedelta(days=36524.25))",
    "cmd_name": "conala",
    "gpt35_response": " Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years. This requires retrieving the existing datetime object from the `timestamp` field in `MyModel`, adding 100 years to it, and updating the `timestamp` field in `MyModel` with the new value."
}
{
    "question_id": "11574195-24",
    "nl": "merge list `['it']` and list `['was']` and list `['annoying']` into one list",
    "cmd": "['it'] + ['was'] + ['annoying']",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR] + [VAR_STR] + [VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Merge list `['it']` and list `['was']` and list `['annoying']` into one list. This requires concatenating the three lists `['it']`, `['was']`, and `['annoying']` using the `+` operator to create a new list."
}
{
    "question_id": "587647-44",
    "nl": "increment a value with leading zeroes in a number `x`",
    "cmd": "str(int(x) + 1).zfill(len(x))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#int",
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.zfill"
    ],
    "canonical_cmd": "str(int(VAR_STR) + 1).zfill(len(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Increment a value with leading zeroes in a number `x`. This requires converting the number `x` to a string, incrementing its value, and converting it back to an integer with leading zeros."
}
{
    "question_id": "17315881-13",
    "nl": "check if a pandas dataframe `df`'s index is sorted",
    "cmd": "all(df.index[:-1] <= df.index[1:])",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(VAR_STR.index[:-1] <= VAR_STR.index[1:])",
    "cmd_name": "conala",
    "gpt35_response": " Check if a pandas dataframe `df`'s index is sorted. This requires using the `is_monotonic_increasing` method on the pandas dataframe's index object to determine if it is sorted in increasing order."
}
{
    "question_id": "14695134-57",
    "nl": "insert data from a string `testfield` to sqlite db `c`",
    "cmd": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))",
    "oracle_man": [
        "python.library.msilib#msilib.View.Execute"
    ],
    "canonical_cmd": "VAR_STR.execute(\"INSERT INTO test VALUES (?, 'bar')\", (VAR_STR,))",
    "cmd_name": "conala",
    "gpt35_response": " Insert data from a string `testfield` to sqlite db `c`. This requires creating an SQL INSERT statement for the data in the string `testfield` and executing it on the SQLite database `c`."
}
{
    "question_id": "24242433-92",
    "nl": "decode string \"\\\\x89\\\\n\" into a normal string",
    "cmd": "\"\"\"\\\\x89\\\\n\"\"\".decode('string_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".decode('string_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Decode string \"\\\\x89\\\\n\" into a normal string. This requires decoding the string \"\\\\x89\\\\n\" as a byte string using the `bytes.fromhex` method, and then decoding it as a normal string using the `decode` method."
}
{
    "question_id": "24242433-9",
    "nl": "convert a raw string `raw_string` into a normal string",
    "cmd": "raw_string.decode('string_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('string_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a raw string `raw_string` into a normal string. This requires decoding the raw string `raw_string` using the appropriate encoding."
}
{
    "question_id": "24242433-10",
    "nl": "convert a raw string `raw_byte_string` into a normal string",
    "cmd": "raw_byte_string.decode('unicode_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "VAR_STR.decode('unicode_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Convert a raw string `raw_byte_string` into a normal string. This requires decoding the raw byte string `raw_byte_string` using the appropriate encoding."
}
{
    "question_id": "22882922-50",
    "nl": "split a string `s` with into all strings of repeated characters",
    "cmd": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]",
    "oracle_man": [
        "python.library.re#re.finditer",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `s` into all strings of repeated characters. This requires using regex to split the string `s` into substrings of repeated characters."
}
{
    "question_id": "4143502-27",
    "nl": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none",
    "cmd": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')",
    "oracle_man": [
        "numpy.reference.random.generated.numpy.random.randn"
    ],
    "canonical_cmd": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')",
    "cmd_name": "conala",
    "gpt35_response": "- Scatter a plot with `np.random.randn(100)` as x and y positions, and set face color to none. This requires creating a scatter plot, using `np.random.randn(100)` to set x and y positions, and setting face color to none."
}
{
    "question_id": "4143502-6",
    "nl": "do a scatter plot with empty circles",
    "cmd": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')",
    "oracle_man": [
        "numpy.reference.random.generated.numpy.random.randn"
    ],
    "canonical_cmd": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')",
    "cmd_name": "conala",
    "gpt35_response": " Do a scatter plot with empty circles. This requires creating a scatter plot and using empty circles as markers."
}
{
    "question_id": "27975069-4",
    "nl": "filter rows containing key word `ball` in column `ids`",
    "cmd": "df[df['ids'].str.contains('ball')]",
    "oracle_man": [
        "pandas.reference.api.pandas.series.str.contains"
    ],
    "canonical_cmd": "df[df['VAR_STR'].str.contains('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Filter rows in column 'ids' containing the keyword 'ball'. This requires filtering rows in column 'ids' for the keyword 'ball'."
}
{
    "question_id": "20461165-28",
    "nl": "convert index at level 0 into a column in dataframe `df`",
    "cmd": "df.reset_index(level=0, inplace=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "VAR_STR.reset_index(level=0, inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Convert index at level 0 into a column in dataframe `df`. This requires converting the index at level 0 into a column in dataframe `df`."
}
{
    "question_id": "20461165-64",
    "nl": "Add indexes in a data frame `df` to a column `index1`",
    "cmd": "df['index1'] = df.index",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR.index",
    "cmd_name": "conala",
    "gpt35_response": " Add indexes in dataframe `df` to a new column 'index1'. This requires adding the indexes in dataframe `df` to a new column 'index1'."
}
{
    "question_id": "20461165-11",
    "nl": "convert pandas index in a dataframe to columns",
    "cmd": "df.reset_index(level=['tick', 'obs'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.reset_index"
    ],
    "canonical_cmd": "df.reset_index(level=['tick', 'obs'])",
    "cmd_name": "conala",
    "gpt35_response": " Convert pandas index in a dataframe to columns. This requires converting the pandas index in a dataframe to columns."
}
{
    "question_id": "4685571-89",
    "nl": "Get reverse of list items from list 'b' using extended slicing",
    "cmd": "[x[::-1] for x in b]",
    "oracle_man": [],
    "canonical_cmd": "[x[::-1] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get the reverse of list items from list 'b' using extended slicing. This requires using extended slicing to get the reverse of list items from list 'b'."
}
{
    "question_id": "438684-58",
    "nl": "convert list `list_of_ints` into a comma separated string",
    "cmd": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])",
    "oracle_man": [
        "python.library.stdtypes#str",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\",\"\"\".join([str(i) for i in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `list_of_ints` into a comma separated string. This requires converting list `list_of_ints` into a comma separated string."
}
{
    "question_id": "8519922-8",
    "nl": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`",
    "cmd": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))",
    "oracle_man": [
        "pygame.ref.fastevent#pygame.fastevent.post"
    ],
    "canonical_cmd": "requests.post(url, data=VAR_STR, headers=HEADERS_DICT, auth=(VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Send a post request with raw data `DATA` and basic authentication with `username` and `password`. This requires sending a post request with raw data `DATA` and basic authentication using `username` and `password`."
}
{
    "question_id": "22365172-32",
    "nl": "Iterate ove list `[1, 2, 3]` using list comprehension",
    "cmd": "print([item for item in [1, 2, 3]])",
    "oracle_man": [],
    "canonical_cmd": "print([item for item in [VAR_STR]])",
    "cmd_name": "conala",
    "gpt35_response": " Iterate over list `[1, 2, 3]` to create a new list using list comprehension. This requires iterating over list `[1, 2, 3]` and using list comprehension to create a new list."
}
{
    "question_id": "12300912-9",
    "nl": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples",
    "cmd": "[(x['x'], x['y']) for x in d]",
    "oracle_man": [],
    "canonical_cmd": "[(VAR_STR['VAR_STR'], VAR_STR['VAR_STR']) for VAR_STR in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to a list of tuples. This requires extracting all the values with keys 'x' and 'y' from a list of dictionaries `d` and storing them in a list of tuples."
}
{
    "question_id": "678236-88",
    "nl": "get the filename without the extension from file 'hemanth.txt'",
    "cmd": "print(os.path.splitext(os.path.basename('hemanth.txt'))[0])",
    "oracle_man": [
        "python.library.os.path#os.path.basename",
        "python.library.os.path#os.path.splitext"
    ],
    "canonical_cmd": "print(os.path.splitext(os.path.basename('VAR_STR'))[0])",
    "cmd_name": "conala",
    "gpt35_response": " Get the filename without the extension from file 'hemanth.txt'. This requires getting the filename without the extension from file 'hemanth.txt'."
}
{
    "question_id": "2597166-54",
    "nl": "create a dictionary by adding each two adjacent elements in tuple `x` as key\/value pair to it",
    "cmd": "dict(x[i:i + 2] for i in range(0, len(x), 2))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range",
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict(VAR_STR[i:i + 2] for i in range(0, len(VAR_STR), 2))",
    "cmd_name": "conala",
    "gpt35_response": " Create a dictionary by adding each two adjacent elements in tuple `x` as key\/value pair to it. This requires creating a dictionary and adding each two adjacent elements in tuple `x` as a key\/value pair to it."
}
{
    "question_id": "7895449-25",
    "nl": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`",
    "cmd": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "values = sum([VAR_STR], [])",
    "cmd_name": "conala",
    "gpt35_response": " Create a flattened list containing `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`. This requires creating a flattened list containing `['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']`."
}
{
    "question_id": "31617845-12",
    "nl": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101",
    "cmd": "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = VAR_STR[(VAR_STR['VAR_STR'] >= 99) & (VAR_STR['VAR_STR'] <= 101)]",
    "cmd_name": "conala",
    "gpt35_response": " Select rows in dataframe `df` column 'closing_price' between 99 and 101. This requires selecting rows in dataframe `df` column 'closing_price' between 99 and 101."
}
{
    "question_id": "25698710-50",
    "nl": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`",
    "cmd": "df.replace({'\\n': '<br>'}, regex=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "VAR_STR.replace({'VAR_STR': 'VAR_STR'}, regex=True)",
    "cmd_name": "conala",
    "gpt35_response": " Replace all occurrences of newlines `\\n` with `<br>` in dataframe `df`. This requires replacing all occurrences of newlines `\\n` with `<br>` in dataframe `df`."
}
{
    "question_id": "25698710-24",
    "nl": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`",
    "cmd": "df.replace({'\\n': '<br>'}, regex=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.replace"
    ],
    "canonical_cmd": "VAR_STR.replace({'VAR_STR': 'VAR_STR'}, regex=True)",
    "cmd_name": "conala",
    "gpt35_response": " Replace all occurrences of string `\\n` with string `<br>` in a pandas data frame `df`. This requires replacing all occurrences of string `\\n` with string `<br>` in a pandas data frame `df`."
}
{
    "question_id": "41923858-90",
    "nl": "create a list containing each two adjacent letters in string `word` as its elements",
    "cmd": "[(x + y) for x, y in zip(word, word[1:])]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[(x + y) for x, y in zip(VAR_STR, VAR_STR[1:])]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing each two adjacent letters in string `word`. This requires creating a list containing each two adjacent letters in string `word`."
}
{
    "question_id": "41923858-58",
    "nl": "Get a list of pairs from a string `word` using lambda function",
    "cmd": "list(map(lambda x, y: x + y, word[:-1], word[1:]))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(map(lambda x, y: x + y, VAR_STR[:-1], VAR_STR[1:]))",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of pairs from string `word` using lambda function. This requires getting a list of pairs from string `word` using lambda function."
}
{
    "question_id": "9760588-64",
    "nl": "extract a url from a string `myString`",
    "cmd": "print(re.findall('(https?:\/\/[^\\\\s]+)', myString))",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "print(re.findall('(https?:\/\/[^\\\\s]+)', VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Extract a URL from string `myString`. This requires extracting a URL from string `myString`."
}
{
    "question_id": "9760588-30",
    "nl": "extract a url from a string `myString`",
    "cmd": "print(re.search('(?P<url>https?:\/\/[^\\\\s]+)', myString).group('url'))",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "print(re.search('(?P<url>https?:\/\/[^\\\\s]+)', VAR_STR).group('url'))",
    "cmd_name": "conala",
    "gpt35_response": "- Extract a URL from a string `myString`. This requires searching `myString` for a string starting with \"http:\/\/\" or \"https:\/\/\" and ending with the next space or punctuation mark. "
}
{
    "question_id": "5843518-46",
    "nl": "remove all special characters, punctuation and spaces from a string `mystring` using regex",
    "cmd": "re.sub('[^A-Za-z0-9]+', '', mystring)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^A-Za-z0-9]+', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove all special characters, punctuation and spaces from a string `mystring` using regex. This requires finding all characters that are not letters or numbers using regex and replacing them with an empty string."
}
{
    "question_id": "36674519-26",
    "nl": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'",
    "cmd": "pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)",
    "oracle_man": [
        "pandas.reference.api.pandas.date_range"
    ],
    "canonical_cmd": "pd.date_range('VAR_STR', freq='WOM-2FRI', periods=13)",
    "cmd_name": "conala",
    "gpt35_response": " Create a DatetimeIndex containing 13 periods of the second Friday of each month starting from date '2016-01-01'. This requires creating a DatetimeIndex starting from '2016-01-01', finding the second Friday of each month, and creating 13 periods."
}
{
    "question_id": "508657-65",
    "nl": "Create multidimensional array `matrix` with 3 rows and 2 columns in python",
    "cmd": "matrix = [[a, b], [c, d], [e, f]]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [[a, b], [c, d], [e, f]]",
    "cmd_name": "conala",
    "gpt35_response": " Create multidimensional array `matrix` with 3 rows and 2 columns in Python. This requires setting the number of rows and columns, creating a list for each row, and filling the rows with values."
}
{
    "question_id": "1007481-89",
    "nl": "replace spaces with underscore",
    "cmd": "mystring.replace(' ', '_')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "mystring.replace(' ', '_')",
    "cmd_name": "conala",
    "gpt35_response": " Replace spaces with underscore. This requires finding all spaces in a string and replacing them with an underscore character."
}
{
    "question_id": "51520-53",
    "nl": "get an absolute file path of file 'mydir\/myfile.txt'",
    "cmd": "os.path.abspath('mydir\/myfile.txt')",
    "oracle_man": [
        "python.library.os.path#os.path.abspath"
    ],
    "canonical_cmd": "os.path.abspath('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get an absolute file path of file 'mydir\/myfile.txt'. This requires finding the current working directory, adding the path 'mydir\/myfile.txt' to it, and resolving any symbolic links."
}
{
    "question_id": "1249786-22",
    "nl": "split string `my_string` on white spaces",
    "cmd": "\"\"\" \"\"\".join(my_string.split())",
    "oracle_man": [
        "python.library.stdtypes#str.join",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR.split())",
    "cmd_name": "conala",
    "gpt35_response": " Split string `my_string` on white spaces. This requires finding all spaces in `my_string` and splitting it into substrings at those positions."
}
{
    "question_id": "4444923-74",
    "nl": "get filename without extension from file `filename`",
    "cmd": "os.path.splitext(filename)[0]",
    "oracle_man": [
        "python.library.os.path#os.path.splitext"
    ],
    "canonical_cmd": "os.path.splitext(VAR_STR)[0]",
    "cmd_name": "conala",
    "gpt35_response": " Get filename without extension from file `filename`. This requires finding the file extension, removing it from the filename, and returning the new filename."
}
{
    "question_id": "13728486-26",
    "nl": "get a list containing the sum of each element `i` in list `l` plus the previous elements",
    "cmd": "[sum(l[:i]) for i, _ in enumerate(l)]",
    "oracle_man": [
        "python.library.functions#enumerate",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[sum(VAR_STR[:VAR_STR]) for VAR_STR, _ in enumerate(VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list containing the sum of each element `i` in list `l` plus the previous elements. This requires iterating through all elements in `l` and keeping a running sum of the previous elements."
}
{
    "question_id": "9743134-38",
    "nl": "split a string `Docs\/src\/Scripts\/temp` by `\/` keeping `\/` in the result",
    "cmd": "\"\"\"Docs\/src\/Scripts\/temp\"\"\".replace('\/', '\/\\x00\/').split('\\x00')",
    "oracle_man": [
        "python.library.stdtypes#str.replace",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace('VAR_STR', '\/\\x00\/').split('\\x00')",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `Docs\/src\/Scripts\/temp` by `\/` keeping `\/` in the result. This requires finding all occurances of `\/` in the string and splitting it into substrings at those positions while keeping the `\/` characters."
}
{
    "question_id": "32675861-45",
    "nl": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'",
    "cmd": "df['D'] = df['B']",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Copy all values in a column 'B' to a new column 'D' in a Pandas data frame 'df'. This requires selecting column 'B' from the data frame and assigning it to a new column 'D'."
}
{
    "question_id": "14227561-68",
    "nl": "find a value within nested json 'data' where the key inside another key 'B' is unknown.",
    "cmd": "list(data['A']['B'].values())[0]['maindata'][0]['Info']",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "list(VAR_STR['A']['VAR_STR'].values())[0]['maindata'][0]['Info']",
    "cmd_name": "conala",
    "gpt35_response": " Find a value within nested JSON 'data' where the key inside another key 'B' is unknown. This requires recursively searching through all keys in the JSON data and finding the value where key `B` contains an unknown key."
}
{
    "question_id": "14858916-19",
    "nl": "check characters of string `string` are true predication of function `predicate`",
    "cmd": "all(predicate(x) for x in string)",
    "oracle_man": [
        "python.library.functions#all"
    ],
    "canonical_cmd": "all(VAR_STR(x) for x in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check characters of string `string` are true prediction of function `predicate`. This requires iterating through all characters in `string` and checking if they satisfy the function `predicate`."
}
{
    "question_id": "6378889-70",
    "nl": "convert string `user_input` into a list of integers `user_list`",
    "cmd": "user_list = [int(number) for number in user_input.split(',')]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR = [int(number) for number in VAR_STR.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Convert string `user_input` into a list of integers `user_list`. This requires splitting the string into substrings at commas, converting each substring to an integer, and appending it to a new list."
}
{
    "question_id": "6378889-60",
    "nl": "Get a list of integers by splitting  a string `user` with comma",
    "cmd": "[int(s) for s in user.split(',')]",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[int(s) for s in VAR_STR.split(',')]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of integers by splitting a string `user` with comma. This requires finding all commas in the string and splitting it into substrings at those positions, converting each substring to an integer, and adding it to a new list."
}
{
    "question_id": "5212870-42",
    "nl": "Sorting a Python list by two criteria",
    "cmd": "sorted(list, key=lambda x: (x[0], -x[1]))",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(list, key=lambda x: (x[0], -x[1]))",
    "cmd_name": "conala",
    "gpt35_response": " Sorting a Python list by two criteria. This requires defining two functions for each criterion and sorting the list based on both of them."
}
{
    "question_id": "403421-17",
    "nl": "sort a list of objects `ut`, based on a function `cmpfun` in descending order",
    "cmd": "ut.sort(key=cmpfun, reverse=True)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=VAR_STR, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of objects `ut`, based on a function `cmpfun` in descending order. This requires defining a function `cmpfun` for comparing two objects and sorting the list in descending order based on it."
}
{
    "question_id": "403421-16",
    "nl": "reverse list `ut` based on the `count` attribute of each object",
    "cmd": "ut.sort(key=lambda x: x.count, reverse=True)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x.VAR_STR, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Reverse list `ut` based on the `count` attribute of each object. This requires defining a function for retrieving the `count` attribute of each object, sorting the list based on it in reverse order, and returning the sorted list."
}
{
    "question_id": "403421-6",
    "nl": "sort a list of objects `ut` in reverse order by their `count` property",
    "cmd": "ut.sort(key=lambda x: x.count, reverse=True)",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x.VAR_STR, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of objects `ut` in reverse order by their `count` property. This requires defining a function for retrieving the `count` property of each object, sorting the list based on it in reverse order, and returning the sorted list."
}
{
    "question_id": "19601086-79",
    "nl": "click a href button 'Send' with selenium",
    "cmd": "driver.find_element_by_partial_link_text('Send').click()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_partial_link_text('VAR_STR').click()",
    "cmd_name": "conala",
    "gpt35_response": " Click a href button 'Send' with Selenium. This requires finding the element with the href attribute 'Send' on the Selenium driver and performing a click operation on it."
}
{
    "question_id": "19601086-21",
    "nl": "click a href button having text `Send InMail` with selenium",
    "cmd": "driver.findElement(By.linkText('Send InMail')).click()",
    "oracle_man": [],
    "canonical_cmd": "driver.findElement(By.linkText('VAR_STR')).click()",
    "cmd_name": "conala",
    "gpt35_response": "- Click a href button having text `Send InMail` with selenium. This requires finding the button element with text `Send InMail`, getting the button's href attribute, and clicking it."
}
{
    "question_id": "19601086-18",
    "nl": "click a href button with text 'Send InMail' with selenium",
    "cmd": "driver.find_element_by_link_text('Send InMail').click()",
    "oracle_man": [],
    "canonical_cmd": "driver.find_element_by_link_text('VAR_STR').click()",
    "cmd_name": "conala",
    "gpt35_response": " Click a href button with text 'Send InMail' with selenium. This requires finding the button element with text 'Send InMail', getting the button's href attribute, and clicking it. "
}
{
    "question_id": "3944876-69",
    "nl": "cast an int `i` to a string and concat to string 'ME'",
    "cmd": "'ME' + str(i)",
    "oracle_man": [
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "'VAR_STR' + str(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Cast an int `i` to a string and concat to string 'ME'. This requires casting `i` to a string using the `str()` function and concatenating it to the string 'ME' using the `+` operator."
}
{
    "question_id": "40903174-8",
    "nl": "Sorting data in DataFrame Pandas",
    "cmd": "df.sort_values(['System_num', 'Dis'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.sort_values"
    ],
    "canonical_cmd": "df.sort_values(['System_num', 'Dis'])",
    "cmd_name": "conala",
    "gpt35_response": " Sorting data in DataFrame Pandas. This requires calling the `sort_values()` method on the DataFrame and specifying the column(s) to sort by and the sort order."
}
{
    "question_id": "19729928-41",
    "nl": "sort a list `l` by length of value in tuple",
    "cmd": "l.sort(key=lambda t: len(t[1]), reverse=True)",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda t: len(t[1]), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list `l` by length of value in tuple. This requires passing a function as the `key` parameter in the `sort()` method, where the function extracts the value from the tuple and returns its length. "
}
{
    "question_id": "31371879-21",
    "nl": "split string `s` by words that ends with 'd'",
    "cmd": "re.findall('\\\\b(\\\\w+)d\\\\b', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\b(\\\\w+)d\\\\b', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `s` by words that ends with 'd'. This requires using the `split()` method with a regular expression pattern that matches the words that end with 'd'."
}
{
    "question_id": "4284648-18",
    "nl": "convert elements of each tuple in list `l` into a string  separated by character `@`",
    "cmd": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join([('%d@%d' % t) for t in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert elements of each tuple in list `l` into a string separated by character `@`. This requires iterating through each tuple in the list, converting each element to a string, joining them together with the `@` character, and appending the resulting string to a new list."
}
{
    "question_id": "4284648-27",
    "nl": "convert each tuple in list `l` to a string with '@' separating the tuples' elements",
    "cmd": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert each tuple in list `l` to a string with '@' separating the tuples' elements. This requires iterating through each tuple in the list, converting each element to a string, joining them together with the `@` character, and appending the resulting string to a new list. "
}
{
    "question_id": "26809954-5",
    "nl": "get the html from the current web page of a Selenium driver",
    "cmd": "driver.execute_script('return document.documentElement.outerHTML;')",
    "oracle_man": [],
    "canonical_cmd": "driver.execute_script('return document.documentElement.outerHTML;')",
    "cmd_name": "conala",
    "gpt35_response": " Get the html from the current web page of a Selenium driver. This requires calling the `page_source` attribute of the Selenium driver object. "
}
{
    "question_id": "29696641-55",
    "nl": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`",
    "cmd": "[i for i in teststr if re.search('\\\\d+[xX]', i)]",
    "oracle_man": [
        "python.library.re#re.search"
    ],
    "canonical_cmd": "[i for i in VAR_STR if re.search('VAR_STR', i)]",
    "cmd_name": "conala",
    "gpt35_response": " Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`. This requires iterating through each string in the list, applying the regex pattern using the `findall()` method, and appending the resulting list of matches to a new list."
}
{
    "question_id": "15315452-50",
    "nl": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`",
    "cmd": "df['A'][(df['B'] > 50) & (df['C'] == 900)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'][(VAR_STR['VAR_STR'] > 50) & (VAR_STR['VAR_STR'] == 900)]",
    "cmd_name": "conala",
    "gpt35_response": " Select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`. This requires calling the `loc[]` method on the DataFrame `df` and passing it a boolean indexer that specifies the required conditions for columns 'B' and 'C'."
}
{
    "question_id": "4642501-94",
    "nl": "Sort dictionary `o` in ascending order based on its keys and items",
    "cmd": "sorted(o.items())",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(VAR_STR.items())",
    "cmd_name": "conala",
    "gpt35_response": " Sort dictionary `o` in ascending order based on its keys and items. This requires passing a function as the `key` parameter in the `sorted()` function that first sorts by keys and then by values."
}
{
    "question_id": "4642501-41",
    "nl": "get sorted list of keys of dict `d`",
    "cmd": "sorted(d)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get sorted list of keys of dict `d`. This requires calling the `sorted()` function on the `keys()` method of the dictionary `d`."
}
{
    "question_id": "4642501-26",
    "nl": "How to sort dictionaries by keys in Python",
    "cmd": "sorted(d.items())",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(d.items())",
    "cmd_name": "conala",
    "gpt35_response": " How to sort dictionaries by keys in Python. This requires calling the `sorted()` function on the dictionary `d` directly since by default dictionaries are ordered by their keys. "
}
{
    "question_id": "642154-86",
    "nl": "convert string \"1\" into integer",
    "cmd": "int('1')",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert string \"1\" into integer. This requires calling the `int()` function on the string '1'."
}
{
    "question_id": "642154-48",
    "nl": "function to convert strings into integers",
    "cmd": "int()",
    "oracle_man": [
        "python.library.functions#int"
    ],
    "canonical_cmd": "int()",
    "cmd_name": "conala",
    "gpt35_response": " Function to convert strings into integers. This requires defining a function that takes a string parameter, and then calls the `int()` function on that parameter before returning it. "
}
{
    "question_id": "642154-35",
    "nl": "convert items in `T1` to integers",
    "cmd": "T2 = [map(int, x) for x in T1]",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "T2 = [map(int, x) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert items in `T1` to integers. This requires iterating through each item in the list `T1` and calling the `int()` function on each item, overwriting the original item in the process. "
}
{
    "question_id": "3777301-68",
    "nl": "call a shell script `.\/test.sh` using subprocess",
    "cmd": "subprocess.call(['.\/test.sh'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Call a shell script `.\/test.sh` using subprocess. This requires creating a `subprocess.Popen()` object with the shell command as a string argument. "
}
{
    "question_id": "3777301-80",
    "nl": "call a shell script `notepad` using subprocess",
    "cmd": "subprocess.call(['notepad'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Call a shell script `notepad` using subprocess. This requires creating a `subprocess.Popen()` object with the shell command as a list of string arguments."
}
{
    "question_id": "7946798-38",
    "nl": "combine lists `l1` and `l2`  by alternating their elements",
    "cmd": "[val for pair in zip(l1, l2) for val in pair]",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "[val for pair in zip(VAR_STR, VAR_STR) for val in pair]",
    "cmd_name": "conala",
    "gpt35_response": " Combine lists `l1` and `l2` by alternating their elements. This requires iterating through both lists simultaneously, interleaving the elements from each list, and appending the resulting element to a new list."
}
{
    "question_id": "7856296-87",
    "nl": "parse tab-delimited CSV file 'text.txt' into a list",
    "cmd": "lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\\t'))",
    "oracle_man": [
        "python.library.csv#csv.reader",
        "python.library.functions#list",
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "lol = list(csv.reader(open('VAR_STR', 'rb'), delimiter='\\t'))",
    "cmd_name": "conala",
    "gpt35_response": "- Parse tab-delimited CSV file 'text.txt' into a list. This requires reading file 'text.txt', parsing it as tab-delimited CSV file and storing the contents as a list."
}
{
    "question_id": "5558418-19",
    "nl": "group a list of dicts `LD` into one dict by key",
    "cmd": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "print(dict(zip(VAR_STR[0], zip(*[list(d.values()) for d in VAR_STR]))))",
    "cmd_name": "conala",
    "gpt35_response": " Group a list of dicts `LD` into one dict by key. This requires iterating through the list to group the dicts by key into a new dictionary."
}
{
    "question_id": "638048-68",
    "nl": "How do I sum the first value in each tuple in a list of tuples in Python?",
    "cmd": "sum([pair[0] for pair in list_of_pairs])",
    "oracle_man": [
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum([pair[0] for pair in list_of_pairs])",
    "cmd_name": "conala",
    "gpt35_response": " How do I sum the first value in each tuple in a list of tuples in Python? This requires iterating through the list, accessing the first value of each tuple and obtaining the sum of those values."
}
{
    "question_id": "14950260-11",
    "nl": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary",
    "cmd": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")",
    "oracle_man": [
        "python.library.ast#ast.literal_eval"
    ],
    "canonical_cmd": "d = ast.literal_eval('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Convert unicode string u\"{'code1':1,'code2':1}\" into dictionary. This requires decoding the unicode string and parsing it as a dictionary."
}
{
    "question_id": "11416772-97",
    "nl": "find all words in a string `mystring` that start with the `$` sign",
    "cmd": "[word for word in mystring.split() if word.startswith('$')]",
    "oracle_man": [
        "python.library.stdtypes#str.startswith",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[word for word in VAR_STR.split() if word.startswith('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Find all words in a string `mystring` that start with the `$` sign. This requires splitting the string into words and iterating through them to find those that start with `$`."
}
{
    "question_id": "11331982-33",
    "nl": "remove any url within string `text`",
    "cmd": "text = re.sub('^https?:\\\\\/\\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "VAR_STR = re.sub('^https?:\\\\\/\\\\\/.*[\\\\r\\\\n]*', '', VAR_STR, flags=re.MULTILINE)",
    "cmd_name": "conala",
    "gpt35_response": " Remove any URL within string `text`. This requires identifying any URLs in the string and removing them."
}
{
    "question_id": "19894365-51",
    "nl": "running r script '\/pathto\/MyrScript.r' from python",
    "cmd": "subprocess.call(['\/usr\/bin\/Rscript', '--vanilla', '\/pathto\/MyrScript.r'])",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call(['\/usr\/bin\/Rscript', '--vanilla', 'VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Running R script '\/pathto\/MyrScript.r' from Python. This requires calling the R interpreter within Python and executing the R script located at '\/pathto\/MyrScript.r'."
}
{
    "question_id": "19894365-72",
    "nl": "run r script '\/usr\/bin\/Rscript --vanilla \/pathto\/MyrScript.r'",
    "cmd": "subprocess.call('\/usr\/bin\/Rscript --vanilla \/pathto\/MyrScript.r', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.call"
    ],
    "canonical_cmd": "subprocess.call('VAR_STR', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " Run R script '\/usr\/bin\/Rscript --vanilla \/pathto\/MyrScript.r'. This requires running the R interpreter on a command line and providing it with the location of the script."
}
{
    "question_id": "33058590-67",
    "nl": "replacing nan in the dataframe `df` with row average",
    "cmd": "df.fillna(df.mean(axis=1), axis=1)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.fillna",
        "pandas.reference.api.pandas.dataframe.mean"
    ],
    "canonical_cmd": "VAR_STR.fillna(VAR_STR.mean(axis=1), axis=1)",
    "cmd_name": "conala",
    "gpt35_response": " Replacing NaN in the dataframe `df` with row average. This requires iterating through the rows of the dataframe, identifying NaN values, and replacing them with the average value of the remaining values in the row."
}
{
    "question_id": "12400256-14",
    "nl": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'",
    "cmd": "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))",
    "oracle_man": [
        "python.library.time#time.localtime",
        "python.library.time#time.strftime"
    ],
    "canonical_cmd": "time.strftime('VAR_STR', time.localtime(1347517370))",
    "cmd_name": "conala",
    "gpt35_response": " Convert Unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'. This requires converting the timestamp to a Python datetime object and then formatting it as a string."
}
{
    "question_id": "1269217-89",
    "nl": "Call a base class's class method `do` from derived class `Derived`",
    "cmd": "super(Derived, cls).do(a)",
    "oracle_man": [
        "python.library.functions#super"
    ],
    "canonical_cmd": "super(VAR_STR, cls).VAR_STR(a)",
    "cmd_name": "conala",
    "gpt35_response": " Call a base class's class method `do` from derived class `Derived`. This requires calling the `do` method of the base class from within the `Derived` class."
}
{
    "question_id": "4383082-35",
    "nl": "separate words delimited by one or more spaces into a list",
    "cmd": "re.split(' +', 'hello world sample text')",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split(' +', 'hello world sample text')",
    "cmd_name": "conala",
    "gpt35_response": " Separate words delimited by one or more spaces into a list. This requires splitting the string by spaces and constructing a list from the resulting elements."
}
{
    "question_id": "14637696-27",
    "nl": "length of longest element in list `words`",
    "cmd": "len(max(words, key=len))",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#max"
    ],
    "canonical_cmd": "len(max(VAR_STR, key=len))",
    "cmd_name": "conala",
    "gpt35_response": " Length of longest element in list `words`. This requires iterating over the list to find the length of each element, and then identifying the maximum length."
}
{
    "question_id": "3933478-38",
    "nl": "get the value associated with unicode key 'from_user' of first dictionary in list `result`",
    "cmd": "result[0]['from_user']",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[0]['VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Get the value associated with Unicode key 'from_user' of the first dictionary in list `result`. This requires accessing the first dictionary in the list `result` and getting the value associated with the Unicode key 'from_user'."
}
{
    "question_id": "39112645-91",
    "nl": "Retrieve each line from a file 'File.txt' as a list",
    "cmd": "[line.split() for line in open('File.txt')]",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "[line.split() for line in open('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Retrieve each line from a file 'File.txt' as a list. This requires opening the file 'File.txt' and reading its contents line by line into a list."
}
{
    "question_id": "1031851-75",
    "nl": "swap keys with values in a dictionary `a`",
    "cmd": "res = dict((v, k) for k, v in a.items())",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "res = dict((v, k) for k, v in VAR_STR.items())",
    "cmd_name": "conala",
    "gpt35_response": " Swap keys with values in a dictionary `a`. This requires iterating through the dictionary and swapping the position of the keys with their respective values."
}
{
    "question_id": "8577137-50",
    "nl": "Open a file `path\/to\/FILE_NAME.ext` in write mode",
    "cmd": "new_file = open('path\/to\/FILE_NAME.ext', 'w')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "new_file = open('VAR_STR', 'w')",
    "cmd_name": "conala",
    "gpt35_response": " Open a file `path\/to\/FILE_NAME.ext` in write mode. This requires opening the specified file in write mode, in order to write to it."
}
{
    "question_id": "17926273-6",
    "nl": "How to count distinct values in a column of a pandas group by object?",
    "cmd": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.reset_index",
        "pandas.reference.api.pandas.dataframe.nunique"
    ],
    "canonical_cmd": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()",
    "cmd_name": "conala",
    "gpt35_response": " How to count distinct values in a column of a Pandas group by object? This requires grouping the DataFrame by the chosen column, and then obtaining the count of unique values in that column."
}
{
    "question_id": "3735814-44",
    "nl": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`",
    "cmd": "any(key.startswith('EMP$$') for key in dict1)",
    "oracle_man": [
        "python.library.functions#any",
        "python.library.stdtypes#str.startswith"
    ],
    "canonical_cmd": "any(key.startswith('VAR_STR') for key in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if any key in the dictionary `dict1` starts with the string `EMP$$`. This requires iterating through the keys of the dictionary and testing them for a match with the specified string."
}
{
    "question_id": "3735814-56",
    "nl": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'",
    "cmd": "[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#str.startswith",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "[value for key, value in list(VAR_STR.items()) if key.startswith('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list of values from dictionary `dict1` that have a key that starts with 'EMP$$'. This requires iterating through the dictionary and creating a new list of the values from keys starting with 'EMP$$'."
}
{
    "question_id": "4048964-99",
    "nl": "print elements of list `list` seperated by tabs `\\t`",
    "cmd": "print('\\t'.join(map(str, list)))",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "print('VAR_STR'.join(map(str, VAR_STR)))",
    "cmd_name": "conala",
    "gpt35_response": "- Print elements of list `list` separated by tabs `\\t`. This requires looping through the elements of list `list` and printing each element separated by tabs. "
}
{
    "question_id": "3182716-62",
    "nl": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8",
    "cmd": "print('\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('raw_unicode_escape'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print('VAR_STR'.encode('raw_unicode_escape'))",
    "cmd_name": "conala",
    "gpt35_response": " Print Unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with UTF-8. This requires encoding the Unicode string with UTF-8 and then printing it. "
}
{
    "question_id": "3182716-21",
    "nl": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly",
    "cmd": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".encode('latin-1').decode('utf-8')",
    "cmd_name": "conala",
    "gpt35_response": " Encode a Latin character in string `Sopet\\xc3\\xb3n` properly. This requires encoding the Latin character properly in the string `Sopet\\xc3\\xb3n`. "
}
{
    "question_id": "35622945-39",
    "nl": "regex, find \"n\"s only in the middle of string `s`",
    "cmd": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Regex, find \"n\"s only in the middle of string `s`. This requires using regular expression to find the letter \"n\" in the middle of string `s`. "
}
{
    "question_id": "5306756-0",
    "nl": "display the float `1\/3*100` as a percentage",
    "cmd": "print('{0:.0f}%'.format(1.0 \/ 3 * 100))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('{0:.0f}%'.format(1.0 \/ 3 * 100))",
    "cmd_name": "conala",
    "gpt35_response": " Display the float `1\/3*100` as a percentage. This requires converting the float into a percentage and then displaying it. "
}
{
    "question_id": "2878084-9",
    "nl": "sort a list of dictionary `mylist` by the key `title`",
    "cmd": "mylist.sort(key=lambda x: x['title'])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionary `mylist` by the key `title`. This requires using the `sorted()` function to sort the list of dictionaries `mylist` by the value of the key `title`. "
}
{
    "question_id": "2878084-61",
    "nl": "sort a list `l` of dicts by dict value 'title'",
    "cmd": "l.sort(key=lambda x: x['title'])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list `l` of dicts by dict value 'title'. This requires using the `sorted()` function to sort the list `l` of dictionaries by the value of the key `title`. "
}
{
    "question_id": "2878084-50",
    "nl": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.",
    "cmd": "l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "l.sort(key=lambda x: (x['VAR_STR'], x['VAR_STR'], x['VAR_STR']))",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order. This requires using the `sorted()` function to sort the list of dictionaries by the value of the keys 'title', 'title_url', and 'id' in ascending order. "
}
{
    "question_id": "24189150-87",
    "nl": "write records in dataframe `df` to table 'test' in schema 'a_schema'",
    "cmd": "df.to_sql('test', engine, schema='a_schema')",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.to_sql"
    ],
    "canonical_cmd": "VAR_STR.to_sql('VAR_STR', engine, schema='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Write records in dataframe `df` to table 'test' in schema 'a_schema'. This requires using the appropriate library and function to write the records in dataframe `df` to the specified table 'test' in schema 'a_schema'. "
}
{
    "question_id": "30766151-61",
    "nl": "Extract brackets from string `s`",
    "cmd": "brackets = re.sub('[^(){}[\\\\]]', '', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "brackets = re.sub('[^(){}[\\\\]]', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Extract brackets from string `s`. This requires using regular expression to extract the brackets from the string `s`. "
}
{
    "question_id": "1143379-23",
    "nl": "remove duplicate elements from list 'L'",
    "cmd": "list(dict((x[0], x) for x in L).values())",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.functions#list",
        "python.library.stdtypes#dict.values"
    ],
    "canonical_cmd": "list(dict((x[0], x) for x in VAR_STR).values())",
    "cmd_name": "conala",
    "gpt35_response": " Remove duplicate elements from list 'L'. This requires creating a new list and only adding elements that are not already in the list. "
}
{
    "question_id": "12330522-51",
    "nl": "read a file `file` without newlines",
    "cmd": "[line.rstrip('\\n') for line in file]",
    "oracle_man": [
        "python.library.stdtypes#str.rstrip"
    ],
    "canonical_cmd": "[line.rstrip('\\n') for line in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Read a file `file` without newlines. This requires using the appropriate function to read the file `file` and remove any newline characters. "
}
{
    "question_id": "364621-80",
    "nl": "get the position of item 1 in `testlist`",
    "cmd": "[i for (i, x) in enumerate(testlist) if (x == 1)]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, x in enumerate(VAR_STR) if x == 1]",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item 1 in `testlist`. This requires using the `index()` function to get the position of item 1 in `testlist`. "
}
{
    "question_id": "364621-61",
    "nl": "get the position of item 1 in `testlist`",
    "cmd": "[i for (i, x) in enumerate(testlist) if (x == 1)]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "[i for i, x in enumerate(VAR_STR) if x == 1]",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item 1 in `testlist`. This requires using the `index()` function to get the position of item 1 in `testlist`. "
}
{
    "question_id": "364621-20",
    "nl": "get the position of item 1 in `testlist`",
    "cmd": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "for i in [i for i, x in enumerate(VAR_STR) if x == 1]:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item 1 in `testlist`. This requires using the `index()` function to get the position of item 1 in `testlist`. "
}
{
    "question_id": "364621-36",
    "nl": "get the position of item 1 in `testlist`",
    "cmd": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "for i in (i for i, x in enumerate(VAR_STR) if x == 1):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item 1 in `testlist`. This requires using the `index()` function to get the position of item 1 in `testlist`. "
}
{
    "question_id": "364621-75",
    "nl": "get the position of item 1 in `testlist`",
    "cmd": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "gen = (i for i, x in enumerate(VAR_STR) if x == 1)\nfor i in gen:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item 1 in `testlist`. This requires using the `index()` function to get the position of item 1 in `testlist`. "
}
{
    "question_id": "364621-47",
    "nl": "get the position of item `element` in list `testlist`",
    "cmd": "print(testlist.index(element))",
    "oracle_man": [
        "python.library.stdtypes#str.index"
    ],
    "canonical_cmd": "print(VAR_STR.index(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item `element` in list `testlist`. This requires using the `index()` function to get the position of `element` in list `testlist`. "
}
{
    "question_id": "364621-83",
    "nl": "get the position of item `element` in list `testlist`",
    "cmd": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass",
    "oracle_man": [
        "python.library.stdtypes#str.index"
    ],
    "canonical_cmd": "try:\n    print(VAR_STR.index(VAR_STR))\nexcept ValueError:\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Get the position of item `element` in list `testlist`. This requires using the `index()` function to get the position of `element` in list `testlist`. "
}
{
    "question_id": "13145368-76",
    "nl": "find the first element of the tuple with the maximum second element in a list of tuples `lis`",
    "cmd": "max(lis, key=lambda item: item[1])[0]",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "max(VAR_STR, key=lambda item: item[1])[0]",
    "cmd_name": "conala",
    "gpt35_response": " Find the first element of the tuple with the maximum second element in a list of tuples `lis`. This requires looping through the list of tuples `lis` and comparing the second element of each tuple to find the maximum second element, then retrieving the first element of the tuple that has the maximum second element."
}
{
    "question_id": "13145368-44",
    "nl": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`",
    "cmd": "max(lis, key=itemgetter(1))[0]",
    "oracle_man": [
        "python.library.functions#max",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "max(VAR_STR, key=itemgetter(1))[0]",
    "cmd_name": "conala",
    "gpt35_response": "- Get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`. This requires finding the maximum value at index 1 in the list `lis`, selecting the tuple that contains that value, and retrieving the item at index 0 from that tuple."
}
{
    "question_id": "2689189-26",
    "nl": "Make a delay of 1 second",
    "cmd": "time.sleep(1)",
    "oracle_man": [
        "python.library.time#time.sleep"
    ],
    "canonical_cmd": "time.sleep(1)",
    "cmd_name": "conala",
    "gpt35_response": " Make a delay of 1 second. This requires adding a pause of 1 second before proceeding further in the code."
}
{
    "question_id": "12485244-21",
    "nl": "convert list of tuples `L` to a string",
    "cmd": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of tuples `L` to a string. This requires iterating through the list `L`, converting each tuple to a string, and joining them together into a final string."
}
{
    "question_id": "755857-66",
    "nl": "Django set default value of field `b` equal to '0000000'",
    "cmd": "b = models.CharField(max_length=7, default='0000000', editable=False)",
    "oracle_man": [
        "django.ref.forms.fields#django.forms.CharField"
    ],
    "canonical_cmd": "VAR_STR = models.CharField(max_length=7, default='VAR_STR', editable=False)",
    "cmd_name": "conala",
    "gpt35_response": " Django set default value of field `b` equal to '0000000'. This requires specifying the default value of '0000000' for the field `b` in the Django model."
}
{
    "question_id": "16041405-85",
    "nl": "convert a list  into a generator object",
    "cmd": "(n for n in [1, 2, 3, 5])",
    "oracle_man": [],
    "canonical_cmd": "(n for n in [1, 2, 3, 5])",
    "cmd_name": "conala",
    "gpt35_response": " Convert a list into a generator object. This requires using the `yield` keyword in a function to turn the list into a generator object."
}
{
    "question_id": "18837607-60",
    "nl": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`",
    "cmd": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]",
    "oracle_man": [
        "python.library.functions#enumerate"
    ],
    "canonical_cmd": "newlist = [v for i, v in enumerate(VAR_STR) if i not in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Remove elements from list `oldlist` that have an index number mentioned in list `removelist`. This requires iterating through `removelist` and removing each element in `oldlist` at the corresponding index."
}
{
    "question_id": "4710067-84",
    "nl": "Open a file `yourfile.txt` in write mode",
    "cmd": "f = open('yourfile.txt', 'w')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "f = open('VAR_STR', 'w')",
    "cmd_name": "conala",
    "gpt35_response": " Open a file `yourfile.txt` in write mode. This involves using the `open()` function with the file name and the write mode argument, which will return a file object."
}
{
    "question_id": "8171751-92",
    "nl": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple",
    "cmd": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))",
    "oracle_man": [],
    "canonical_cmd": "from functools import reduce\nreduce(lambda a, b: a + b, (VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to a tuple. This requires converting the tuple of tuples to a flattened tuple."
}
{
    "question_id": "8171751-59",
    "nl": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line",
    "cmd": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(lambda a: a[0], (VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to a list in one line. This requires using a list comprehension to convert each tuple in the tuple of tuples to a list and then wrapping the whole thing in a `list()` call."
}
{
    "question_id": "28986489-84",
    "nl": "Python Pandas: How to replace a characters in a column of a dataframe?",
    "cmd": "df['range'].replace(',', '-', inplace=True)",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "df['range'].replace(',', '-', inplace=True)",
    "cmd_name": "conala",
    "gpt35_response": " Python Pandas: How to replace a characters in a column of a dataframe? This requires using the `.replace()` method on the specified column of the dataframe to replace the desired character(s)."
}
{
    "question_id": "19339-13",
    "nl": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`",
    "cmd": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*[VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`. This requires using the `zip()` function with the unpacking operator `*` to reverse the original zip operation."
}
{
    "question_id": "19339-3",
    "nl": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`",
    "cmd": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*[VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`. This requires using the `zip()` function with the unpacking operator `*` to reverse the original zip operation."
}
{
    "question_id": "19339-46",
    "nl": "unzip list `original`",
    "cmd": "result = ([a for (a, b) in original], [b for (a, b) in original])",
    "oracle_man": [],
    "canonical_cmd": "result = [a for a, b in VAR_STR], [b for a, b in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Unzip list `original`. This will unpack the pairs in the aggregated list `original`."
}
{
    "question_id": "19339-60",
    "nl": "unzip list `original` and return a generator",
    "cmd": "result = ((a for (a, b) in original), (b for (a, b) in original))",
    "oracle_man": [],
    "canonical_cmd": "result = (a for a, b in VAR_STR), (b for a, b in VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Unzip list `original` and return a generator. This will unpack the pairs in the aggregated list `original` and return a generator object."
}
{
    "question_id": "19339-8",
    "nl": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`",
    "cmd": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
    "oracle_man": [
        "python.library.functions#zip"
    ],
    "canonical_cmd": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
    "cmd_name": "conala",
    "gpt35_response": " Unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`. This requires using the `zip()` function with the unpacking operator `*` to reverse the original zip operation. The last element will be mapped to `None`."
}
{
    "question_id": "19339-17",
    "nl": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None",
    "cmd": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
    "oracle_man": [
        "python.library.functions#map"
    ],
    "canonical_cmd": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
    "cmd_name": "conala",
    "gpt35_response": " Unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None. This requires using the `zip_longest()` function with the unpacking operator `*` to reverse the original zip operation, which will fill in the missing value `None`."
}
{
    "question_id": "1024847-42",
    "nl": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"",
    "cmd": "d['mynewkey'] = 'mynewvalue'",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR['VAR_STR'] = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\". This requires using the dictionary assignment operator `=` to add a new key-value pair to the dictionary."
}
{
    "question_id": "1024847-44",
    "nl": "Add key 'a' to dictionary `data` with value 1",
    "cmd": "data.update({'a': 1, })",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update({'VAR_STR': 1})",
    "cmd_name": "conala",
    "gpt35_response": " Add key 'a' to dictionary `data` with value 1. This requires using the dictionary assignment operator `=` to add a new key-value pair to the `data` dictionary."
}
{
    "question_id": "1024847-96",
    "nl": "Add key 'a' to dictionary `data` with value 1",
    "cmd": "data.update(dict(a=1))",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update(dict(VAR_STR=1))",
    "cmd_name": "conala",
    "gpt35_response": " Add key 'a' to dictionary `data` with value 1. This requires using the dictionary assignment operator `=` to add a new key-value pair to the `data` dictionary."
}
{
    "question_id": "1024847-96",
    "nl": "Add key 'a' to dictionary `data` with value 1",
    "cmd": "data.update(a=1)",
    "oracle_man": [
        "python.library.stdtypes#dict",
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update(VAR_STR=1)",
    "cmd_name": "conala",
    "gpt35_response": " Add key 'a' to dictionary `data` with value 1. This requires using the dictionary assignment operator `=` to add a new key-value pair to the `data` dictionary."
}
{
    "question_id": "35837346-37",
    "nl": "find maximal value in matrix `matrix`",
    "cmd": "max([max(i) for i in matrix])",
    "oracle_man": [
        "python.library.functions#max"
    ],
    "canonical_cmd": "max([max(i) for i in VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": "- Find maximal value in matrix `matrix`. This requires iterating over each element in the matrix and keeping track of the current maximum value."
}
{
    "question_id": "20457038-38",
    "nl": "Round number `answer` to 2 precision after the decimal point",
    "cmd": "answer = str(round(answer, 2))",
    "oracle_man": [
        "python.library.functions#round",
        "python.library.stdtypes#str"
    ],
    "canonical_cmd": "VAR_STR = str(round(VAR_STR, 2))",
    "cmd_name": "conala",
    "gpt35_response": " Round number `answer` to 2 precision after the decimal point. This requires using the built-in function to round a number to 2 decimal places."
}
{
    "question_id": "2890896-87",
    "nl": "extract ip address from an html string",
    "cmd": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)",
    "cmd_name": "conala",
    "gpt35_response": " Extract IP address from an HTML string. This requires using a regular expression to identify the IP address pattern and extract it from the string."
}
{
    "question_id": "2545397-74",
    "nl": "append each line in file `myfile` into a list",
    "cmd": "[x for x in myfile.splitlines() if x != '']",
    "oracle_man": [
        "python.library.stdtypes#str.splitlines"
    ],
    "canonical_cmd": "[x for x in VAR_STR.splitlines() if x != '']",
    "cmd_name": "conala",
    "gpt35_response": " Append each line in file `myfile` into a list. This requires opening the file, iterating over each line, and appending each line to a list."
}
{
    "question_id": "2545397-42",
    "nl": "Get a list of integers `lst` from a file `filename.txt`",
    "cmd": "lst = map(int, open('filename.txt').readlines())",
    "oracle_man": [
        "python.library.functions#map",
        "python.library.urllib.request#open",
        "python.library.io#io.IOBase.readlines"
    ],
    "canonical_cmd": "VAR_STR = map(int, open('VAR_STR').readlines())",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of integers `lst` from a file `filename.txt`. This requires opening the file, iterating over each line, converting each line to an integer, and appending each integer to the list."
}
{
    "question_id": "16330838-72",
    "nl": "Python split a string using regex",
    "cmd": "re.findall('(.+?):(.+?)\\\\b ?', text)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(.+?):(.+?)\\\\b ?', text)",
    "cmd_name": "conala",
    "gpt35_response": " Python split a string using regex. This requires using the `re` module to split the string based on a regular expression pattern."
}
{
    "question_id": "7378180-24",
    "nl": "generate all 2-element subsets of tuple `(1, 2, 3)`",
    "cmd": "list(itertools.combinations((1, 2, 3), 2))",
    "oracle_man": [
        "python.library.itertools#itertools.combinations",
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(itertools.combinations((VAR_STR), 2))",
    "cmd_name": "conala",
    "gpt35_response": " Generate all 2-element subsets of tuple `(1, 2, 3)`. This requires using the built-in function to generate all combinations of length 2 from the tuple."
}
{
    "question_id": "4842956-95",
    "nl": "Get a new list `list2`by removing empty list from a list of lists `list1`",
    "cmd": "list2 = [x for x in list1 if x != []]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x for x in VAR_STR if x != []]",
    "cmd_name": "conala",
    "gpt35_response": " Get a new list `list2` by removing empty list from a list of lists `list1`. This requires iterating over each element in the list of lists, checking if the list is empty, and appending the non-empty lists to a new list."
}
{
    "question_id": "4842956-35",
    "nl": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`",
    "cmd": "list2 = [x for x in list1 if x]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR = [x for x in VAR_STR if x]",
    "cmd_name": "conala",
    "gpt35_response": " Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`. This requires iterating over each element in the list of lists, checking if the list is empty, and appending the non-empty lists to a new list."
}
{
    "question_id": "17284947-68",
    "nl": "get all text that is not enclosed within square brackets in string `example_str`",
    "cmd": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(.*?)\\\\[.*?\\\\]', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get all text that is not enclosed within square brackets in string `example_str`. This requires using a regular expression to match all text that is not within square brackets."
}
{
    "question_id": "17284947-88",
    "nl": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets",
    "cmd": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Use a regex to get all text in a string `example_str` that is not surrounded by square brackets. This requires using a regular expression to match all text that is not surrounded by square brackets."
}
{
    "question_id": "14182339-77",
    "nl": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'",
    "cmd": "re.findall('\\\\(.+?\\\\)|\\\\w', '(zyx)bc')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\(.+?\\\\)|\\\\w', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'. This requires using a regular expression to capture the text between parentheses and the individual characters outside the parentheses."
}
{
    "question_id": "14182339-26",
    "nl": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'",
    "cmd": "re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'. This requires using a regular expression to match the text between parentheses or individual word characters."
}
{
    "question_id": "14182339-43",
    "nl": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`",
    "cmd": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\\\\(.*?\\\\)|\\\\w', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`. This requires using a regular expression to match multiple patterns using the alternation operator."
}
{
    "question_id": "7126916-65",
    "nl": "formate each string cin list `elements` into pattern '%{0}%'",
    "cmd": "elements = ['%{0}%'.format(element) for element in elements]",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "VAR_STR = ['VAR_STR'.format(element) for element in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Format each string in list `elements` into pattern '%{0}%'. This requires iterating over each element in the list, formatting the string with the pattern, and appending the formatted string to a new list."
}
{
    "question_id": "18453566-41",
    "nl": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'",
    "cmd": "[mydict[x] for x in mykeys]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR[x] for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get list of values from dictionary `mydict` w.r.t. list of keys `mykeys`. This requires iterating over each key in `mykeys`, getting the corresponding value from `mydict`, and appending the value to a new list."
}
{
    "question_id": "12692135-58",
    "nl": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary",
    "cmd": "dict([('Name', 'Joe'), ('Age', 22)])",
    "oracle_man": [
        "python.library.stdtypes#dict"
    ],
    "canonical_cmd": "dict([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary. This requires iterating over each tuple in the list and creating a new key-value pair in the dictionary using the elements of the tuple."
}
{
    "question_id": "14401047-34",
    "nl": "average each two columns of array `data`",
    "cmd": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)",
    "oracle_man": [
        "numpy.reference.generated.numpy.reshape",
        "python.library.statistics#statistics.mean"
    ],
    "canonical_cmd": "VAR_STR.reshape(-1, j).mean(axis=1).reshape(VAR_STR.shape[0], -1)",
    "cmd_name": "conala",
    "gpt35_response": " Average each two columns of array `data`. This requires iterating over each row of the array, averaging the values in every two columns, and creating a new array with the averaged values."
}
{
    "question_id": "18886596-10",
    "nl": "double backslash escape all double quotes in string `s`",
    "cmd": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "print(VAR_STR.encode('unicode-escape').replace('\"', '\\\\\"'))",
    "cmd_name": "conala",
    "gpt35_response": " Double backslash escape all double quotes in string `s`. This requires using string manipulation to replace double quotes with escaped double quotes."
}
{
    "question_id": "5932059-97",
    "nl": "split a string into a list of words and whitespace",
    "cmd": "re.split('(\\\\W+)', s)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('(\\\\W+)', s)",
    "cmd_name": "conala",
    "gpt35_response": " Split a string into a list of words and whitespace. This requires using a regular expression to split the string based on whitespace and preserving the whitespace in the resulting list."
}
{
    "question_id": "9938130-67",
    "nl": "plotting stacked barplots on a panda data frame",
    "cmd": "df.plot(kind='barh', stacked=True)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "df.plot(kind='barh', stacked=True)",
    "cmd_name": "conala",
    "gpt35_response": "- Plot stacked barplots on a panda data frame. This requires plotting barplots on a panda data frame and stacking them on top of one another. "
}
{
    "question_id": "35945473-75",
    "nl": "reverse the keys and values in a dictionary `myDictionary`",
    "cmd": "{i[1]: i[0] for i in list(myDictionary.items())}",
    "oracle_man": [
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "{i[1]: i[0] for i in list(VAR_STR.items())}",
    "cmd_name": "conala",
    "gpt35_response": " Reverse the keys and values in a dictionary `myDictionary`. This requires creating an empty dictionary, iterating through the keys and values of `myDictionary`, and adding them to the new dictionary in reversed order. "
}
{
    "question_id": "1303243-70",
    "nl": "check if object `obj` is a string",
    "cmd": "isinstance(obj, str)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, str)",
    "cmd_name": "conala",
    "gpt35_response": " Check if object `obj` is a string. This requires checking the type of `obj` and comparing it to the `str` data type. "
}
{
    "question_id": "1303243-15",
    "nl": "check if object `o` is a string",
    "cmd": "isinstance(o, str)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, str)",
    "cmd_name": "conala",
    "gpt35_response": " Check if object `o` is a string. This requires checking the type of `o` and comparing it to the `str` data type. "
}
{
    "question_id": "1303243-31",
    "nl": "check if object `o` is a string",
    "cmd": "(type(o) is str)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR) is str",
    "cmd_name": "conala",
    "gpt35_response": " Check if object `o` is a string. This requires checking the type of `o` and comparing it to the `str` data type. "
}
{
    "question_id": "1303243-32",
    "nl": "check if object `o` is a string",
    "cmd": "isinstance(o, str)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, str)",
    "cmd_name": "conala",
    "gpt35_response": " Check if object `o` is a string. This requires checking the type of `o` and comparing it to the `str` data type. "
}
{
    "question_id": "1303243-47",
    "nl": "check if `obj_to_test` is a string",
    "cmd": "isinstance(obj_to_test, str)",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "isinstance(VAR_STR, str)",
    "cmd_name": "conala",
    "gpt35_response": " Check if `obj_to_test` is a string. This requires checking the type of `obj_to_test` and comparing it to the `str` data type."
}
{
    "question_id": "8177079-17",
    "nl": "append list `list1` to `list2`",
    "cmd": "list2.extend(list1)",
    "oracle_man": [
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "VAR_STR.extend(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Append list `list1` to `list2`. This requires iterating through the elements in `list1` and adding them to the end of `list2`. "
}
{
    "question_id": "8177079-3",
    "nl": "append list `mylog` to `list1`",
    "cmd": "list1.extend(mylog)",
    "oracle_man": [
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "VAR_STR.extend(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Append list `mylog` to `list1`. This requires iterating through the elements in `mylog` and adding them to the end of `list1`."
}
{
    "question_id": "8177079-50",
    "nl": "append list `a` to `c`",
    "cmd": "c.extend(a)",
    "oracle_man": [
        "python.library.collections#collections.deque.extend"
    ],
    "canonical_cmd": "VAR_STR.extend(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Append list `a` to `c`. This requires iterating through the elements in `a` and adding them to the end of `c`."
}
{
    "question_id": "8177079-4",
    "nl": "append items in list `mylog` to `list1`",
    "cmd": "for line in mylog:\n    list1.append(line)",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "for line in VAR_STR:\n    VAR_STR.append(line)",
    "cmd_name": "conala",
    "gpt35_response": " Append items in list `mylog` to `list1`. This requires iterating through the elements in `mylog`, and adding each item to the end of `list1`."
}
{
    "question_id": "4126227-85",
    "nl": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`",
    "cmd": "b.append((a[0][0], a[0][2]))",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.append((VAR_STR[0][0], VAR_STR[0][2]))",
    "cmd_name": "conala",
    "gpt35_response": " Append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`. This requires creating a new tuple of the desired elements from `a`, and then adding that tuple to the end of `b`."
}
{
    "question_id": "34902378-5",
    "nl": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `",
    "cmd": "app.config['SECRET_KEY'] = 'Your_secret_string'",
    "oracle_man": [],
    "canonical_cmd": "app.config['VAR_STR'] = 'VAR_STR'",
    "cmd_name": "conala",
    "gpt35_response": " Initialize `SECRET_KEY` in flask config with `Your_secret_string `. This requires accessing the flask config and setting the `SECRET_KEY` variable to the string value `Your_secret_string`."
}
{
    "question_id": "1762484-85",
    "nl": "find the index of an element 'MSFT' in a list `stocks_list`",
    "cmd": "[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']",
    "oracle_man": [
        "python.library.functions#len",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[x for x in range(len(VAR_STR)) if VAR_STR[x] == 'VAR_STR']",
    "cmd_name": "conala",
    "gpt35_response": " Find the index of an element 'MSFT' in a list `stocks_list`. This requires iterating through the elements in `stocks_list` and checking if each element equals `'MSFT'`, returning the index if a match is found."
}
{
    "question_id": "875968-40",
    "nl": "remove symbols from a string `s`",
    "cmd": "re.sub('[^\\\\w]', ' ', s)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('[^\\\\w]', ' ', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Remove symbols from a string `s`. This requires creating a new string `s_rep` with only alphanumeric characters from `s`, and returning `s_rep`."
}
{
    "question_id": "31258561-66",
    "nl": "Get the current directory of a script",
    "cmd": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))",
    "oracle_man": [
        "python.library.os.path#os.path.basename",
        "python.library.os.path#os.path.dirname",
        "python.library.os.path#os.path.realpath"
    ],
    "canonical_cmd": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))",
    "cmd_name": "conala",
    "gpt35_response": " Get the current directory of a script. This requires accessing the `os` module and calling the `getcwd()` function to get the current working directory."
}
{
    "question_id": "34750084-45",
    "nl": "Find octal characters matches from a string `str` using regex",
    "cmd": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Find octal characters matches from a string `str` using regex. This requires using the `re` module to define a regular expression pattern that matches octal characters, and then using the `findall()` method to get all the matches in `str`."
}
{
    "question_id": "13209288-55",
    "nl": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'",
    "cmd": "re.split('[ ](?=[A-Z]+\\\\b)', input)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'. This requires using the `re` module to define a regular expression pattern that matches a space followed by one or more uppercase letters, and then using the `split()` method on `input` with the pattern as the delimiter."
}
{
    "question_id": "13209288-65",
    "nl": "Split string `input` at every space followed by an upper-case letter",
    "cmd": "re.split('[ ](?=[A-Z])', input)",
    "oracle_man": [
        "python.library.re#re.split"
    ],
    "canonical_cmd": "re.split('[ ](?=[A-Z])', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Split string `input` at every space followed by an upper-case letter. This requires iterating through the characters in `input` and splitting it at every space followed by an upper-case letter."
}
{
    "question_id": "24642040-8",
    "nl": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`",
    "cmd": "r = requests.post(url, files=files, headers=headers, data=data)",
    "oracle_man": [
        "pygame.ref.fastevent#pygame.fastevent.post"
    ],
    "canonical_cmd": "r = requests.post(VAR_STR, VAR_STR=VAR_STR, VAR_STR=VAR_STR, VAR_STR=VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`. This requires using the `requests` module to make a POST request to `url`, setting the `files`, `headers`, and `data` parameters to the correct values."
}
{
    "question_id": "4290716-97",
    "nl": "write bytes `bytes_` to a file `filename` in python 3",
    "cmd": "open('filename', 'wb').write(bytes_)",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "open('VAR_STR', 'wb').write(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": "- Write bytes `bytes_` to a file `filename` in python 3. This requires opening file `filename` in write binary mode, writing bytes `bytes_` to the file, and closing the file."
}
{
    "question_id": "33078554-39",
    "nl": "get a list from a list `lst` with values mapped into a dictionary `dct`",
    "cmd": "[dct[k] for k in lst]",
    "oracle_man": [],
    "canonical_cmd": "[VAR_STR[k] for k in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Get a list from a list `lst` with values mapped into a dictionary `dct`. This requires iterating over the values in `lst`, mapping each value to a key in `dct`, and appending the mapped value to a new list."
}
{
    "question_id": "15247628-33",
    "nl": "find duplicate names in column 'name' of the dataframe `x`",
    "cmd": "x.set_index('name').index.get_duplicates()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.set_index"
    ],
    "canonical_cmd": "VAR_STR.set_index('VAR_STR').index.get_duplicates()",
    "cmd_name": "conala",
    "gpt35_response": " Find duplicate names in column 'name' of the dataframe `x`. This requires checking each name in the 'name' column against all other names in the same column to identify duplicates."
}
{
    "question_id": "783897-89",
    "nl": "truncate float 1.923328437452 to 3 decimal places",
    "cmd": "round(1.923328437452, 3)",
    "oracle_man": [
        "python.library.functions#round"
    ],
    "canonical_cmd": "round(1.923328437452, 3)",
    "cmd_name": "conala",
    "gpt35_response": " Truncate float 1.923328437452 to 3 decimal places. This requires using the 'round' function to round the float to three decimal places."
}
{
    "question_id": "22859493-62",
    "nl": "sort list `li` in descending order based on the date value in second element of each list in list `li`",
    "cmd": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d\/%m\/%Y'), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.datetime#datetime.datetime.strptime"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda x: datetime.strptime(x[1], '%d\/%m\/%Y'), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort list `li` in descending order based on the date value in second element of each list in list `li`. This requires using the 'sorted' function with a custom key function that extracts the date value from the second element of each list in `li`."
}
{
    "question_id": "29394552-74",
    "nl": "place the radial ticks in plot `ax` at 135 degrees",
    "cmd": "ax.set_rlabel_position(135)",
    "oracle_man": [
        "matplotlib.projections_api#matplotlib.projections.polar.PolarAxes.set_rlabel_position"
    ],
    "canonical_cmd": "VAR_STR.set_rlabel_position(135)",
    "cmd_name": "conala",
    "gpt35_response": " Place the radial ticks in plot `ax` at 135 degrees. This requires accessing the 'polar' coordinate system of the plot `ax`, setting the radial ticks at 135 degrees, and updating the plot to display the changes."
}
{
    "question_id": "3320406-28",
    "nl": "check if path `my_path` is an absolute path",
    "cmd": "os.path.isabs(my_path)",
    "oracle_man": [
        "python.library.os.path#os.path.isabs"
    ],
    "canonical_cmd": "os.path.isabs(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Check if path `my_path` is an absolute path. This requires checking if the path starts with a forward slash, a backward slash, or a drive letter followed by a colon."
}
{
    "question_id": "20067636-10",
    "nl": "pandas dataframe get first row of each group by 'id'",
    "cmd": "df.groupby('id').first()",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.groupby",
        "pandas.reference.api.pandas.dataframe.first"
    ],
    "canonical_cmd": "df.groupby('VAR_STR').first()",
    "cmd_name": "conala",
    "gpt35_response": " Pandas dataframe get first row of each group by 'id'. This requires using the 'groupby' method to group the dataframe `x` by 'id', and then returning the first row of each group using the 'first' method."
}
{
    "question_id": "30759776-2",
    "nl": "extract attributes 'src=\"js\/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`",
    "cmd": "re.findall('src=\"js\/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Extract attributes 'src=\"js\/([^\"]*\\bjquery\\b[^\"]*)\"' from string `data`. This requires using the 're.findall' function with a regular expression pattern that matches the desired attribute and extracts the value."
}
{
    "question_id": "25388796-87",
    "nl": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`",
    "cmd": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])",
    "oracle_man": [
        "python.library.functions#float",
        "python.library.functions#int",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(int(float(item)) for item in [_f for _f in [VAR_STR] if\n    _f])",
    "cmd_name": "conala",
    "gpt35_response": " Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`. This requires iterating over each element in the list, parsing the string as a float or integer if possible, and summing the valid numerical values."
}
{
    "question_id": "18897261-72",
    "nl": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`",
    "cmd": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].plot(kind='bar', VAR_STR=['r', 'g', 'b', 'r', 'g', 'b', 'r'])",
    "cmd_name": "conala",
    "gpt35_response": " Make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`. This requires using the 'matplotlib' library to create a barplot with the values from column `group`, and assigning color codes from the list `color` to each bar."
}
{
    "question_id": "373194-29",
    "nl": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`",
    "cmd": "re.findall('([a-fA-F\\\\d]{32})', data)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('VAR_STR', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`. This requires using the 're.findall' function with the given regex pattern to extract all matches in the string `data`."
}
{
    "question_id": "518021-20",
    "nl": "Get the length of list `my_list`",
    "cmd": "len(my_list)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the length of list `my_list`. This requires using the built-in function 'len' to get the number of elements in the list."
}
{
    "question_id": "518021-61",
    "nl": "Getting the length of array `l`",
    "cmd": "len(l)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Getting the length of array `l`. This requires using the 'len' function to get the number of elements in the array `l`."
}
{
    "question_id": "518021-63",
    "nl": "Getting the length of array `s`",
    "cmd": "len(s)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Getting the length of array `s`. This requires using the 'len' function to get the number of elements in the array `s`."
}
{
    "question_id": "518021-87",
    "nl": "Getting the length of `my_tuple`",
    "cmd": "len(my_tuple)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Getting the length of `my_tuple`. This requires using the 'len' function to get the number of elements in the tuple `my_tuple`."
}
{
    "question_id": "518021-86",
    "nl": "Getting the length of `my_string`",
    "cmd": "len(my_string)",
    "oracle_man": [
        "python.library.functions#len"
    ],
    "canonical_cmd": "len(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Getting the length of `my_string`. This requires using the 'len' function to get the number of characters in the string `my_string`."
}
{
    "question_id": "40452956-17",
    "nl": "remove escape character from string \"\\\\a\"",
    "cmd": "\"\"\"\\\\a\"\"\".decode('string_escape')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".decode('string_escape')",
    "cmd_name": "conala",
    "gpt35_response": " Remove escape character from string \"\\\\a\". This requires using the 'replace' method to remove the escape character."
}
{
    "question_id": "8687018-68",
    "nl": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.",
    "cmd": "\"\"\"obama\"\"\".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')",
    "oracle_man": [
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".replace('VAR_STR', '%temp%').replace('VAR_STR', 'VAR_STR').replace(\n    '%temp%', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass. This requires using the 'translate' method with a translation table that maps 'a' to 'b' and 'b' to 'a'."
}
{
    "question_id": "303200-79",
    "nl": "remove directory tree '\/folder_name'",
    "cmd": "shutil.rmtree('\/folder_name')",
    "oracle_man": [
        "python.library.shutil#shutil.rmtree"
    ],
    "canonical_cmd": "shutil.rmtree('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Remove directory tree '\/folder_name'. This requires using the 'shutil.rmtree' function to remove the directory and all its subdirectories and files."
}
{
    "question_id": "13740672-79",
    "nl": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`",
    "cmd": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())",
    "oracle_man": [
        "pandas.reference.api.pandas.series.apply"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'] = VAR_STR['VAR_STR'].apply(lambda x: x.VAR_STR())",
    "cmd_name": "conala",
    "gpt35_response": "-Create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`. This requires accessing column `my_dt` in data frame `data`, creating a new empty column `weekday`, iterating through each row in `my_dt` and extracting the weekday and inserting that value into new column `weekday`. \n"
}
{
    "question_id": "20950650-8",
    "nl": "reverse sort Counter `x` by values",
    "cmd": "sorted(x, key=x.get, reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=VAR_STR.get, reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": "Reverse sort Counter `x` by values. This requires accessing dictionary `x` from Counter `x`, sorting the values of the dictionary in descending order and then returning the dictionary sorted by values. \n"
}
{
    "question_id": "20950650-18",
    "nl": "reverse sort counter `x` by value",
    "cmd": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.functions#list",
        "python.library.stdtypes#dict.items"
    ],
    "canonical_cmd": "sorted(list(VAR_STR.items()), key=lambda pair: pair[1], reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": "Reverse sort counter `x` by value. This requires accessing dictionary `x` from counter `x`, sorting the values of the dictionary in descending order and then returning the dictionary sorted by values.\n"
}
{
    "question_id": "9775297-68",
    "nl": "append a numpy array 'b' to a numpy array 'a'",
    "cmd": "np.vstack((a, b))",
    "oracle_man": [
        "numpy.reference.generated.numpy.vstack"
    ],
    "canonical_cmd": "np.vstack((VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": "Append a numpy array 'b' to a numpy array 'a'. This requires accessing the numpy arrays `a` and `b`, and appending `b` to the end of `a`. \n"
}
{
    "question_id": "2805231-96",
    "nl": "fetch address information for host 'google.com' ion port 80",
    "cmd": "print(socket.getaddrinfo('google.com', 80))",
    "oracle_man": [
        "python.library.socket#socket.getaddrinfo"
    ],
    "canonical_cmd": "print(socket.getaddrinfo('VAR_STR', 80))",
    "cmd_name": "conala",
    "gpt35_response": "Fetch address information for host 'google.com' ion port 80. This requires fetching the IP address for host 'google.com', opening a socket connection to that address on port 80 and retrieving the address information. \n"
}
{
    "question_id": "17552997-64",
    "nl": "add a column 'day' with value 'sat' to dataframe `df`",
    "cmd": "df.xs('sat', level='day', drop_level=False)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.xs"
    ],
    "canonical_cmd": "VAR_STR.xs('VAR_STR', level='VAR_STR', drop_level=False)",
    "cmd_name": "conala",
    "gpt35_response": "Add a column 'day' with value 'sat' to dataframe `df`. This requires accessing the dataframe `df`, creating a new column `day`, assigning the value `sat` to all rows in the new column. \n"
}
{
    "question_id": "13598363-99",
    "nl": "Flask set folder 'wherever' as the default template folder",
    "cmd": "Flask(__name__, template_folder='wherever')",
    "oracle_man": [
        "flask.api.index#flask.Flask"
    ],
    "canonical_cmd": "Flask(__name__, template_folder='VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Flask set folder 'wherever' as the default template folder. This requires accessing the Flask instance, setting the configuration variable `TEMPLATE_FOLDER` to `wherever`. \n"
}
{
    "question_id": "1849375-50",
    "nl": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?",
    "cmd": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')",
    "oracle_man": [
        "python.library.msilib#msilib.View.Execute"
    ],
    "canonical_cmd": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')",
    "cmd_name": "conala",
    "gpt35_response": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy? This requires executing a SQL statement `INSERT INTO t1 (SELECT * FROM t2)` using the SQLAlchemy engine and connection.\n"
}
{
    "question_id": "3398589-41",
    "nl": "sort a list of lists 'c2' such that third row comes first",
    "cmd": "c2.sort(key=lambda row: row[2])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda row: row[2])",
    "cmd_name": "conala",
    "gpt35_response": "Sort a list of lists 'c2' such that third row comes first. This requires accessing the list of lists `c2`, sorting the rows of the list in descending order of their third element. \n"
}
{
    "question_id": "3398589-16",
    "nl": "Sorting a list of lists in Python",
    "cmd": "c2.sort(key=lambda row: (row[2], row[1], row[0]))",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "c2.sort(key=lambda row: (row[2], row[1], row[0]))",
    "cmd_name": "conala",
    "gpt35_response": "Sorting a list of lists in Python. This requires accessing the list of lists `c`, sorting the rows of the list based on the first element in each row.\n"
}
{
    "question_id": "3398589-90",
    "nl": "Sorting a list of lists in Python",
    "cmd": "c2.sort(key=lambda row: (row[2], row[1]))",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "c2.sort(key=lambda row: (row[2], row[1]))",
    "cmd_name": "conala",
    "gpt35_response": "Sorting a list of lists in Python. This requires accessing the list of lists `c`, sorting the rows of the list based on the first element in each row.\n"
}
{
    "question_id": "10960463-71",
    "nl": "set font `Arial` to display non-ascii characters in matplotlib",
    "cmd": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})",
    "oracle_man": [
        "matplotlib._as_gen.matplotlib.pyplot.rc"
    ],
    "canonical_cmd": "matplotlib.rc('font', **{'sans-serif': 'VAR_STR', 'family': 'sans-serif'})",
    "cmd_name": "conala",
    "gpt35_response": "Set font `Arial` to display non-ascii characters in matplotlib. This requires accessing matplotlib, setting the font for non-ascii characters to `Arial`. \n"
}
{
    "question_id": "20576618-72",
    "nl": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal",
    "cmd": "df['date'].apply(lambda x: x.toordinal())",
    "oracle_man": [
        "pandas.reference.api.pandas.timestamp.toordinal",
        "pandas.reference.api.pandas.series.apply"
    ],
    "canonical_cmd": "VAR_STR['VAR_STR'].apply(lambda x: x.toordinal())",
    "cmd_name": "conala",
    "gpt35_response": "Convert DateTime column 'date' of pandas dataframe 'df' to ordinal. This requires accessing column `date` in dataframe `df`. Converting the timestamps in the column to ordinal.\n"
}
{
    "question_id": "7263824-68",
    "nl": "get html source of Selenium WebElement `element`",
    "cmd": "element.get_attribute('innerHTML')",
    "oracle_man": [
        "python.library.test#test.support.get_attribute"
    ],
    "canonical_cmd": "VAR_STR.get_attribute('innerHTML')",
    "cmd_name": "conala",
    "gpt35_response": "Get html source of Selenium WebElement `element`. This requires accessing the Selenium WebElement `element`, retrieving the HTML source code for that element. \n"
}
{
    "question_id": "7574841-76",
    "nl": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.",
    "cmd": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')",
    "cmd_name": "conala",
    "gpt35_response": "Open a 'gnome' terminal from python script and run  'sudo apt-get update' command. This requires launching a command-line terminal with the os module and using subprocess library for executing the command \"sudo apt-get update\". \n"
}
{
    "question_id": "10487278-57",
    "nl": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`",
    "cmd": "my_dict.update({'third_key': 1})",
    "oracle_man": [
        "python.library.stdtypes#dict.update"
    ],
    "canonical_cmd": "VAR_STR.update({'VAR_STR': 1})",
    "cmd_name": "conala",
    "gpt35_response": "Add an item with key 'third_key' and value 1 to a dictionary `my_dict`. This requires accessing dictionary `my_dict`, adding a new key-value pair 'third_key': 1 to the dictionary. \n"
}
{
    "question_id": "10487278-5",
    "nl": "declare an array",
    "cmd": "my_list = []",
    "oracle_man": [],
    "canonical_cmd": "my_list = []",
    "cmd_name": "conala",
    "gpt35_response": "Declare an array. This requires creating a new empty array with a specified size or type. \n"
}
{
    "question_id": "10487278-47",
    "nl": "Insert item `12` to a list `my_list`",
    "cmd": "my_list.append(12)",
    "oracle_man": [
        "numpy.reference.generated.numpy.append"
    ],
    "canonical_cmd": "VAR_STR.append(12)",
    "cmd_name": "conala",
    "gpt35_response": "Insert item `12` to a list `my_list`. This requires accessing the list `my_list`, appending item `12` to the end of the list. \n"
}
{
    "question_id": "10155684-8",
    "nl": "add an entry 'wuggah' at the beginning of list `myList`",
    "cmd": "myList.insert(0, 'wuggah')",
    "oracle_man": [
        "numpy.reference.generated.numpy.insert"
    ],
    "canonical_cmd": "VAR_STR.insert(0, 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": "Add an entry 'wuggah' at the beginning of list `myList`. This requires accessing the list `myList`, inserting the value 'wuggah' at the beginning of the list. \n"
}
{
    "question_id": "3519125-47",
    "nl": "convert a hex-string representation to actual bytes",
    "cmd": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')",
    "oracle_man": [
        "python.library.stdtypes#bytearray.decode",
        "python.library.stdtypes#str.replace"
    ],
    "canonical_cmd": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')",
    "cmd_name": "conala",
    "gpt35_response": "Convert a hex-string representation to actual bytes. This requires accessing the hex string, decoding it to a byte string."
}
{
    "question_id": "40144769-97",
    "nl": "select the last column of dataframe `df`",
    "cmd": "df[df.columns[-1]]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[VAR_STR.columns[-1]]",
    "cmd_name": "conala",
    "gpt35_response": "- Select the last column of dataframe `df`. This requires accessing the `df` dataframe and selecting the last column. "
}
{
    "question_id": "30787901-86",
    "nl": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'",
    "cmd": "df.loc[df['Letters'] == 'C', 'Letters'].values[0]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc"
    ],
    "canonical_cmd": "VAR_STR.loc[VAR_STR['VAR_STR'] == 'VAR_STR', 'VAR_STR'].values[0]",
    "cmd_name": "conala",
    "gpt35_response": " Get the first value from dataframe `df` where column 'Letters' is equal to 'C'. This requires accessing the `df` dataframe, filtering based on the 'Letters' column, and getting the first value. "
}
{
    "question_id": "402504-5",
    "nl": "get the type of `i`",
    "cmd": "type(i)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Get the type of `i`. This requires accessing the variable `i` and determining its type. "
}
{
    "question_id": "402504-77",
    "nl": "determine the type of variable `v`",
    "cmd": "type(v)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Determine the type of variable `v`. This requires accessing the variable `v` and determining its type. "
}
{
    "question_id": "402504-78",
    "nl": "determine the type of variable `v`",
    "cmd": "type(v)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Determine the type of variable `v`. This requires accessing the variable `v` and determining its type. "
}
{
    "question_id": "402504-9",
    "nl": "determine the type of variable `v`",
    "cmd": "type(v)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Determine the type of variable `v`. This requires accessing the variable `v` and determining its type. "
}
{
    "question_id": "402504-40",
    "nl": "determine the type of variable `v`",
    "cmd": "type(v)",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "type(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Determine the type of variable `v`. This requires accessing the variable `v` and determining its type. "
}
{
    "question_id": "402504-29",
    "nl": "get the type of variable `variable_name`",
    "cmd": "print(type(variable_name))",
    "oracle_man": [
        "python.library.functions#type"
    ],
    "canonical_cmd": "print(type(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Get the type of variable `variable_name`. This requires accessing the variable `variable_name` and determining its type. "
}
{
    "question_id": "2300756-79",
    "nl": "get the 5th item of a generator",
    "cmd": "next(itertools.islice(range(10), 5, 5 + 1))",
    "oracle_man": [
        "python.library.itertools#itertools.islice",
        "python.library.functions#range",
        "python.library.functions#next"
    ],
    "canonical_cmd": "next(itertools.islice(range(10), 5, 5 + 1))",
    "cmd_name": "conala",
    "gpt35_response": " Get the 5th item of a generator. This requires accessing the generator and selecting the 5th item. "
}
{
    "question_id": "20056548-25",
    "nl": "Print a string `word` with string format",
    "cmd": "print('\"{}\"'.format(word))",
    "oracle_man": [
        "python.library.functions#format"
    ],
    "canonical_cmd": "print('\"{}\"'.format(VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Print a string `word` with string format. This requires accessing the `word` string and printing it with string formatting. "
}
{
    "question_id": "8546245-44",
    "nl": "join a list of strings `list` using a space ' '",
    "cmd": "\"\"\" \"\"\".join(list)",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\" \"\"\".join(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Join a list of strings `list` using a space ' '. This requires accessing the `list` and joining its elements with a space. "
}
{
    "question_id": "2276416-66",
    "nl": "create list `y` containing two empty lists",
    "cmd": "y = [[] for n in range(2)]",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "VAR_STR = [[] for n in range(2)]",
    "cmd_name": "conala",
    "gpt35_response": " Create list `y` containing two empty lists. This requires creating the `y` list and populating it with two empty sub-lists. "
}
{
    "question_id": "3925614-88",
    "nl": "read a file 'C:\/name\/MyDocuments\/numbers' into a list `data`",
    "cmd": "data = [line.strip() for line in open('C:\/name\/MyDocuments\/numbers', 'r')]",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.stdtypes#str.strip"
    ],
    "canonical_cmd": "VAR_STR = [line.strip() for line in open('VAR_STR', 'r')]",
    "cmd_name": "conala",
    "gpt35_response": " Read a file 'C:\/name\/MyDocuments\/numbers' into a list `data`. This requires accessing the file at the specified location and reading its contents into the `data` list. "
}
{
    "question_id": "13413590-6",
    "nl": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"",
    "cmd": "df.dropna(subset=[1])",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.dropna"
    ],
    "canonical_cmd": "VAR_STR.dropna(subset=[1])",
    "cmd_name": "conala",
    "gpt35_response": " Drop rows of pandas dataframe `df` having NaN in column at index \"1\". This requires accessing the `df` dataframe, filtering based on NaN values in column 1, and dropping the corresponding rows. "
}
{
    "question_id": "598398-3",
    "nl": "get elements from list `myList`, that have a field `n` value 30",
    "cmd": "[x for x in myList if x.n == 30]",
    "oracle_man": [],
    "canonical_cmd": "[x for x in VAR_STR if x.VAR_STR == 30]",
    "cmd_name": "conala",
    "gpt35_response": " Get elements from list `myList`, that have a field `n` value 30. This requires accessing the `myList` list, filtering based on the `n` field value of 30, and selecting the corresponding elements. "
}
{
    "question_id": "493386-37",
    "nl": "print \".\" without newline",
    "cmd": "sys.stdout.write('.')",
    "oracle_man": [
        "python.library.os#os.write"
    ],
    "canonical_cmd": "sys.stdout.write('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Print \".\" without newline. This requires printing the \".\" character without a newline character. "
}
{
    "question_id": "6569528-54",
    "nl": "round off the float that is the product of `2.52 * 100` and convert it to an int",
    "cmd": "int(round(2.51 * 100))",
    "oracle_man": [
        "python.library.functions#int",
        "python.library.functions#round"
    ],
    "canonical_cmd": "int(round(2.51 * 100))",
    "cmd_name": "conala",
    "gpt35_response": " Round off the float that is the product of `2.52 * 100` and convert it to an int. This requires multiplying `2.52` and `100`, rounding off the resulting float, and converting it to an integer. "
}
{
    "question_id": "20865487-86",
    "nl": "plot dataframe `df` without a legend",
    "cmd": "df.plot(legend=False)",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.plot"
    ],
    "canonical_cmd": "VAR_STR.plot(legend=False)",
    "cmd_name": "conala",
    "gpt35_response": " Plot dataframe `df` without a legend. This requires accessing the `df` dataframe and plotting it without a legend. "
}
{
    "question_id": "13368659-96",
    "nl": "loop through the IP address range \"192.168.x.x\"",
    "cmd": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)",
    "oracle_man": [
        "python.library.functions#range"
    ],
    "canonical_cmd": "for i in range(256):\n    for j in range(256):\n        ip = '192.168.%d.%d' % (i, j)\n        print(ip)",
    "cmd_name": "conala",
    "gpt35_response": " Loop through the IP address range \"192.168.x.x\". This requires looping through IP addresses within the specified range and performing actions on each address."
}
{
    "question_id": "13368659-83",
    "nl": "loop through the IP address range \"192.168.x.x\"",
    "cmd": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass",
    "oracle_man": [
        "python.library.functions#range",
        "python.library.functions#list"
    ],
    "canonical_cmd": "for i, j in product(list(range(256)), list(range(256))):\n    pass",
    "cmd_name": "conala",
    "gpt35_response": " Loop through the IP address range \"192.168.x.x\". This requires looping through IP addresses within the specified range and performing actions on each address."
}
{
    "question_id": "13368659-30",
    "nl": "loop through the IP address range \"192.168.x.x\"",
    "cmd": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)",
    "oracle_man": [],
    "canonical_cmd": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)",
    "cmd_name": "conala",
    "gpt35_response": "- Loop through the IP address range \"192.168.x.x\". This requires iterating through the IP address range \"192.168.x.x\"."
}
{
    "question_id": "4065737-88",
    "nl": "Sum the corresponding decimal values for binary values of each boolean element in list `x`",
    "cmd": "sum(1 << i for i, b in enumerate(x) if b)",
    "oracle_man": [
        "python.library.functions#enumerate",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "sum(1 << i for i, b in enumerate(VAR_STR) if b)",
    "cmd_name": "conala",
    "gpt35_response": " Sum the corresponding decimal values for binary values of each boolean element in list `x`. This requires iterating through list `x`, converting each boolean element to its corresponding decimal value, and summing those values."
}
{
    "question_id": "8691311-3",
    "nl": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`",
    "cmd": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))",
    "oracle_man": [
        "python.library.os#os.write"
    ],
    "canonical_cmd": "VAR_STR.write('%r\\n%r\\n%r\\n' % (VAR_STR, VAR_STR, VAR_STR))",
    "cmd_name": "conala",
    "gpt35_response": " Write multiple strings `line1`, `line2` and `line3` in one line in a file `target`. This requires opening `target` file, writing `line1`, `line2` and `line3` as a single string with a newline character `\\n` in between each line, and closing the file."
}
{
    "question_id": "10632111-94",
    "nl": "Convert list of lists `data` into a flat list",
    "cmd": "[y for x in data for y in (x if isinstance(x, list) else [x])]",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "[y for x in VAR_STR for y in (x if isinstance(x, list) else [x])]",
    "cmd_name": "conala",
    "gpt35_response": " Convert list of lists `data` into a flat list. This requires iterating through each element in `data`, checking if it is a list, and adding its elements to a flat list."
}
{
    "question_id": "15392730-45",
    "nl": "Print new line character as `\\n` in a string `foo\\nbar`",
    "cmd": "print('foo\\nbar'.encode('string_escape'))",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "print('VAR_STR'.encode('string_escape'))",
    "cmd_name": "conala",
    "gpt35_response": " Print new line character as `\\n` in a string `foo\\nbar`. This requires printing the string `foo` followed by a newline character `\\n` followed by the string `bar`."
}
{
    "question_id": "1010961-75",
    "nl": "remove last comma character ',' in string `s`",
    "cmd": "\"\"\"\"\"\".join(s.rsplit(',', 1))",
    "oracle_man": [
        "python.library.stdtypes#str.rsplit",
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join(VAR_STR.rsplit('VAR_STR', 1))",
    "cmd_name": "conala",
    "gpt35_response": " Remove last comma character ',' in string `s`. This requires finding the last comma character in the string `s`, removing it, and returning the modified string."
}
{
    "question_id": "23855976-47",
    "nl": "calculate the mean of each element in array `x` with the element previous to it",
    "cmd": "(x[1:] + x[:-1]) \/ 2",
    "oracle_man": [],
    "canonical_cmd": "(VAR_STR[1:] + VAR_STR[:-1]) \/ 2",
    "cmd_name": "conala",
    "gpt35_response": " Calculate the mean of each element in array `x` with the element previous to it. This requires iterating through array `x`, calculating the mean of each element with the element previous to it, and returning the result as a new array."
}
{
    "question_id": "23855976-53",
    "nl": "get an array of the mean of each two consecutive values in numpy array `x`",
    "cmd": "x[:-1] + (x[1:] - x[:-1]) \/ 2",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:-1] + (VAR_STR[1:] - VAR_STR[:-1]) \/ 2",
    "cmd_name": "conala",
    "gpt35_response": " Get an array of the mean of each two consecutive values in numpy array `x`. This requires using numpy's built-in function to calculate the mean of each two consecutive values in array `x`, and returning the result as a new array."
}
{
    "question_id": "6375343-22",
    "nl": "load data containing `utf-8` from file `new.txt` into numpy array `arr`",
    "cmd": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')",
    "oracle_man": [
        "python.library.codecs#codecs.open",
        "numpy.reference.generated.numpy.fromiter"
    ],
    "canonical_cmd": "VAR_STR = numpy.fromiter(codecs.open('VAR_STR', encoding='VAR_STR'), dtype='<U2')",
    "cmd_name": "conala",
    "gpt35_response": " Load data containing `utf-8` from file `new.txt` into numpy array `arr`. This requires opening file `new.txt`, reading its contents with encoding `utf-8`, and loading the data into numpy array `arr`."
}
{
    "question_id": "1547733-9",
    "nl": "reverse sort list of dicts `l` by value for key `time`",
    "cmd": "l = sorted(l, key=itemgetter('time'), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "VAR_STR = sorted(VAR_STR, key=itemgetter('VAR_STR'), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Reverse sort list of dicts `l` by value for key `time`. This requires reversing the order of `l`, sorting it by value for key `time`, and returning the modified list."
}
{
    "question_id": "1547733-81",
    "nl": "Sort a list of dictionary `l` based on key `time` in descending order",
    "cmd": "l = sorted(l, key=lambda a: a['time'], reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "VAR_STR = sorted(VAR_STR, key=lambda a: a['VAR_STR'], reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionary `l` based on key `time` in descending order. This requires sorting `l` by key `time` in descending order and returning the modified list."
}
{
    "question_id": "37080612-2",
    "nl": "get rows of dataframe `df` that match regex '(Hel|Just)'",
    "cmd": "df.loc[df[0].str.contains('(Hel|Just)')]",
    "oracle_man": [
        "pandas.reference.api.pandas.dataframe.loc",
        "pandas.reference.api.pandas.series.str.contains"
    ],
    "canonical_cmd": "VAR_STR.loc[VAR_STR[0].str.contains('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Get rows of dataframe `df` that match regex '(Hel|Just)'. This requires using pandas' built-in function to match the regex '(Hel|Just)' against each row's contents in dataframe `df`, and returning the rows that match."
}
{
    "question_id": "14716342-27",
    "nl": "find the string in `your_string` between two special characters \"[\" and \"]\"",
    "cmd": "re.search('\\\\[(.*)\\\\]', your_string).group(1)",
    "oracle_man": [
        "python.library.re#re.search",
        "python.library.re#re.Match.group"
    ],
    "canonical_cmd": "re.search('\\\\[(.*)\\\\]', VAR_STR).group(1)",
    "cmd_name": "conala",
    "gpt35_response": " Find the string in `your_string` between two special characters \"[\" and \"]\". This requires finding the indices of the characters \"[\" and \"]\", extracting the substring between these indices, and returning the result as a new string."
}
{
    "question_id": "18684076-99",
    "nl": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?",
    "cmd": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]",
    "oracle_man": [
        "pandas.reference.api.pandas.date_range",
        "pandas.reference.api.pandas.timestamp.strftime"
    ],
    "canonical_cmd": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list of date string in 'yyyymmdd' format with Python Pandas. This requires using pandas' built-in function to create a range of dates in the 'yyyymmdd' format, converting them to strings, and returning the list."
}
{
    "question_id": "1666700-25",
    "nl": "count number of times string 'brown' occurred in string 'The big brown fox is brown'",
    "cmd": "\"\"\"The big brown fox is brown\"\"\".count('brown')",
    "oracle_man": [
        "python.library.stdtypes#str.count"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".count('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Count number of times string 'brown' occurred in string 'The big brown fox is brown'. This requires counting the number of times the substring 'brown' appears in the string 'The big brown fox is brown'."
}
{
    "question_id": "7243750-79",
    "nl": "download the file from url `url` and save it under file `file_name`",
    "cmd": "urllib.request.urlretrieve(url, file_name)",
    "oracle_man": [
        "python.library.urllib.request#urllib.request.urlretrieve"
    ],
    "canonical_cmd": "urllib.request.urlretrieve(VAR_STR, VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Download the file from url `url` and save it under file `file_name`. This requires using the requests library to download the file from `url` and saving it under file `file_name`."
}
{
    "question_id": "743806-70",
    "nl": "split string `text` by space",
    "cmd": "text.split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string `text` by space. This requires splitting `text` by the space character and returning the resulting list of substrings."
}
{
    "question_id": "743806-93",
    "nl": "split string `text` by \",\"",
    "cmd": "text.split(',')",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split('VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Split string `text` by \",\". This requires splitting `text` by the comma character and returning the resulting list of substrings."
}
{
    "question_id": "743806-18",
    "nl": "Split string `line` into a list by whitespace",
    "cmd": "line.split()",
    "oracle_man": [
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.split()",
    "cmd_name": "conala",
    "gpt35_response": " Split string `line` into a list by whitespace. This requires splitting `line` by whitespace and returning the resulting list of substrings."
}
{
    "question_id": "35044115-64",
    "nl": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '",
    "cmd": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in s]",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Replace dot characters '.' associated with ascii letters in list `s` with space ' '. This requires iterating through each element in list `s`, identifying if it contains a dot character '.' associated with an ascii letter, and replacing the dot character with a space ' '."
}
{
    "question_id": "38388799-16",
    "nl": "sort list `list_of_strings` based on second index of each string `s`",
    "cmd": "sorted(list_of_strings, key=lambda s: s.split(',')[1])",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "sorted(VAR_STR, key=lambda VAR_STR: VAR_STR.split(',')[1])",
    "cmd_name": "conala",
    "gpt35_response": "- Sort list `list_of_strings` based on the second index of each string `s`. This requires accessing the second index of each string, and sorting the list based on that index."
}
{
    "question_id": "9609375-86",
    "nl": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019",
    "cmd": "subprocess.check_call('vasp | tee tee_output', shell=True)",
    "oracle_man": [
        "python.library.subprocess#subprocess.check_call"
    ],
    "canonical_cmd": "subprocess.check_call('vasp | tee tee_output', shell=True)",
    "cmd_name": "conala",
    "gpt35_response": " Call multiple bash functions `vasp` and `tee tee_output` using `|`. This requires executing the command to call `vasp`, piping its output to `tee tee_output`, and then storing the combined output."
}
{
    "question_id": "37004138-32",
    "nl": "eliminate all strings from list `lst`",
    "cmd": "[element for element in lst if isinstance(element, int)]",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "[element for element in VAR_STR if isinstance(element, int)]",
    "cmd_name": "conala",
    "gpt35_response": " Eliminate all strings from list `lst`. This requires iterating through the list `lst`, identifying all strings, and removing them from the list."
}
{
    "question_id": "37004138-83",
    "nl": "get all the elements except strings from the list 'lst'.",
    "cmd": "[element for element in lst if not isinstance(element, str)]",
    "oracle_man": [
        "python.library.functions#isinstance"
    ],
    "canonical_cmd": "[element for element in VAR_STR if not isinstance(element, str)]",
    "cmd_name": "conala",
    "gpt35_response": " Get all the elements except strings from the list `lst`. This requires iterating through the list `lst`, and generating a new list containing all non-string elements."
}
{
    "question_id": "72899-95",
    "nl": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`",
    "cmd": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])",
    "oracle_man": [
        "python.library.functions#sorted"
    ],
    "canonical_cmd": "newlist = sorted(VAR_STR, key=lambda k: k['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`. This requires accessing the value of the `name` key for each dictionary in the list `list_to_be_sorted`, and sorting the list based on those values."
}
{
    "question_id": "72899-6",
    "nl": "sort a list of dictionaries `l` by values in key `name` in descending order",
    "cmd": "newlist = sorted(l, key=itemgetter('name'), reverse=True)",
    "oracle_man": [
        "python.library.functions#sorted",
        "python.library.operator#operator.itemgetter"
    ],
    "canonical_cmd": "newlist = sorted(VAR_STR, key=itemgetter('VAR_STR'), reverse=True)",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of dictionaries `l` by values in key `name` in descending order. This requires accessing the value of the `name` key for each dictionary in the list `l`, sorting the list based on those values, and then reversing the order of the sorted list."
}
{
    "question_id": "72899-76",
    "nl": "How do I sort a list of dictionaries by values of the dictionary in Python?",
    "cmd": "list_of_dicts.sort(key=operator.itemgetter('name'))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "list_of_dicts.sort(key=operator.itemgetter('name'))",
    "cmd_name": "conala",
    "gpt35_response": " How do I sort a list of dictionaries by values of the dictionary in Python? This requires researching and implementing an appropriate solution for sorting dictionaries in Python based on their values."
}
{
    "question_id": "72899-59",
    "nl": "How do I sort a list of dictionaries by values of the dictionary in Python?",
    "cmd": "list_of_dicts.sort(key=operator.itemgetter('age'))",
    "oracle_man": [
        "python.library.operator#operator.itemgetter",
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "list_of_dicts.sort(key=operator.itemgetter('age'))",
    "cmd_name": "conala",
    "gpt35_response": " How do I sort a list of dictionaries by values of the dictionary in Python? This requires researching and implementing an appropriate solution for sorting dictionaries in Python based on their values."
}
{
    "question_id": "29881993-76",
    "nl": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`",
    "cmd": "\"\"\",\"\"\".join(trans['category'])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"VAR_STR\"\"\".join(VAR_STR['VAR_STR'])",
    "cmd_name": "conala",
    "gpt35_response": " Join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`. This requires accessing the sub-list within the dictionary `trans` that corresponds to the key `'category'`, joining the elements of that list together separated by `\",\"`, and returning the resulting string."
}
{
    "question_id": "34158494-93",
    "nl": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string",
    "cmd": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])",
    "oracle_man": [
        "python.library.stdtypes#str.join"
    ],
    "canonical_cmd": "\"\"\"\"\"\".join([VAR_STR])",
    "cmd_name": "conala",
    "gpt35_response": " Concatenate array of strings `['A', 'B', 'C', 'D']` into a string. This requires joining the elements of the list together, separated by an empty string."
}
{
    "question_id": "12666897-36",
    "nl": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`",
    "cmd": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]",
    "oracle_man": [
        "python.library.stdtypes#str.startswith"
    ],
    "canonical_cmd": "[x for x in VAR_STR if not x.startswith('VAR_STR') and not x.startswith('VAR_STR')]",
    "cmd_name": "conala",
    "gpt35_response": " Remove all strings from a list of strings `sents` where the value starts with `@$\\t` or `#`. This requires identifying all elements in the list `sents` that start with `@$\\t` or `#`, and removing them from the list."
}
{
    "question_id": "7852855-99",
    "nl": "convert datetime object `(1970, 1, 1)` to seconds",
    "cmd": "(t - datetime.datetime(1970, 1, 1)).total_seconds()",
    "oracle_man": [
        "python.library.datetime#datetime.timedelta.total_seconds"
    ],
    "canonical_cmd": "(t - datetime.datetime(VAR_STR)).total_seconds()",
    "cmd_name": "conala",
    "gpt35_response": " Convert datetime object `(1970, 1, 1)` to seconds. This requires converting the datetime object to a Unix timestamp."
}
{
    "question_id": "2763750-47",
    "nl": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.",
    "cmd": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Insert `_suff` before the file extension in `long.file.name.jpg`, or replace `_a` with `suff` if it precedes the extension. This requires identifying the extension of the filename, and inserting `_suff` before that extension, or replacing the `_a` string before the extension with `suff`."
}
{
    "question_id": "6420361-29",
    "nl": "reload a module `module`",
    "cmd": "import imp\nimp.reload(module)",
    "oracle_man": [
        "python.library.importlib#importlib.reload"
    ],
    "canonical_cmd": "import imp\nimp.reload(VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Reload a module `module`. This requires calling the appropriate Python function to reload the module."
}
{
    "question_id": "9746522-1",
    "nl": "convert int values in list `numlist` to float",
    "cmd": "numlist = [float(x) for x in numlist]",
    "oracle_man": [
        "python.library.functions#float"
    ],
    "canonical_cmd": "VAR_STR = [float(x) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Convert integer values in list `numlist` to floats. This requires iterating through the list `numlist`, and converting each integer value to a float."
}
{
    "question_id": "5891453-34",
    "nl": "Create a list containing all ascii characters as its elements",
    "cmd": "[chr(i) for i in range(127)]",
    "oracle_man": [
        "python.library.functions#chr",
        "python.library.functions#range"
    ],
    "canonical_cmd": "[chr(i) for i in range(127)]",
    "cmd_name": "conala",
    "gpt35_response": " Create a list containing all ASCII characters as its elements. This requires generating a list of values representing all ASCII characters."
}
{
    "question_id": "21805490-69",
    "nl": "python regex - check for a capital letter with a following lowercase in string `string`",
    "cmd": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)",
    "oracle_man": [
        "python.library.re#re.sub"
    ],
    "canonical_cmd": "re.sub('^[A-Z0-9]*(?![a-z])', '', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Python regex - check for a capital letter with a following lowercase in string `string`. This requires using an appropriate Python regular expression to identify instances of a capital letter followed by a lowercase letter in the string `string`."
}
{
    "question_id": "6159900-4",
    "nl": "write line \"hi there\" to file `f`",
    "cmd": "print('hi there', file=f)",
    "oracle_man": [],
    "canonical_cmd": "print('VAR_STR', file=VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Write line \"hi there\" to file `f`. This requires opening the file `f`, writing the line \"hi there\" to that file, and then closing the file."
}
{
    "question_id": "6159900-27",
    "nl": "write line \"hi there\" to file `myfile`",
    "cmd": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "f = open('VAR_STR', 'w')\nf.write('hi there\\n')\nf.close()",
    "cmd_name": "conala",
    "gpt35_response": " Write line \"hi there\" to file `myfile`. This requires opening the file `myfile`, writing the line \"hi there\" to that file, and then closing the file."
}
{
    "question_id": "6159900-68",
    "nl": "write line \"Hello\" to file `somefile.txt`",
    "cmd": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')",
    "oracle_man": [
        "python.library.urllib.request#open",
        "python.library.os#os.write"
    ],
    "canonical_cmd": "with open('VAR_STR', 'a') as the_file:\n    the_file.write('Hello\\n')",
    "cmd_name": "conala",
    "gpt35_response": " Write line \"Hello\" to file `somefile.txt`. This requires opening the file `somefile.txt`, writing the line \"Hello\" to that file, and then closing the file."
}
{
    "question_id": "19527279-73",
    "nl": "convert unicode string `s` to ascii",
    "cmd": "s.encode('iso-8859-15')",
    "oracle_man": [
        "python.library.stdtypes#str.encode"
    ],
    "canonical_cmd": "VAR_STR.encode('iso-8859-15')",
    "cmd_name": "conala",
    "gpt35_response": "- Convert unicode string `s` to ascii. This requires encoding unicode string `s` to ascii format."
}
{
    "question_id": "356483-47",
    "nl": "Find all numbers and dots from a string `text` using regex",
    "cmd": "re.findall('Test([0-9.]*[0-9]+)', text)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('Test([0-9.]*[0-9]+)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Find all numbers and dots from a string `text` using regex. This requires using python regular expressions to find all substrings in the string `text` that match the pattern of numbers and dots."
}
{
    "question_id": "356483-68",
    "nl": "python regex  to find all numbers and dots from 'text'",
    "cmd": "re.findall('Test([\\\\d.]*\\\\d+)', text)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('Test([\\\\d.]*\\\\d+)', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Use python regex to find all numbers and dots from 'text'. This requires using the python re module's `findall()` function to find all substrings in the string `text` that match the pattern of numbers and dots."
}
{
    "question_id": "38081866-23",
    "nl": "execute script 'script.ps1' using 'powershell.exe' shell",
    "cmd": "os.system('powershell.exe', 'script.ps1')",
    "oracle_man": [
        "python.library.os#os.system"
    ],
    "canonical_cmd": "os.system('VAR_STR', 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Execute script 'script.ps1' using 'powershell.exe' shell. This requires using the `subprocess` module to run the script `script.ps1` and specifying the shell as `powershell.exe`."
}
{
    "question_id": "7349646-41",
    "nl": "Sort a list of tuples `b` by third item in the tuple",
    "cmd": "b.sort(key=lambda x: x[1][2])",
    "oracle_man": [
        "python.library.stdtypes#list.sort"
    ],
    "canonical_cmd": "VAR_STR.sort(key=lambda x: x[1][2])",
    "cmd_name": "conala",
    "gpt35_response": " Sort a list of tuples `b` by third item in the tuple. This requires passing a lambda function to the `sorted()` function, where the lambda function specifies the third item in each tuple as the key for sorting."
}
{
    "question_id": "2430539-37",
    "nl": "get a list of all keys in Cassandra database `cf` with pycassa",
    "cmd": "list(cf.get_range().get_keys())",
    "oracle_man": [
        "python.library.functions#list"
    ],
    "canonical_cmd": "list(VAR_STR.get_range().get_keys())",
    "cmd_name": "conala",
    "gpt35_response": " Get a list of all keys in Cassandra database `cf` with pycassa. This requires creating a connection to the Cassandra database using pycassa and calling the `get_range()` method to retrieve all keys in the `cf` column family."
}
{
    "question_id": "30843103-34",
    "nl": "get the index of an integer `1` from a list `lst` if the list also contains boolean items",
    "cmd": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)",
    "oracle_man": [
        "python.library.functions#isinstance",
        "python.library.functions#enumerate",
        "python.library.functions#next"
    ],
    "canonical_cmd": "next(i for i, x in enumerate(VAR_STR) if not isinstance(x, bool) and x == 1)",
    "cmd_name": "conala",
    "gpt35_response": " Get the index of an integer `1` from a list `lst` if the list also contains boolean items. This requires using the `enumerate()` function to obtain both the index and value of each element in `lst`, and then using a conditional statement to check if the element is an integer equal to `1`. If found, return the index."
}
{
    "question_id": "4918425-91",
    "nl": "subtract 13 from every number in a list `a`",
    "cmd": "a[:] = [(x - 13) for x in a]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:] = [(x - 13) for x in VAR_STR]",
    "cmd_name": "conala",
    "gpt35_response": " Subtract 13 from every number in a list `a`. This requires using list comprehension to iterate over each element in `a` and performing subtraction by 13 on each of them."
}
{
    "question_id": "701402-88",
    "nl": "choose a random file from the directory contents of the C drive, `C:\\\\`",
    "cmd": "random.choice(os.listdir('C:\\\\'))",
    "oracle_man": [
        "python.library.random#random.choice",
        "python.library.os#os.listdir"
    ],
    "canonical_cmd": "random.choice(os.listdir('VAR_STR'))",
    "cmd_name": "conala",
    "gpt35_response": " Choose a random file from the directory contents of the C drive, `C:\\\\`. This requires using the `os.listdir()` method to retrieve all files in the directory and the `random.choice()` function to randomly select one of the filenames."
}
{
    "question_id": "30551576-22",
    "nl": "Get all urls within text `s`",
    "cmd": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('\"(http.*?)\"', VAR_STR, re.MULTILINE | re.DOTALL)",
    "cmd_name": "conala",
    "gpt35_response": " Get all urls within text `s`. This requires using python regular expressions to find all substrings in the string `s` that match the pattern of URLs."
}
{
    "question_id": "30551576-58",
    "nl": "match urls whose domain doesn't start with `t` from string `document` using regex",
    "cmd": "re.findall('http:\/\/[^t][^s\"]+\\\\.html', document)",
    "oracle_man": [
        "python.library.re#re.findall"
    ],
    "canonical_cmd": "re.findall('http:\/\/[^t][^s\"]+\\\\.html', VAR_STR)",
    "cmd_name": "conala",
    "gpt35_response": " Match urls whose domain doesn't start with `t` from string `document` using regex. This requires using the python re module's `findall()` function with a regular expression to match the pattern of URLs whose domain doesn't start with `t`."
}
{
    "question_id": "113534-21",
    "nl": "split a string `mystring` considering the spaces ' '",
    "cmd": "mystring.replace(' ', '! !').split('!')",
    "oracle_man": [
        "python.library.stdtypes#str.replace",
        "python.library.stdtypes#str.split"
    ],
    "canonical_cmd": "VAR_STR.replace(' ', '! !').split('!')",
    "cmd_name": "conala",
    "gpt35_response": " Split a string `mystring` considering the spaces ' '. This requires using the `split()` method to break `mystring` into a list of substrings, where each substring is separated by a space ' '."
}
{
    "question_id": "5838735-0",
    "nl": "open file `path` with mode 'r'",
    "cmd": "open(path, 'r')",
    "oracle_man": [
        "python.library.urllib.request#open"
    ],
    "canonical_cmd": "open(VAR_STR, 'VAR_STR')",
    "cmd_name": "conala",
    "gpt35_response": " Open file `path` with mode 'r'. This requires using the `open()` function to create a file object for `path`, specifying the mode as 'r' for reading."
}
{
    "question_id": "36003967-69",
    "nl": "sum elements at the same index in list `data`",
    "cmd": "[[sum(item) for item in zip(*items)] for items in zip(*data)]",
    "oracle_man": [
        "python.library.functions#zip",
        "python.library.functions#sum"
    ],
    "canonical_cmd": "[[sum(item) for item in zip(*items)] for items in zip(*VAR_STR)]",
    "cmd_name": "conala",
    "gpt35_response": " Sum elements at the same index in list `data`. This requires using the `zip()` function to combine the elements of multiple lists into tuples, and then using list comprehension with the `sum()` function to compute the sum of elements at each index in `data`."
}
{
    "question_id": "7635237-89",
    "nl": "add a new axis to array `a`",
    "cmd": "a[:, (np.newaxis)]",
    "oracle_man": [],
    "canonical_cmd": "VAR_STR[:, (np.newaxis)]",
    "cmd_name": "conala",
    "gpt35_response": " Add a new axis to array `a`. This requires using the `numpy` library to call the `expand_dims()` function on `a`, specifying the axis along which to add a new dimension."
}