{"(2, True, True)": [["11840111-96", "d1_vals = {k: v for k, v in d1.items() if len(d2.values()[k]) > 0}", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "dict(d1, d2)", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "The code should look like this: os.read(fd, n) where fd is the file descriptor and n is the number of bytes to read", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "urllib.request.urlretrieve(url, None, reporthook)", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "MyModel.objects.filter(charfield__length__max=255).to_python()", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "Alternatively, we can use the numpy functions bitwise_xor or bitwise_and to compute the logical xor", "((a and (not b)) or ((not a) and b))"], ["546321-12", "date.fromordinal(30)", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "The code to achieve this is date = date.fromordinal(date.toordinal() + 2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "The answer code is subprocess.check_call(\"test1.py\", None)", "subprocess.call('test1.py', shell=True)"], ["843277-70", "Specifically, the code to achieve this is hasattr(obj, 'attr_name')", "hasattr(obj, 'attr_name')"], ["2231663-53", "[list(zip(list1, list2)), list(zip(list3, list4)), list(zip(list5, list6)), list(zip(list7, []))]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "list(zip_longest(itemgetter(0, 1, 2), [1, 2, 3], fillvalue=0))", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "s.search('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)')", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df.groupby('User').sum('X') == 0", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "The numpy version is df[df['X'] == 0]. The pandas version is df.isin([0]). Both of these will return a boolean array of the same shape as df where the elements are True where the value of X is equal to 0", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "webbrowser.open('http://example.com')", "webbrowser.open('http://example.com')"], ["4906977-61", "os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-33", "This function will return the value as a string, which can then be converted to a byte string using the b prefix", "os.environ['HOME']"], ["4906977-98", "print(os.getenv(\"PATH\"))", "print(os.environ)"], ["4906977-9", "os.getenv(\"FOO\", \"bar\")", "os.environ"], ["4906977-77", "os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "Therefore, the answer code is sorted(dictionary.items(), key=lambda name_num: name_num[1])", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in data_dict.items(): \n    print(value)", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats_split'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "''", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace('!@#$', '')", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "To remove the string \"1\" from the string \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789", "string.replace('1', '')"], ["3939361-89", "line.replace('!@#$', '')", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t - (1 hour + 10 minutes)", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "the time 5 hours earlier than dt", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "import random; random.randint(100000000, 999999999)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "import random; random.randint(100000000, 999999999)", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "To parse the webpage 'http://www.google.com/' using BeautifulSoup, we can use the following code:\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.google.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Find all links on the page\nlinks = soup.find_all('a', href=True)\n\n# Print the links\nfor link in links:\n    print(link.get('href'))", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.setscrreg(0, 0, 0, 0)", "root.lift()"], ["1823058-26", "locale.format_string(\"%d\" % value, True)", "'{:,}'.format(value)"], ["14406214-5", "the code block that implements this rationale", "ax.xaxis.set_label_position('top')"], ["14406214-43", "The answer code is ax.set_ylim(-1, 1)", "ax.xaxis.tick_top()"], ["10565598-66", "True if array b contains all elements of array a", "numpy.in1d(b, a).all()"], ["13557937-8", "The answer code is struct.unpack('<B', bin(8).replace('0b', '0'))", "list('{0:0b}'.format(8))"], ["13557937-9", "the code snippet list_of_bytes = [struct.unpack('<b', bin(8))[0]] * 8", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "This will print the day, month, and year in the 2-digit day and month, and 2-digit year format, and the current time in the 24-hour format", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "reversed(L) or itertools.chain.from_iterable(L)", "L[::(-1)]"], ["3940128-21", "This will reverse the elements in L and append them to the end of the reversed iterator", "L.reverse()"], ["89228-90", "The output of the command will be returned in the returncode attribute of the CalledProcessError object", "from subprocess import call"], ["89228-91", "The subprocess.check_call() method will wait for the command to complete and return 0 if it succeeds, while the subprocess.call() method will not wait for the command to complete and will return the return code of the command", "os.system('some_command with args')"], ["89228-25", "subprocess.check_call(\"some_command\", args=['<', input_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "The code to call the external command is subprocess.check_call(\"some_command\", args)", "stream = os.popen('some_command with args')"], ["89228-97", "subprocess.Popen(\"echo Hello World\", shell=True).communicate(\"\")", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "subprocess.check_call('ls -l')", "call(['ls', '-l'])"], ["5137497-23", "the current directory", "os.path.realpath(__file__)"], ["5137497-33", "The directory name is the string returned by the path.dirname function", "os.path.dirname(path)"], ["5137497-66", "The answer code is result = os.path.normpath(path)", "os.path.realpath(path)"], ["5137497-91", "print(os.listdir())", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "os.path.abspath(os.path.dirname(os.getcwd()))", "full_path = os.path.realpath(__file__)"], ["14961562-66", "list = [ord(c) for c in s], where s is the hexadecimal string", "struct.unpack('11B', s)"], ["19738169-65", "the following code block: \n\ndf['DateStr'] = df['DateObj'].astype(str).strptime()", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "permutations([1, 2, 3], [4, 5, 6])", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "a list of all possible permutations of the list [1, 2, 3], which is [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename.csv, sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "This will destroy the root window of the Tkinter application", "root.destroy()"], ["2225564-15", "['0001.jpg', '0002.jpg', '0003.jpg', '0004.jpg', '0005.jpg', '0006.jpg', '0007.jpg', '0008.jpg', '0009.jpg']", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample').set_index('order')", "df.pivot(index='order', columns='sample')"], ["18229082-25", "list", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "a list of two strings, result[0] and result[1], which are the first two substrings that end in ., ? or !", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "import csv, codecs encoding = 'utf-8' with open('myfile.csv', 'w', encoding = encoding) writer = csv.writer(file, dialect = 'excel') writer.writerow([u'John', u'Doe', u'123 Main Street', u'Anytown', u'CA', 98765])", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "dataframe.abs()", "data.set_index('Date').diff()"], ["28901311-21", "[index for element in A if element in B]", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "The answer code is treeview.column(\"time_spent\").query(\">3 hours\", distinct=True)", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "'%d/%m/%Y %H:%M:%S' % (time.strftime())", "datetime.datetime.now()"], ["415511-29", "struct_time = thread_time() + datetime.datetime.now() + time.gmtime()", "datetime.datetime.now().time()"], ["415511-26", "The time.time function can be used to get the current time in seconds since the epoch", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "The answer code is time.strftime('%d %m %Y %H:%M:%S', localtime())", "str(datetime.now())"], ["415511-33", "print(time.strftime(\"%d/%m/%Y %H:%M:%S\"))", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "The answer code is np.hstack((np.zeros((6, 9, 20)), [1, 2, 3, 4, 5, 6, 7, 8, 9]))", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "arr with a shape of (6, 9, 20)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "The groupby() function can be used to group the dataframe by the relevant columns, and the head() function can be used to return the first and last rows of each group", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "datetime.strptime('24052010', '%d%m%Y')", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "print(df.groupby.mean().cumsum().sum())", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "tuple(int(i) for i in input())", "tuple(map(int, input().split(',')))"], ["2233917-8", "int(input_tuple)", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "For example, ax.set_xticklabels([u'x1', u'x2', u'x3', u'x4']) will rotate the x-axis labels 45 degrees", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "df.groupby(['STNAME', 'COUNTY_POP']).sum().max()", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "The answer code is df.pivot_table(index='Close', columns='time', values='Close').reset_index().rename(columns={'Close': 'value'}).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "the code block that implements this rationale", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "print(reversed(yourdata))", "sorted(yourdata, reverse=True)"], ["13237941-56", "This code uses the itemgetter() function to extract the subkey value from each dictionary in the yourdata list, and then passes this value to the sorted() function to sort the list in reverse", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "sorted(yourdata, key=itemgetter('key', 'subkey'), reverse=True)", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "We can then use the clf method of the Figure class to clear the figure, and the show method of the io class to display the graph", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "We can then use the join() function to join the head and tail to get the answer '/usr/var/log'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "We can also use the dirname function to get the directory name of '/usr/var/log/', which is 'var'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "myobject.id.number", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "This code uses the Einstein summation convention to calculate the outer product of each column of X and transpose it to form a 3d array", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "To create a list of tuples with four elements, we can use a list comprehension: [tuple(p) for p in itertools.permutations([1, 2, 3], [4, 5, 6])] which will give us the desired output", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "'off delicious $5 ham'", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "import random\nimport random\n\n# Generate 6 random numbers between 1 and 50\nrandom.seed(12345)\n\n# Output:\n\n# Generated 6 random numbers between 1 and 50\n\nprint(random.randint(1, 51))\nprint(random.randint(1, 51))\nprint(random.randint(1, 51))\nprint(random.randint(1, 51))\nprint(random.randint(1, 51))\nprint(random.randint(1, 51))\nprint(random.randint(1, 51))\n\n# Output:\n\n# Generated 6 random numbers between 1 and 50\n\n17\n24\n28\n32\n21\n12\n19", "random.sample(range(1, 50), 6)"], ["13628725-59", "uuid.uuid4().hex + str(random.randint(1, 50)", "random.sample(range(1, 50), 6)"], ["15940280-74", "datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")", "datetime.utcnow()"], ["12280143-55", "This function changes the current working directory to the specified path", "os.chdir('..')"], ["15457504-91", "k.setText('Purisa', 12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "my_list.to_dict('list')", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "any(d.values() == 'one') or d.values().count('one') > 0", "'one' in list(d.values())"], ["8214932-94", "any(d.values() == 'one')", "'one' in iter(d.values())"], ["7125009-76", "legend.set_title('x-small', loc='upper-left', prop={'fontsize': 8})", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "Therefore, the answer is matplotlib.legend().set_title({'prop': {'size': 6}})", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence.replace(\" \", \"\")", "sentence.replace(' ', '')"], ["8270092-68", "sentence.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence.strip().replace(\"\\\\s\", \"\")", "sentence.strip()"], ["8270092-87", "the string with all whitespaces removed", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.strip() or sentence = re.sub(\" \", \" \", sentence).sub(alpha, sentence)", "sentence = ''.join(sentence.split())"], ["14591855-94", "Then, we can use the dataframe.head() method to return the first n rows", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str(io.IOBase.readlines('very_Important.txt'))[0].strip()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "The answer code is try_again = True, wait_time = 5, max_tries = 3", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "The # symbol is removed from the URL", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "sorted(mydict.items())", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "The answer code is 'list(werkzeug.datastructures.Headers.getlist(\"firstname\"))", "first_name = request.args.get('firstname')"], ["13279399-5", "If we need to access raw or non-form data, we can use the HttpRequest.body attribute", "first_name = request.form.get('firstname')"], ["3278850-59", "txt = file.txt.readlines()", "txt = open('file.txt').read()"], ["14043080-28", "time.strftime(\"%Y\")", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "logging.Filter(lambda record: record.level != logging.DEBUG and record.get('id') != 3).filter(record)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "a list of all the div blocks within soup", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "bytearray([ord(i) for i in rgbstr])", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "reversed(a).join('-')", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "The str(process.pid) is used to get the process id of the process and then the terminate() function is used to terminate the process", "sys.exit()"], ["73663-36", "p.kill() or p.terminate()", "quit()"], ["73663-66", "To terminate a Python script with an error message \"some error message\", we can use the following code: \n    try:\n        # code to execute\n    except Exception as e:\n        print(\"some error message\")\n        raise SystemExit(1)", "sys.exit('some error message')"], ["21974169-23", "For example, cursor.execute(\"commit\") would commit the current transaction", "con.commit()"], ["11269575-66", "This will cause the output of the subprocess to be hidden and the return code will be checked to ensure it was successful", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "int(float(s))", "int(Decimal(s))"], ["1094717-69", "Decimal(input_string)", "int(s.split('.')[0])"], ["31957364-53", "A.prod(B).reshape((-1, 1, 1))", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "subprocess.check_call('rm -r some.file')", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "The Credit_exp column can be rounded to three decimal places using df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "frozenset.remove(element)", "e = next(iter(s))"], ["5868374-42", "This will return a datetime object representing the date and time specified by datestr", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open(pdf_reference.pdf, 'rb').read()).encode('utf-8')", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('new_directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "To change the root directory of the current process, we can use the os.chroot() function", "os.chdir('.\\\\chapter3')"], ["1299855-22", "The answer code is urllib.request.URLopener().retrieve(url, filename)", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "'A\\n'", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "re.search('[a-zA-Z][\\\\w-]*$', '!A_B')", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "The answer code is soup.findall('div', attrs={'class': 'comment-'})", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "fig.clf()", "plt.cla()"], ["13156395-50", "This will open the file 'sample.json' in read mode with the given encoding of 'utf-8-sig'", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "This will deserialize the json file into a Python object", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "code.interact(\"Please enter your input: \")", "sys.exit(0)"], ["8751653-82", "struct.unpack(\"b\", s2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "struct.unpack('<f', '-0b1110')[0]", "float(int('-0b1110', 0))"], ["8751653-54", "The answer code is float(struct.unpack('d', b8))", "struct.unpack('d', b8)[0]"], ["4789021-9", "If the user is not authenticated, it will return False", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "The answer code is if user.is_authenticated(): if user.is_in_group('group1'): print('User is in group 1') else: print('User is not in group 1')", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "True", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir('path/to/python/script')", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.to_csv('mycsv.csv', sep='\\t', engine='python')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "The writerow method should be used to write the row parameter to the writer\u2019s file object, formatted according to the current dialect", "df.write.csv('mycsv.csv')"], ["8092877-26", "For example, if the list is [1, 4, 2, 5, 6], the output will be [((1, 0), 0), ((2, 1), 1), ((3, 2), 2)]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "list(itertools.chain.from_iterable(data))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "df['a'].applymap() or df['a'].tolist()", "df['a'].values.tolist()"], ["23748995-42", "df.isin(values) or Series(values).isin(df)", "df['a'].tolist()"], ["20205455-79", "BeautifulSoup(response.decode())", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "where(a[:, :2], a[:, 2:])", "a[np.arange(len(a)) != 3]"], ["8217613-41", "The code to do this is output = subprocess.check_output(\"echo 'foo'\")", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df.groupby('Date').unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "True if filename is a descendant of the directory, and False otherwise", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "The answer code is myDict = dict(zip(myListOfTuples))", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "sorted_list = sorted(list_of_dicts, key=lambda x: x['date'])", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "Similarly, df.to_parquet(\u2018mydf.parquet\u2019, index=True) will export the data frame to a Parquet file with the indices retained", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "list(chain(list1, itemgetter(1)) - list2)", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "We can then use the cmp() method from the filecmp library to compare the files and return True if they seem equal, False otherwise", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list_of_tuples, key=itemgetter('value'))", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "This will convert the list of tuples of floats to a list of tuples of strings of floats with eight decimal point precision", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "The answer code is str_list = map(str, lst)", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "Therefore, the answer is A[0][1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "[a[0, 0], a[1, 0], a[2, 0], a[3, 1]]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find_all('a', 'div')", "soup.find_all(['a', 'div'])"], ["931092-70", "str('world hello')", "'hello world'[::(-1)]"], ["931092-64", "reversed(s) or s = itertools.chain.from_iterable(s)", "s[::(-1)]"], ["931092-5", "This will reverse the elements of the iterable and join them with the empty string, resulting in the reversed string 'foo'", "''.join(reversed('foo'))"], ["931092-74", "For example, string = 'Hello World!' \nresult = string.join('-') \nprint(result)\n# Output: 'W-orld!- H-ello'", "''.join(reversed(string))"], ["931092-65", "str(reversed('foo'))", "'foo'[::(-1)]"], ["931092-99", "str(reversed(a_string), 'separator')", "a_string[::(-1)]"], ["931092-20", "reversed(a_string)", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "s.join('')", "''.join(reversed(s))"], ["163542-7", "The answer code would be import readline, bytearray; rl = readline.set_stdin('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'); lines = bytearray.splitlines(rl.read()); print(lines)", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "list(shlex.splitlines(bytearray('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'), posix=False, keepends=True))", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df.astype(dtype) or df.apply(function)", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str.translate(i, dict(ord: ord))", "str(i)"], ["961632-44", "The answer code is str(a)", "a.__str__()"], ["961632-33", "the string resulting from joining the elements of a with the given separator", "str(a)"], ["27318022-32", "The 0 in the argument is the file descriptor for redirected stdin", "result = sys.stdin.read()"], ["40055835-26", "The code to achieve this is A = numpy.delete(A, B)", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.isin(test_elements, axis=0).dropna()", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "The code snippet to achieve this is df.drop([start_remove, end_remove])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "arr.argwhere(mask)", "numpy.where(mask)"], ["32533944-71", "import pandas; df = pandas.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "pd.DataFrame.from_dict(d)", "pd.DataFrame(d)"], ["1883604-86", "We can then use the GzipFile constructor to open the file and read the contents", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "webbrowser.get(\"http://www.python.org\")", "driver.get('http://www.google.com.br')"], ["3437059-20", "True if \"blah\" is in the string, and False if it is not", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "If no match is found, None is returned", "string.find('substring')"], ["3437059-83", "The code can be written as: if 'is' in s: \n    print('Yes, \"is\" is present in the string')\nelse:\n    print('No, \"is\" is not present in the string')", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "The myfunction function should be defined in the module, so the globals() or locals() function should return the myfunction function", "globals()['myfunction']()"], ["3061761-63", "a.shape", "a.shape"], ["3061761-55", "(3, 4, 2)", "N.shape(a)"], ["3061761-89", "a.shape() and a.reshape(new_shape)", "N.shape(a)"], ["3061761-31", "a.shape, a.reshape(a.shape), or a.len()", "a.shape"], ["13291539-54", "float(0.00582811585976)", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "There is no need to use any of the provided code documentation as this is a simple list comprehension task", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "The answer code is words = io.IOBase.readlines('myfile', hint=1000)", "words = open('myfile').read().split()"], ["7717380-65", "return np.asarray(a.tolist())", "a = np.array(a)"], ["9304908-37", "logging.Filter(lambda record: record[0] in [1, 4, 7])", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "lower(string1) == lower(string2) or string1.swapcase() == string2.swapcase()", "(string1.lower() == string2.lower())"], ["319426-70", "if first.lower() == second.lower():", "(first.lower() == second.lower())"], ["319426-18", "first.lower() == second.lower()", "(first.upper() == second.upper())"], ["15455388-38", "the pandas dataframe df", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df.groupby(['col5', 'col2']).count()", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "The answer code is property(your_obj, 'x')", "getattr(your_obj, x)"], ["3743222-35", "print(datetime.strptime('2019-01-01', '%Y-%m-%d').date())", "datetime.datetime.now().date()"], ["3743222-73", "A ValueError is raised if any field in t is outside of the allowed range", "datetime.datetime.now().date()"], ["12496531-86", "the sorted numpy array A sorted by the second column", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "zZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZzZ", "s.decode('utf-8').lower()"], ["2631935-11", "Finally, we can use the create() method from the venv module with the given keyword arguments and the env_dir argument to create an EnvBuilder", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "something = {'bob': 123}", "globals()['something'] = 'bob'"], ["14766194-35", "The code would be if any(a == [1, 2]): and the answer is True", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "arr.reshape(new_shape)", "np.zeros((3, 3)).ravel()"], ["15579649-73", "np.array(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "import sys; sys.exit(1)", "sys.exit(0)"], ["36139-44", "sorted(mylist, key=itemgetter(0))", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "sorted(mylist, key=itemgetter('text'))", "mylist.sort(key=str.lower)"], ["36139-23", "The answer code is sorted_list = sorted(mylist, key=itemgetter(0))", "mylist.sort()"], ["36139-32", "The sorted list will be returned", "list.sort()"], ["5280178-72", "import file.py", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "This is because the string ends with the string '.mp3' which is the first element in the tuple", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "This code will unpack the first two bytes of pS and cast them to an integer", "struct.unpack('h', pS[0:2])"], ["3668964-35", "The code to check is all(word.lower() == word for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype('int').to_dense().astype('int')", "df.to_sparse(0)"], ["1514553-90", "The result is a new array with the values appended to the original array", "variable = []"], ["1514553-71", "The answer code is range(1, 10)", "intarray = array('i')"], ["610883-92", "This will return True if the object a has the property property and False if it does not", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "hasattr(a, 'property')", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "The code snippet a.property = 'default value' will assign the value 'default value' to the property attribute of a", "getattr(a, 'property', 'default value')"], ["13902805-83", "The answer code is set('aaabcabccd')", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "The set() function can be used to convert the string s into a set, which will contain all the unique characters in the string", "list(set('aaabcabccd'))"], ["13902805-87", "the provided code snippet", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "The code to find the index of the sub string s in str starting from index 16 is str.rfind('s', 16)", "str.find('s', 16)"], ["674764-33", "str.rfind('Aloha', 'x', 0, 6)", "x.find('Aloha')"], ["674764-19", "The answer code is sdfasdf.rfind('cc')", "'sdfasdf'.index('cc')"], ["674764-45", "If it is not found, -1 is returned", "'sdfasdf'.index('df')"], ["674764-64", "re.Match('a', 'str').start()", "str.find('a')"], ["674764-91", "The answer code is m = re.search('g', 'str')\n    start, end = m.start(), m.end()", "str.find('g')"], ["674764-3", "16", "str.find('s', 11)"], ["674764-47", "19", "str.find('s', 15)"], ["674764-5", "11, 14", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation, key=cityPopulation.get(3))", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted(u.items(), key=itemgetter(1))", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "sorted(d.items(), key=lambda x: x[1])", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "a callable object that fetches the value from the defaultdict using its __getitem__() method", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "subprocess.Popen([\"kill\", process.pid]).wait()", "sys.exit(0)"], ["179369-62", "The answer code is os.abort('aa! errors!')", "sys.exit('aa! errors!')"], ["179369-47", "os.abort()", "sys.exit()"], ["19779790-35", "time.strftime(\"%d %m %Y\", time.localtime(-1))", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "The return value of the function will be used as the value for each new column", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "This will return 'example.com' since the 'follow' string is found in the path component", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "Therefore, the answer is new_set.average(old_set)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "Finally, we can use the binascii.hexlify() function to convert the binary string to its hexadecimal representation, which is '6E6564'", "bin(ord('P'))"], ["11399384-83", "The provided code documentation is not directly relevant to this query", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "LoD.keys()", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD.keys())", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "The join() function is used to concatenate the binary strings into a single string", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", ": df.groupby(['Month', 'Fruit'])", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "urllib.request.URLopener().retrieve('https://www.mysite.com/', 'username', 'pwd', reporthook=lambda x,y,z: None)", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "The code would be for folder in os.listdir('file'): if folder.endswith('/'): print(folder)", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "new_string = str.replace(' ', '')", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict.items(separator=' '))", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "Finally, we can use the json.load() function to load the string into the variable json_data", "json_data = json.loads(json_string)"], ["2759067-52", "If dst is a directory, the shutil.copy function can be used to copy the file to the directory", "os.rename(src, dst)"], ["16389188-53", "the updated window with the specified attributes set", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "contextvars.Context.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "the list of lowercase keys from the dictionary thedict", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1.set_index('date').merge(df2, on='revenue').combine_first()", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "os.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "context.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "getsizeof('C:\\\\Python27\\\\Lib\\\\genericpath.py')", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'string_of_characters_like_these=%24%23%40%3D%3F%25%5E%Q%25%3F%3A%24%26%3F%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A%3A", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "random.Random(10)", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "os.path.split('path')", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "x.index('c')", "list(x.keys()).index('c')"], ["10484261-51", "programs[key.lower()].value for key in programs.items() if key.lower() == 'new york']", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s.encode('utf-8').decode()", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "urllib.parse.unquote(\"Hello%20World\", encoding='utf-8', errors='strict')\"", "urllib.parse.quote_plus('a b')"], ["32751229-20", "The answer code is sum = df.groupby(\"Country\", \"Item_code\").sum()", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "The answer code is count = itertools.count(5)", "sum(((i > 5) for i in j))"], ["10543303-81", "In this case, the iterable j contains the values, so we can use the sum() function to get the total number of values that are greater than 5", "len([1 for i in j if (i > 5)])"], ["10543303-37", "itertools.count(i+1, j)", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "a1.any(axis=1) & a2", "np.any(np.in1d(a1, a2))"], ["9775731-24", "torch.clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "The code to achieve this is list(itertools.product(range(1, 2), repeat=n))", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "itertools.product(range(1, n+1), repeat=n)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "The result is a list of tuples, each containing three elements, representing the combinations of the three binary values", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "For example, if the three iterables are [1, 0, 1, 0, 1], [0, 1, 1], and [1, 0], the output will be [((0, 1, 1), (1, 0, 1), (1, 1, 0)), (0, 1, 1), (1, 0, 1)]", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "(timegm(gmtime(datetime.now())) + 86400*3)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "The code can be written as: float.fromhex(struct.unpack_from('<f', bytearray.fromhex('4081637ef7d0424a')))", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.colorbar(im, ax=ax, cax=None, orientation='horizontal')", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s.rsplit().str.rstrip().str", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "True", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "True", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "Users.objects.filter(userprofile__gte=0).filter(is_active=True)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "The code to achieve this is l = itertools.chain.from_iterable(test)", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "list_of_items.groupby(key=lambda x: x['name'])", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "If the context does not contain the key 'title', it will return an empty string", "request.POST.get('title', '')"], ["20222485-17", "to use a list comprehension with an accumulator of 10 and a range of 10, such as by writing [10*i for i in range(10)]", "list(accumulate(list(range(10))))"], ["16436133-47", "Finally, the json.JSONDecoder.decode() function can be used to return the python representation of the json string", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "test_string.rfind('}', end=len(test_string)-1)", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "This will return the indices of the first and last characters in the string that are matched by the group", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "We can pass '&' as the delimiter and the answer is a list of the words in the string", "s.rfind('&')"], ["8247792-90", "The rsplit method can be used to split the string using the delimiter '&', and the answer is ['a', 'b', 'c', 'd']", "s[:s.rfind('&')]"], ["35178812-30", "ex.value_counts().unique()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "array", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = zip(s)", "t = tuple(x[0] for x in s)"], ["11205386-94", "'City'", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot_table('upc', 'saleid').set_index('upc').reset_index()", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "This will set the permission of the file path to stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "Finally, we can use the csv.csvwriter.writerow() function to write the dates to the csv file, formatted as yearmonthday", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = np.nan_to_num(a, inf=False)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "Specifically, we can use the following code block: \n\nimport numpy as np\narr1 = np.array([[1,2,3], [4,5,6], [7,8,9]])\narr2 = np.array([[2,4,6], [1,3,5], [8,2,4]])\narr3 = np.array([[1,4,7], [3,6,9], [8,1,2]])\n\nmin_arr = np.minimum(arr1, arr2, arr3)\n\nprint(min_arr)\n\n# Output:\narray([[1, 2, 3],\n   [4, 5, 6],\n   [7, 8, 9]])", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "day = datetime.strftime(\"%A\")", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "The answer code is str(d.items())", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "This returns a boolean array of the same shape as df where True indicates that the corresponding row contains the value foo for column A", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[~df[column_name] == some_value]", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df['column_name'].isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "Therefore, the answer is df.isin(some_value)", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "This will return a boolean array of True where the value of the \"B\" column is \"one\" or \"three\" in the DataFrame df", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import modulefinder; modulefinder.ModuleFinder().modules", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "The code is: importlib.import_module('some.package')", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "[0, 1, 2, 3, 4, 5]", "numpy.where((x == 0))[0]"], ["2428092-52", "The response_data can then be returned as the response object's content", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "s.hexlify().fromhex()", "s.decode('hex')"], ["10824319-49", "s.encode('hex')", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str.join(adict.items())", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str.join(adict.items(), sep=' ')", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "x.ravel() or x.asarray() or np.array(x)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "The binascii module provides the hexlify function to convert a list of booleans into a hex string", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "\"0x\" + binascii.hexlify(sum(walls))", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "os.chdir(path)", "os.chdir(path)"], ["1949318-13", "urllib.parse.urlencode(url)", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "'200'", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "The answer code is url = 'http://example.com/path?param1=value1&param2=value2'", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "True if the website is up, and False if it is not", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "The answer code is data.rename_axis('log(gdp)', axis=1)", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "Finally, we can use the sqlite3.Connection.execute function to execute the query and return the cursor", "dbb.commit()"], ["5352546-44", "The syntax dict_obj['l'] extracts the key-value pairs with keys matching 'l', dict_obj['m'] extracts the key-value pairs with keys matching 'm', and dict_obj['n'] extracts the key-value pairs with keys matching 'n'", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict.items([('l', 'm'), ('n', '')])", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict[key] for key in ('l', 'm', 'n')", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "list(bigdict.items()) and list(bigdict.keys())", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "This will decode the JSON string u to a dictionary", "json.load(u)"], ["4940032-13", "print(example_txt.find('blabla'))", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "txt_file.find('blabla')", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "['blabla']", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "The answer code is urlopen(url, Request(method=\"GET\"))", "r = requests.get(url)"], ["4476373-22", "urllib.parse.urlencode({'payload': 'value'})", "r = requests.get(url, params=payload)"], ["4476373-71", "To post the request using the ossaudiodev.oss_audio_device.post function, we can use the code snippet ossaudiodev = ossaudiodev.OssAudioDevice(url)", "r = requests.post(url, data=payload)"], ["4476373-99", "Finally, we can use the nntplib.NNTP.post method to post the article to the NNTP server", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "0b10111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(173)"], ["1476-88", "int(bin('01010101111'), 2)", "int('01010101111', 2)"], ["1476-71", "The binary string 0b10101 is converted to the integer 5", "int('010101', 2)"], ["1476-39", "55", "int('0b0010101010', 2)"], ["1476-6", "The answer code is bin(21)", "bin(21)"], ["1476-59", "For example, 'struct.unpack(\"b\", bin(11111111))[0]' will return 11111111", "int('11111111', 2)"], ["41178532-76", "(len(trace_df[trace_df.ratio > 0]) / len(trace_df)) * 100", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "itertools.product(a, a)", "list(itertools.product(*a))"], ["364519-94", "d.items()", "it = iter(sorted(d.items()))"], ["364519-100", "The answer code is for key, value in sorted(d.items()):", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "Finally, we can use the collections.OrderedDict class which returns an instance of a dict subclass that has methods specialized for rearranging dictionary order", "return sorted(dict.items())"], ["364519-33", "dict.items() | sorted()", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items()):", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "for key, value in sorted(foo.items(), key=lambda k: value):", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s)", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "import ast; ast.literal_eval(tensor)[:]", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.DataFrame([('A', 'B', 'A1R', 'B2', 'AABB4')], columns=['A', 'B', 'A1R', 'B2', 'AABB4']).set_index('A')", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "d1.intersection(d2).isdisjoint(d1).difference(d2)", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "[list(data)]", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "d.dropna().set_index('Date').apply(lambda x: x['DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "Finally, we can use the random.uniform() function to generate a random floating point number in the range [0.1, 0.7] with the given distribution", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "pivot_table = df.pivot_table(index='year', columns='month', values='item', aggfunc='sum')", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df_pivot = pd.pivot_table(df, index=['year', 'month'], values='values')", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "The code to get the output from p1 is p1_output = subprocess.Popen([\"p1\"], stdout=subprocess.PIPE).communicate()", "p1.communicate()[0]"], ["748028-100", "Otherwise, an exception will be raised", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "a.findall('*') or a.iterfind(None)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "Therefore, the answer is a.iterfind(None)", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "The provided documentation is not relevant to this problem", "min([x for x in num_list if x > 2])"], ["2793324-81", "a.remove(\"b\") or a.delitem(\"b\")", "a.remove('b')"], ["2793324-12", "The code to achieve this is a.delitem(c)", "a.remove(c)"], ["2793324-93", "a.delitem(6) or a[6] = None", "a.remove(6)"], ["2793324-3", "a.delitem(6) or a.__delitem__(6)", "a.remove(6)"], ["2793324-97", "a.delitem(c) or a.__delitem__(c)", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.delitem('c') or a.__delitem__('c')", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "The subprocess.check_output() function can be used to call the otherfunc function and return its output", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "This will cause the new program to have the same process id as the caller, and any errors will be reported as an OSError exception", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "True", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=(start_date, end_date))", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "Finally, we can use the objects attribute of the Sample model to filter out records for a given month from the Sample model in the year 2011", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "open('picture.jpg', 'rb')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "open('picture.jpg')", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "f = open('xxx.mp4', 'w')", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "The answer code is df.sort_values(by=['column_name'])", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "the provided code snippet", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.mean(axis=1)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "The answer code is return HttpResponseRedirect('/Home/index/')", "redirect('Home.views.index')"], ["42352887-25", "The answer code is sorted(things.items(), key=itemgetter('weight'))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "the directory name of the module a_module", "print(a_module.__file__)"], ["247770-2", "importlib.resources.path('__init__.py')", "print(os.getcwd())"], ["247770-13", "os.path.dirname('amodule')", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "If the input is a torch.sparse.dok.Dok tensor, it will sum the values in each column and return a torch.Tensor with the same format", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "time.strftime(\"%H:%M:%S\", time.localtime())", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "b'4a4b4c'.decode('utf-8', 'strict')", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "the output of the command", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.isin(frozenset.intersection(s1, s2)) & s2.isin(frozenset.intersection(s1, s2))", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "datetime.datetime.strptime(when, \"%d %m %Y\").date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "Entry.objects.get(pk=1)", "Entry.objects.filter()[:1].get()"], ["29784889-2", "warnings.warn_explicit('This is a warning', UserWarning, 'myfile.py', 12, None, record=True)", "warnings.simplefilter('always')"], ["22676-23", "Finally, we can use the os.read function to read the contents of the file mp3.mp3", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "We can then use the urllib.request.URLopener().open() method to open the URL and save the contents of the URL to the file file_name", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "the path \"/tmp/example.com\"", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "We can also use the urlopen() method to open the URL and read the contents of the file", "r = requests.get(url)"], ["22676-64", "reporthook is ignored for local URLs", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "P * T", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "The answer code is float('470FC614')", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "list(reversed(myList))", "list(reversed(list(range(10))))"], ["20573459-83", "6 days before January 1 of the current year", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "base64.b64encode('your string').decode()", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist.count(item) for item in Counter(mylist).elements()", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "This will write the data from df into a text file with tab-separated values", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "df.to_csv('c:\\\\data\\\\pandas.txt', sep='', engine='python')", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.rsplit('-', 1)", "print(x.rpartition('-')[0])"], ["15851568-9", "split_str = r.split('-')[-1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "import random; list = random.randint(10, 20)", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "\"%f\" % time.strftime(time.localtime(), \"%f\")", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "print(str.join(\"tab\", tab))", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "To count the number of non-zero values in an numpy array, we can use the count_nonzero() function", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.translate({ord(char): None for char in '!@#$%^*_+-='})", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text = text.translate({'!': '', '#': '', '%': '', '^': '', '*': '', '~': '', '[': '', ']': '', '(': '', ')': '', '+': '', '-': '', ':': '', ';': ''}) + (re.sub(r'[^\\w\\s]', ' ', text))", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag', 'name') or soup.find(bytearray('name'), 0)", "print(soup.find('name').string)"], ["2011048-15", "len(filepath)", "os.stat(filepath).st_size"], ["2600191-99", "l.count('a')", "l.count('a')"], ["2600191-23", "a Counter object with the items in l as keys and the corresponding counts as values", "Counter(l)"], ["2600191-53", "The answer code is list_of_items.count(item_to_count)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "Counter(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "str.count(b)", "l.count('b')"], ["12842997-15", "the path of the copied file", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['a'].combine_first(df['b']).join(df['a']).fillna(method='ffill')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "The relevant code documentation provides information about the zip function and its usage", "tuple(l)"], ["16296643-20", "the code block that implements this rationale", "level1 = map(list, level1)"], ["3880399-74", "logging.log(logging.INFO, logFile, pprint.pprint(dataobject))", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "The output will be a boolean array where True indicates that the element is present in the array", "df.loc[df['BoolCol']]"], ["21800169-19", "df.index.isin([True])", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "np.isin(df['BoolCol'], [True])", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "index = np.isin(df['BoolCol'], [True])", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir('owd')", "os.chdir(owd)"], ["32063985-36", "if RcParams.find_all('main-content'): RcParams.remove('main-content')", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "the list [[1, 10], [2, 20], [3, 30], [4, 40], [5, 50]]", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "list(zip(a, b))", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "re.Match.start(0) + re.Match.end(0) - 1", "'abcd}def}'.rfind('}')"], ["20546419-7", "It takes two arguments, the array or sequence to be shuffled and the random state object", "np.random.shuffle(np.transpose(r))"], ["574236-63", "os.listdir(path) + [os.stat(path).st_num_files for path in [os.lstat(path) for path in os.listdir(path)]", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor.execute(query, parameters) or None", "cursor.fetchone()[0]"], ["4454298-91", "the number of bytes written", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "If no match is found, None will be returned", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "list(set(itertools.chain(t)))", "list(set(t))"], ["7961363-86", "source_list = set(source_list).remove(source_list)", "list(set(source_list))"], ["7961363-7", "abracadabra = set(abracadabra).remove(abracadabra)", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(itertools.chain(a))", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "Alternatively, the ravel() function can be used to convert the matrix to a flat array, which can then be converted to a list using the list() function", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find_all('td', text='Address:')[0].find_next_sibling().text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "The answer code is data.decode('utf-8')", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data_to_be_encoded.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "This is because the getattr() function can be used to retrieve the value of the my_str attribute of the my_object object", "getattr(my_object, my_str)"], ["34945274-35", "a new array A with the elements that are not present in the array [1, 3, 4] replaced with zeros", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "The answer code is a.mean()", "np.mean(a, axis=1)"], ["15907200-35", "csvwriter.writerow(header)", "writer.writeheader()"], ["23359886-48", "There is no need to use any other functions or methods for this query", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "The answer code is df = sf.apply(lambda x: pd.DataFrame({'email': x.email, 'list': x.list}), axis=1).dropna()", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "resized_image = skimage.io.imresize(image, (x, y), filter=ANTIALIAS)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "The answer code is counts = Counter(itemgetter(l1, l2)).most_common(10)", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "The answer code is soup.find('span', {'class': 'starGryB sp'})", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "list5.sorted(key=itemgetter('degrees'))", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "We can also use the argsort() function from the Torch library to sort the elements in a tensor along a given dimension in ascending order by value", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "The answer code is obj.attr = 123", "getattr(obj, 'attr')"], ["1960516-75", "json.dumps(Decimal('3.9'))", "json.dumps(Decimal('3.9'))"], ["29836836-87", "This will keep only the rows in df where the value in column A is not present in itself", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.show()", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "The output will be a dictionary with the most frequent 100 words and their corresponding counts", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "a struct_time object with the UTC time zone", "datetime.now(pytz.utc)"], ["9262278-9", "We can use the dumps method from the json library to convert our object to a JSON-formatted string", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "The return value is (pid, fd) where pid is the pid of the child and fd is a file descriptor connected to the child's controlling terminal", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "myList.index('how') + myList.index('what')", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame(data=[('a', 1), ('b', 2)], columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels([f'{i:0.2f}' for i in range(10))", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict.keys())", "len(list(yourdict.keys()))"], ["2212433-64", "yourdictfile.count()", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df.concat([df.reorder_levels(list(range(1, len(df.columns))), axis=1), df.take([0], axis=1)], axis=1).drop('index', axis=1)", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "0", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "This reverses the queue", "q.put((-n, n))"], ["21887754-31", "a.concatenate(b)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "concatenate(a, b)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "array([[1, 2, 3, 7, 4, 5, 6, 8, 9])", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "a", "np.array((a, b))"], ["4356842-88", "The response object will then be returned", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "We can also use the idxmax and argsort methods to get the index of the maximum value over the requested axis", "df.index.get_loc('bob')"], ["18730044-52", "For example, itemgetter(1, 4) will fetch the first item from the first iterable and the fourth item from the second iterable", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "the modified string 't is icy'", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "re.search('i', 'it is icy').sub('', 'it is icy')", "re.sub('i', '', 'it is icy')"], ["22187233-75", "\"tht is icy\"", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "str.replace(\"needle\", \"\")", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "The code is nums = ast.literal_eval(intstringlist)", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, s))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "a list of filenames with the extension \".txt\"", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "This function will return a list of all the files in the directory with the specified extension", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "print(entry.name for entry in scandir('/mydir'))", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "the python dict data", "json.loads(request.body)"], ["36402748-46", "Finally, we can sort the Dataframe by the values in the column using the sort_values() function", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "data = urllib.parse.urlencode(mapping).encode('utf-8') + '?' + urllib.parse.parse_qs(data).get('key', 'default').encode('utf-8')", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "a boolean value, 0 for no and 1 for yes", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "The code snippet to achieve this is list.sort(key=lambda d: (d['points'], d['time'])).", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "bin(number)", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "The output should be a dataframe", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.parse.urlencode(django.http.QueryDict.urlencode(django.parse_qs(unescaped)))", "json_data = json.loads(unescaped)"], ["18367007-15", "os.write(newFileBytes, newFile)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "the code block: last_key = dict.items()[-1][0]", "list(dict.keys())[-1]"], ["10668585-75", "10", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "time.strftime(\"%d %m %Y %H:%M:%S\")", "datetime.datetime.now()"], ["17794266-82", "x.argmin(axis=0)", "max(x.min(), x.max(), key=abs)"]], "(2, False, True)": [["11840111-96", "d1_vals = d1.values() / d2.values() and d2_vals = d2.values() / d1.values()", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "a new dictionary with the values associated with each key from d2", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "Then, we can use the gzip module to decompress the content and save it as \"file.gz\"", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "The answer code is response = requests.get('http://randomsite.com/file.gz') which will download the file and save it as file.gz", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "The answer to this query is MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "~(a^b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "the code snippet date = datetime.date.today() + datetime.timedelta(months=1)", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "date = datetime.date.today() + datetime.timedelta(days=30)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "python test1.py or python test1.py path/to/script", "subprocess.call('test1.py', shell=True)"], ["843277-70", "The answer code is if hasattr(obj, 'attr_name'):\n    print('Object has attribute')\nelse:\n    print('Object does not have attribute')", "hasattr(obj, 'attr_name')"], ["2231663-53", "list1 = [1, 2], list2 = [3, 4], list3 = [5, 6], list4 = [7]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "list(my_list)", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "The answer code is import re; s = 'D P ;-D'; result = re.findall(r'(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df.groupby('User').X.transform('sum') == 0", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "data = df.loc[df['X'] == 0, 'data']", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "import webbrowser; webbrowser.open('http://example.com')", "webbrowser.open('http://example.com')"], ["4906977-61", "os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-33", "os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-98", "This function returns a dictionary of all the environment variables", "print(os.environ)"], ["4906977-9", "os.environ.keys()", "os.environ"], ["4906977-77", "os.environ['KEY_THAT_MIGHT_EXIST'] or 'default_value'", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "dictionary.sorted(key=lambda x: x.values())", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "There is no need to use any of the provided documentation as the solution is straightforward and does not require any additional functionality", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "The answer code is df['new_col1'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "The code would be: line = re.sub(\"!@#$\", \"\", line)", "line.translate(None, '!@#$')"], ["3939361-33", "The code snippet is line = re.sub('!@#$', '', line)", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.replace(\"1\", \"\")", "string.replace('1', '')"], ["3939361-89", "re.sub('!@#$', '', line)", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t - timedelta(1, 10)", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "dt - timedelta(days=0, hours=5)", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "random.randint(0, 9999999999999999)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "The answer code is import random\nrandom_number = random.randint(100000000, 999999999)\nprint(random_number)", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "BeautifulSoup(url='http://www.google.com/', parse_only=True)", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.focus_front()", "root.lift()"], ["1823058-26", "\"%d%s\" % (value, ',')", "'{:,}'.format(value)"], ["14406214-5", "ax.xaxis.set_top()", "ax.xaxis.set_label_position('top')"], ["14406214-43", "This will move the x-axis to the top of the plot ax", "ax.xaxis.tick_top()"], ["10565598-66", "The answer code is if all(a == b):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "numpy.in1d(b, a).all()"], ["13557937-8", "8 in binary islist('{0:0b}'.format(8))"], ["13557937-9", "8 in binary isint(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "print(datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "reversed(L)", "L[::(-1)]"], ["3940128-21", "reversed(L)", "L.reverse()"], ["89228-90", "subprocess.check_call('ls -l')", "from subprocess import call"], ["89228-91", "\"import subprocess; subprocess.call('some_command', args)\"", "os.system('some_command with args')"], ["89228-25", "The answer code is \"some_command < input_file | another_command > output_file\"", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "\"some_command arg1 arg2 arg3\"", "stream = os.popen('some_command with args')"], ["89228-97", "the code snippet", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "The answer code is \"import os; os.system('ls -l ' + path)\"", "call(['ls', '-l'])"], ["5137497-23", "the current directory", "os.path.realpath(__file__)"], ["5137497-33", "the directory name of path", "os.path.dirname(path)"], ["5137497-66", "canonical_path", "os.path.realpath(path)"], ["5137497-91", "os.getcwd()", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "os.path.dirname()", "full_path = os.path.realpath(__file__)"], ["14961562-66", "The code snippet is list_of_ints = binascii.unhexlify(s).unpack('<I*'), and the answer is list_of_ints", "struct.unpack('11B', s)"], ["19738169-65", "df['DateObj'].apply(lambda x: x.to_string())", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "list(itertools.permutations([1, 2, 3], [4, 5, 6]))", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "a list of all permutations of the list [1, 2, 3]", "itertools.permutations([1, 2, 3])"], ["19781609-19", "the csv file filename.csv without column names", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "import glob; files = glob.glob('*.jpg', recursive=True, start=str(0), end='9$')", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.T.pivot_table('order', 'sample', values='sample').fillna('').reset_index().rename(columns={'index': 'order'}).astype(str).reset_index()", "df.pivot(index='order', columns='sample')"], ["18229082-25", "To unpickle a list from a file, you can use list = pickle.load(open('afile'))", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "re.findall(r'(?:.*?)(?:[?!.])\\K.*', phrase)", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "import csv, unicodecsv and then csv_writer = unicodecsv.writer(open('output.csv', 'w'), dialect='unicode_csv') and then csv_writer.writerow(data)", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data['column1'] - data['column1'] - 1", "data.set_index('Date').diff()"], ["28901311-21", "A.indices = in_array(A, B)", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "This code will select all columns from the Task table and filter out the rows where the value of the time_spent column is bigger than 3 hours", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "import datetime; print(datetime.datetime.now())", "datetime.datetime.now()"], ["415511-29", "time.time()", "datetime.datetime.now().time()"], ["415511-26", "This code will get the current time in the format of %I:%M:%S %p, where %I is the hour, %M is the minute, and %S is the second", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "The code to get the current time in string format is time.strftime('%H:%M:%S') and the answer is time.strftime('%H:%M:%S')", "str(datetime.now())"], ["415511-33", "The answer code is import time; print(time.time())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "Then, arr.insert(0, [1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "arr = np.append(arr, [6, 9, 20], 0)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.head(n=1)[:, :-1] + df.tail(n=1)", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "The answer code is datetime.strptime('24052010', '%d%m%Y')", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "df.nonzero()[True].mean()", "np.flatnonzero(x).mean()"], ["5508352-50", "b.where(a)", "a[tuple(b)]"], ["2233917-10", "list(input())", "tuple(map(int, input().split(',')))"], ["2233917-8", "user_input = input(', '.join(map(str, [int_1, int_2, int_3])))", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "[i for i in range(len(lst)) if lst[i] > 0 and lst[i] > max(lst[i-1], lst[i-2], lst[i-3])]", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "pivot_table = pd.pivot_table(df, values='Close', index=['index.date'], columns=['index.time'])", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = list(map(int, stdin))", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "reversed(yourdata)", "sorted(yourdata, reverse=True)"], ["13237941-56", "sorted(yourdata, key=lambda x: x['subkey'])", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "the sorted list of nested dictionaries sorted_data", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "nx.draw_networkx_labels(G, pos)", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "The common prefix of '/usr/var' and '/usr/var2/log' is 'usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "'/'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "getattr(myobject.id, 'number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X = np.broadcast(X[:,:,None], 3).T", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "the code snippet list(itertools.permutations([0, 1], 4))", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "The answer code is re.search('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham').group()", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "import random\nnumbers = [random.randint(1,51) for x in range(6)]", "random.sample(range(1, 50), 6)"], ["13628725-59", "random.sample(range(1,50), 6)", "random.sample(range(1, 50), 6)"], ["15940280-74", "utc_time = time.time()", "datetime.utcnow()"], ["12280143-55", "The .. symbol is a shortcut for the parent directory of the current directory", "os.chdir('..')"], ["15457504-91", "k.set_font('Purisa', size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "df = pandas.DataFrame(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if 'one' in d.values():", "'one' in list(d.values())"], ["8214932-94", "if 'one' in d:\n    print('Yes')\nelse:\n    print('No')", "'one' in iter(d.values())"], ["7125009-76", "The argument takes a string value, so the answer is plt.legend(..., legend_params='x-small')", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.legend(fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence = sentence.str.whitespace()", "sentence.replace(' ', '')"], ["8270092-68", "sentence.replace(\" \", \"\")", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence = sentence.strip(' \\t\\n\\r\\f\\0')", "sentence.strip()"], ["8270092-87", "print(sentence.replace(\" \", \"\"))", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "The re.sub() function is not relevant to this problem", "sentence = ''.join(sentence.split())"], ["14591855-94", "import pandas as pd; df = pd.read_hdf('/home/.../data.h5', key='firstSet')", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt', 'r').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "The answer code is response = urllib.request.urlopen(url, ignore_errors=True)", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "The code is url = 'http://www.address.com/something#something'; url_parts = url.split('#'); new_url = filter(lambda x: x != '#', url_parts); new_url = join(new_url).split('#'); print(new_url)", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "sorted_dict = sorted(mydict.items(), key=lambda x: x[1])", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "The answer code is print(request.args.get('firstname'))", "first_name = request.args.get('firstname')"], ["13279399-5", "request.form['firstname']", "first_name = request.form.get('firstname')"], ["3278850-59", "txt = open('file.txt').read()", "txt = open('file.txt').read()"], ["14043080-28", "print(datetime.datetime.now(tz=pytz.timezone('UTC-11')).strftime(\"%Y\"))", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "The answer code is Entry.objects.filter(id__ne=3)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "soup.find_all('div')", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb(red, green, blue) = rgb(int(rgbstr[0], 16), int(rgbstr[1], 16), int(rgbstr[2], 16))", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "For example, reversed('hello', n=2) == 'olleh'", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "The code to terminate the program is if input() == 'exit' or input() == 'quit' or input() == '\\n':\n    print('Goodbye!')\n    exit()", "sys.exit()"], ["73663-36", "The program should print the string \"Program terminated with success.\" and then terminate", "quit()"], ["73663-66", "The code to terminate a Python script with an error message can be written as follows:\n\n\ntry:\n    # code to execute the script\nexcept Exception as e:\n    print(\"Some error message\")", "sys.exit('some error message')"], ["21974169-23", "None", "con.commit()"], ["11269575-66", "subprocess.Popen(['espeak', text], stdout=subprocess.PIPE).communicate()[0] which will hide the output of the subprocess ['espeak', text]", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "int(s)", "int(Decimal(s))"], ["1094717-69", "int(str(num))", "int(s.split('.')[0])"], ["31957364-53", "A*B.reshape((A.shape[0], B.shape[0], A.shape[2])).astype(int)", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "The command should be written as 'rm -r some.file &' to run the command in the background", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "The same can be done for Credit_exp", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "The answer code is s.remove(x)", "e = next(iter(s))"], ["5868374-42", "datetime.datetime.strptime('2020-01-01', '%Y-%m-%d')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open('pdf_reference.pdf', 'rb').read())", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "The other functions in the documentation are not relevant to this specific query", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('new_directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "os.chdir(path)", "os.chdir('.\\\\chapter3')"], ["1299855-22", "url = '<url>' + urllib.urlencode(open(<file_name>, 'rb')) + '</url>'", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "The answer code is 're.search(r'[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n').group()'", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "The regex '[a-zA-Z][\\\\w-]*$' matches the end of the string '!A_B' and will return True", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "soup.find_all('div', class_='comment-')", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "ax.clear()", "plt.cla()"], ["13156395-50", "open('sample.json', 'r', encoding='utf-8-sig').read()", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json; json.load('sample.json', encoding='utf-8')", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "The answer code is exit(0)", "sys.exit(0)"], ["8751653-82", "float(s2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "5.5", "float(int('-0b1110', 0))"], ["8751653-54", "The answer code is struct.unpack('<f', b8.decode('binary'))[0]", "struct.unpack('d', b8)[0]"], ["4789021-9", "if user.is_in_group('Member'):\n    print('User is a member of the group')\nelse:\n    print('User is not a member of the group')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "if user in ['group1', 'group2']:\n    print('User is in a group!')\nelse:\n    print('User is not in any group.')", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "vals[(vals==(0,1))]", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(script_directory)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "This will create a new csv file containing the contents of df", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "The code is df.to_csv('mycsv.csv', index=False)", "df.write.csv('mycsv.csv')"], ["8092877-26", "This will zip the list of tuples [(1, 4), (2, 5), (3, 6)] according to the original tuple index", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "The code to achieve this is list(itertools.groupby(data, key=lambda x: x[0]))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "df.a.values.tolist()", "df['a'].tolist()"], ["20205455-79", "This code will create a BeautifulSoup object from the given response, which can then be used to extract the desired elements from the HTML", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "The answer code is a[:, :, :exclude=[3]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "output.strip().decode('utf-8').replace('\"', '').lower()", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].drop_duplicates()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "if os.path.isdir('the/dir/' + filename):", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "the updated my_list with the values sorted in reverse order by 'date'", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', orient='tab', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "list(set([1, 2]) - [1, 2, 2, 3])", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "diff = difflib.compare_files(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "The code to achieve this is min(list(filter(lambda x: x[1] != 'nan', list)))", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "The resulting list str_list will contain tuples of strings with eight decimal points", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "lst.str.format(8).str.list", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0][1] and A[1][1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "The answer code is a[..., :, :] = a[..., 1, :] + a[..., :, 1] + a[..., 2, :] + a[..., :, 2]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "a list of tags, so we can use the list() function to convert it to a list", "soup.find_all(['a', 'div'])"], ["931092-70", "reversed('hello world')", "'hello world'[::(-1)]"], ["931092-64", "The answer code is list(reversed(s))", "s[::(-1)]"], ["931092-5", "'foo'.reversed()", "''.join(reversed('foo'))"], ["931092-74", "reversed(string)", "''.join(reversed(string))"], ["931092-65", "reversed(\"foo\")", "'foo'[::(-1)]"], ["931092-99", "a_string = a_string[::-1]", "a_string[::(-1)]"], ["931092-20", "print(a_string[::-1])", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "reversed(s)", "''.join(reversed(s))"], ["163542-7", "The string should then be passed to the 'stdin' parameter of the 'subprocess.Popen' function", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "stdin('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df.normalize()", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "This will convert the integer i to a string", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = input()", "result = sys.stdin.read()"], ["40055835-26", "A = A.set_diff1d(B)", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df.index.isin([start_remove, end_remove]))", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "the pandas timeseries df with the specified rows dropped", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "indices = np.where(mask)", "numpy.where(mask)"], ["32533944-71", "df = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = pd.DataFrame.from_dict(d)", "pd.DataFrame(d)"], ["1883604-86", "with open('file.gz', 'r') as f:\n    content = f.read()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "The answer code is from selenium import webdriver\ndriver = webdriver.Chrome()\ndriver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "True", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if \"substring\" in s:\n    if s.lower() == \"substring\":\n        print(\"Yes\")\n    else:\n        print(\"No\")", "string.find('substring')"], ["3437059-83", "if s.contains('is'):", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "module_name.myfunction()", "globals()['myfunction']()"], ["3061761-63", "a.shape", "a.shape"], ["3061761-55", "a.shape", "N.shape(a)"], ["3061761-89", "len(a)", "N.shape(a)"], ["3061761-31", "a.shape", "a.shape"], ["13291539-54", "float(0.00582811585976)", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list.unique(my_list)", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "words = list(map(str.split, open('myfile').readlines()))", "words = open('myfile').read().split()"], ["7717380-65", "a = np.asarray(a)", "a = np.array(a)"], ["9304908-37", "The answer code is Q(1, 4, 7)", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "This is because case-insensitive string comparison can be done by comparing the lowercase versions of the strings", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "casefold(string1) == casefold(string2)", "(string1.lower() == string2.lower())"], ["319426-70", "if first.casefold() == second.casefold():", "(first.lower() == second.lower())"], ["319426-18", "if first.lower() in second.lower():", "(first.upper() == second.upper())"], ["15455388-38", "We can do this using list comprehension: list_of_dicts = [dict(d[k][k] for k in d) for k in d], then we can create a pandas dataframe from this list of dictionaries using df = pd.DataFrame(list_of_dicts)", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df.groupby(['col5', 'col2']).transform('count')", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "x = getattr(your_obj, 'x')", "getattr(your_obj, x)"], ["3743222-35", "date = datetime.date(datetime.datetime.now())", "datetime.datetime.now().date()"], ["3743222-73", "date = datetime.date(2021, 8, 12)", "datetime.datetime.now().date()"], ["12496531-86", "This will sort the numpy array A in descending order by column", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s = s.lower()", "s.lower()"], ["6797984-49", "s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "The answer code is session.update(name='Bob Marley', id=123)", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "global something; something = \"bob\";", "globals()['something'] = 'bob'"], ["14766194-35", "a.in1d([1, 2])", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "array = np.asarray(ndarray)", "np.zeros((3, 3)).ravel()"], ["15579649-73", "result.astype(str).toarray()", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "The output should be print('Program successfully quit.')", "sys.exit(0)"], ["36139-44", "sorted(mylist, key=str)", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sorted()", "mylist.sort(key=str.lower)"], ["36139-23", "the sorted list mylist", "mylist.sort()"], ["36139-32", "list.sort()", "list.sort()"], ["5280178-72", "This will import the file file.py into the python console", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "if test.endswith('.mp3'):", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "struct.unpack('<H', pS[0])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "if all(word.isupper() for word in words):", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype('int64').tobsparse()", "df.to_sparse(0)"], ["1514553-90", "variable = []", "variable = []"], ["1514553-71", "a list with one element", "intarray = array('i')"], ["610883-92", "a.has_property('property')", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "The getattr() function is not relevant to this task, and the inspect.getmembers() function returns a list of all the members of an object, not just its properties", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "getattr(a, 'property', 'default value')", "getattr(a, 'property', 'default value')"], ["13902805-83", "This code block creates a list of all unique characters in the string 'aaabcabccd' by using the string.ascii_lowercase function which returns a list of all lowercase ASCII characters", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "The answer code is set(str('aaabcabccd'))", "list(set('aaabcabccd'))"], ["13902805-87", "list(string.ascii_lowercase(s))", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "re.search('s.*?', str, 16).start()", "str.find('s', 16)"], ["674764-33", "The code to achieve this is x.index('Aloha')", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "index", "'sdfasdf'.index('df')"], ["674764-64", "str.find('a')", "str.find('a')"], ["674764-91", "The answer code is str.find('g')", "str.find('g')"], ["674764-3", "The answer code would be str.find('s', 11)", "str.find('s', 11)"], ["674764-47", "The function will return the index of the first occurrence of 's' in the string str starting from index 15", "str.find('s', 15)"], ["674764-5", "12", "str.find('s', 11, 14)"], ["10194713-64", "The answer code is sorted_cityPopulation = sorted(cityPopulation.items(), key=lambda x: (-x[1][2], x[0]))", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "The answer code is sorted(u.items(), key=lambda name_num: (name_num[1], name_num[0]))", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "reversed(d.items())", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "sorted(d, key=lambda x: x.value)", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "The answer code is exit(0)", "sys.exit(0)"], ["179369-62", "This will cause the program to exit with an error code of 1", "sys.exit('aa! errors!')"], ["179369-47", "sys.exit()", "sys.exit()"], ["19779790-35", "yesterday = datetime.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.DataFrame(nvalues.items(), columns=['key', 'value'])", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "re.search('follow?page', s).group()", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "np.mean(old_set, axis=0) + np.mean(new_set, axis=0)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "The ASCII value of 'P' is 80, which is equivalent to 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set = set(LoD[i['name'] for i in LoD]) \nThis creates a set containing all the keys from the list of dictionaries LoD", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "keys = [k for d in LoD for k in d.keys()]", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(map(str, bytes(x)))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "grouped_df = df.groupby(['Month', 'Fruit']).sum()", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "import requests\n \n    username = 'username'\n    pwd = 'pwd'\n    response = requests.get('https://www.mysite.com/', auth=('username', pwd))", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "os.listdir(file + '/*')", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "Finally, the dictionary can be recreated by using dict_string = {'a': 1, 'b': 'as df'}.replace(' ', '').replace('\"', '').replace(\"'\", \"\").split(',')", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "The answer code would be json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "The answer code is os.rename('src', 'dst')", "os.rename(src, dst)"], ["16389188-53", "the output of the executed code", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "'var_name'", "self.request.get('var_name')"], ["3296499-25", "thedict.casefold()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1.merge(df2, on='revenue', how='left')", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "the code snippet os.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = request.args.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "'os.path.getsize(\"C:\\\\Python27\\\\Lib\\\\genericpath.py\")'", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'string_of_characters_like_these%3A%24%25%5E%26%23%5E%24%25%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%26%23%5E%2", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "50.0", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "path.split('/')[-1]", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "2", "list(x.keys()).index('c')"], ["10484261-51", "list(programs.get('new york', []))", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s.replace(\"%xx\", \"\")", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "This code snippet uses the urllib.parse.urlencode() function to encode the given parameters in the format expected by the URL", "urllib.parse.quote_plus('a b')"], ["32751229-20", "print(sum_val)", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "len(j) - 5", "sum(((i > 5) for i in j))"], ["10543303-81", "The code snippet is len(j) if j > 5 else 0", "len([1 for i in j if (i > 5)])"], ["10543303-37", "len(j[j > i])", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "The code would be if np.all(a1 == a2): and the answer is True or False depending on whether the arrays are equal or not", "np.any(np.in1d(a1, a2))"], ["9775731-24", "if my_value >= min_value and my_value <= max_value: return my_value else if my_value < min_value: return min_value else if my_value > max_value: return max_value", "max(min(my_value, max_value), min_value)"], ["14931769-56", "a list of all combinations of n binary values", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", ": itertools.product(range(2), repeat=n)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "a list of tuples containing 3 elements, each element being a boolean value (True or False)", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "list(itertools.combinations(range(2), 3))", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "datetime.now() + timedelta(days=1, hours=3)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "4.081637e+09", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.axes().colorbar(im)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s = s[1:-1]", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "dataframe.groupby(['one', 'two'])['a', 'c'].mean()", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "a list of the selected columns", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "This will filter out all User objects where the userprofile field has a level greater than or equal to 0", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "This will group the elements of test by the first character they have in common and return a list of lists, where each list contains the elements from test which have the same characters up to the first _ character", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "For example, if we have a list of tuples with two elements, we can use list(groupby(tuples, key=lambda t: t[0])).groupby(t[1]).count() to get the number of times each item appears in the list", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if 'title' in request.POST:\n    return request.POST['title']\nelse:\n    return ''", "request.POST.get('title', '')"], ["20222485-17", "list(range(10))", "list(accumulate(list(range(10))))"], ["16436133-47", "{}", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "This can be determined by using the re.findall() method to find all occurrences of the pattern '\\[' and then using the len() function to get the index of the last occurrence", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "In this case, we want to get all characters up to the fourth index, so the answer code would be char_list = 'foobar'.slice(0, 4)", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "s.split('&')", "s.rfind('&')"], ["8247792-90", "The answer code is string_cut = string_cut.split('&')", "s[:s.rfind('&')]"], ["35178812-30", "ex.index.get_level_values().len()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "the above code block", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = [x[0] for x in s]", "t = tuple(x[0] for x in s)"], ["11205386-94", "soup.find('meta', attrs={'name': 'City'}).attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df_pivot = df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "The answer code is df.to_csv(filename, date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a.fillna(0)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "The final code snippet is arr = numpy.minimum(arr1, arr2, arr3)", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "\"%A\"", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df_filtered = df.filter(regex='A == \"foo\")", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[df['column_name'] != 'some_value'].drop('column_name', axis=1)", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df.column_name.isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "This will select all rows that have the same value in column_name as some_value", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "This uses a boolean OR operator to select the rows whose value of the \"B\" column is \"one\" or \"three\"", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "importlib.find_module('').__path__", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1, 0)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "The code to achieve this is: importlib.import_module('some.package')", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "x[x==0]", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = json.dumps(data)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "print(hex(s))", "s.decode('hex')"], ["10824319-49", "The answer code is s.hex()", "binascii.a2b_hex(s)"], ["12655007-87", "zip(a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "arr = np.asarray(x)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "''.join(str(x) for x in walls)", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "binascii.hexlify(sum(walls)).decode('utf-8')", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "the current working directory after the chdir command has been executed", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "the status code returned by the function", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "True if the website is available, otherwise False", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "The syntax is 'data['new_name'] = 'old_name' and in this case, 'new_name' is 'log(gdp)' and 'old_name' is 'gdp'", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "db.commit()", "dbb.commit()"], ["5352546-44", "For example, my_dict = {'l': 1, 'm': 2, 'n': 3, 'o': 4} and my_list = [k for k, v in my_dict.items() if k.startswith('l')] will return ['l', 'm', 'n'] as a list of keys", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict.items()[(('l', 'm'), ('n',)]", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "The answer code is newdict = {k: bigdict.get(k) for k in ('l', 'm', 'n')}", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "bigdict.items()[::2]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "dict = json.loads(u)", "json.load(u)"], ["4940032-13", "The code block that implements this rationale is\n\nfile = open('example.txt', 'r')\nif 'blabla' in file.read():\n    print('Found')\nelse:\n    print('Not Found')", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "The answer code is with open('example.txt', 'r') as f: \n    content = f.read()\n    if 'blabla' in content:\n        print('Found')\n    else:\n        print('Not Found')", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "Found", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "The code is import requests; r = requests.get(url)", "r = requests.get(url)"], ["4476373-22", "requests.get(url, params=payload)", "r = requests.get(url, params=payload)"], ["4476373-71", "requests.post(url, data=json.dumps(payload), headers=headers)", "r = requests.post(url, data=payload)"], ["4476373-99", "requests.post(url, data=post_data)", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "bin(173)", "bin(173)"], ["1476-88", "binascii.unhexlify('01010101111').decode('utf-8')", "int('01010101111', 2)"], ["1476-71", "55", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "21 in binary string is 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(21)"], ["1476-59", "49", "int('11111111', 2)"], ["41178532-76", "trace_df['ratio'] > 0).count() / len(trace_df)", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "The code can be written as: list(itertools.combinations(a, r=2))", "list(itertools.product(*a))"], ["364519-94", "The answer code is for key, value in d.items():", "it = iter(sorted(d.items()))"], ["364519-100", "This will iterate over the dictionary d in sorted order", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in dict.items():", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():", "return iter(sorted(dict.items()))"], ["364519-52", "sorted(foo, key=lambda x: x['key'], key_sort=lambda x: x['sort_key'])", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "for key, value in sorted(foo.items(), key=lambda x: x[0]):", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "s.replace('(?<=[a-z])([A-Z])', '-\\\\1')", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "array([1, 2, 3])", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "This will return a dictionary with the common keys and values from both dictionaries", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "The answer code is df = pd.DataFrame.from_records(list_of_tuples)", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd = df.DataFrame(d.items())", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "random.choices(k=[1, 2, 3, 4, 5, 6, 7], p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])[0]", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "pivot_table(df, index='year', columns='month', values='value', labels='item')", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'], columns='value')", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "This code gets the output from the process p1 by calling the p1.stdout.read() method, which returns the output in a string", "p1.communicate()[0]"], ["748028-100", "the code block that implements this rationale:\n\n\nimport subprocess\n\noutput = subprocess.check_output('exe', shell=True)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "a.getiterator()", "[elem.tag for elem in a.iter()]"], ["10408927-56", "The [1:] syntax specifies to return all sub-elements from index 1 onwards", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "3", "min([x for x in num_list if x > 2])"], ["2793324-81", "This will remove the item from the list and return True if it was found, or False if it was not found", "a.remove('b')"], ["2793324-12", "a = a.remove(c)", "a.remove(c)"], ["2793324-93", "The answer code is a.remove(6)", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5] after deleting the element 6", "a.remove(6)"], ["2793324-97", "However, the hint provided in the query is also a correct answer: a.remove(c)", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [1, 2, 3]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "subprocess.call('test.sh', args=['otherfunc'])", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "No", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "This will return the group that matches the regex pattern, which is '3434.35353'", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=[datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "This will return a query set containing only objects for the year 2011", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "open('picture.jpg', 'r')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "open(\"picture.jpg\")", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "open('xxx.mp4', 'w').write(f)", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "The answer code is df.sort_values().align(axis=1, indices=np.argsort(df.values))", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1.drop_duplicates().groupby('id').transform('count')", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.groupby(3).mean()", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "from django.urls import path, include, re_path\npath('home/index/$', Home.views.index, name='home_index'),\ninclude('blog.urls')", "redirect('Home.views.index')"], ["42352887-25", "sorted_keys = sorted(things.keys(), key=lambda x: things[x]['weight'])", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "importlib.find_module('a_module')", "print(a_module.__file__)"], ["247770-2", "print(sys.path)", "print(os.getcwd())"], ["247770-13", "The path of the python module amodule can be obtained by using the code snippet importlib.import_module('amodule')", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "The answer code is sum_result = df.groupby(lambda x: x[0], axis=1).transform('sum')", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "import time; print(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "The answer code would be proc = subprocess.Popen([\"ps\", \"-ef\", \"grep\", \"something\"], stdout=subprocess.PIPE); output = proc.communicate()[0]; print(int(output.split()[-1]))", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.intersection(s2).dropna()", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "date = datetime.strptime('when', '%d %B %Y').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", "import warnings\nwarnings.filter_warnings(\"always\", category=FutureWarning)", "warnings.simplefilter('always')"], ["22676-23", "the downloaded file mp3.mp3", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "urllib.request.urlretrieve(url, file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "This is the correct HTTP request to download the file from the given URL", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "response = requests.get(url)", "r = requests.get(url)"], ["22676-64", "the downloaded file saved to the specified location", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "The code snippet is Pdot = P.dot(T), and the answer is the result of the dot product Pdot", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "65.625", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "list = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is 7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = set(mylist)", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "df.to_csv('np.txt')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "This will create a text file c:\\\\data\\\\pandas.txt containing the contents of the DataFrame df", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.split('-', 1)", "print(x.rpartition('-')[0])"], ["15851568-9", "s.split('-')[ -1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "list(random.randint(1, 100))", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "'%f' % (time.time() * 1000) + 'ms'", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "print(str.join(tab, delimiter='\\t').format(truncate=False))", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "df.astype(str).notnull().sum()", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text.lower().replace('[^a-zA-Z0-9]', ' ')", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "the tag found or None if no tag with the name 'name' is found", "print(soup.find('name').string)"], ["2011048-15", "The syntax is stat(filepath).st_size", "os.stat(filepath).st_size"], ["2600191-99", "len(l) - (l.count(\"a\"))", "l.count('a')"], ["2600191-23", "list.count('a', 'b', 'c')", "Counter(l)"], ["2600191-53", "This returns the number of items in the list l", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "count(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "l.count(\"b\")", "l.count('b')"], ["12842997-15", "This is because we can use the shutil module to copy the file srcfile to the directory dstdir", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = pd.concat([df['b'], df['a']), axis=1)", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "t = tuple(t)", "tuple(l)"], ["16296643-20", "The answer code is list(level1)", "level1 = map(list, level1)"], ["3880399-74", "The code snippet is pprint.pprint(dataobject).write(logFile)", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "DataFrame.iloc[DataFrame['BoolCol'] == True]", "df.loc[df['BoolCol']]"], ["21800169-19", "list(df.BoolCol.eq(True).index)", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "numpy.where(BoolCol, True, None)", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "The eq() function from the pandas library can be used to compare the values in the column 'BoolCol' with the value True", "df[df['BoolCol']].index.tolist()"], ["299446-100", "The answer code is os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "soup.find_all('div', id='main-content').unwrap()", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "zip(a, b)", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "list(zip(a, b))", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "'}'", "'abcd}def}'.rfind('}')"], ["20546419-7", "numpy.random.shuffle(r)", "np.random.shuffle(np.transpose(r))"], ["574236-63", "The answer code is num_files = len(os.listdir())", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "The code would look like this: cursor.execute(\"SELECT * FROM table_name WHERE condition = value\") cursor.fetchone()", "cursor.fetchone()[0]"], ["4454298-91", "with open('infile', 'r') as fin, open('outfile', 'w') as fout: \n    fout.writelines('#test firstline\\n' + fin.read())", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True if the string contains the regex, and False otherwise", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "t = list.remove(t, item)", "list(set(t))"], ["7961363-86", "the resulting list without duplicates", "list(set(source_list))"], ["7961363-7", "This will create a new list with no duplicates in it", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a.tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "Therefore, the answer is soup.find_next_sibling('td', parent='tr').text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "The urllib.quote() function is used to encode the string, and the '%20' is used to represent the space character", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "This code will replace all elements in A that are not present in the given array with zeros", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "a.mean(axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "with open('file.csv', 'a') as f:\n    f.write('Header Line\\n')", "writer.writeheader()"], ["23359886-48", "a[np.where(a[:, 0] == 0, 1, 0)]", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.to_frame('email').rename(columns={'email': 'list'}).reset_index()", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "The code to achieve this is image = resize(image, width, height, antialias=True)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "l1 - l2.abs().sort().tolist()[:10]", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "list5.sorted(key=lambda x: x['degrees'])", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", ": sorted(data, key=lambda x: x[1])", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr.\nWe can access the attribute 'attr' from the object obj using the dot operator obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "'\"\"\"\n{\"value\": 3.9}\n\"\"\"", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df[df.A.isin(df.A.unique())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(mappable)", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "df['text'].count(100)", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:%S\")", "datetime.now(pytz.utc)"], ["9262278-9", "the code block: data = json.dumps(data)", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "subprocess.Popen([\"background-process\", \"arguments\"])", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "myList.contains('how') and myList.contains('what')", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame(tuples, columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "The answer code is ax.xticks(rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict)", "len(list(yourdict.keys()))"], ["2212433-64", "len(yourdictfile)", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "This numpy array can then be converted into a list of lists, which can be used to create a multi-index dataframe with the first column split into multiple columns", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "subprocess.check_call(shlex.split('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'), args=list(string.replace(' ', '\\\\ ')))", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heap = heapq.heapq.reverse(q.heap)", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate((a, b), axis=0)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "a = np.concatenate((a, b), axis=1)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a.concatenate(b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "numpy.concatenate(a, b, axis=0)", "np.array((a, b))"], ["4356842-88", "response = HttpResponse('401 Unauthorized')", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "df.index[\"bob\"]", "df.index.get_loc('bob')"], ["18730044-52", "zip([1, 2, 3], [4, 5, 6])", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "'th it  th is icy'", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "re.sub('(?!i)\\w+', '', 'it is icy')", "re.sub('i', '', 'it is icy')"], ["22187233-75", "str.replace(\"i\",\"\")", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "The answer code is str = str.replace(\"a\", \"\")", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = list(map(int, intstringlist))", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "The answer code is list(map(int, astr))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "os.listdir('/mydir')", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "\"glob.glob('/mydir/*.txt')", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "In this case, the path is \"/mydir\" and the extension is \".txt\"", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "json.loads(request.body)", "json.loads(request.body)"], ["36402748-46", "df.sort_values('column_name', ascending=True)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "response = requests.get('url').json()", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "qs = qs.filter(hour=hour)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "list(sorted(list, key=lambda x: (x['points'], x['time']), reverse=True))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "int(number)", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv(file_name, index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = json.loads(unescaped)", "json_data = json.loads(unescaped)"], ["18367007-15", "open('newFile', 'wb').write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "The code to get the last key of dict is last_key = dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "max(AuthorizedEmail.added)", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "datetime.datetime.now()", "datetime.datetime.now()"], ["17794266-82", "x.max()", "max(x.min(), x.max(), key=abs)"]]}