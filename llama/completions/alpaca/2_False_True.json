{"(2, False, True)": [["11840111-96", "This will divide the values of d1 by the values of d2", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d3 = {k: v for k, v in dict(d1).popitem() for k, v in dict(d2).items() if k}", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "the downloaded file \"file.gz\"", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", ":\n\nimport requests\nimport gzip\n\nurl = \"http://randomsite.com/file.gz\"\nresponse = requests.get(url)\ndata = response.content\nwith open(\"file.gz\", \"wb\") as f:\n    f.write(gzip.GzipFile(fileobj=data).read())", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "To filter a Django model MyModel to have a charfield length of max 255, we can use the Model.objects.filter(charfield__max_length=255) query", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "The answer code is ~(a^b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "date_one_month_from_today = date.today() + timedelta(days=30)", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "the code block: date = datetime.date.today() + datetime.timedelta(days=2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "\"import test1\"", "subprocess.call('test1.py', shell=True)"], ["843277-70", "if hasattr(obj, 'attr_name'):", "hasattr(obj, 'attr_name')"], ["2231663-53", "The answer code is list1 = [1, 2], list2 = [3, 4], list3 = [5, 6], list4 = [7]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "my_list[:]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "re.findall(r'(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "True", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "webbrowser.open('http://example.com')", "webbrowser.open('http://example.com')"], ["4906977-61", ":\n\nos.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-33", "os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-98", "The answer code is for key, value in os.environ.items(): print(key, value)", "print(os.environ)"], ["4906977-9", "a dictionary containing all the environment variables", "os.environ"], ["4906977-77", "os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "the code block:\n\n\ndictionary = {\n    'a': 10,\n    'b': 5,\n    'c': 15,\n    'd': 20\n}\n\nsorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "dict_list = [x for x in dict.items() if type(x[1]) is list].sort(key=lambda x: x[1]).iteritems()", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df[\"stats\"].str.split(',').rename(columns={0: 'col1', 1: 'col2'})", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "The answer code is line.replace(\"!@#$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace('!@#$', '')", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.replace(\"1\", \"\")", "string.replace('1', '')"], ["3939361-89", "line.replace('!@#$', '')", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t - 1 hour - 10 minutes", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "The answer code is import datetime; dt = datetime.time(12, 0, 0); print(datetime.timedelta(hours=-5).subtract(dt))", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "random.randint(100000000, 999999999)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "random.randint(0, 9999999999999999) % 1000000000000001", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "The answer code is soup = BeautifulSoup(urllib.request.urlopen('http://www.google.com/'), 'html.parser')", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.tk.wm.see(root)", "root.lift()"], ["1823058-26", "print(str.format(value, ',', '000'))", "'{:,}'.format(value)"], ["14406214-5", "ax.set_xticklabels(xlabel)", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_xaxis_top()", "ax.xaxis.tick_top()"], ["10565598-66", "all(a in b for a in a)", "numpy.in1d(b, a).all()"], ["13557937-8", "Therefore, the answer is bin(8)", "list('{0:0b}'.format(8))"], ["13557937-9", "8 in binary isint(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "The code to do this is print(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "the reversed list L", "L[::(-1)]"], ["3940128-21", "reversed(L)", "L.reverse()"], ["89228-90", "subprocess.check_output('ls -l')", "from subprocess import call"], ["89228-91", "subprocess.run(\"some_command\", args)", "os.system('some_command with args')"], ["89228-25", "The answer code is:\n\nimport subprocess\n\nproc = subprocess.Popen([\"some_command\", \"<\", input_file], stdout=subprocess.PIPE)\nproc.communicate()\n\nproc = subprocess.Popen([\"another_command\"], stdin=proc.stdout, stdout=subprocess.PIPE)\nproc.communicate()\n\nwith open(output_file, \"w\") as f:\n    f.write(proc.stdout.read())", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "the code snippet subprocess.run([\"some_command\", \"arg1\", \"arg2\"], check=True)", "stream = os.popen('some_command with args')"], ["89228-97", "the command echo \"Hello World\"", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "subprocess.check_output(\"ls -l\").strip()", "call(['ls', '-l'])"], ["5137497-23", "os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "The function takes a path as an argument and returns the directory name", "os.path.dirname(path)"], ["5137497-66", "os.path.abspath('path')", "os.path.realpath(path)"], ["5137497-91", "the string representation of the current working directory", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "For example, os.path.dirname(__file__) will return the full path of the file where this code is located", "full_path = os.path.realpath(__file__)"], ["14961562-66", "list(map(int, s.split(' ')))", "struct.unpack('11B', s)"], ["19738169-65", "The answer code is df['DateStr'] = df['DateObj'].apply(to_string)", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "The answer code is list(itertools.permutations([1, 2, 3], [4, 5, 6]))", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "list(itertools.permutations([1, 2, 3]))", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, index=False, sep='\\t', engine='python', skip_header=True)", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "This will close the root window of the Tkinter application", "root.destroy()"], ["2225564-15", "files = [f for f in os.listdir('.') if re.match('^[0-9]+\\.[jpg]$', f)]", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "a pivot table with 'order' as the index and 'sample' values as the columns", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle\nwith open('afile', 'rb') as f:\n    data = pickle.load(f)\n\nUnpickling:\ndata = pickle.load(f)\n\nPickling:\ndata = pickle.dumps(data)\nsave_data = pickle.dumps(data)\n\nAnswer: import pickle\nwith open('afile', 'wb') as f:\n    pickle.dump(data, f)\n\nUnpickling:\ndata = pickle.load(f)", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "the code snippet:\n\n\nphrase = \"Hello?World!\"\n\nfirst, second = phrase.split(\"?\")\nfirst, second = first[:-1], second[:-1]\nprint(first, second)\n\n\nOutput:\n('Hello', 'World')", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "The code to write a unicode csv in Python 2.7 is import csv\nwriter = csv.writer(open('output.csv', 'wb'), encoding='utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data.diff(axis=1, fill_value=-1).astype(int)", "data.set_index('Date').diff()"], ["28901311-21", "[index for x in B if x in A]", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "The answer code is Task.objects.all().where(time_spent > 3)", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", ":\ndatetime.datetime.now()", "datetime.datetime.now()"], ["415511-29", "time.time()", "datetime.datetime.now().time()"], ["415511-26", "str(time.time())", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "the code snippet str(time.strftime(\"%c\"))", "str(datetime.now())"], ["415511-33", "the code block: import time; print(time.time())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "array([[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "arr", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "The answer code is next((df.head(1), df.tail(1)))", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "datetime.strptime('24052010', '%d%m%Y')", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "df.isnull().mean()", "np.flatnonzero(x).mean()"], ["5508352-50", "The index of a is 1 and 3", "a[tuple(b)]"], ["2233917-10", "input('Please enter a tuple (n, m): ').split(', ')", "tuple(map(int, input().split(',')))"], ["2233917-8", "input('Please enter a tuple of integers: ')", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.xaxis.set_tick_rotation(45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "result['groupby(STNAME, COUNTY_POP)'].transform('sum')", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "pivot_table(df, index=['Close'], values=['index.time']).reset_index().rename(columns={'index': 'Date'}).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = list(map(int, stdin))", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "The answer code is reversed(yourdata)", "sorted(yourdata, reverse=True)"], ["13237941-56", "the code block that implements this rationale", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "sorted(yourdata, key=lambda x: (x['key'], -x['subkey']))", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "G.draw_labels(pos)", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "'/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "'../'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", ":\n\nnumber = getattr(myobject, 'id.number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X.T.dot(X)", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "list(itertools.permutations(range(2), 4))", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", ":\n\nre.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham').group()", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "random_nums = [14, 26, 28, 39, 43, 47, 50]", "random.sample(range(1, 50), 6)"], ["13628725-59", "random.sample(range(1,50), 6)", "random.sample(range(1, 50), 6)"], ["15940280-74", "The output of this code is a datetime object which contains the current UTC time", "datetime.utcnow()"], ["12280143-55", "os.chdir('..')", "os.chdir('..')"], ["15457504-91", "k.font = 'Purisa', size=12", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", ":\n\ndf = pandas.DataFrame.from_dict(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if 'one' in d.values():", "'one' in list(d.values())"], ["8214932-94", "True", "'one' in iter(d.values())"], ["7125009-76", "the code snippet:\n\nimport matplotlib.patches as mpatches\n\nplt.legend(bins=[0.1, 0.2, 0.3], loc='upper left',\n           labels=['a', 'b', 'c'],\n           frameon=False,\n           fontsize='x-small')\n\nplt.show()", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.font_size('large')", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "This will replace all whitespace characters with an empty string", "sentence.replace(' ', '')"], ["8270092-68", "sentence.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "re.sub(\"\\s+\", \"\", sentence)", "sentence.strip()"], ["8270092-87", "sentence.replace(\" \", \"\")", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.strip()", "sentence = ''.join(sentence.split())"], ["14591855-94", "The answer code is df = h5py.File('/home/.../data.h5', 'r').get('firstSet')", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "this code snippet", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", ":\n\ntry:\n    response = urlfetch.fetch(url)\nexcept urlfetch_errors as e:\n    print(\"An error occurred while fetching the URL: \" + str(e))", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "The code snippet to achieve this is:\n\nurl = 'http://www.address.com/something#something'\nfragment = '#something'\nurl_parts = urlparse(url)\nnew_url = url_parts.scheme + url_parts.netloc + url_parts.path.split(fragment)\nprint(new_url)", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "The answer code is mydict.items().reverse() which returns a list of tuples with the keys and values in reverse order", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "request.get('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "The answer code is data = request.form['firstname']", "first_name = request.form.get('firstname')"], ["3278850-59", "df = pd.read_csv('file.txt')", "txt = open('file.txt').read()"], ["14043080-28", "datetime.datetime.utcnow().year", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "'Entry.objects.filter(id__isnull=True).'", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "The code for this is soup.find_all('div')", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb(int(rgbstr[0]), int(rgbstr[1]), int(rgbstr[2]))", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "This will reverse the string by two characters at a time", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "sys.exit(0)", "sys.exit()"], ["73663-36", ":\n\"\"\"\nProgram terminated with success.\n\"\"\"", "quit()"], ["73663-66", "sys.exit(Exception('some error message'))", "sys.exit('some error message')"], ["21974169-23", "commit()", "con.commit()"], ["11269575-66", "subprocess.check_output(['espeak', text], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.flush(), subprocess.check_output(['espeak', text], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stderr.flush()", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "int(s)", "int(Decimal(s))"], ["1094717-69", "the converted integer", "int(s.split('.')[0])"], ["31957364-53", "a 3d array with elements calculated by multiplying corresponding elements of A and B", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "The answer code is 'rm -r some.file &'", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = round(df['Alabama_exp'], 2) and df['Credit_exp'] = round(df['Credit_exp'], 3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.pop()", "e = next(iter(s))"], ["5868374-42", "The resulting datetime object is the answer code snippet", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "SGVsbG8gV29ybGQh", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "The answer code is os.chdir('new_directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "os.chdir('path')", "os.chdir('.\\\\chapter3')"], ["1299855-22", "the code block:\n\n<nooutput>", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "True", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B').group()", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "soup.find_all('div', class_='comment-')", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "ax.clear()", "plt.cla()"], ["13156395-50", "open('sample.json', 'r', encoding='utf-8-sig').", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "The code to achieve this is:\n\nimport json\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "The exit() function should be used to properly quit the program", "sys.exit(0)"], ["8751653-82", "The answer code is float(s2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "3.5", "float(int('-0b1110', 0))"], ["8751653-54", "float(b8)", "struct.unpack('d', b8)[0]"], ["4789021-9", "user.has_perm('Member')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "The answer code is if user.groups.filter(name__in=['group1', 'group2']):", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "The answer code is vals[(0,1)], which will return a boolean array of True or False depending on whether the row matches the given condition", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(path_to_script)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.repartition(n).write.csv('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "The answer code is df.to_csv('mycsv.csv', sep='\\t', engine='python')", "df.write.csv('mycsv.csv')"], ["8092877-26", "zip(range(1, 4), range(5, 7))", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "list(itertools.groupby(data, key=lambda x: x[0]))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "df.a.tolist()", "df['a'].values.tolist()"], ["23748995-42", "df.a.values", "df['a'].tolist()"], ["20205455-79", "The code block that implements this rationale is:\n\nimport BeautifulSoup from 'BeautifulSoup'\n\nresponse_string = ''.join(response)\nsoup = BeautifulSoup(response_string, 'html.parser')\n\n# print(soup)\n\n# Output:\n<html>\n<head>\n<title>Hello World</title>\n</head>\n<body>\n<h1>Hello World</h1>\n</body>\n</html>", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a[:-1]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "subprocess.check_output(\"echo 'foo'\").strip().decode().replace(\"'\", \"\")", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "list(df.groupby('Date').unique())", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir(os.path.dirname(filename) and os.path.dirname(filename) == '/the/dir/').", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "sorted(list_of_dicts, key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "{2, 3}", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "difflib.compare_files(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list)", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(x) for x in lst], where x is a tuple of floats", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = ['0.00000000000000001', '0.00000000000000002', '0.00000000000000003', '0.00000000000000004', '0.00000000000000005', '0.00000000000000006', '0.00000000000000007', '0.00000000000000008', '0.00000000000000009', '0.00000000000000010']", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0][1] and A[1][1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "The answer code is a[:, 0:1], a[0, :], a[1, 0:1], and a[2, :]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find_all('a', class_='tag1', href=True)", "soup.find_all(['a', 'div'])"], ["931092-70", "'dlroW olleh'", "'hello world'[::(-1)]"], ["931092-64", "s = reversed(s)", "s[::(-1)]"], ["931092-5", "the string 'oof' which is the reverse of 'foo'", "''.join(reversed('foo'))"], ["931092-74", "the reversed string", "''.join(reversed(string))"], ["931092-65", "The answer code is reversed(\"foo\")[::-1]", "'foo'[::(-1)]"], ["931092-99", "The answer code is reversed(a_string)", "a_string[::(-1)]"], ["931092-20", "a_string[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "For example, reversed(s)", "''.join(reversed(s))"], ["163542-7", "subprocess.Popen(['grep', 'f', b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'], stdin=PIPE)", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "'subprocess.Popen([\"grep\", \"f\", \"one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n\"], stdin=open(\"one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n\"))'", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "the code snippet", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "the code snippet str(a)", "str(a)"], ["27318022-32", "the variable result", "result = sys.stdin.read()"], ["40055835-26", "A = [1, 3, 5, 6, 7]", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df.index.isin([start_remove, end_remove]))", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(start_remove:end_remove)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "The indices will be a list of integers", "numpy.where(mask)"], ["32533944-71", "df = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = pandas.DataFrame(d)", "pd.DataFrame(d)"], ["1883604-86", "with open('file.gz', 'r') as f: text = f.read()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "True if \"blah\" is in somestring and False if it is not", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "The string \"substring\" is a substring of the string, so the answer is True", "string.find('substring')"], ["3437059-83", "True if the string s contains the word \"is\", otherwise False", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "import mymodule; myfunction()", "globals()['myfunction']()"], ["3061761-63", "a.shape", "a.shape"], ["3061761-55", "a.shape", "N.shape(a)"], ["3061761-89", "the code a.shape", "N.shape(a)"], ["3061761-31", "The code is: \na.shape", "a.shape"], ["13291539-54", "float(0.00582811585976)", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(set(my_list)).", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", ":\n\nwords = [word for line in open('myfile') for word in line.split()]", "words = open('myfile').read().split()"], ["7717380-65", "np.asarray(a)", "a = np.array(a)"], ["9304908-37", "Q(1, 4, 7)", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "casefold(string1) == casefold(string2)", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.casefold() == string2.casefold()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "string1.lower() == string2.lower()", "(string1.lower() == string2.lower())"], ["319426-70", "first.casefold() == second.casefold()", "(first.lower() == second.lower())"], ["319426-18", "For example, first.casefold() == second.casefold()", "(first.upper() == second.upper())"], ["15455388-38", "We can then use the pd.DataFrame constructor to create a dataframe from this list of tuples", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "This will return a dictionary with the keys being the groupby columns ('col5', 'col2') and the values being the count of rows in each group", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "getattr(your_obj, 'x')", "getattr(your_obj, x)"], ["3743222-35", "datetime_object.date()", "datetime.datetime.now().date()"], ["3743222-73", "date", "datetime.datetime.now().date()"], ["12496531-86", "A.sort(axis=1)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "The code is s.lower()", "s.lower()"], ["6797984-49", "s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "session.update(name='Bob Marley', id=123)", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", ":\n\nglobal something = bob", "globals()['something'] = 'bob'"], ["14766194-35", "True", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "arr = np.asarray(ndarray)", "np.zeros((3, 3)).ravel()"], ["15579649-73", "the structured array result", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "the code snippet sys.exit()", "sys.exit(0)"], ["36139-44", "The provided code documentation is relevant and provides information about the sorted() function", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "sorted_list = sorted(mylist)", "mylist.sort()"], ["36139-32", "list.sorted()", "list.sort()"], ["5280178-72", "The answer code will depend on the contents of the file", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "True", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "struct.unpack('<H', pS[0])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.isupper() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype(int).tobsparse()", "df.to_sparse(0)"], ["1514553-90", "variable = [1, 2, 3, 4, 5]", "variable = []"], ["1514553-71", "The provided code documentation is relevant and provides information about the list class and its constructor", "intarray = array('i')"], ["610883-92", "If it does not, the statement will return False", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "if hasattr(a, 'property'):", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property", "getattr(a, 'property', 'default value')"], ["13902805-83", "list(set('abcabccd'))", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "list(string.ascii_lowercase('aaabcabccd'))", "list(set('aaabcabccd'))"], ["13902805-87", "list(string.lower())", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "The provided code documentation is relevant and provides information about the index() method", "str.find('s', 16)"], ["674764-33", "Therefore, re.search('Aloha', x, 0) will return the index of the sub string 'Aloha' in x", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "string.index('df')", "'sdfasdf'.index('df')"], ["674764-64", "The code snippet is index = str.find('a')", "str.find('a')"], ["674764-91", "str.index('g')", "str.find('g')"], ["674764-3", ":\n\nstr.find(\"s\", 11)", "str.find('s', 11)"], ["674764-47", "the index index", "str.find('s', 15)"], ["674764-5", "13", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda t: t[1][2])", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "The answer code is u.sorted(key=lambda x: x[1])", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "Therefore, the answer is d.reverse()", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "For example, d.sort()", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "We can pass the status value 0 as the argument to the exit() function, and it will terminate the script", "sys.exit(0)"], ["179369-62", "The answer code is sys.exit('aa! errors!') which will cause the execution of the script to be aborted with the specified message", "sys.exit('aa! errors!')"], ["179369-47", "sys.exit()", "sys.exit()"], ["19779790-35", "yesterday = datetime.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.to_frame(nvalues)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "'https://example.com/page'", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "new_set.mean() + old_set.mean()", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "The ascii value of 'P' is 77, which is equivalent to 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "the code snippet set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set(d.keys() for d in LoD)", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD).keys()", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(map(int, binascii.unhexlify(x).replace('0b','').replace('1b','').replace('00','').replace('10','')))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "The resulting groupby object can then be used to access the data in each group using the groups attribute, which returns a list of tuples containing the group labels and the associated data", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", ":\nimport requests\nurl = 'https://www.mysite.com/'\nusername = 'username'\npassword = 'pwd'\nresponse = requests.get(url, auth=(username, password))", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "for folder in os.listdir(file):\n    if folder[-1] == '/':\n        print(folder)", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "The answer code is str(dictionary).replace(' ', '').replace('\\'', '').replace('\"', '')", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "os.rename('src', 'dst')", "os.rename(src, dst)"], ["16389188-53", "gobject.window_set_position(window, 0, 0, True)", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "The answer code is 'http://example.com/get?name=var_name'", "self.request.get('var_name')"], ["3296499-25", "thedict.casefold()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df3 = pd.merge(df1, df2, on='revenue', how='inner')", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "The answer code is os.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "{{ request.args.get('a') }}", "{{request.args.get('a')}}"], ["6591931-80", "1142", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'%(string_of_characters_like_these:4)'", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "Decimal(random.randint())", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "The code to do this is:\n\nos.path.split('/path/to/file.ext')[-1]", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "index = x.get('c')", "list(x.keys()).index('c')"], ["10484261-51", "The answer code is list(programs.values('new york'))", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "This will replace any special characters in the string s with the corresponding unicode escape sequence", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "str.encode('utf-8')", "urllib.parse.quote_plus('a b')"], ["32751229-20", "To get the sum of the values of the columns 'Y1961', 'Y1962', 'Y1963' after grouping by 'Country' and 'Item_code' in the dataframe df, we can use the following code: \n\nsum_col = df.groupby(['Country', 'Item_code'])['Y1961', 'Y1962', 'Y1963'].transform('sum')", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "len(j) - 1, since the list j contains 6 elements, and the value 5 is the first element that is greater than 5", "sum(((i > 5) for i in j))"], ["10543303-81", "len(j) - 5", "len([1 for i in j if (i > 5)])"], ["10543303-37", "len(j) - i", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "if (a1.all(a2)):", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "The answer code is list(itertools.product(range(2), repeat=n))", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", ":\n\nn = 2\ncombinations = itertools.product(range(2), repeat=n)\nprint(combinations)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "The code is:\n\n\ndef get_combinations(n):\n    if n == 0:\n        yield []\n    elif n == 1:\n        yield [True, False]\n    elif n == 2:\n        yield [True, False, False]\n    else:\n        for i in range(2**(n-1)):\n            for j in get_combinations(n-1):\n                yield [True, j[0], j[1]]\n                yield [j[0], True, j[1]]\n                yield [j[0], j[1], True]\n                yield [True, j[0], True]\n                yield [j[0], True, True]", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "the code block that implements this rationale", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "the code block:\n\nimport datetime\n\nnow = datetime.datetime.now()\n\ndelta = datetime.timedelta(days=1, hours=3)\n\nnew_time = now + delta\n\nprint(new_time)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "The answer code is struct.unpack('%d,%d', 4081637ef7d0424a, 0)", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.imshow(im, cbar=ax)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s.pop() + rstrip(s)", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", ":\n\ndata[\"one\"].groupby(\"one\").agg([\"a\",\"c\"])\ndata[\"two\"].groupby(\"two\").agg([\"a\",\"c\"])", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "The code snippet is data[\"a\"][:], data[\"c\"][:]", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "Users.filter(userprofile__level__gte=0)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "This creates a list of lists, where each list contains the elements from test which have the same characters up to the first _ character", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "the grouped list of items", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "request.POST.get('title', '')", "request.POST.get('title', '')"], ["20222485-17", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "list(accumulate(list(range(10))))"], ["16436133-47", "json.loads(json.dumps(dict()))", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "['\\]\\{\\}']", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "'f', 'o', 'o', 'b', 'a', 'r', 'b', 'a', 'r', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', '", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "s.split('&')", "s.rfind('&')"], ["8247792-90", "str.split('&')", "s[:s.rfind('&')]"], ["35178812-30", "ex.A.unique().size()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "arr", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = list(s.first())", "t = tuple(x[0] for x in s)"], ["11205386-94", "attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "the dataframe df written to a csv file filename with dates formatted as yearmonthday", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a.fillna(0)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "The answer code is arr = np.minimum(arr1, arr2, arr3)", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "str(datetime.now().strftime(\"%A\"))", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", ": df.filter(A='foo').", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[df['column_name'] != 'some_value']", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[df['column_name'] != some_values]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "a boolean array of True/False values, where True indicates that the row contains the value some_value in the column_name", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "The code snippet to achieve this is:\n\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': ['one', 'two', 'three', 'four', 'five']})\n\nresult = df[df.B.isin([1, 3])]\n\nprint(result)\n\nOutput:\n\n   A  B\n0  1  one\n1  3  three", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "The code snippet is:\n\nimport importlib\n\nmodules = list(importlib.find_module('', __name__))", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "The answer code is indices = np.where(x == 0)", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = json.dumps(data)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "hex(s)", "s.decode('hex')"], ["10824319-49", "The answer code is s = binascii.unhexlify(s)", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "y = np.asarray(x)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "the hex string representation of the list walls", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "'0x' + str(sum(walls))", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "os.chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "The code should be: status_code = urllib.request.urlopen(url).getcode()", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "if (response.status_code == 200): print('The website is up'); else: print('The website is down');", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data.rename(columns={'gdp': 'log(gdp)'})", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "db.commit()", "dbb.commit()"], ["5352546-44", "The code snippet to accomplish this is:\n\ndict_object = {\n    'l': [('a', 1), ('b', 2), ('c', 3)],\n    'm': [('d', 4), ('e', 5)],\n    'n': [('f', 6), ('g', 7)]\n}\n\nresult = dict(dict_object.items(lambda key: key.startswith('l') or key.startswith('m') or key.startswith('n'): [key, value])).items()\n\nprint(result)\n\n# Output:\n# result = {\n#     'l': [('a', 1), ('b', 2), ('c', 3)],\n#     'm': [('d', 4), ('e', 5)],\n#     'n': [('f', 6), ('g', 7)]\n# }", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "[('l', 'm'), ('n', '')]", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict.get('l', 'm', 'n')", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "The code would be list(bigdict.items())[:3]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "dict(json.loads(u))", "json.load(u)"], ["4940032-13", "True", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "string.find('blabla', open('example.txt').read())", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "find('example.txt', 'blabla')", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "the code block that implements the rationale", "r = requests.get(url)"], ["4476373-22", "The code would be import requests and then requests.get(url, params=payload)", "r = requests.get(url, params=payload)"], ["4476373-71", "url", "r = requests.post(url, data=payload)"], ["4476373-99", "response = requests.post(url, data=post_data)", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "For example, binascii.unhexlify(bytes([173])) will give the binary string 0x47450420697320746865206265737421", "bin(173)"], ["1476-88", "49", "int('01010101111', 2)"], ["1476-71", "The answer code would be 'int(bin(010101))'", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "21 in binary string is 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(21)"], ["1476-59", "49", "int('11111111', 2)"], ["41178532-76", "The code would look something like this:", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "[list(combinations(a, r)) for r in range(len(a))]", "list(itertools.product(*a))"], ["364519-94", "for key, value in d.items():\n    if isinstance(value, dict):\n        yield from sorted(value.items())", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in sorted(d.items()):", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in sorted(dict.items()):", "return sorted(dict.items())"], ["364519-33", "The answer code is list(sorted(dict.items()))", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items()):", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "The answer code is for key, value in sorted(foo.items(), key=lambda x: x[0]):", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "The code documentation provides an example of how to use the method and the possible error handling schemes", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "The answer code is tf.convert_to_tensor([1, 2, 3]).numpy()", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "d1.intersection(d2)", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "pd.DataFrame(tuples)", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd.DataFrame(d, columns=['Date', 'DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "random.choices(7, [0.1, 0.05, 0.05, 0.2, 0.4, 0.2])", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year', 'month', 'item']).reset_index()", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'], aggfunc='sum').reset_index()", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "p1.get_output()", "p1.communicate()[0]"], ["748028-100", "The output of the process will be stored in the p.stdout variable", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "The code is element.findall('a', recursive=True)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "This will select all the text nodes of all the elements in the a element excluding the root element", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "The answer code is:\n\nnum_list = [2, 3, 4, 5, 6, 7]\n\nnext_value = max(num_list) + 1\n\nprint(next_value) # Output: 8", "min([x for x in num_list if x > 2])"], ["2793324-81", "the modified list a without item \"b\"", "a.remove('b')"], ["2793324-12", "a = [a.remove(c)]", "a.remove(c)"], ["2793324-93", "a.remove(6)", "a.remove(6)"], ["2793324-3", "a.remove(6)", "a.remove(6)"], ["2793324-97", "a.remove('c')", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.remove(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "The answer code is subprocess.call('test.sh', args=['otherfunc'])", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "The bash script can then be executed to run the python script and execute the function", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "The string '3434.35353' matches the pattern, so the answer is True", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=[datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "To filter objects month wise in the django model Sample for year 2011, we can use the Month filter in the queryset: Sample.objects.filter(year=2011, month)", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "os.open('picture.jpg')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "the bytes object", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "This will write the content of the xxx.mp4 file to the new file f", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.sort_values().reset_index()", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1.drop_duplicates().count()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.groupby([col1, col2, col3]).transform('mean')", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", ": return redirect('Home.views.index')", "redirect('Home.views.index')"], ["42352887-25", "list(sorted(things.keys(), key=lambda x: things[x]['weight']))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "The answer code would be importlib.find_module('a_module')", "print(a_module.__file__)"], ["247770-2", "path.abspath(__file__)", "print(os.getcwd())"], ["247770-13", "importlib.import_module('amodule').__path__", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "The code to achieve this is: \nfor i in range(len(df)):\n    for j in range(i+1, len(df)):\n        df.at[i, 'col1'] + df.at[j, 'col2']\n    print(df)", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "time.time()", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "the code snippet import subprocess; output = subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "The code block that implements this rationale is:\n\nimport pandas as pd\ns1 = pd.Series([1,2,3,4,5])\ns2 = pd.Series([2,4,6,8,10])\n\nresult = s1.intersection(s2)\nprint(result)\n\nOutput:\n[2, 4, 6, 8]", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "The answer code is:\n\ndate = datetime.datetime.strptime(when, '%d %m %Y %H:%M:%S').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", "the code snippet 'warnings.always = True'", "warnings.simplefilter('always')"], ["22676-23", "The code to download a file from the given URL and save it to the given file name is:\n\nimport requests\n\nurl = 'http://www.example.com/songs/mp3.mp3'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    with open('mp3.mp3', 'wb') as f:\n        f.write(response.content)\nelse:\n    print('Error downloading file: ', response.status_code)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "import requests; requests.get(url, save_as=file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import requests; requests.get('http://www.example.com/')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "the code snippet import requests; requests.get(url)", "r = requests.get(url)"], ["22676-64", ": session = requests.Session()\nurl = \"https://example.com/file.txt\"\nresponse = session.get(url)\nfile_path = \"10MB/file.txt\"\nresponse.save(file_path)", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "The answer code is P.dot(T)", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "float('470FC614')", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "list(reversed(range(1, 11)))", "list(reversed(list(range(10))))"], ["20573459-83", "the code snippet date.today() - timedelta(days=7)", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = set(mylist)", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "df.to_string('np.txt')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "df.to_csv('c:\\\\data\\\\pandas.txt')", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "The answer code is x.split('-', 1)", "print(x.rpartition('-')[0])"], ["15851568-9", "str[-1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "the code block list(random.randint(1, 100))", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "%f with a value of 6", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "The answer code is print('|'.join(list1), end='|', sep='\\t')", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "df.isnull().sum()", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "re.compile('[^\\w\\s]').sub(' ', text).lower()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "the code block: name = soup.find_all('name')", "print(soup.find('name').string)"], ["2011048-15", "os.stat(filepath).st_size", "os.stat(filepath).st_size"], ["2600191-99", "count = l.count(\"a\")", "l.count('a')"], ["2600191-23", "l.count()", "Counter(l)"], ["2600191-53", "len(l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "count(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "l.count(\"b\")", "l.count('b')"], ["12842997-15", "The code to copy the file srcfile to the directory dstdir can be written as:\n\n\nimport shutil\n\nshutil.copy(srcfile, dstdir)\n\n\nThis will copy the file srcfile to the directory dstdir", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = pd.concat([df['b'], df['a']], axis=1)", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "t = list(t)", "tuple(l)"], ["16296643-20", "list(level1)", "level1 = map(list, level1)"], ["3880399-74", "pprint.pprint(dataobject).write(logFile)", "pprint.pprint(dataobject, logFile)"], ["21800169-34", ":", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.eq(True).index", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "filter(BoolCol).index", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "The df.BoolCol.str.contains('True', case=False).index will return the index of the rows in the dataframe df which contain the value 'True' in the column BoolCol", "df[df['BoolCol']].index.tolist()"], ["299446-100", "The answer code is os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "The answer code is soup.find('div', id='main-content').remove()", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "zip(a,b)", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "a list of tuples containing elements from a followed by elements from b", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "re.search('}', \"abcd}def}\").last()", "'abcd}def}'.rfind('}')"], ["20546419-7", "The code should be arr = np.random.shuffle(r)", "np.random.shuffle(np.transpose(r))"], ["574236-63", "the number of elements in the returned list", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor.fetchone()", "cursor.fetchone()[0]"], ["4454298-91", "'open(\"infile\", \"a\").write(\"#test firstline\\n\") + open(\"infile\", \"r\").read() + \"\\n\" + open(\"outfile\", \"w\")", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "re.search(r'ba[rzd]', foobarrrr)", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "The code t = list(set(t)) will create a new list t with no duplicates", "list(set(t))"], ["7961363-86", "This will remove any duplicate elements from the list source_list", "list(set(source_list))"], ["7961363-7", "abracadabra = list(set(abracadabra))", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a list containing the values of the first row of a", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('div', text='Address:').text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "the code snippet urllib.quote(\"data to be encoded\")", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "The answer code is data_to_be_encoded.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "A = [2, 3, 0, 0]", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "a.sum() / len(a)", "np.mean(a, axis=1)"], ["15907200-35", "the resulting csv file with a header", "writer.writeheader()"], ["23359886-48", "arr", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "image.resize((x, y), antialias=True)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "a list of 10 differences between each element of l1 and l2", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "the code snippet list5.sort(lambda x: x.degree)", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "The sorted() function will return a new sequence which is the sorted version of the original sequence", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "For example, 'obj.attr' will return the value of the attribute 'attr' from object 'obj'", "getattr(obj, 'attr')"], ["1960516-75", "'3.9'", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df[df.groupby('A').transform('count') > 1]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(image_mappable, cax=plt.get_cax())", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "a dictionary containing the 100 most frequent words and their frequencies", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "datetime.datetime.utcnow()", "datetime.now(pytz.utc)"], ["9262278-9", "The code to achieve this is:\n\nresponse = HttpResponse(json.dumps(data), content_type='application/json')", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", ":\n\nsubprocess.Popen([\"background-process\", \"arguments\"])", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "The code to find the index of elements containing 'how' and 'what' in a list of strings 'myList' is: \n\nmyList = ['how are you', 'what is the time', 'what happened', 'how to do']\n\nindex = [i for i, s in enumerate(myList) if ('how' in s or 'what' in s)]\n\nprint(index)\n\nOutput:\n[1, 2, 3]", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame.from_records([('a', 1), ('b', 2)], names=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(xticklabels, rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", ": len(yourdict)", "len(list(yourdict.keys()))"], ["2212433-64", "The answer code is len(yourdictfile.keys())", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df['list_col'].explode().reset_index(drop=True)", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "The answer code is subprocess.check_output('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q = heapq.heapq.heapify(q).reverse()", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate([a, b], axis=0)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "a = np.concatenate(a, b, axis=1)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "numpy.concatenate(a, b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "a.concatenate(b)", "np.array((a, b))"], ["4356842-88", "response.status_code = 401", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "the code snippet df.get_value(bob)", "df.index.get_loc('bob')"], ["18730044-52", "[[(1, 4), (2, 5), (3, 6)]]", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "'tis icy'", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "'th it es is icy'", "re.sub('i', '', 'it is icy')"], ["22187233-75", "For example, \"it is icy\".replace(\"i\", \"\") will return \"th is  th\"", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "s.replace(\"a\", \"\")", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = map(int, intstringlist)", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, input_list))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "\"glob.glob('/mydir/*.txt')\"", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "a list of files with the extension \".txt\" in the directory \"/mydir\"", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "The code block that implements this rationale is:\n\nimport glob\nimport os\n\nfiles = glob.glob('/mydir/*.txt')\nprint(os.listdir('/mydir'))", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "dict(json.loads(request.body))", "json.loads(request.body)"], ["36402748-46", "df.sort_values('column_name', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "The response will be a json object which can be accessed using response.json()", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "The code to do this is: \n\n\nfrom django.db.models import Q\n\nq = Q(hour__gte=hour, )", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted(list, key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "int(number)", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json.loads(urllib.parse.unquote(unescaped))", "json_data = json.loads(unescaped)"], ["18367007-15", "open('newFile', 'w').write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "The code to get the maximum value associated with the field added in the model AuthorizedEmail is AuthorizedEmail.objects.annotate(Max('added')).values('added').order_by('-added').get(added__isnull=False)", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", ":\n\ndatetime.datetime.now()", "datetime.datetime.now()"], ["17794266-82", "x = np.amax(x, axis=0)", "max(x.min(), x.max(), key=abs)"]]}