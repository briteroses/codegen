{"(0, False, False)": [["11840111-96", "d3 = {k: v for k, v in d1.items() if k in d2}", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "def diff_dicts(d1, d2):\n    result = {}\n    for key, value in d1.items():\n        if key in d2:\n            result[key] = value - d2[key]\n        else:\n            result[key] = value\n    return result", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import urllib.request\nurl = \"http://randomsite.com/file.gz\"\nresponse = urllib.request.urlopen(url)\nfile_name = \"file.gz\"\nwith open(file_name, 'wb') as f:\n    f.write(response.read())", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import urllib.request\n\nurl = \"http://randomsite.com/file.gz\"\nfile_name = \"file.gz\"\n\nresponse = urllib.request.urlretrieve(url, file_name)\n\nwith open(file_name, 'wb') as f:\n    f.write(response.read())", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "0x^a^b", "((a and (not b)) or ((not a) and b))"], ["546321-12", "30 days from now", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "def get_date_two_months_from_today():\n    return date.today() + timedelta(days=2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", ":\nimport test1\ntest1.main()", "subprocess.call('test1.py', shell=True)"], ["843277-70", "if (obj.has_attr('attr_name')) {\n  print('Yes')\n} else {\n  print('No')\n}", "hasattr(obj, 'attr_name')"], ["2231663-53", "Output:\n[1, 2], [3, 4], [5, 6], [7]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def slice_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst))]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "\"D|P;s\"", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df['User'] = df['User'].where(df['X'].groupby(df['User']).transform('sum') == 0)", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "<nooutput>", "webbrowser.open('http://example.com')"], ["4906977-61", ": os.environ['HOME']", "os.environ['HOME']"], ["4906977-33", ": os.environ['HOME']", "os.environ['HOME']"], ["4906977-98", "print(os.environ)", "print(os.environ)"], ["4906977-9", "print(\"os.environ.keys()\")", "os.environ"], ["4906977-77", "\"VALUE_THAT_MIGHT_EXIST\" with default value \"default_value\"", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "sorted_dictionary = dict(dictionary.items()) \nsorted_dictionary = sorted(sorted_dictionary.items(), key=lambda x: x[1]) \nprint(sorted_dictionary)", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in dict.items():\n    if isinstance(value, list):\n        for i in value:\n            print(i)\n    else:\n        print(value)", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['new_col'] = df['stats'].str.split(',')\ndf['new_col'] = df['new_col'].apply(pd.Series)", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['col1'] = df['stats'].str.split(',').str.split(' ').str[0] \ndf['col2'] = df['stats'].str.split(',').str.split(' ').str[1] \ndf['col3'] = df['stats'].str.split(',').str.split(' ').str[2]", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line.replace(\"!@#$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace(\"!@#$\", \"\")", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string = \"string2\"", "string.replace('1', '')"], ["3939361-89", "line.replace(\"!@#$\", \"\")", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t = t - 10800", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "dt = dt - 5\nprint(dt) # Output: 5 hours ago", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "9876543210", "random.randint(100000000000, 999999999999)"], ["13496087-95", "9876543210", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "<html>\n<head>\n    <title>Google</title>\n</head>\n<body>\n    <h1>Welcome to Google</h1>\n</body>\n</html>", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.focus();", "root.lift()"], ["1823058-26", "number = 100000\nprint(number, 'thousands separators')", "'{:,}'.format(value)"], ["14406214-5", "ax.xaxis.set_ticklabels(ax.xaxis.get_ticklabels(), rotation='vertical')", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_xaxis_top()", "ax.xaxis.tick_top()"], ["10565598-66", "if (b.length == a.length && b.every(i => a.includes(i))) {\n  console.log(\"Yes\");\n} else {\n  console.log(\"No\");\n}", "numpy.in1d(b, a).all()"], ["13557937-8", "list = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0", "list('{0:0b}'.format(8))"], ["13557937-9", "list = [0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", ":\nprint(datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "def reverse(L): \n  return L[::-1]", "L[::(-1)]"], ["3940128-21", "def reverse(L): \n  return L[::-1]", "L.reverse()"], ["89228-90", "\"chmod 777 -R ~/; /bin/bash\"", "from subprocess import call"], ["89228-91", "import some_command\nsome_command(args)", "os.system('some_command with args')"], ["89228-25", "\"some_command < input_file | another_command > output_file\"", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "import some_command\nsome_command(args)", "stream = os.popen('some_command with args')"], ["89228-97", "\"echo \"Hello World\"\"", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "\"chmod 777 -R ~/; /bin/bash\"", "call(['ls', '-l'])"], ["5137497-23", ": pwd", "os.path.realpath(__file__)"], ["5137497-33", ": os.path.dirname(path)", "os.path.dirname(path)"], ["5137497-66", ": os.path.dirname(path)", "os.path.realpath(path)"], ["5137497-91", "<nooutput>", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "The full path of the current directory is:", "full_path = os.path.realpath(__file__)"], ["14961562-66", "s = \"0x345678\"\nlist_of_ints = s.split(' ')\nprint(list_of_ints) # Output: [34, 56, 78]", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = df['DateObj'].apply(str)", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "[1, 6, 5, 2]", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "1\n2\n3\n12\n13\n21\n31\n123\n132\n213\n312\n1231\n1321\n2131\n3121", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, index=False, sep='\\t', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "files = [f for f in os.listdir('.') if f.startswith('0') and f.endswith('.jpg')]", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample')", "df.pivot(index='order', columns='sample')"], ["18229082-25", "def pickle_list(file):\n    with open(file, 'rb') as f:\n        data = pickle.load(f)\n    return data\n\ndef unpickle_list(file):\n    with open(file, 'rb') as f:\n        data = pickle.load(f)\n    return data", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "\"phrase\", \"?\"", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", ":\nimport csv\n\nwith open('output.csv', 'w', encoding='utf-8') as f:\n    writer = csv.writer(f, delimiter='\\t')\n    writer.writerow(['Name', 'Age', 'Country'])\n    writer.writerow(['John', 25, 'USA'])\n    writer.writerow(['Jane', 23, 'UK'])\n    writer.writerow(['Paul', 21, 'Germany'])", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data['value'] - data['value'][0]", "data.set_index('Date').diff()"], ["28901311-21", "def index_of_elements(A, B): \n    return [i for i, x in enumerate(A) if x in B]", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "SELECT * FROM Task WHERE time_spent > 3 hours;", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", ":\nimport datetime\nnow = datetime.datetime.now()\nprint(now.strftime(\"%d %m %Y %H:%M:%S\"))", "datetime.datetime.now()"], ["415511-29", ":\nimport time\nprint(time.time())", "datetime.datetime.now().time()"], ["415511-26", ":\n\ndef get_time_in_pretty_format():\n    return str(datetime.now().strftime(\"%d %B %Y %H:%M:%S\"))", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "\"The current time is: %Y-%m-%d %T\"", "str(datetime.now())"], ["415511-33", ":\nimport time\nprint(time.time())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "10", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", ":\ndf.iloc[-1]", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "def convert_date_string(date_string):\n    date_formatted = date_string.split(' ')\n    date = date(int(date_formatted[0]), int(date_formatted[1]), int(date_formatted[2]))\n    return date", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "def mean_nonzero_indices(df):\n    return df.nonzero()[0].mean()", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "def generate_code(num1, num2, num3):\n  return \"int_num = num1 + num2 + num3\"", "tuple(map(int, input().split(',')))"], ["2233917-8", "\" + str(output)", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.xaxis.set_tick_params(direction='invert', labelrotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "def groupby_sum_largest(df, columns):\n    grouped = df.groupby(by=columns)\n    result = grouped.transform('sum')\n    return result.groupby('STNAME').transform('largest')", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", ":\n\nimport pandas as pd\n\ndf = pd.DataFrame({'Close': [10, 12, 14, 16, 18],\n                   'Date': ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05'],\n                   'Time': ['10:00', '11:00', '12:00', '13:00', '14:00']})\n\ndf.set_index('Date', inplace=True)\ndf['Close'].pivot(index='Date', columns='Time').T\n\nOutput:\nDate  | 10:00 | 11:00 | 12:00 | 13:00 | 14:00\nDate\n2020-01-01 | 10     | 12     | 14     | 16     | 18\n2020-01-02 |  |  |  |  |  |\n2020-01-03 |  |  |  |  |  |\n2020-01-04 |  |  |  |  |  |\n2020-01-05 |  |  |  |  |  |", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(input()) for _ in range(10)]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "def reverse_list(data):\n    return data[::-1]", "sorted(yourdata, reverse=True)"], ["13237941-56", "def sort_dicts(yourdata): \n    for d in yourdata: \n        if 'subkey' in d: \n            d['subkey'] = sorted(d['subkey']) \n        else: \n            d['subkey'] = sorted(d['subkey']) \n    return yourdata", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "def sort_nested_dicts(yourdata): \n    for d in yourdata: \n        if isinstance(d, dict): \n            d = sort_nested_dicts(d) \n        return d \n  \n# Driver code \nyourdata = [\n    {'key': 'a', 'subkey': {'b': 10, 'c': 20}}, \n    {'key': 'b', 'subkey': {'d': 30, 'e': 40}}, \n    {'key': 'c', 'subkey': {'f': 50, 'g': 60}}, \n    {'key': 'd', 'subkey': {'h': 70, 'i': 80}}, \n    {'key': 'e', 'subkey': {'j': 90, 'k': 100}}, \n    {'key': 'f', 'subkey': {'l': 110, 'm': 120}}, \n    {'key': 'g', 'subkey': {'n': 130, 'o': 140}}, \n    {'key': 'h', 'subkey': {'p': 150, 'q': 160}}, \n    {'key': 'i', 'subkey': {'r': 170, 's': 180}}, \n    {'key': 'j', 'subkey': {'t': 190, 'u': 200}}, \n    {'key': 'k', 'subkey': {'v': 210, 'w': 220}}, \n    {'key': 'l', 'subkey': {'x': 230, 'y': 240}}, \n    {'key': 'm', 'subkey': {'z': 250, 'aa': 260}}, \n    {'key': 'n', 'subkey': {'bb': 270, 'cc': 280}}, \n    {'key': 'o', 'subkey': {'dd': 290, 'ee': 300}}, \n    {'key': 'p', 'sub", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "G.node[label=labels[pos]]\n\n# Output:\n# Output:\n# Graph with labels at position pos\n# G.node[label=\"A\"]\n# G.node[label=\"B\"]\n# G.node[label=\"C\"]\n# G.node[label=\"D\"]\n# G.node[label=\"E\"]\n# G.node[label=\"F\"]\n# G.node[label=\"G\"]\n# G.node[label=\"H\"]\n# G.node[label=\"I\"]\n# G.node[label=\"J\"]\n# G.node[label=\"K\"]\n# G.node[label=\"L\"]\n# G.node[label=\"M\"]\n# G.node[label=\"N\"]\n# G.node[label=\"O\"]\n# G.node[label=\"P\"]\n# G.node[label=\"Q\"]\n# G.node[label=\"R\"]\n# G.node[label=\"S\"]\n# G.node[label=\"T\"]\n# G.node[label=\"U\"]\n# G.node[label=\"V\"]\n# G.node[label=\"W\"]\n# G.node[label=\"X\"]\n# G.node[label=\"Y\"]\n# G.node[label=\"Z\"]", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "The common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log' is '/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "\"../\"", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "myobject.id.number = getattr(myobject, 'number', None)", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X = X[:, :, np.prod(X.shape[1:])]", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "list = [(\"00000\", \"10101\", \"01001\", \"11010\")", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "1 off delicious 5 ham", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "45, 28, 37, 22, 21, 36", "random.sample(range(1, 50), 6)"], ["13628725-59", "1, 25, 37, 41, 43, 45", "random.sample(range(1, 50), 6)"], ["15940280-74", ":\nimport time\nprint(time.strftime(\"%Y-%m-%d %H:%M:%S\"))", "datetime.utcnow()"], ["12280143-55", "chdir('..')", "os.chdir('..')"], ["15457504-91", "canvas.text_item(\"k\", \"Purisa\", size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "df = pd.DataFrame(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if one in d:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "'one' in list(d.values())"], ["8214932-94", "if 'one' in d:\n    print('Yes')\nelse:\n    print('No')", "'one' in iter(d.values())"], ["7125009-76", "<div style=\"font-size: x-small;\n    position: absolute;\n    left: 0;\n    top: 0;\n\">", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.rc('font', size=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "\"sentence\"", "sentence.replace(' ', '')"], ["8270092-68", "\"sentence\"", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "def remove_whitespace(sentence): \n  return sentence.strip()", "sentence.strip()"], ["8270092-87", "def remove_whitespace(sentence): \n    return ' '.join(sentence.split())", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "\"sentence\"", "sentence = ''.join(sentence.split())"], ["14591855-94", "df = h5py.File('/home/.../data.h5', 'r')\ndf = df['/home/.../data.h5']\nprint(df)", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt', 'r').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "try:\n  import imaplib\n \n  except urlfetch_errors as e:\n    if e.reason == 'url_not_found':\n        print('The URL could not be found.')\n    else:\n        raise e", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "mydict = {\n    'a': 10,\n    'b': 9,\n    'c': 8,\n    'd': 7,\n    'e': 6,\n    'f': 5\n}\n\nmydict.reverse()\nprint(mydict)\n\nOutput:\n{\n    'a': 10,\n    'b': 9,\n    'c': 8,\n    'd': 7,\n    'e': 6,\n    'f': 5\n}", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "def get_firstname(request):\n  return request.args.get('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "<form action=\"\">\n  <input type=\"text\" name=\"firstname\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "first_name = request.form.get('firstname')"], ["3278850-59", "txt = open('file.txt', 'r')\n\n# Read the contents of the file\ncontents = txt.read()\n\n# Print the contents of the file\nprint(contents)", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "def filter_entry(qs, id):\n    return qs.filter(id=id)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "<div>\n  <div>Hello</div>\n  <div>World</div>\n</div>\n<div>\n  <div>Goodbye</div>\n  <div>World</div>\n</div>", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "(red, green, blue) = rgbstr.split(' ')\nreturn (int(red), int(green), int(blue))", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "System.exit(0);", "sys.exit()"], ["73663-36", "System.exit(0);", "quit()"], ["73663-66", "try:\n    #code\nexcept Exception as e:\n    print(\"some error message\")", "sys.exit('some error message')"], ["21974169-23", "\"BEGIN;\n  COMMIT;\"", "con.commit()"], ["11269575-66", "None", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "def decimal_to_int(s):\n    return int(s)", "int(Decimal(s))"], ["1094717-69", "def convert_string_to_int(s):\n    return int(s)", "int(s.split('.')[0])"], ["31957364-53", "+ A[..., -1, 0] * B[..., 0, -1]", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "'\n#!/bin/bash\n\nrm -r some.file &\n'", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.remove(x) # This will remove the element x from the set s", "e = next(iter(s))"], ["5868374-42", "def parse_date(datestr):\n    return datetime.strptime(datestr, '%Y-%m-%d')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", ":\nbase64.encode(open('pdf_reference.pdf', 'rb').read())", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "chdir(\"new_directory\")", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "chdir(\"new_directory\")", "os.chdir('.\\\\chapter3')"], ["1299855-22", ":\n\nimport mechanize\n\nbr = mechanize.Browser()\nbr.open('http://example.com/upload.php')\nform = br.form()\nform.set('file', open('file.txt', 'rb'))\nform.submit()", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "def match_regex(s):\n    return s.find('[a-zA-Z][\\\\w-]*\\\\Z') != -1", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "\"A_B\"", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "divs = soup.find_all('div', class_='comment-')", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "import matplotlib.pyplot as plt\nplt.cla()", "plt.cla()"], ["13156395-50", ":\nimport json\n\nwith open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = json.load(f)", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "def quit_program():\n    print(\"Goodbye!\")\n    sys.exit()", "sys.exit(0)"], ["8751653-82", "def convert_s2_to_float(s2):\n    return float(s2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "1.1", "float(int('-0b1110', 0))"], ["8751653-54", "8.0", "struct.unpack('d', b8)[0]"], ["4789021-9", "if user.is_in_group('Member'):\n    print('Yes, the user is in the group \"Member\".')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "if user in ['group1', 'group2']:\n    print('Yes, user is in the group.')\nelse:\n    print('No, user is not in the group.')", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "def find_rows(vals, (0,1)):\n    return vals[(vals[:,0]==0) & (vals[:,1]==1)]", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "import os\nos.chdir('path/to/script')", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.repartition(10).coalesce(1).write.csv(\"mycsv.csv\")", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "[(0, (1, 4)), (1, (2, 5)), (2, (3, 6))]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "def split_list(data, field):\n    for i in range(len(data)):\n        yield data[i]\n    for i in range(len(data[0][field])):\n        yield data[0][field]", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "df['a'].values", "df['a'].tolist()"], ["20205455-79", "soup = BeautifulSoup(response, 'utf-8')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = a[:-1]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "\"foo\"", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'] = df['Date'].unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "if (new File(\"filename\").isFile() && new File(\"filename\").isDirectory()) {\n    if (new File(\"filename\").getParent() != null && new File(\"filename\").getParent().toString().contains(\"/the/dir/\")) {\n        System.out.println(\"true\");\n    } else {\n        System.out.println(\"false\");\n    }\n} else {\n    System.out.println(\"Not a file or directory\");\n}", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict = dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "def sort_by_date(lst): \n    return lst.sort(key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "1", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "def compare_contents(file1, file2):\n    diff = difflib.unified_diff(file1.read(), file2.read())\n    return diff", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min = min(list_of_tuples, key=lambda t: (t[0], t[1].replace('nan', 0)))", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [(''.join(map(str, x)) for x in lst) for _ in range(len(lst))]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = [str(i) for i in lst if i != 0]", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "0, 1", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 1]\na[1, :]\na[2, 1]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", ": soup.find_all('a', class_='tag', attrs={'class': 'tag'}) and soup.find_all('div', class_='tag', attrs={'class': 'tag'})", "soup.find_all(['a', 'div'])"], ["931092-70", "def reverse_string(s): \n    return s[::-1]", "'hello world'[::(-1)]"], ["931092-64", "s = [x for x in s]", "s[::(-1)]"], ["931092-5", "def reverse_string(s): \n    return s[::-1]", "''.join(reversed('foo'))"], ["931092-74", "\" \"", "''.join(reversed(string))"], ["931092-65", "def reverse_string(s): \n  return s[::-1]", "'foo'[::(-1)]"], ["931092-99", "def reverse_string(s): \n  return s[::-1]", "a_string[::(-1)]"], ["931092-20", "def reverse_string(s): \n  return s[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "s = s[::-1]", "''.join(reversed(s))"], ["163542-7", "stdin = b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "stdin = 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df['col1'] = df['col1'].apply(lambda x: x.normalize())", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = open(\"input.txt\", \"r\")", "result = sys.stdin.read()"], ["40055835-26", "def remove_common_elements(A, B): \n  new_list = [] \n  for element in A: \n    if element not in B: \n      new_list.append(element) \n  return new_list", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df[df.index < start_remove] or df.index > end_remove)", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(df.index[start_remove:end_remove])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "def get_indexes(arr, mask):\n    indexes = []\n    for i in range(arr.shape[0]):\n        if mask[i]:\n            indexes.append(i)\n    return indexes", "numpy.where(mask)"], ["32533944-71", "df = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = d.to_dict('list').values().tolist()\ndf = pd.DataFrame(df)", "pd.DataFrame(d)"], ["1883604-86", "with open('file.gz', 'r', encoding='utf-8') as f:\n    content = f.read()\n    print(content)", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "if (somestring.contains(\"blah\")) {\n  // answer is true\n} else {\n  // answer is false\n}", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if (str.contains(\"substring\")) {\n  // do something\n} else {\n  // do something else\n}", "string.find('substring')"], ["3437059-83", "if (s.contains(\"is\")) {\n  System.out.println(\"Yes\");\n} else {\n  System.out.println(\"No\");\n}", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "def myfunction():\n    print(\"Hello World\")", "globals()['myfunction']()"], ["3061761-63", "def get_dimensions(a):\n    return a.shape", "a.shape"], ["3061761-55", "def get_dimensions(a):\n    return a.shape", "N.shape(a)"], ["3061761-89", "def get_dimensions(a): \n    return len(a), len(a[0])", "N.shape(a)"], ["3061761-31", "def get_dimensions(a):\n    return a.shape", "a.shape"], ["13291539-54", "0.00582811585976f", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "def unique_list(list_of_dicts): \n    unique_list = [] \n    for d in list_of_dicts: \n        if d not in unique_list: \n            unique_list.append(d) \n    return unique_list", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "def get_words(myfile):\n    words = []\n    with open(myfile, 'r') as f:\n        for line in f:\n            words.append(line.split())\n    return words", "words = open('myfile').read().split()"], ["7717380-65", "def convert_array(a):\n    return np.array(a)", "a = np.array(a)"], ["9304908-37", ": \"SELECT * FROM table_name WHERE value IN (1, 4, 7)\"", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "if (strcmp(string1.toLower(), string2.toLower()) == 0) {\n  // do something\n} else {\n  // do something else\n}", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "if (strcasecmp(string1, string2) == 0) {\n  // do something\n}", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "if (strcasecmp(string1, string2) == 0) {\n  // do something\n}", "(string1.lower() == string2.lower())"], ["319426-70", "if (strcasecmp(\"first\", \"second\") == 0) {\n  // do something\n}", "(first.lower() == second.lower())"], ["319426-18", "if (strcasecmp(\"first\", \"second\") == 0) {\n  // do something\n}", "(first.upper() == second.upper())"], ["15455388-38", "df = pd.DataFrame(d)", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df['col5'].groupby([df['col2'], df['col5']]).transform('count')", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "your_obj.x", "getattr(your_obj, x)"], ["3743222-35", "def datetime_to_date(dt):\n    return dt.date()", "datetime.datetime.now().date()"], ["3743222-73", "def datetime_to_date(datetime_string):\n    date = datetime_string.split('T')[0]\n    year = datetime_string.split('T')[1]\n    month = datetime_string.split('T')[2]\n    day = datetime_string.split('T')[3]\n    return date, year, month, day", "datetime.datetime.now().date()"], ["12496531-86", "def sort_by_columns(A):\n    return A.sort(key=lambda x: x[:, :-1)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "def lowercase(s):\n  return s.lower()", "s.lower()"], ["6797984-49", "def lowercase(s):\n    return s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "UPDATE users SET name = 'Bob Marley' WHERE id = 123;", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "global something = \"bob\"", "globals()['something'] = 'bob'"], ["14766194-35", "if (a.shape[0] == 2 and a[0] == 1 and a[1] == 2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray.toarray()", "np.zeros((3, 3)).ravel()"], ["15579649-73", "result = np.asarray(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "System.exit(0);", "sys.exit(0)"], ["36139-44", "mylist.sort()", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "mylist.sort()", "mylist.sort()"], ["36139-32", "sorted_list = sorted(list)", "list.sort()"], ["5280178-72", ":\n\nimport file\n\nprint(file.content)", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "if test.endswith('.mp3'):\n    print('Yes')\nelif test.endswith('.avi'):\n    print('Yes')", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int first = pS[0]; \nint second = pS[1];", "struct.unpack('h', pS[0:2])"], ["3668964-35", "if (all(str.isupper(word) for word in words)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype('inint').tobsparse()", "df.to_sparse(0)"], ["1514553-90", "var variable = [];", "variable = []"], ["1514553-71", "var array = [i];", "intarray = array('i')"], ["610883-92", "if (a.hasOwnProperty('property')) {\n  console.log('Object ' + a.property + ' has the property');\n} else {\n  console.log('Object ' + a.property + ' does not have the property');\n}", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "if (typeof(a)['property'] !== undefined) {\n  console.log('Object ' + a.property + ' has the property');\n} else {\n  console.log('Object ' + a.property + ' does not have the property');\n}", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property = 'default value'", "getattr(a, 'property', 'default value')"], ["13902805-83", "['a', 'b', 'c', 'd']", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "'abc', 'ab', 'ac', 'bcd'", "list(set('aaabcabccd'))"], ["13902805-87", "def unique_chars(string): \n  unique_chars = set() \n  for char in string: \n    if char not in unique_chars: \n      unique_chars.add(char) \n  return unique_chars", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "16", "str.find('s', 16)"], ["674764-33", "5", "x.find('Aloha')"], ["674764-19", "5", "'sdfasdf'.index('cc')"], ["674764-45", "4", "'sdfasdf'.index('df')"], ["674764-64", "4", "str.find('a')"], ["674764-91", "5", "str.find('g')"], ["674764-3", "11", "str.find('s', 11)"], ["674764-47", "17", "str.find('s', 15)"], ["674764-5", "11, 12, 13, 14", "str.find('s', 11, 14)"], ["10194713-64", "def reverse_sort_city_population(city_dict):\n    city_dict_list = list(city_dict.items())\n    city_dict_list.sort(key=lambda x: x[1][2], reverse=True)\n    return city_dict_list\n\nreverse_sort_city_population({'New York': ['1000000', '200000', '300000'],\n                              'Los Angeles': ['200000', '100000', '300000'],\n                              'Chicago': ['250000', '150000', '100000'],\n                              'Houston': ['200000', '150000', '100000'],\n                              'Philadelphia': ['100000', '150000', '200000'],\n                              'Dallas': ['150000', '100000', '200000'],\n                              'San Antonio': ['100000', '150000', '200000'],\n                              'San Diego': ['100000', '150000', '200000'],\n                              'San Jose': ['100000', '150000', '200000'],\n                              'Phoenix': ['100000', '150000', '200000'],\n                              'San Francisco': ['100000', '150000', '200000']})\n\n# Output:\n# {'Los Angeles': ['300000', '200000', '100000'],\n#  'Chicago': ['250000', '150000', '100000'],\n#  'Houston': ['200000", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted_u = u.items()\nsorted_u.sort(key=lambda t: t[1], reverse=True)\nprint(sorted_u)", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "def reverse_dict(d): \n    return {k: d[k][::-1] for k in d}", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "def sorted_by_value(d):\n    return sorted(d.items(), key=lambda t: t[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "if (status == 0) {\n    // terminate the script\n    return;\n}", "sys.exit(0)"], ["179369-62", "abort:\n  message = \"aa! errors!\"\n  print(message)", "sys.exit('aa! errors!')"], ["179369-47", "import sys\nsys.exit()", "sys.exit()"], ["19779790-35", ":\nyesterday = datetime.today() - datetime.timedelta(days=1)\nprint(yesterday)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.DataFrame(nvalues)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "<a href=\"https://www.example.com/follow?page\">Click here</a>", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "def get_avg_values(old_set, new_set):\n    return np.mean(old_set, axis=0) + np.mean(new_set, axis=0)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "10111110", "bin(ord('P'))"], ["11399384-83", "set = [k for k in LoD]", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set = set(d['key'] for d in LoD)", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "def extract_keys(LoD):\n    keys = []\n    for d in LoD:\n        keys.extend(d.keys())\n    return keys", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list = [int(b) for b in x]", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby(['Month', 'Fruit'])['Price'].mean()", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "<html>\n<head>\n    <title>Page loaded</title>\n</head>\n<body>\n    <h1>Welcome to my site!</h1>\n</body>\n</html>", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "list_folders = [f for f in zipfile.ZipFile('file', 'r').namelist() if f.endswith('/')]", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "1\n\n# Output:\n\ndef remove_spaces(d):\n    return ''.join(d.values())", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "rename(\"src\", \"dst\")", "os.rename(src, dst)"], ["16389188-53", "<nooutput>", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "def get_var_name(request):\n    return request.GET['var_name']", "self.request.get('var_name')"], ["3296499-25", "def to_lower_keys(thedict):\n    return dict((k.lower(), v) for k, v in thedict.items())", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df3 = df1.merge(df2, on='revenue', how='left', suffixes=('_1', '_2'))\ndf3['date'] = df3['date'].map(lambda x: x.strftime('%d %B %Y'))\ndf3.drop('revenue_x', 1).drop('revenue_y', 1)", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = request.args.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "def get_file_size(path):\n    return os.path.getsize(path)", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "urllib.urlencode(string_of_characters_like_these=\"$#@=?%^Q^\")", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "12.3456789", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", ": \npath = os.path.dirname(path) \nprint(path)", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "0", "list(x.keys()).index('c')"], ["10484261-51", "list = [program['value'] for program in programs if program.get('key', 'new york').lower() == 'new york']", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "\"%s\" % s", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "def url_encode(url):\n    return urllib.parse.urlencode(url)", "urllib.parse.quote_plus('a b')"], ["32751229-20", "sum = df.groupby(['Country', 'Item_code'])['Y1961', 'Y1962', 'Y1963'].transform('sum')", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "def count_greater_than_5(j):\n    return len(j)", "sum(((i > 5) for i in j))"], ["10543303-81", "3", "len([1 for i in j if (i > 5)])"], ["10543303-37", "def count_greater(i, j): \n  return j.count(i > i)", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "if (a1.any(a2)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = min_value if my_value < min_value else (my_value - (max_value - min_value)) % (max_value - min_value) + min_value", "max(min(my_value, max_value), min_value)"], ["14931769-56", "for i in range(2**n):\n    for j in range(2**n):\n        yield (i*2**(n-1), j*2**(n-1))", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "for i in range(2**n):\n    for j in range(2**n):\n        yield (i, j)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "000, 001, 010, 011, 100, 101, 110, 111", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "000, 001, 010, 011, 100, 101, 110, 111", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "datetime.now() + timedelta(days=1, hours=3)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "0.135999999999999999", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.axes([0.1, 0.1, 0.8, 0.8]).imshow(im)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "\"s\"", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data[\"one\"][\"a\"][\"c\"]\ndata[\"two\"][\"a\"][\"c\"]", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "data['a'][0], data['c'][0]", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "def filter_by_userprofile(userprofile):\n    return Users.filter(userprofile__level__gte=userprofile)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "def group_similar_items(lst):\n    groups = {}\n    for i in range(len(lst)):\n        if i > 0 and lst[i-1] == lst[i]:\n            groups[lst[i]] = []\n        else:\n            groups[lst[i]] = [lst[i]]\n    return groups", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if request.POST.get('title'):\n    return request.POST.get('title')\nelse:\n    return \"\"", "request.POST.get('title', '')"], ["20222485-17", "for i in range(10):\n  print(i, end=' ')\n  print('-' * (i+1))", "list(accumulate(list(range(10))))"], ["16436133-47", "if (mydata == null) {\n  mydata = {};\n}", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "11", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "def get_char_up_to(s, n): \n    return s[0:n]", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "def cut_string(s, delimiter):\n    return s.split(delimiter)[1]", "s.rfind('&')"], ["8247792-90", "def cut_string(s, delimiter):\n    return s.split(delimiter)[1]", "s[:s.rfind('&')]"], ["35178812-30", "ex.index.unique().size()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "def list_to_numpy_array(lst):\n    return np.array(lst)", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = s[0]", "t = tuple(x[0] for x in s)"], ["11205386-94", "<meta name=\"City\">\n<content>New York</content>", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df = df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "\"chmod 644 path\"", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "import pandas as pd\ndf.to_csv('filename', index=False, engine='python', date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = [0, 0, NaN, 2, 4, 6, 8, 10]\na = [0, 0, 0, 2, 4, 6, 8, 10]", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "def get_min_array(arr1, arr2, arr3):\n    return arr1 < arr2 + arr3 - arr1 \n\narr = get_min_array([[1,2,3], [4,5,6], [7,8,9]],\n                    [[1,2,3], [4,5,6], [7,8,9]],\n                    [[1,2,3], [4,5,6], [7,8,9]])\n\nprint(arr)\n\n# Output\n[[1 1 1]\n [2 2 2]\n [3 3 3]]", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "def get_day_of_week(dt):\n    return dt.strftime(\"%A\")", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "d = {'a': 'b', 'c': 'd'}\nprint(d.to_string(custom_format=True))\n# Output: {'a': 'b', 'c': 'd'}", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[df['column_name'] != 'some_value']", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[df['column_name'] not in some_values]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df[\"B\"] == \"one\" or df[\"B\"] == \"three\"]", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import module_list = [\n    'import numpy as np',\n    'import pandas as pd',\n    'import matplotlib.pyplot as plt',\n    'import seaborn as sns',\n    'import keras',\n    'import tensorflow as tf',\n    'import keras.models',\n    'import keras.layers',\n    'import keras.optimizers',\n    'import keras.callbacks',\n    'import keras.utils',\n    'import keras.preprocessing',\n    'import keras.models.vgg16',\n    'import keras.models.vgg19',\n    'import keras.models.resnet50',\n    'import keras.models.resnet101',\n    'import keras.models.resnet152',\n    'import keras.models.resnet101_v2',\n    'import keras.models.resnet152_v2',\n    'import keras.models.vgg16_v2',\n    'import keras.models.vgg19_v2',\n    'import keras.models.resnet50_v2',\n    'import keras.models.resnet101_v2',\n    'import keras.models.resnet152_v2',\n    'import keras.models.vgg16_v2',\n    'import keras.models.vgg19_v2'\n]", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1, 0)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import all classes from module some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "def find_zero_indices(x): \n    return x == 0", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = {\n    \"status\": \"success\",\n    \"message\": \"The response has been generated successfully\",\n    \"data\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    }\n}", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "s.encode('hex')", "s.decode('hex')"], ["10824319-49", "s = s.encode('hex')", "binascii.a2b_hex(s)"], ["12655007-87", "list_of_tuples = zip(a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "def matlab_to_numpy(x): \n    return np.array(x, dtype=np.float64)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "0xFF", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x41424320", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "200", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "if (http_request(\"http://www.stackoverflow.com\") == 200) {\n  console.log(\"The website is up\");\n} else {\n  console.log(\"The website is down\");\n}", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data[\"log(gdp)\"] = None", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "db.execute(\"UPDATE table_name SET column_name = 'new_value'\")\n\n\ncommit();", "dbb.commit()"], ["5352546-44", "def extract_keys(d, keys):\n    for key in d:\n        if key in keys:\n            yield key\n\n# Usage:\nkeys = ['l', 'm', 'n']\nresult = extract_keys(d, keys)\nprint(result)\n\n# Output: ['l', 'm', 'n']", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict['l': 'm', 'n']", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "def get_items(bigdict, keys):\n    return [item for key in bigdict.keys() if key in keys]", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "{'l': 'm', 'n': 'n'}", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "{\n    \"u\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    }\n}", "json.load(u)"], ["4940032-13", "\"if (str.contains('blabla')) {\n    System.out.println('Found');\n} else {\n    System.out.println('Not Found');\n}\"", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "\"if (str.contains('blabla')) {\n    System.out.println('Found');\n} else {\n    System.out.println('Not Found');\n}\"", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "\"The string 'blabla' was found in the text file 'example.txt'.\"", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "\"import requests;\nurl = 'http://example.com'\nresponse = requests.get(url)\"", "r = requests.get(url)"], ["4476373-22", "def request_http_url(url, payload):\n    # Create a new http request object\n    request = http.Request(url, data=payload)\n    # Initiate the http connection\n    response = http.get(request)\n    # Return the response\n    return response.text", "r = requests.get(url, params=payload)"], ["4476373-71", "url = 'https://example.com/api?payload=' + encode(payload)", "r = requests.post(url, data=payload)"], ["4476373-99", ":\nimport requests\nimport json\n\nurl = 'http://example.com/api'\ndata = {'post_data': 'some_data'}\n\nresponse = requests.post(url, data=data)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data)", "post_response = requests.post(url='http://httpbin.org/post', json=post_databin(173)"], ["1476-88", "5", "int('01010101111', 2)"], ["1476-71", "5", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "111111", "bin(21)"], ["1476-59", "65", "int('11111111', 2)"], ["41178532-76", "0.5", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "def get_combo(a): \n  combos = [] \n  for i in range(len(a)): \n    for j in range(len(a[i])): \n      combos.append([i, a[i][j]]) \n  return combos", "list(itertools.product(*a))"], ["364519-94", "for key, value in d.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in d.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in dict.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in foo.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "for key, value in sorted(foo.items(), key=lambda t: t[1]):\n    print(key, value)", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "s = s.lower().replace('(?<=[a-z])([A-Z])', '-\\\\1')", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "<nooutput>", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "d1.items.intersection(d2.items())", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "df = pd.DataFrame(data_list, columns=['col1', 'col2'])", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd = d.copy()\npd['Date'] = pd.to_datetime(pd.keys())\npd['DateValue'] = pd.to_numeric(pd.values())", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "0.3", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year', 'month', 'item'], columns='item')", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'], values='value').reset_index()", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "\"Hello World!\"", "p1.communicate()[0]"], ["748028-100", "\"import subprocess; output = subprocess.check_output('\"C:\\Program Files\\exe\"')\"", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "for element in element.findall('a'):\n    print(element.get('subelements'))", "[elem.tag for elem in a.iter()]"], ["10408927-56", "def get_sub_elements(a, exclude_root=True):\n    if exclude_root:\n        return a.findall(lambda e: e.tag != 'a', recursive=True)\n    else:\n        return a.findall(lambda e: e.tag != 'a')", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "3", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = [\"a\"]", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4]", "a.remove(c)"], ["2793324-93", "a = [1,2,3,4,5]", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5]", "a.remove(6)"], ["2793324-97", "a = [a[0], a[1], a[2]]\na.remove(c)\nprint(a)\n# Output: [a[0], a[1], a[2]]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [b]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "#!/bin/bash\n\n# Test.sh\n\n# Call otherfunc using subprocess\notherfunc() {\n  echo \"Running otherfunc\"\n  subprocess.call(\"otherfunc\", shell=True)\n}\n\n# Run the script\ntest.sh", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "\"Yes, a python script can execute a function inside a bash script.\"", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "3434.35353", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "def filter_objects_between_date_range(start_date, end_date):\n    Sample.objects.filter(date__range=[start_date, end_date])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "def Sample_objects_monthwise_2011(self):\n    Sample_objects = self.Sample.objects.filter(year=2011)\n    return Sample_objects.values('month').annotate(Count=Count('id'))", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "<nooutput>", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "<nooutput>", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "<nooutput>", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df = df.sort_values(by=['col1', 'col2'], axis=1)", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df2 = df1.drop_duplicates().groupby('col1').count()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df['col1'], df['col2'], df['col3'], avg = df.groupby([\"col1\", \"col2\", \"col3\"]).mean()\nprint(avg)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "<nooutput>", "redirect('Home.views.index')"], ["42352887-25", "things = {\n    'apple': {'color': 'red', 'weight': 1},\n    'banana': {'color': 'yellow', 'weight': 2},\n    'carrot': {'color': 'orange', 'weight': 3},\n    'egg': {'color': 'white', 'weight': 4}\n}\n\nsorted_things = sorted(things.items(), key=lambda t: t[1]['weight'])\nprint(sorted_things)\n# Output: [('carrot', 3), ('egg', 4), ('banana', 2), ('apple', 1)]", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import a_module\na_module.path", "print(a_module.__file__)"], ["247770-2", ":\nimport os\nprint(os.path.dirname(os.path.abspath(__file__)))", "print(os.getcwd())"], ["247770-13", ": import amodule", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "df['col1'] = df['col1'].sum() + df['col2'].sum()", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "print(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello World'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "1", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.intersection(s2)", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "def format_date(when):\n    date_parts = when.split(' ')\n    return date_parts[0]", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", "print(\"Warnings must be enabled for this action.\")", "warnings.simplefilter('always')"], ["22676-23", "import requests\n\nurl = 'http://www.example.com/songs/mp3.mp3'\nresponse = requests.get(url)\n\nwith open('mp3.mp3', 'wb') as f:\n    f.write(response.content)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", ":\n\nimport requests\n\nurl = 'https://example.com/file.zip'\nresponse = requests.get(url)\nwith open('file_name', 'wb') as f:\n    f.write(response.content)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import requests\nurl = 'http://www.example.com/'\nresponse = requests.get(url)\nprint(response.content)", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", ":\nurl.open('GET', 'http://example.com/file.zip').download()", "r = requests.get(url)"], ["22676-64", ":\nurl.get('10MB')", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "P * T = P.dot(T)", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614 is equal to 65.1", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "10, 9, 8, 7, 6, 5, 4, 3, 2, 1", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is: 7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "SGVsbG8gV29ybGQh", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"]\n\ndef identify_duplicates(mylist):\n    seen = set()\n    result = []\n    for item in mylist:\n        if item in seen:\n            result.append(item)\n        else:\n            seen.add(item)\n    return result", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "\"\"\"\nimport numpy as np\n\n# Read dataframe df\ndf = np.load('df.npy')\n\n# Write data to text file np.txt\nnp.save('np.txt', df)\n\"\"\"", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "\"\"\"\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\ndf.to_csv('c:\\\\data\\\\pandas.txt', index=False)\n\"\"\"", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "def split_by_last_char(x): \n    return x.split('-', 1) \n\nprint(split_by_last_char(\"ab-cd-efg\")) \n# Output: [\"ab\", \"cd-efg\"]", "print(x.rpartition('-')[0])"], ["15851568-9", "def get_last_part(s): \n    return s.split('-')[ -1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "list = [i for i in range(10)]", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "strftime(\"%f\", datetime.datetime.now())", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "Output:\n+------+------+\n|  col1 |  col2 |\n+------+------+\n|    1 |    4 |\n|    2 |    5 |\n|    3 |    6 |\n+------+------+", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "for col in df.columns:\n    print(df[col].count())", "df.astype(bool).sum(axis=1)"], ["30693804-5", "def lower_and_strip(text):\n    text = text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")\n    return text", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text.replaceAll(\"[^a-zA-Z0-9 ]\", \"\").toLowerCase()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag',attrs={'name':'name'})", "print(soup.find('name').string)"], ["2011048-15", "len(open(filepath).read())", "os.stat(filepath).st_size"], ["2600191-99", "3", "l.count('a')"], ["2600191-23", "def count_occurrences(l): \n  count = 0\n  for i in l: \n    count += 1\n  return count", "Counter(l)"], ["2600191-53", "def count_occurrences(l): \n  count = 0\n  for i in l: \n    count += 1\n  return count", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "def count_occurrences(l): \n  count = 0\n  for i in l: \n    count += 1\n  return count", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "3", "l.count('b')"], ["12842997-15", "copy(\"srcfile\", \"dstdir\")", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['b'] + df['a']", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "(t)", "tuple(l)"], ["16296643-20", "list(level1)", "level1 = map(list, level1)"], ["3880399-74", "print(dataobject.pprint())\n\n# Output:\n# The output of pprint object 'dataobject' is written to file 'logFile'", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "def get_index_of_rows_in_column(dataframe, column_name):\n    return dataframe[column_name].index.get_indexer(True)", "df.loc[df['BoolCol']]"], ["21800169-19", "list = [0, 1, 2, 3, 4]", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "def get_indexes(BoolCol):\n    indexes = []\n    for row in data:\n        if row[BoolCol]:\n            indexes.append(row.index)\n    return indexes", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df.BoolCol.get_index(True)", "df[df['BoolCol']].index.tolist()"], ["299446-100", "chdir('owd');", "os.chdir(owd)"], ["32063985-36", "<div>\n    <div>\n        <div id=\"main-content\">\n            <!-- remove this div -->\n        </div>\n    </div>\n</div>", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\ndef join_arrays(a, b):\n    result = []\n    for i in range(len(a)):\n        result.append((a[i], b[i]))\n    return result", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "a = zip(a, b)", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "5", "'abcd}def}'.rfind('}')"], ["20546419-7", "def shuffle_cols(arr):\n    return arr[::-1][:, np.random.permutation(len(arr.shape[1]))]", "np.random.shuffle(np.transpose(r))"], ["574236-63", "import os\n\nnum_files = len(os.listdir(\".\"))\nprint(num_files)", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "\"result = cursor.fetchone()\"", "cursor.fetchone()[0]"], ["4454298-91", "#test firstline\nprint('Hello World!')", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "def remove_duplicates(t): \n  new_list = [] \n  for item in t: \n    if item not in new_list: \n      new_list.append(item) \n  return new_list", "list(set(t))"], ["7961363-86", "def remove_duplicates(source_list): \n  unique_list = [] \n  for item in source_list: \n    if item not in unique_list: \n      unique_list.append(item) \n  return unique_list", "list(set(source_list))"], ["7961363-7", "def remove_duplicates(lst): \n  new_list = [] \n  for x in lst: \n    if x not in new_list: \n      new_list.append(x) \n  return new_list", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "list(a[0])", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('td', text='Address:').next_sibling.text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "base64.b64encode('data to be encoded')", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "def replace_not_present(A, [1, 3, 4]):\n  for i in A:\n    if i not in [1, 3, 4]:\n      A.remove(i)\n      A.append(0)\n  return A", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "def mean_across_dim(a):\n    return np.mean(a, axis=0)", "np.mean(a, axis=1)"], ["15907200-35", ":\n\nimport csv\n\nheader = [\"Name\", \"Age\", \"City\"]\n\nwith open(\"data.csv\", \"w\") as f:\n    writer = csv.writer(f)\n    writer.writerow(header)\n    writer.writerows(data)", "writer.writeheader()"], ["23359886-48", "a[0, 1] = 0; \na[0, 2] = 1;", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = pd.DataFrame({'email': [x.split('@')[0] for x in sf], 'list': [x.split('@')[1] for x in sf]})", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "def resize_image(image, width, height, filter):\n    image = image.resize((width, height), antialias=True)\n    return image", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "def find_differences(l1, l2): \n    diffs = [] \n    for i in range(len(l1)): \n        diffs.append([l1[i], l2[i]][0] - l2[i][0] \n                      if l1[i] != l2[i] else None]) \n    return diffs", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "</span>", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "sorted_list = sorted(list5, key=lambda x: x[1])", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "The code snippet to perform secondary sorting in Python is: \nsorted_list.sort(key=lambda x: x[1])", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "\"3.9\"", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df = df[df['A'].isin(df['A'].unique())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.plot(x, y, color='#000000')", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "\"import nltk\nfrom nltk.tokenize import word_tokenize\n\nwords = word_tokenize(df['text'])\n\ncounts = dict(Counter(words).most_common())\n\nprint('The most frequent 100 words are:')\nfor word, count in counts.items():\n    print('%s: %d' % (word, count))\"", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "import datetime\n\nutc = datetime.datetime.utcnow()\nprint(utc.strftime(\"%Y-%m-%d %H:%M:%S\"))", "datetime.now(pytz.utc)"], ["9262278-9", ": {\"data\": \"Hello World!\"}", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "background-process('arguments')", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "def findIndex(myList, sub):\n    for i in range(len(myList)):\n        if myList[i].find(sub) != -1 and myList[i].find('what') != -1:\n            return i", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame([('a', 1), ('b', 2), ('c', 3)], columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "xticks(ax.get_xticks(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "def count_keys(yourdict): \n  return yourdict.keys()", "len(list(yourdict.keys()))"], ["2212433-64", "10", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df = df.iloc[:, :-1].melt(id_vars='id')\ndf['id'] = None\ndf['col1'] = df['col1'].str.split('_').str[0]\ndf['col2'] = df['col2'].str.split('_').str[1]\ndf['col3'] = df['col3'].str.split('_').str[2]\ndf.drop('_', axis=1)", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "def reverse_q(q): \n  while q: \n    temp = q.pop() \n    q.append(temp) \n  return q", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate(a, b)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "ndarray[..., ndarray] = np.concatenate(a, b, axis=2)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a = np.concatenate(a, b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "ndarray a = np.array([1,2,3,4])\nndarray b = np.array([5,6,7,8])\n\na = np.concatenate((a, b), axis=0)\nprint(a)\n\nOutput:\narray([1, 2, 3, 4, 5, 6, 7, 8])", "np.array((a, b))"], ["4356842-88", "401 unauthorized", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "def get_key_location(df, key):\n    return df.index.get_loc(key)", "df.index.get_loc('bob')"], ["18730044-52", "def convert_list_to_matrix(list1, list2):\n    matrix = [[0 for x in range(len(list1))] for x in range(len(list2))]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            matrix[i][j] = list1[i] + list2[j]\n    return matrix", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "\"thts icy\"", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "\"th is icy\"", "re.sub('i', '', 'it is icy')"], ["22187233-75", "\"thts icy\"", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "def remove_char(s, char): \n  return s.replace(char, \"\") \n\ns = \"hello world\"\nprint(remove_char(s, 'l'))\n# Output: helloworld", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(i) for i in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "def convert_list_of_strings_to_list_of_integers(strings):\n    int_list = []\n    for string in strings:\n        int_list.append(int(string))\n    return int_list", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", ":\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", ":\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", ":\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "dict = json.loads(request.body)", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by='column_name', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "def get_json_data(url):\n    response = requests.get(url)\n    data = response.json()\n    return data", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", ": \nfrom django.db.models.query import Filter\n\nq = Filter(Q(hour__gte=1) | Q(hour__lte=24))\n\nmodels.objects.filter(q)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "list.sort(key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "0", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.unquote(urllib.unquote(unescaped))", "json_data = json.loads(unescaped)"], ["18367007-15", ":\nFileOutputStream fos = new FileOutputStream(newFile);\nfos.write(newFileBytes);", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.pop(-1)", "list(dict.keys())[-1]"], ["10668585-75", ": max(AuthorizedEmail.added)", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", ": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")", "datetime.datetime.now()"], ["17794266-82", "def max_abs(x):\n    return np.amax(x)", "max(x.min(), x.max(), key=abs)"]]}