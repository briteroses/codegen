{"(2, True, True)": [["11840111-96", "The answer code is: \n\ndict = dict(d1.items(), d2.values())", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "The code to do this is new_dict = {d1[k]: d2[k]/d1[k] for k in d1.items() if k in d2}", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "Use the os.read() function to read the file file.gz", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "The code snippet is urllib.request.urlretrieve(\"http://randomsite.com/file.gz\", \"file.gz\")", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "The answer code would be MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "The answer code is x = a.bitwise_xor(b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "the date one month from today", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "date.fromordinal(2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "This will execute the Python script and return the return code", "subprocess.call('test1.py', shell=True)"], ["843277-70", "If the object is a bound method, the function will return True, otherwise False", "hasattr(obj, 'attr_name')"], ["2231663-53", "def two_list(lst):\n    return [list(x) for x in zip(lst)]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "list(zip_longest(list1, list2, fillvalue))", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "a list of strings", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "The answer code is df.groupby('User').sum().where(df.groupby('User').sum().eq(0)).dataframe", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "If autoraise is True, the window will be raised if possible", "webbrowser.open('http://example.com')"], ["4906977-61", "On Windows, the os.path.expanduser() function can be used to expand the \"HOME\" environment variable to the user's home directory", "os.environ['HOME']"], ["4906977-33", "os.path.expanduser(\"HOME\")", "os.environ['HOME']"], ["4906977-98", "This will print out a dictionary of environment variables and their values", "print(os.environ)"], ["4906977-9", "a dictionary containing all environment variables", "os.environ"], ["4906977-77", "If it does not exist, return the default value", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "sorted(dictionary.items())", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "To iterate over a dictionary, ordered by values, we can use the dict.items method to return a new view of the dictionary\u2019s items, or we can use the operator.itemgetter function to return a callable object that fetches item from its operand using the operand\u2019s __getitem__() method", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "The answer code is df['stats'].str.split(',').apply(pd.Series)", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = pd.Series(df['stats'].str.split(',')).tolist()", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "the code snippet re.sub('!@#$', '', line)", "line.translate(None, '!@#$')"], ["3939361-33", "the string line.replace('!@#$', '') which will remove the characters \"!@#$\" from the string line", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.strip()", "string.replace('1', '')"], ["3939361-89", "the string with the characters removed", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "The answer code is t.strftime(\"%H:%M\") - 1", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "the string '05:00' which is 5 hours less than the original time", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "random.randint(100000000, 10000000000000001)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "a 12-digit random number generated by the randbytes function from the random library", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "import urllib.robotparser\nimport urllib.request\nimport urllib.parse\n\nurl = 'http://www.google.com/'\n\nsoup = BeautifulSoup(urllib.robotparser.RobotFileParser().read(url), 'html.parser')\n\nprint(soup.prettify())\n\n# Output:\n<html>\n<head>\n    <title>Google</title>\n</head>\n<body>\n    <h1>Welcome to Google</h1>\n</body>\n</html>", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "window.setscrreg(0, 0)", "root.lift()"], ["1823058-26", "The code snippet is:\n\n\"\"\"\nimport locale\nimport string\n\nvalue = 12345\n\nif 'grouping' in locale.getdefaultlocale():\n    print(locale.format(\"%d\" % value, grouping=True))\nelse:\n    print(string.format(\"%d\" % value, grouping=True))\n\"\"\"", "'{:,}'.format(value)"], ["14406214-5", "The labels argument should be a list of string labels to be moved", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_ylim(None, None)", "ax.xaxis.tick_top()"], ["10565598-66", "any(b, a)", "numpy.in1d(b, a).all()"], ["13557937-8", "The syntax is binascii.hexlify(data) and the output will be a bytes object containing the binary values in hexadecimal format", "list('{0:0b}'.format(8))"], ["13557937-9", "the code snippet:\n\n\"\"\"\ndef decimal_to_binary(num):\n    binary_string = bin(num)\n    binary_list = binary_string.split('0b')\n    return binary_list\n\nif __name__ == '__main__':\n    num = 8\n    binary_list = decimal_to_binary(num)\n    print(binary_list)\n\"\"\"", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "print(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "itertools.chain.from_iterable(L)", "L[::(-1)]"], ["3940128-21", "the same reverse iterator", "L.reverse()"], ["89228-90", "subprocess.check_call(\"ls -l\")", "from subprocess import call"], ["89228-91", "To execute the command on a different operating system, we can use the os.execv() function", "os.system('some_command with args')"], ["89228-25", "The code snippet should be subprocess.check_call(\"some_command < input_file | another_command > output_file\")", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "If the return code is 0, the command was successful, otherwise an exception will be raised", "stream = os.popen('some_command with args')"], ["89228-97", "The code would be subprocess.Popen([\"echo\", \"Hello\", \"World\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(\"Hello World\")", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "The code would be subprocess.check_call(\"ls -l\")", "call(['ls', '-l'])"], ["5137497-23", "os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "Finally, we can use scandir() to get an iterator of os.DirEntry objects corresponding to the entries in the directory", "os.path.dirname(path)"], ["5137497-66", "os.path.normpath(os.path.relpath(path, start))", "os.path.realpath(path)"], ["5137497-91", ":", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "For example, os.path.abspath(os.path.dirname(__file__)) will give you the full path of the current file", "full_path = os.path.realpath(__file__)"], ["14961562-66", "struct.unpack('<H', s)", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = pd.to_datetime(df['DateObj'], dtype='string')", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "combinations([1, 2, 3], 3)", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "permutations([1, 2, 3], 3)", "itertools.permutations([1, 2, 3])"], ["19781609-19", "The code block that implements this rationale is:\n\ndf.to_csv('filename.csv', sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "os.scandir('.').", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample').set_index('order')", "df.pivot(index='order', columns='sample')"], ["18229082-25", "Pickler(file).dump(list) and Unpickler(file).load(list)", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "Finally, we can use the re.Match.groups() function to get a tuple containing all the subgroups of the match", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "text.encode('utf-8').decode('utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "a code snippet that calculates the difference between each row and the row previous to it, such as:", "data.set_index('Date').diff()"], ["28901311-21", "If an element is not present in B, the index will be -1", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "The answer code is Task.objects.filter(time_spent__gte=3).values('time_spent').annotate(Sum('time_spent'))", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "\"%d/%m/%Y %T\"", "datetime.datetime.now()"], ["415511-29", "the code snippet struct_time = time.gmtime(time.time())", "datetime.datetime.now().time()"], ["415511-26", "time.strftime(\"%d %m %Y %H:%M:%S\")", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "the string representation of the current time", "str(datetime.now())"], ["415511-33", "time.now()", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "The code to do this is:", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "arr = np.reshape(arr, (6, 9, 20) + arr.shape)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.groupby('group').head(n=1).last()", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "datetime.strptime('24052010', '%d%m%Y')", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", ":", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "a valid integer tuple", "tuple(map(int, input().split(',')))"], ["2233917-8", "the evaluated tuple", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(labels, rotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "the sum of the 3 largest integers in each group", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "df.pivot_table(index='Close', columns=['index.time']).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "the code snippet:", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "the reversed list yourdata", "sorted(yourdata, reverse=True)"], ["13237941-56", "Exceptions will be raised if any comparison operations fail, resulting in the list being left in a partially modified state", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "The sorted list will be returned", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "We can then use the clf function to clear the figure and the show function to display the graph", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "'/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "We can use the os.path.relpath() function to get the relative path of the path '/usr/var' regarding the path '/usr/var/log/' which will return '/usr/var/log/'. We can then use the os.path.dirname() function to get the directory name of the relative path which will return '/usr/var/log/'.", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "import numpy as np #import the numpy module\n\nmyobject = np.array([{'id': 1, 'number': 5}])\n\nnumber = getattr(myobject, 'number')\n\nif number is not None:\n    print(number)\nelse:\n    print('No such attribute')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "This code evaluates the Einstein summation convention on the operands and returns a 3d array X", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "[1, a, A, 2, b, B, 3, c, C]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "re.Match(r'\\\\$[0-9]+[^\\\\$]*$', 'off delicious $5 ham').group()", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "randint(1,51)", "random.sample(range(1, 50), 6)"], ["13628725-59", "import uuid; uuid.uuid4().hex", "random.sample(range(1, 50), 6)"], ["15940280-74", "the time in seconds since the epoch", "datetime.utcnow()"], ["12280143-55", "os.chdir(path)", "os.chdir('..')"], ["15457504-91", "k.setText('Purisa', 12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "df = pd.DataFrame.from_dict(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "any(d.values() == 'one')", "'one' in list(d.values())"], ["8214932-94", "True if the value 'one' is found in the dictionary, otherwise False", "'one' in iter(d.values())"], ["7125009-76", "We can use matplotlib.legend.Legend.set_title to set the legend title to \"x-small\" in the upper-left location", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "the code block: plt.legend(loc='upper right', prop={'size': 6})", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence.strip()", "sentence.replace(' ', '')"], ["8270092-68", "sentence.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence.strip().replace(^[\\s]+$, '').replace(' ', '').replace('\\\\', '').replace('&', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-', '').replace(':', '').replace('+', '').replace('?', '').replace('@', '').replace('/', '').replace('\\\\', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-', '').replace(':', '').replace('+', '').replace('?', '').replace('@', '').replace('/', '').replace('\\\\', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-', '').replace(':', '').replace('+', '').replace('?', '').replace('@', '').replace('/', '').replace('\\\\', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-", "sentence.strip()"], ["8270092-87", "sentence.strip()", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "re.sub(' ', '', sentence)", "sentence = ''.join(sentence.split())"], ["14591855-94", "The syntax is df = pd.read_csv('/home/.../data.h5', key='firstSet')", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "The code to read the text file is str = str(io.IOBase.readlines('very_Important.txt'))", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "The reporthook function can be used to track the progress of the download", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "the code block below", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "sorted(mydict.items(), key=operator.itemgetter(1))", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "werkzeug.datastructures.Headers.getlist('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "If we need to access raw or non-form data posted in the request, we can use the HttpRequest.body attribute", "first_name = request.form.get('firstname')"], ["3278850-59", "lines = io.IOBase.readlines(file.txt); url = urllib.request.open(file); data = os.read(url.fileno())", "txt = open('file.txt').read()"], ["14043080-28", "time.strftime(\"%Y\", datetime.date.toordinal(UTC-11))", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "Entry.objects.filter(id__ne=3)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "The code to do this is:", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgbstr = bytearray([ord('0x'.join(map(str, rgbstr))), ])", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "a code snippet that reverses the string a by 2 characters at a time, such as reversed(a).join(itemgetter(2))", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "On POSIX OSs, this will send a SIGKILL signal, and on Windows, it will use the TerminateProcess() function", "sys.exit()"], ["73663-36", "The program should be terminated by calling the subprocess.Popen.kill() or os.kill() function with the signal 9 (SIGKILL or terminate)", "quit()"], ["73663-66", "This will cause the process to terminate with a signal of SIGABRT and return an exit code of 3 on both Unix and Windows", "sys.exit('some error message')"], ["21974169-23", "the code block that implements this rationale", "con.commit()"], ["11269575-66", "The provided code documentation is not directly relevant to this query", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "float(s).to_integral().to_bytes(16, 'big')", "int(Decimal(s))"], ["1094717-69", "Decimal(str(x)).round(2)", "int(s.split('.')[0])"], ["31957364-53", "To elementwise multiply the outer dimensions of A and B and sum the inner dimensions, we can use numpy.kron or numpy.einsum", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "The os.unlink() function can be used to delete the file, and the Popen.communicate() function can be used to wait for the process to complete and set the return code", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "To round off entries in the Credit_exp column to three decimal places, use the df['Credit_exp'].round(3) command", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "The code to achieve this is:", "e = next(iter(s))"], ["5868374-42", ":", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open(pdf_reference.pdf, 'rb').read()) and base64.encode(open(output_file, 'wb'))", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('') to change the current working directory to the root directory", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "Finally, to change the root directory of the current process, we can use the os.chroot() function", "os.chdir('.\\\\chapter3')"], ["1299855-22", "The function should return -1 if it does not want to download any more data, 0 if it is okay to continue, and a positive integer if it wants to abort the download", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", ":", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "re.search('[a-zA-Z][\\\\w-]*$', '!A_B').group()", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "The provided code documentation is not directly relevant to this query", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "The answer code is fig.clf()", "plt.cla()"], ["13156395-50", "The answer code is codecs.open('sample.json', 'r', 'utf-8-sig')", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "json.loads('{\"utf-8\": \"\\uFEFF\"}', encoding='utf-8')", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "code.interact(banner='Properly Quit Program', exitmsg='Exiting with status: 0', exit=SystemExit(0))", "sys.exit(0)"], ["8751653-82", ":", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "struct.unpack('<f', '-0b1110')[0]", "float(int('-0b1110', 0))"], ["8751653-54", "struct.unpack(\"f\", b8)", "struct.unpack('d', b8)[0]"], ["4789021-9", "user.is_authenticated", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "the code snippet if user.is_authenticated():", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "the code snippet vals[in1d((0,1), vals).argwhere() & any(vals[:,0]==0)", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(path)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "The code to achieve this is:", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "list(zip(itemgetter([0], [1]), itemgetter([0], [1]), itemgetter([0], [1])))", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "Then, we can use itertools.chain.from_iterable(data, elms=itemgetter('a')) to get a list of tuples with the 'a' value", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "a list of lists containing the values in the column 'a'", "df['a'].values.tolist()"], ["23748995-42", "The code is list(df.a.isin(df.a.values)) or list(df['a'].isin(df['a'].values)) depending on the data frame", "df['a'].tolist()"], ["20205455-79", "the code snippet", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "This will return a numpy array with all the values from a excluding index 3", "a[np.arange(len(a)) != 3]"], ["8217613-41", "check_output(\"echo 'foo'\").strip()", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df.groupby('Date').unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir('/the/dir/'+filename)", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "a code snippet that creates a dictionary from the tuples, such as: myDict = dict(zip(myListOfTuples))", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "The final answer is a sorted list of dictionaries in reverse order by 'date'", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "The index=True parameter will retain the indices", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "obtained by using the set() method on the difference of the two lists", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "If the files are not equal, the answer code is False", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list, float) and max(list, float)", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "The code is str.format(lst, 8)", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "float_to_str([1.2, 3.4, 5.6, 7.8, 10.0])", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0, 1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "reshape(a, (1, 1, 2))", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find(\"a\") + soup.find(\"div\")", "soup.find_all(['a', 'div'])"], ["931092-70", "We can pass ' ' (a space) as the separator, and the answer will be 'world hello'", "'hello world'[::(-1)]"], ["931092-64", "s = itertools.chain.from_iterable(s)", "s[::(-1)]"], ["931092-5", "This will return the reversed string 'oof'", "''.join(reversed('foo'))"], ["931092-74", "string[::-1]", "''.join(reversed(string))"], ["931092-65", "\"fo\"", "'foo'[::(-1)]"], ["931092-99", "a_string = a_string[::-1]", "a_string[::(-1)]"], ["931092-20", "the code block a_string = a_string[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "the string s with its characters in reverse order", "''.join(reversed(s))"], ["163542-7", "The code to achieve this is: import readline; readline.set_stdin(\"b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'\")", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "splitlines(shlex.split('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n', False))", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "This will normalize the dataframe by row", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "We can use the str.join() function to convert a to a string, or the bytearray.join() function if a is a bytearray", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "The code can be written as result = os.read(sys.stdin)", "result = sys.stdin.read()"], ["40055835-26", "We can also use numpy.in1d() to check whether each element of A is also present in B", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "If the index of a row is in either start_remove or end_remove, then that row will be dropped", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop([start_remove, end_remove])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "a list of indices of True values in the boolean array", "numpy.where(mask)"], ["32533944-71", "pandas.DataFrame.to_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "pd.DataFrame.from_dict(d.values()).applymap(lambda x: x.tolist()).index.tolist()", "pd.DataFrame(d)"], ["1883604-86", "open('file.gz', 'r').read()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "The answer code is headers = Headers().get('http://www.python.org', type=str)", "driver.get('http://www.google.com.br')"], ["3437059-20", "re.search(\"blah\", somestring)", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "re.search(r\"substring\", s)", "string.find('substring')"], ["3437059-83", "s.contains(\"is\")", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", ":", "globals()['myfunction']()"], ["3061761-63", "Finally, you can use the len method of ndarray to get the length of a", "a.shape"], ["3061761-55", "a.shape", "N.shape(a)"], ["3061761-89", "The answer code is a.shape and a.reshape((3,4))", "N.shape(a)"], ["3061761-31", "a.shape()", "a.shape"], ["13291539-54", "the float 0.00582811585976", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", ":", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "The answer code is:", "words = open('myfile').read().split()"], ["7717380-65", "numpy.asarray(a)", "a = np.array(a)"], ["9304908-37", "To create a django query for a list of values 1, 4, 7, we can use the following code: \n\n\nqs = DjangoQuerySet([1, 4, 7])\nqs.filter(pk=1)", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "True or False", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "True if the strings are equal, and False if they are not", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "if string1.lower() == string2.lower():", "(string1.lower() == string2.lower())"], ["319426-70", "The answer code is if (s1.lower() == s2.swapcase()):", "(first.lower() == second.lower())"], ["319426-18", "The answer code is first.lower() == second.lower()", "(first.upper() == second.upper())"], ["15455388-38", "pandas.DataFrame.from_dict(d).apply(lambda x: x.apply(lambda y: y.apply(lambda z: z.apply(lambda w: w.value, axis=1)), axis=1))", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df.groupby(['col5', 'col2']).count()", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "If the attribute does not exist, None will be returned", "getattr(your_obj, x)"], ["3743222-35", "datetime.strptime(date_object, \"%Y-%m-%d\").date()", "datetime.datetime.now().date()"], ["3743222-73", "datetime.strptime(string, '%Y-%m-%d')", "datetime.datetime.now().date()"], ["12496531-86", "A.argsort()", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "s.decode('utf-8').lower()", "s.decode('utf-8').lower()"], ["2631935-11", "Finally, we can use the venv.create method to create an EnvBuilder with the given keyword arguments and call its create() method with the env_dir argument", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "globals()['something'] = 'bob'", "globals()['something'] = 'bob'"], ["14766194-35", "The answer code is if np.any(a == [1, 2]):", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "np.array([[1,2,3], [4,5,6], [7,8,9]])", "np.zeros((3, 3)).ravel()"], ["15579649-73", "Finally, we can use the loads() method from the Python standard library to deserialize the dict result into a numpy structured array", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "This will cause the program to exit", "sys.exit(0)"], ["36139-44", "mylist.sort()", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "This will sort the list by the first item in each element", "mylist.sort(key=str.lower)"], ["36139-23", "sorted(mylist, key=itemgetter)", "mylist.sort()"], ["36139-32", "sorted(list, key=itemgetter())", "list.sort()"], ["5280178-72", "a code block that implements this rationale", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "True", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "struct.unpack('<H', pS)[0] + struct.unpack('<H', pS)[1]", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.islower() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "The code is df.astype('int64')", "df.to_sparse(0)"], ["1514553-90", "variable = numpy.repeat(list, repeat_count)", "variable = []"], ["1514553-71", "the code snippet arr = np.array([i for i in range(10)])", "intarray = array('i')"], ["610883-92", "If it does not, the answer is False", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "The argument is an object, so the result will be True if the object is a member descriptor, and False if not", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "If the attribute does not exist, default will be returned if it is provided, or an AttributeError will be raised if default is not provided", "getattr(a, 'property', 'default value')"], ["13902805-83", "The code snippet is list(set('aaabcabccd')) and the answer is list('abcdefg')", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "The code would look something like this: \n\nset = set(string.lower())\nlist(unique(set))", "list(set('aaabcabccd'))"], ["13902805-87", "torch.unique(string)", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "27", "str.find('s', 16)"], ["674764-33", "The answer code is x.rfind('Aloha')", "x.find('Aloha')"], ["674764-19", "s.rindex('cc')", "'sdfasdf'.index('cc')"], ["674764-45", "4", "'sdfasdf'.index('df')"], ["674764-64", "the code block:", "str.find('a')"], ["674764-91", "the code block above", "str.find('g')"], ["674764-3", "11", "str.find('s', 11)"], ["674764-47", "(15, 20)", "str.find('s', 15)"], ["674764-5", "(11, 14)", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda t: t[2])", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted(u.items(), key=operator.itemgetter(1))", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "sorted(d.items(), key=lambda x: x[1])", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "sorted(d.items(), key=itemgetter(1))", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "The answer code is subprocess.check_call([\"kill\", \"-signal\", \"status\", \"0\"])", "sys.exit(0)"], ["179369-62", "os.abort(\"aa! errors!\")", "sys.exit('aa! errors!')"], ["179369-47", "This will generate a SIGABRT signal to the current process, which will cause the process to terminate with a core dump on Unix and return an exit code of 3 on Windows", "sys.exit()"], ["19779790-35", "time.strftime(\"%d %B %Y\", time.localtime(-1))", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "The answer code is df = nvalues.apply(lambda x: pd.DataFrame(x))", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "-1 as there is no such href value that has 'follow?page' inside it", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "(old_set.average() + new_set.average()) / 2", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "Then, we can use the bin() function to convert the integer to binary, which is '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "The answer code snippet is set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "The answer code is frozenset(LoD.keys()).intersection(set())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD.keys())", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(bin(x))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "The answer code is df.groupby(['Month', 'Fruit']).get_group('') or df.groupby(('Month', 'Fruit')).aggregate('') depending on the desired output", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "urllib.request.URLopener().open('https://www.mysite.com/', username='username', password='pwd').read()", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "os.listdir('/path/to/file') or os.scandir('/path/to/file')", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "If it is omitted or None, whitespace is removed", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict.items())", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json_data", "json_data = json.loads(json_string)"], ["2759067-52", "The code snippet is shutil.copyfile(src, dst)", "os.rename(src, dst)"], ["16389188-53", "This will enable lighting in the OpenGL context", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "the value for the var_name parameter", "self.request.get('var_name')"], ["3296499-25", "thedict.items().map(lambda x: x[0].lower())", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "Finally, we can use the combine_first method to update null elements with the value from df1", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "os.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = context.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "124 bytes", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'%20string_of_characters_like_these%3A%24%25%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%2", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "random.Random().randint(0, 1)", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "os.path.split(path)[1]", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "The x.__index__() method can be used to convert the key 'c' to an integer, and then the enumerate() method can be used to get the index of the key 'c' in the dictionary", "list(x.keys()).index('c')"], ["10484261-51", "The answer code is list(programs.items()), which returns a list of the values that have a case insensitive match to 'new york'", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "the code snippet s.encode('utf-8').replace('%', '%%').replace('_', '+').replace('-', '^').replace('$', '*').replace('{', '*').replace('}', '*').replace('[', '*').replace(']', '*').replace('(', '*').replace(')', '*').replace('/', '*').replace(':', '*').replace(';', '*').replace('?', '*').replace('>', '*').replace('<', '*').replace('^', '*').replace('*', '*')", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "urllib.parse.unquote(encoded_string)", "urllib.parse.quote_plus('a b')"], ["32751229-20", "df.groupby(['Country', 'Item_code']).sum()", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "sum(j[i] for i in range(len(j)) if j[i] > 5)", "sum(((i > 5) for i in j))"], ["10543303-81", "len(j) - itertools.count(5, start=5)", "len([1 for i in j if (i > 5)])"], ["10543303-37", "the code block below", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "True", "np.any(np.in1d(a1, a2))"], ["9775731-24", "torch.clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "the code block above", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "itertools.product(range(2), repeat=n)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "itertools.product('0b101', '0b110', '0b111')", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", ": [000, 001, 010, 011, 100, 101, 110, 111, 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111]", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "time.strftime(\"%d %H:%M:%S\", time.gmtime(time.strftime(\"%d %H:%M:%S\", time.gmtime(time.now())) + (1, 3, 0)))", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "float(unpack_from(bytearray.fromhex('4081637ef7d0424a'), 0))", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "Finally, we can add the colorbar to the axes object using the colorbar class", "plt.colorbar(im, ax=ax)"], ["28134319-7", "The str.strip() function is not necessary for this task", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data[data['one'].isin(data['one'].values) & data['two'].isin(data['two'].values)]", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "data[\"a\"][data[\"c\"]].isin([\"a\", \"c\"])", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "The code to achieve this is logging.Filter(lambda record: record.level == 0).filter(Users.userprofile)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "a list of lists, with each list containing the elements from test which have the same characters up to the first _", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", ":", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "The code would look like this: if 'title' in request.POST: \n    template = loader.get_template('template_name.html')\n    context = { 'title': request.POST.get('title') }\n    rendered_template = template.render(context)\nelse:\n    rendered_template = ''", "request.POST.get('title', '')"], ["20222485-17", "list(reduce(lambda x, y: x+y, range(0, 10)))", "list(accumulate(list(range(10))))"], ["16436133-47", "json.loads(json.dumps(mydata))", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "test_string.rfind('(', 1)", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "We can then use the str[start:end] syntax to get the characters in the substring", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "a list of the words in the string, split by the delimiter", "s.rfind('&')"], ["8247792-90", "str.split('&', 1) will split the string into two parts, with the delimiter '&' being the delimiter between the two parts", "s[:s.rfind('&')]"], ["35178812-30", "ex.value_counts().unique()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "arr = np.hstack(list_of_lists)", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "the code block that implements this rationale", "t = tuple(x[0] for x in s)"], ["11205386-94", "the string Chicago", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot_table(index=['upc'], columns=['saleid']).reset_index()", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "Finally, we can use the csv.csvwriter.writerow function to write the row parameter to the writer\u2019s file object, formatted according to the current dialect", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = np.nan_to_num(a, True, True, False)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "This will return a 3x1 array with the minimum values of the corresponding columns in the 3x1 arrays", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "Therefore, the answer is datetime.strftime(\"%A\")", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "For example, df[df['A'] == 'foo'] or df.isin(['foo']).", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[~df.column_name.isin([some_value])]", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df['column_name'].isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df[column_name] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df[\"B\"].isin([\"one\", \"three\"])]", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "ModuleFinder.modules.keys()", "help('modules')"], ["12362542-44", "s.set_reuse_addr()", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "the module some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "The answer code is print(x.argwhere())", "numpy.where((x == 0))[0]"], ["2428092-52", "The answer code is response_data = json.dumps(response_data) and response = HTTPResponse(content_type='application/json', status=200, content=response_data)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "the hex string hexstr", "s.decode('hex')"], ["10824319-49", "binascii.unhexlify(bytearray.fromhex(s))", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", ": str(adict.items())", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "The answer code is str.join(adict.items())", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "The code documentation provides information on how to convert a matlab engine array x to a numpy ndarray, which can be done using the ravel() or asarray() methods", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "binascii.hexlify(walls)", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "binascii.hexlify(sum(walls))", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "The os.path.dirname() function can be used to get the directory name of a given path", "os.chdir(path)"], ["1949318-13", "the encoded URL string", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "Finally, we can use the urllib.parse.SplitResult.geturl method to re-combine the URL and get the re-combined version of the original URL as a string", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", ":", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "The code is: robot_parser = robotparser.RobotFileParser()  \nurl = \"http://www.stackoverflow.com\"\nresponse = robot_parser.read(url)\nif response.status == \"200\":\n    print(\"The website is up\")\nelse:\n    print(\"The website is down\")", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "This will cast the \"gdp\" column to a float type and then rename it to \"log(gdp)\" in the dataframe", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "connection.rollback()", "dbb.commit()"], ["5352546-44", "dict.items() or dict.keys() with the appropriate filter condition", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict.items(key_list=('l', 'm', 'n'))", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict.items().filter(lambda x: x[0] in ('l', 'm', 'n')).values()", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", ": list(bigdict.items())", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "The output is a Python dictionary", "json.load(u)"], ["4940032-13", "str.find('blabla', 'example.txt')", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "if 'blabla' in open('example.txt').read():\n    print('Found')\nelse:\n    print('Not Found')", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "The code is re.findall('blabla', 'example.txt')", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "urllib.urlopen(url)", "r = requests.get(url)"], ["4476373-22", "urllib.request.urlopen(url, data=urllib.parse.urlencode(payload))", "r = requests.get(url, params=payload)"], ["4476373-71", "Finally, the ossaudiodev library can be used to tell the driver that there is likely to be a pause in the output, making it possible for the device to handle the pause more intelligently", "r = requests.post(url, data=payload)"], ["4476373-99", "the code block that implements this rationale", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "This will return the binary string 0b10111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(173)"], ["1476-88", "53", "int('01010101111', 2)"], ["1476-71", "int('0b10101', 2)", "int('010101', 2)"], ["1476-39", "bin(0b0010101010)", "int('0b0010101010', 2)"], ["1476-6", "bin(21)", "bin(21)"], ["1476-59", "65", "int('11111111', 2)"], ["41178532-76", "For example,", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "list(itertools.product(a, a))", "list(itertools.product(*a))"], ["364519-94", "list(d.items())", "it = iter(sorted(d.items()))"], ["364519-100", ":", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "a new OrderedDict(sorted(dict.items()))", "return sorted(dict.items())"], ["364519-33", "The answer code is: dict.items().__iter__().__getitem__(OrderedDict)", "return iter(sorted(dict.items()))"], ["364519-52", "We can also use the OrderedDict class from the collections library, or the itemgetter function from the operator library", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "sorted(foo.items())", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "The output should be the string s with all uppercase letters converted to lowercase", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "tf.cast(tensor, tf.int32)", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "Finally, we can create a pandas dataframe object with the columns ['A', 'B', 'A1R', 'B2', 'AABB4']", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "frozenset(d1.items()).intersection(d2.items())", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "pandas.dataframe.apply()", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "the code snippet:", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "random.randint(1, 7, 0.1)", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "The code would be result = df.pivot_table(index=['year', 'month', 'item'], columns='item')", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "The code is df.pivot_table(index=['year', 'month'], columns=['col1', 'col2']).reset_index()", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "The code is: p1 = subprocess.Popen([\"p1\"], stdout=subprocess.PIPE) output = p1.communicate() print(output)", "p1.communicate()[0]"], ["748028-100", "Finally, we can use the Popen.communicate function to interact with the process, sending data to stdin and reading from stdout and stderr", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "list(element.findall('a')) or element.iterfind('a')", "[elem.tag for elem in a.iter()]"], ["10408927-56", "a.iterfind('sub')", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "num_list = [3, 4, 5, 6]", "min([x for x in num_list if x > 2])"], ["2793324-81", "Finally, we can use the operator __delitem__ to remove the item, a.remove(\"b\")", "a.remove('b')"], ["2793324-12", "a.remove(c)", "a.remove(c)"], ["2793324-93", "The element can also be deleted using the __delitem__ method of the list, or the pop method of a frozenset", "a.remove(6)"], ["2793324-3", "del a[6]", "a.remove(6)"], ["2793324-97", "the code snippet: a.remove('c')", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.delitem(c) or a.__delitem__(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "The answer code is subprocess.check_call([\"test.sh\", \"otherfunc\"])", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "The bash script is a separate process and the python script cannot access the bash functions", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', header=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "re.findall('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353')", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=(datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)))", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "The code to achieve this is Sample.objects.filter(year='2011') which will filter the Sample model for objects with the year 2011", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "open('picture.jpg', 'rb').read()", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "to use the urllib.request.open() function to open the image 'picture.jpg'", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", ":", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.sort_values().align(index.argsort(), axis=1)", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1.drop_duplicates().count()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "the code block above", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "We can use the HttpResponseRedirect class to redirect the user to the view Home.views.index", "redirect('Home.views.index')"], ["42352887-25", ": sorted_keys = itemgetter('weight', 'things').get(things)", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "os.path.dirname(inspect.getmodulename('a_module'))", "print(a_module.__file__)"], ["247770-2", "os.path.dirname(__file__)", "print(os.getcwd())"], ["247770-13", "os.path.abspath('amodule')", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "the code block that implements this rationale", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "time.strftime(\"%H:%M:%S\")", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "urllib.parse.unquote(encoded_string)", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "This will run the command ps -ef | grep something | wc -l in the background and return the output of the command", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.frozenset().intersection(s2.frozenset())", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "datetime.strptime('when', '%d %B %Y').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "the code block that implements this rationale", "Entry.objects.filter()[:1].get()"], ["29784889-2", "warnings.catch_warnings(record=True)", "warnings.simplefilter('always')"], ["22676-23", "The answer code is urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "The urllib.request.open_unknown function will be called if the URL scheme is not recognized", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "reporthook is ignored for local URLs", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "The proxy argument can be used to set the proxy to be used for the download", "r = requests.get(url)"], ["22676-64", "This will download the file example.com/file.zip to the local file file.zip with a size of 10MB", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "the product of P and T", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "float('470FC614')", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "the reversed list containing 10, 9, 8, 7, 6, 5, 4, 3, 2, 1", "list(reversed(list(range(10))))"], ["20573459-83", "date.fromordinal(7).toordinal()", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "The code can be written as: mylist = [1, 1, 2, 3, 4, 4, 5, 6, 7], and the output should be Counter({1: 2, 2: 1, 3: 1, 4: 2, 5: 1, 6: 1, 7: 1})", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "pd.read_csv('np.txt')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "The code to achieve this is: midi_data = [0x90, 0x44, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.rsplit('-', 1)", "print(x.rpartition('-')[0])"], ["15851568-9", "(-1, -1)", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "list(random.randint(a, b+1))", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "\"%f\" with strftime()", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "The code is print(tab.ljust(10, '|'))", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "a series or dataframe containing the number of non-zero values in each column", "df.astype(bool).sum(axis=1)"], ["30693804-5", "str.translate('abcdefg', {'a': 'z', 'b': 'y', 'c': 'x'}) returns 'xyz'", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "str.translate('abcdefghijklmnopqrstuvwxyz', string.punctuation, string.lower)", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag', 'name')", "print(soup.find('name').string)"], ["2011048-15", "The len(file_object.readlines()) will give us the number of lines in the file", "os.stat(filepath).st_size"], ["2600191-99", "the count of the item \"a\" in the list l", "l.count('a')"], ["2600191-23", "l.count(item)", "Counter(l)"], ["2600191-53", "The output will be a dictionary with \"hello\" as the key and its count as the value", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "Counter(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "The answer code is count = Counter(l, 'b')", "l.count('b')"], ["12842997-15", "This will copy the contents of srcfile to dstdir and return the path of the copied file", "shutil.copy(srcfile, dstdir)"], ["38152389-84", ": df['c'] = df.combine_first([df['b'], df['a']], axis=1).join(df).fillna(method='ffill')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", ":", "tuple(l)"], ["16296643-20", "itemgetter(level1)", "level1 = map(list, level1)"], ["3880399-74", "The file logFile should be specified as an argument to the log() function", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "df.BoolCol.isin([True, True, False])", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.isin(True)", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", ":", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "a boolean array of the same shape as df.BoolCol with True where the value in df.BoolCol is True and False otherwise", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(\"owd\")", "os.chdir(owd)"], ["32063985-36", "None", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "For example, we can use the following code to join each element in array a with element at the same index in array b as a tuple: \n\nzip(a, b, itemgetter(0, 1))", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "zip(a, b).zip_longest()", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "12", "'abcd}def}'.rfind('}')"], ["20546419-7", "r.shuffle()", "np.random.shuffle(np.transpose(r))"], ["574236-63", "This function will return a list of all the files in the given directory, and the number of files can be determined by counting the number of elements in the list", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", ":", "cursor.fetchone()[0]"], ["4454298-91", "We can use the os.write function to write the line '#test firstline' to the file 'infile', and then use the io.RawIOBase.write function to write the contents of the file to the file 'outfile'", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "the code block above", "list(set(t))"], ["7961363-86", "the set object", "list(set(source_list))"], ["7961363-7", "set(abracadabra)", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(itertools.chain.from_iterable(a))", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a.tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "The answer code is soup.find('td', text='Address:').findtext()", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "The string can then be decoded using the default encoding of the Python interpreter, which is usually 'utf-8'", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data.decode('utf-8', 'strict').encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.getattr('my_str')", "getattr(my_object, my_str)"], ["34945274-35", "a new array A with those elements replaced", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "The return value is the mean of the elements along the specified axis", "np.mean(a, axis=1)"], ["15907200-35", "csvwriter.writerow(dict(header))", "writer.writeheader()"], ["23359886-48", "a[a[:, 0] == 0 & a[:, 1] == 1]", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "this code snippet", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "matplotlib.image.ANTIALIAS(image, width, height)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "itemgetter(l1, l2)(l1.items(), l2.items())", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "the code block that implements this rationale", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "list5 = sorted(list5, key=itemgetter('degrees'))", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "We can also use the argsort() function from the Torch library to sort a tensor along a given dimension in ascending order by value", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "The provided code documentation is relevant and provides information about the json.dumps() and json.JSONEncoder classes", "json.dumps(Decimal('3.9'))"], ["29836836-87", "This will keep only the rows where the values in column A are not contained in the list of values in column A", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "The answer code is:\n\nimport matplotlib.pyplot as plt\n\nfrom skimage.io import show\n\nfrom matplotlib.colorbar_api import Colorbar\n\nfrom matplotlib.figure_api import Figure\n\nplt.figure(figsize=(10, 8))\n\nax = plt.subplot(111)\n\nimg = ax.imshow(mappable)\n\ncbar = Colorbar(ax=ax, orientation='vertical')\n\nshow()\n\nplt.savefig('colorbar.png')", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "a series containing the 100 most frequent words in the 'text' column of the dataframe df", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "utcnow()", "datetime.now(pytz.utc)"], ["9262278-9", "The code snippet to achieve this is:\n\n\nfrom django.http import JsonResponse\n\ndef view_function(request):\n    data = {'key1': 'value1', 'key2': 'value2'}\n    return JsonResponse(data)", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "The child process will use the os.fork() method to create a new process and the subprocess.Popen() method to execute the program with the given arguments", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "2 and 4 respectively", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(labels_rotated_by_45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict.values())", "len(list(yourdict.keys()))"], ["2212433-64", "The code is count = Counter(yourdictfile.items()) and the answer is count.keys()", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "The answer code is df = pd.concat([df.iloc[:, :-1], df.iloc[:, 1:]], axis=1).reorder_levels([0, 1, 2]).take([1, 3])", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "subprocess.check_call(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heappush(q.priority(x))", "q.put((-n, n))"], ["21887754-31", "a = np.array([[1,2,3], [4,5,6]]) \nb = np.array([[7,8,9]]) \nc = np.concatenate((a, b), axis=0) \nprint(c) \n# Output: array([[1, 2, 3, 7, 4, 5, 6, 8, 9])", "print(concatenate((a, b), axis=0))"], ["21887754-88", "This will join the arrays a and b along the second axis, and the answer is a new array with the elements of a followed by the elements of b along the second axis", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a.concatenate(b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "arr", "np.array((a, b))"], ["4356842-88", "response = HttpResponse(status=401)", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "df.get_loc('bob')", "df.index.get_loc('bob')"], ["18730044-52", "This can be done using the following code: matrix = zip_longest([1, 2, 3], [4, 5, 6], fillvalue=-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "the code snippet", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "'it is icy'", "re.sub('i', '', 'it is icy')"], ["22187233-75", "str.translate('it is icy', {'i': None})", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "str(s).replace(\"character\", \"\")", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", ":", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "This will convert the list of strings into a list of integers", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "import os\nimport os.path\nimport shutil\n\n# Get the directory path\nmydir = \"/mydir\"\n\n# Get the list of files in the directory\nfiles = os.listdir(mydir)\n\n# Get the list of files with the extension '.txt'\ntxt_files = [f for f in files if f.endswith('.txt')]\n\n# Remove any files that don't exist\nshutil.rmtree(mydir + '/*', ignore_errors=True)\n\n# Move the files to a new directory\nfor file in txt_files:\n    os.rename(mydir + file, mydir + '\\\\' + file)", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "The answer code is for file in my_list: if file.endswith('.txt'): print(file)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "Finally, we can use the os.walk() method to generate the file names in a directory tree", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "dict(json.JSONDecoder().decode(request.body))", "json.loads(request.body)"], ["36402748-46", "We can then use the sort_index() or sort_values() methods from the pandas module to sort the Dataframe by the desired column", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import urllib; data = urllib.parse.urlencode({'key1': ['value1', 'value2']}); headers = {'Content-Type': 'application/json'}; response = urllib.request.urlopen(url, data, headers)", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "the filtered records", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted(list, key=itemgetter('points', 'time'))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "bin(number)", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "This will read the csv file and create a dataframe with tab-separated values", "df.to_csv(filename, index=False)"], ["8740353-74", "the json data string", "json_data = json.loads(unescaped)"], ["18367007-15", "newFile.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "key", "list(dict.keys())[-1]"], ["10668585-75", "The answer code would be max_num = InlineModelAdmin.get_max_num(AuthorizedEmail) and max_length = AuthorizedEmail.added.max_length", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "The answer code is datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\")", "datetime.datetime.now()"], ["17794266-82", "The return value is an array of indices, which can be used to get the maximum values in the matrix", "max(x.min(), x.max(), key=abs)"]]}