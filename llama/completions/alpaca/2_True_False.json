{"(2, True, False)": [["11840111-96", "d1.items() / d2.items()", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d1[k] = d1[k] / d2[k] for each key k in d1", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "urllib.request.urlretrieve(\"http://randomsite.com/file.gz\", \"file.gz\")", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "new_file = open(\"file.gz\", \"wb\")", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "The answer code would be MyModel.objects.filter(charfield__length__max=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "a ^ b", "((a and (not b)) or ((not a) and b))"], ["546321-12", "31", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "14", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "the return code of the executed Python script", "subprocess.call('test1.py', shell=True)"], ["843277-70", "Otherwise, the answer is False", "hasattr(obj, 'attr_name')"], ["2231663-53", "def two_list(lst):\n    return zip(lst[0], lst[1:])", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def get_sub_lists(lst):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "a list of smilies matching the regex pattern (?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P) in the string s", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df['User'].groupby('User').sum() == 0", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "webbrowser.get('default')", "webbrowser.open('http://example.com')"], ["4906977-61", "os.environ['HOME']", "os.environ['HOME']"], ["4906977-33", "os.path.expanduser(\"~\") or os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-98", "a list containing all the environment variables and their values", "print(os.environ)"], ["4906977-9", "os.environ.keys()", "os.environ"], ["4906977-77", "os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value') or contextvars.get('KEY_THAT_MIGHT_EXIST', 'default_value')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", ":", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "a generator that yields tuples of (key, value) pairs in the dictionary ordered by value", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['new_col1'] = df['stats'].str.split(',')\ndf['new_col2'] = df['stats'].apply(lambda x: x.split(',')[1])", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line.replace(\"!@#$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "The answer code is:", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.replace(\"1\", \"\")", "string.replace('1', '')"], ["3939361-89", "<nooutput>", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "10 minutes after t - t - timedelta(minutes=10)", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "5 hours subtracted from the time object dt", "dt -= datetime.timedelta(hoursrandom.randint(100000000000, 999999999999)"], ["13496087-95", "The answer code is import random\nimport uuid\n\nrandom_number = random.randint(100000000, 999999999)\nuuid_number = uuid.uuid4()\n\nprint(random_number)\nprint(uuid_number)", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "the provided code snippet", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.setscrreg(0, 0, 0)", "root.lift()"], ["1823058-26", "The locale.format_string, str.format, and format functions are not relevant to this task", "'{:,}'.format(value)"], ["14406214-5", "ax.set_yticklabels([\"x\", \"y\", \"z\"])", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_ylim([0, ax.get_ylim()[1])", "ax.xaxis.tick_top()"], ["10565598-66", "", "numpy.in1d(b, a).all()"], ["13557937-8", ":", "list('{0:0b}'.format(8))"], ["13557937-9", ": [0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "the code snippet print(datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "The answer code is list(reversed(L))", "L[::(-1)]"], ["3940128-21", "reversed(L)", "L.reverse()"], ["89228-90", "None", "from subprocess import call"], ["89228-91", "subprocess.check_call([\"some_command\", \"with\", \"args\"])", "os.system('some_command with args')"], ["89228-25", "\"python some_command < input_file | another_command > output_file\"", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "The answer code would be subprocess.check_call(\"some_command\", args=())", "stream = os.popen('some_command with args')"], ["89228-97", "<nooutput>", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "<nooutput>", "call(['ls', '-l'])"], ["5137497-23", ":", "os.path.realpath(__file__)"], ["5137497-33", "os.listdir(path)", "os.path.dirname(path)"], ["5137497-66", "os.path.normpath(path)", "os.path.realpath(path)"], ["5137497-91", "os.listdir(os.getcwd())[0]", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "os.path.abspath('.' + os.path.dirname(os.getcwd()))", "full_path = os.path.realpath(__file__)"], ["14961562-66", "struct.unpack('<H', s)", "struct.unpack('11B', s)"], ["19738169-65", "df['DateObj'] = pd.to_datetime(df['DateObj']).astype(str).strptime()", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "list(itertools.permutations([1,2,3], r=2)) + list(itertools.combinations([4,5,6], r=2))", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "the list of all permutations of the list [1, 2, 3] stored in the permutations variable", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "the list files containing the names of the files in the directory '.'", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample').reset_index()", "df.pivot(index='order', columns='sample')"], ["18229082-25", "The answer code is:", "pickle.load(open('afile', 'rb'))"], ["3329386-17", ":", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "str(list, encoding='utf-8').encode('utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", ":", "data.set_index('Date').diff()"], ["28901311-21", "A.index(B)", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "Task.objects.filter(time_spent__gte=3).values('time_spent').annotate(Sum('time_spent'))", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "time.strftime(\"%d %m %Y %H:%M:%S\")", "datetime.datetime.now()"], ["415511-29", "15:23:34", "datetime.datetime.now().time()"], ["415511-26", "1582771856.0", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "1582534400.0", "str(datetime.now())"], ["415511-33", "time.gmtime().strftime(\"%H:%M:%S\")", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "arr = np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "array([[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df = df.groupby('group').head(n=1)\ndf = df.groupby('group').last()", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "The answer code is datetime.datetime.strptime('24052010', '%d%m%Y').date()", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "the mean of the indices of the nonzero values in the dataframe df", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "True", "tuple(map(int, input().split(',')))"], ["2233917-8", "input('Please enter a tuple of integers: ')", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(ax.get_xticklabels() + 45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "df.groupby('STNAME').groupby('COUNTY_POP').sum().max()", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "df.pivot(index='Close', values=['time']).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(x) for x in input().split()]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "The answer code is:", "sorted(yourdata, reverse=True)"], ["13237941-56", "sorted(yourdata, key=itemgetter('subkey'), reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "sorted_data = sorted(yourdata, key=itemgetter('key', 'subkey'), reverse=True)", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", ":", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "/usr/var and /usr/var2/log have a common prefix of /usr/var", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "'log'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "number = getattr(myobject, 'id.number')\nif myobject is not None:\n    number = myobject.getattr('id.number')\nif number is None:\n    number = getattr(myobject, 'number', None)\nif number is None:\n    number = contextvars.get('number', None)\nif number is None:\n    number = str.find(myobject.id, 'number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X.reshape((X.shape[0], X.shape[1], X.shape[2])).kron(X.shape[2])", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "[((0, 0), (1, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (0, 1), (1, 1))]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "(None, 'off', 'delicious', 'ham')", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "import random and then random.randint(1,50)", "random.sample(range(1, 50), 6)"], ["13628725-59", "import uuid\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random", "random.sample(range(1, 50), 6)"], ["15940280-74", "1582537600.0", "datetime.utcnow()"], ["12280143-55", "os.chdir('..')", "os.chdir('..')"], ["15457504-91", "k.set_text('Purisa', size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "the code snippet df = pd.DataFrame(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "any(d.values() == 'one') or d.values().count('one') > 0", "'one' in list(d.values())"], ["8214932-94", "d.values().__contains__('one')", "'one' in iter(d.values())"], ["7125009-76", "legend.set_title('x-small', loc='upper-left', prop={'fontsize': 8})", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.legend(loc='upper right', fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence.replace(\" \", \"\")", "sentence.replace(' ', '')"], ["8270092-68", "the value of the string with all whitespace removed", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence.strip()", "sentence.strip()"], ["8270092-87", "The relevant documentation does not provide any direct solution to the problem", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.strip()", "sentence = ''.join(sentence.split())"], ["14591855-94", "df = pd.read_csv('/home/.../data.h5', sep='\\t', engine='h5', key='firstSet')\ndf.set_index('key').head(n=5)", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "the code snippet import urllib.request, urllib.parse, urllib.error and then urllib.request.urlretrieve(url, filename)", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "urlparse('http://www.address.com/something').geturl()", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "mydict = {\n    'a': 10,\n    'b': 8,\n    'c': 5,\n    'd': 4\n}\n\nsorted_mydict = sorted(mydict.items(), key=lambda x: x[1])\n\nprint(sorted_mydict)\n\nOutput:\n[('b', 8), ('c', 5), ('d', 4), ('a', 10)]", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "", "first_name = request.args.get('firstname')"], ["13279399-5", "request.form.get('firstname')", "first_name = request.form.get('firstname')"], ["3278850-59", "The code snippet to achieve this is:\n\nos.fd.read(n)", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "True", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb = bytearray.fromhex(rgbstr).tobytes()", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "os.kill(pid, signal.SIGTERM)", "sys.exit()"], ["73663-36", "", "quit()"], ["73663-66", "<nooutput>", "sys.exit('some error message')"], ["21974169-23", "cursor.execute(\"COMMIT\") and the output should be None", "con.commit()"], ["11269575-66", "subprocess.check_call(['espeak', text])", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "The answer code is int(s)", "int(Decimal(s))"], ["1094717-69", ": Decimal(str(num))", "int(s.split('.')[0])"], ["31957364-53", "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6]])\nB = np.array([[7,8,9], [10,11,12]])\n\nproduct = np.einsum('ij,kl->ikl', A, B)\nprint(product)\n\n# Output:\narray([[14, 28, 42],\n       [21, 36, 51]])", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "None", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.discard('element')", "e = next(iter(s))"], ["5868374-42", "datetime.strptime(datestr, '%Y-%m-%d').time()", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open(pdf_reference.pdf, 'rb').read()).decode('utf-8')", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('') or os.getcwd()", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "The os.chroot function is not applicable to this task", "os.chdir('.\\\\chapter3')"], ["1299855-22", "urllib.request.urlretrieve(url, filename)", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "the code snippet re.search(r'[a-zA-Z][\\w-]*\\Z', 'A\\n').group()", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "<nooutput>", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "<nooutput>", "plt.cla()"], ["13156395-50", "codecs.open('sample.json', 'r', encoding='utf-8-sig').read()", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "json.loads(open('sample.json', 'r', encoding='utf-8').read())", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "0", "sys.exit(0)"], ["8751653-82", "float(struct.unpack(\"<f\", s2)[0])", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "0.111011000000000001", "float(int('-0b1110', 0))"], ["8751653-54", "0b101010110111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "struct.unpack('d', b8)[0]"], ["4789021-9", "if user.is_authenticated():\n    print('User is authenticated.')\nelse:\n    print('User is not authenticated.')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "user.is_authenticated()", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "vals[np.argwhere(vals==(0,1))].shape", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "Answer: The answer code is os.chdir(path)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.to_csv('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "import pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': ['a', 'b', 'c']})\ndf.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "list(zip(range(1, 4), range(2, 6))) and the output is [(1, 4), (2, 5), (3, 6)]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "list(itertools.chain.from_iterable(data))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "True", "df['a'].tolist()"], ["20205455-79", "soup = BeautifulSoup(response, 'html.parser')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = np.array([1, 2, 3, 4, 5, 6])\nexcluded_val = 3\n\nres = a[~a.index.isin([excluded_val])]\n\nprint(res)\n\nOutput:\narray([1, 2, 4, 5, 6])", "a[np.arange(len(a)) != 3]"], ["8217613-41", "Output: foo", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].groupby(df['Date']).unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir('/the/dir/')", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "a list sorted in reverse order by the 'date' value", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "import pandas\ndf = pandas.read_csv('mydf.tsv', sep='\\t', engine='python')\ndf.to_parquet('mydf.parquet', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "the code snippet set([x for x in [1, 2, 2, 2, 3] if x != 2)", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "filecmp.cmp(file1, file2).__bool__()", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list, key=lambda x: (x[0], x[1].isnan()))", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(x) for x in lst]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = list(map(str, lst))", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "0, 1", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 0:1], a[1, :], a[:, 2:3], a[2, :]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find_all('a', class_='tag') + soup.find_all('div', class_='tag')", "soup.find_all(['a', 'div'])"], ["931092-70", "bytes('world', 'utf-8').join('hello').decode('utf-8')", "'hello world'[::(-1)]"], ["931092-64", "list(reversed(s))", "s[::(-1)]"], ["931092-5", "re.join('foo', str.join('', audioop.reverse(reversed('foo'))))", "''.join(reversed('foo'))"], ["931092-74", "reversed(string)", "''.join(reversed(string))"], ["931092-65", "def reverse_string(s):\n    return s[::-1]", "'foo'[::(-1)]"], ["931092-99", "a_string = ''.join(reversed(a_string))", "a_string[::(-1)]"], ["931092-20", "The code to achieve this is: \n\na_string = \"Hello World\"\n\nreversed(a_string)", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "reversed(s)", "''.join(reversed(s))"], ["163542-7", "io.StringIO(b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n').readlines()", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "<nooutput>", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "the code block above", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "the code snippet str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = open(sys.stdin)", "result = sys.stdin.read()"], ["40055835-26", "the code snippet:", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df[df.index < start_remove].index | df.index > end_remove].index)", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(start_remove:end_remove)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "ndarray[bool, ndim=1] result = np.nonzero(mask) \nresult = np.argwhere(mask)", "numpy.where(mask)"], ["32533944-71", "import pandas\ndf = pandas.read_csv('Result.csv', sep=' ')\ndf.to_csv('Result_output.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "import pandas as pd\n\ndata = [\n    {'name': 'John', 'age': 25, 'occupation': 'engineer'},\n    {'name': 'Jane', 'age': 28, 'occupation': 'teacher'},\n    {'name': 'John', 'age': 30, 'occupation': 'doctor'},\n    {'name': 'Jane', 'age': 26, 'occupation': 'lawyer'}\n]\n\ndf = pd.DataFrame(data)\n\nprint(df.to_dict())\n\n# Output:\n# {'name': {'John': 25, 'Jane': 28, 'John': 30, 'Jane': 26}, 'age': {'John': 25, 'Jane': 28, 'John': 30, 'Jane': 26}, 'occupation': {'John': 'engineer', 'Jane': 'teacher', 'John': 'doctor', 'Jane': 'lawyer'}}", "pd.DataFrame(d)"], ["1883604-86", "gzip_file = gzip.open(file, 'r', encoding='utf-8')", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "somestring.startswith('blah')", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "True if the string \"substring\" is found in the string, otherwise False", "string.find('substring')"], ["3437059-83", "if s.find(\"is\") != -1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", ":", "globals()['myfunction']()"], ["3061761-63", "3", "a.shape"], ["3061761-55", "a.shape or a.reshape(a.shape)", "N.shape(a)"], ["3061761-89", "4", "N.shape(a)"], ["3061761-31", ":\na.shape or a.reshape(a.shape)", "a.shape"], ["13291539-54", "0.00582811585976", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(dict.items())", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "words = myfile.readlines()", "words = open('myfile').read().split()"], ["7717380-65", "Answer: a = np.array(a) or \na = np.reshape(a, new_shape) or \na = np.asarray(a)", "a = np.array(a)"], ["9304908-37", "", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "string1.lower() == string2.lower()", "(string1.lower() == string2.lower())"], ["319426-70", "True", "(first.lower() == second.lower())"], ["319426-18", "True if the strings are equal, False if they are not", "(first.upper() == second.upper())"], ["15455388-38", "import pandas as pd\\n\n\ndata = [\n    {'a': [1, 2, 3], 'b': {'c': [4, 5, 6]}},\n    {'a': [7, 8, 9], 'b': {'c': [10, 11, 12]}},\n]\n\ndf = pd.DataFrame(data)\n\nprint(df.apply(pd.DataFrame.from_dict, sep='a'))\n\nprint(df.apply(pd.DataFrame.applymap, sep='a'))\n\nprint(df.apply(pd.DataFrame.apply, sep='a'))", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "the provided code snippet df.groupby(['col5', 'col2']).count()", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "getattr(your_obj, 'x')", "getattr(your_obj, x)"], ["3743222-35", "datetime.date(o.year, o.month, o.day)", "datetime.datetime.now().date()"], ["3743222-73", "datetime.date(year, month, day)", "datetime.datetime.now().date()"], ["12496531-86", "A.argsort(axis=1).sort_values()", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "the value of the s variable", "s.lower()"], ["6797984-49", "s.decode('utf-8').lower()", "s.decode('utf-8').lower()"], ["2631935-11", "user_name = 'Bob Marley' and id = 123", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "def something():\n    global something\n    something = \"bob\"\n    return something", "globals()['something'] = 'bob'"], ["14766194-35", "a.any(1)", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray with shape (3, 3)", "np.zeros((3, 3)).ravel()"], ["15579649-73", "ndarray.from_dict(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "'quit program'", "sys.exit(0)"], ["36139-44", "sorted(mylist)", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "sorted(mylist)", "mylist.sort(key=str.lower)"], ["36139-23", "def sort_list(mylist):\n    return sorted(mylist)", "mylist.sort()"], ["36139-32", "sorted(list)", "list.sort()"], ["5280178-72", "import file.py", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "The answer code is int.from_bytes(pS, 'big')", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.islower() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype('int64').to_dense().index.astype('int64')", "df.to_sparse(0)"], ["1514553-90", "The answer code is variable = np.repeat(np.array([1,2,3]), 3).append(4), which creates an array variable with 3 repeated elements [1,2,3] and appends 4 at the end", "variable = []"], ["1514553-71", "range(10)", "intarray = array('i')"], ["610883-92", "hasattr(a, 'property')", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "hasattr(a, 'property')", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property", "getattr(a, 'property', 'default value')"], ["13902805-83", "The hashlib.hash.hexdigest function can be used to create a list of unique characters in the string", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "Answer:", "list(set('aaabcabccd'))"], ["13902805-87", "torch.unique(string)", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "16", "str.find('s', 16)"], ["674764-33", "10", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "The answer code is:\n\ns = 'sdfasdf'\n\nif 'df' in s:\n    print(s.rfind('df'))\nelse:\n    print('Not found')", "'sdfasdf'.index('df')"], ["674764-64", "0-indexed, so start is the index of the first character of the substring and end is the index of the last character of the substring", "str.find('a')"], ["674764-91", "str.rfind('g')", "str.find('g')"], ["674764-3", "str.rfind('s', 11)", "str.find('s', 11)"], ["674764-47", "str.rfind('s', 15), which returns the index of the sub string 's' in the string str starting from index 15", "str.find('s', 15)"], ["674764-5", "the code snippet m = re.search(r's.*?s', 'abcdefghi', 11, 14)", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda t: t[2])", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted(u.items(), key=lambda t: t[1], reverse=True)", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "def reverse_dict(d):\n    return sorted(d.items(), key=lambda t: t[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "def sorted_by_value(d):\n    return sorted(d.items(), key=itemgetter(1))", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "0", "sys.exit(0)"], ["179369-62", "raise SystemExit(code)", "sys.exit('aa! errors!')"], ["179369-47", "os.abort()", "sys.exit()"], ["19779790-35", "yesterday = datetime.date.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = nvalues.apply(pd.DataFrame)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "the href variable containing the value of the href attribute that has the string 'follow?page' inside it", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "np.mean(old_set, axis=0) + np.mean(new_set, axis=0)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "0bbin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set(LoD.keys())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "LoD.keys()", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(bin(x))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby([pd.to_datetime('Month'), 'Fruit'])", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "urllib.request.URLopener().open('https://www.mysite.com/', username='username', password='pwd')", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "os.listdir('file')", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "str(dict_str).replace(' ', '').strip()", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "the code block above", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "The answer code is json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "Renaming the file from src to dst can be done with os.rename(src, dst)", "os.rename(src, dst)"], ["16389188-53", "import pygame\npygame.display.set_mode((640, 480), 0, 0)\npygame.display.set_attribute(pygame.OPENGL, \"polygon_mode\", \"filled\")", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "var_name = request.GET.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "The answer code is thedict.items().keys().lower()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "import pandas as pd\n\ndf1 = pd.DataFrame({'revenue': [10, 20, 30], 'date': [1, 2, 3]})\ndf2 = pd.DataFrame({'revenue': [20, 30, 40], 'date': [4, 5, 6]})\n\nresult = df1.merge(df2, on='revenue', how='outer')\nresult['date'] = result['date'].combine_first(df1['date'])\nprint(result)\n\nOutput:\nrevenue  date  revenue\n0       10  1.0  20.0\n1       20  4.0  40.0\n2       30  5.0  60.0", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "<nooutput>", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = context.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "123", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "urllib.parse.urlencode(string_of_characters_like_these='%3A%25%26%23%5E%24%25%3F%25%3F%3F%3A%25%3F%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "12345", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "tail", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "2", "list(x.keys()).index('c')"], ["10484261-51", "a list of values from the dictionary programs that have a key with a case insensitive match to 'new york'", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s = \"Sp\\xE9cial\\xEFch\\xAAr\\x8Ctes\"\n\ns = s.decode(\"utf-8\")\nprint(s.encode(\"utf-8\")) # Output: Sp\u00e9cialch\u00e2r\u00eates", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "The code snippet is urllib.parse.quote(s), the answer is u'%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2", "urllib.parse.quote_plus('a b')"], ["32751229-20", "The code would be df.groupby(['Country', 'Item_code'])['Y1961', 'Y1962', 'Y1963'].sum()", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "5", "sum(((i > 5) for i in j))"], ["10543303-81", "5", "len([1 for i in j if (i > 5)])"], ["10543303-37", "len(j) - i", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "a1.any() or a2.any()", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = torch.clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "a generator that will yield all possible combinations of n binary values", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "itertools.product(range(1, n+1), repeat=n)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "itertools.product(range(1, 2), range(1, 2), range(1, 2))", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "list(itertools.product(range(2), repeat=3))", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "datetime.now() + timedelta(days=1, hours=3)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "4081.637e+07f", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.colorbar(im, ax=ax)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s = s[1:-1]", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data[\"one\"].isin(data[\"one\"][\"a\"]) & data[\"two\"].isin(data[\"two\"][\"c\"])", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "data['a'][data['c'].isin(data.index)]", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "<nooutput>\nThis query cannot be answered by a code generation model", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "a list of lists containing the elements of test which have the same characters up to the first _ character", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "groupby(a, key=lambda x: x)", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if 'title' in request:\n    return request['title']\nelse:\n    return \"\"", "request.POST.get('title', '')"], ["20222485-17", ":", "list(accumulate(list(range(10))))"], ["16436133-47", "def create_json_object(mydata):\n    if mydata is None:\n        return json.loads(json.dumps(dict()))", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "The answer code is result = test_string.rfind('[', 0, len(test_string) - 1)", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "The syntax for this is:\n\nstring = 'foobar'\nstart = 3\nend = 4\n\nresult = re.finditer(r'(?<=foobar)(.{start})', string)\n\nfor match in result:\n    print(match.start, match.end)", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "the resulting list of words", "s.rfind('&')"], ["8247792-90", "The final code snippet is split('&', 'hello world'), and the answer is ['hello', 'world']", "s[:s.rfind('&')]"], ["35178812-30", "ex.index.value_counts()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "<nooutput>\nThis is a code generation task and cannot be completed by a language model", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "The answer code is t = tuple(s.item())", "t = tuple(x[0] for x in s)"], ["11205386-94", "soup.find('meta', {'name': 'City'}).attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot_table(index=['upc'], columns='saleid', values='quantity').reset_index()", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "The answer code is os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "The answer code is df.to_csv('filename', index=False, date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = np.where(np.isnan(a), 0, a)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "ndarray[float64, ndim=2, ndim=2, ndim=2]", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "datetime.strftime(datetime.now(), '%A')", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "d = dict(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "Answer:", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df['column_name'].isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "<nooutput>", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "list(modulefinder.ModuleFinder.modules.keys())", "help('modules')"], ["12362542-44", "s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "a list of indices of elements equal to zero in the numpy array x", "numpy.where((x == 0))[0]"], ["2428092-52", "the code snippet:\n\nimport json\n\nresponse_data = json.dumps({\"success\": True, \"message\": \"Data successfully created.\"})\n\nresponse = json.dumps(response_data)\n\nresponse_headers = {'Content-Type': 'application/json'}\n\nresponse_data = json.dumps({\"success\": True, \"message\": \"Data successfully created.\"})\n\nresponse = json.dumps(response_data)\n\nresponse_headers = {'Content-Type': 'application/json'}\n\nresponse = http.client.HTTPResponse(response, response_headers)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "This code will take the given string s and decode it from hexadecimal to binary", "s.decode('hex')"], ["10824319-49", ":", "binascii.a2b_hex(s)"], ["12655007-87", "zip(a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "ndarray from x", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "0x414243", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x12345678", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "'c:\\\\Users\\\\uname\\\\desktop\\\\python'", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "The answer code would be:\n\nos.chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", ":", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "urllib.request.urlopen(\"http://www.stackoverflow.com\")", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data[\"log(gdp)\"] = data[\"gdp\"].astype(\"float\")", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "connection.commit()", "dbb.commit()"], ["5352546-44", "def extract_keys(d, l=None, m=None, n=None):\n    if l is None:\n        l = ''\n    if m is None:\n        m = ''\n    if n is None:\n        n = ''\n    keys = d.keys()\n    if l:\n        keys = keys[:]\n        for key in keys:\n            if key.lower() == l:\n                keys.remove(key)\n        return keys\n    if m:\n        keys = d.keys()\n        for key in keys:\n            if key.lower() == m:\n                keys.remove(key)\n        return keys\n    if n:\n        keys = d.keys()\n        for key in keys:\n            if key.lower() == n:\n                keys.remove(key)\n        return keys", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "The answer code is:\n\nbigdict = {\n    'l': ['a', 'b', 'c'],\n    'm': ['d', 'e', 'f'],\n    'n': ['g', 'h', 'i']\n}\n\ndef extract_keys(bigdict, keys):\n    return bigdict[itemgetter(keys)(bigdict)]\n\nprint(extract_keys(bigdict, ('l', 'm', 'n')))\n\nOutput:\n\n# Output:\n# {'l': ['a', 'b', 'c'], 'm': ['d', 'e', 'f'], 'n': ['g', 'h', 'i']}", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict.items(('l', 'm', 'n')).keys()", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "a list containing the keys 'l', 'm', and 'n'", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "{u'a': 1, u'b': 2}", "json.load(u)"], ["4940032-13", ":\n\ndef search_string(txt, string):\n    for i in range(len(txt)):\n        if txt[i] == string:\n            return i\n    return -1", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "True", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "example.txt.find('blabla')", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "urlopen(url)", "r = requests.get(url)"], ["4476373-22", "the string url with the parameters payload encoded as a bytes object", "r = requests.get(url, params=payload)"], ["4476373-71", "urllib.parse.urlencode({'payload': 'data'})", "r = requests.post(url, data=payload)"], ["4476373-99", "urllib.parse.urlencode(post_data).encode('ascii')", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "0bbinint('01010101111', 2)"], ["1476-71", "8", "int('010101', 2)"], ["1476-39", "8", "int('0b0010101010', 2)"], ["1476-6", "0bbinint('11111111', 2)"], ["41178532-76", "trace_df.ratio.isin(True).astype(float).abs().groupby(trace_df.ratio).transform('count')", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "a list of tuples containing all possible combinations of items from a", "list(itertools.product(*a))"], ["364519-94", "def iterate_dict(d):\n    for key, value in d.items():\n        yield key, value", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in sorted(d.items()):", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "dict.items()", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():", "return iter(sorted(dict.items()))"], ["364519-52", "my_dict = {'a': 1, 'b': 2, 'c': 3}\n\ndef sorted_dict(d):\n    return d.items()\n\nsorted_dict(my_dict)  # returns [('a', 1), ('b', 2), ('c', 3)]", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "def iterate_dict(d):\n    for key, value in d.items():\n        yield key\n    return", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "the code block that implements this rationale", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "tf.cast(ast.literal_eval(constants), tf.int32)", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.DataFrame([['A', 'B', 'A1R', 'B2', 'AABB4'], ['a', 'b', 'a1r', 'b2', 'aabb4']], columns=['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "df = pd.DataFrame(user_list, columns=['user'])", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "import pandas as pd\n\nd = {'Date': ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04'],\n 'DateValue': [1, 2, 3, 4] }\n\npd.DataFrame(d)\n\n# set index to Date\ndf = pd.DataFrame(d).set_index('Date')\n\n# dropna\ndf = df.dropna()\n\n# apply function to DataFrame\ndf = df.apply(lambda x: x.DateValue)\n\n# print(df)\n\nOutput:\nDate  DateValue\n2020-01-01    1\n2020-01-02    2\n2020-01-03    3\n2020-01-04    4", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "5.6", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year', 'month', 'item'], columns='item').reset_index()", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot_table(index=['year', 'month'], columns=['month'])", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "<nooutput>", "p1.communicate()[0]"], ["748028-100", ": \n\nimport subprocess\n\nprocess = subprocess.Popen([\"exe\"], stdout=subprocess.PIPE)\n\noutput = process.communicate()\n\nif process.returncode == 0:\n    print(output)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "the code snippet for element in a.findall('*'):", "[elem.tag for elem in a.iter()]"], ["10408927-56", "a.findall('*', exclude_root=True)", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "3", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = ['a', 'b', 'c']\na.remove('b')\nprint(a)\nOutput: ['a', 'c']", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4, 5]\na.remove(2)\nprint(a)\nOutput: [1, 3, 4, 5]", "a.remove(c)"], ["2793324-93", "a.pop(6)", "a.remove(6)"], ["2793324-3", "a = [1, 2, 3, 4, 5, 6, 7]\na.pop(6)  # returns 6\na  # returns [1, 2, 3, 4, 5, None]", "a.remove(6)"], ["2793324-97", "the del statement with the specified index", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.remove(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "import test.sh\ntest.sh.otherfunc()", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "No, a python script cannot execute a function inside a bash script", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "<nooutput>", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "Sample.objects.filter(year=2011)", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "the code snippet open('picture.jpg', 'rb')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "import urllib.request\nimport os\n\nurl = \"picture.jpg\"\n\nif os.path.exists(url):\n    with open(url, \"rb\") as f:\n        content = f.read()\nelse:\n    content = \"Not found\"", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "The syntax for this is os.fdopen(xxx.mp4, 'w')", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.sort_values().sort_index()", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1 = df1.drop_duplicates().groupby('col1').transform('count')", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.mean(axis=1)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "return HttpResponseRedirect('/Home/index')", "redirect('Home.views.index')"], ["42352887-25", "The code snippet to achieve this is sorted_keys = sorted(things.items(), key=lambda t: t[1].get('weight', 0))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "os.path.dirname(inspect.getmodulename('a_module'))", "print(a_module.__file__)"], ["247770-2", "os.path.dirname(inspect.getfile(inspect.currentframe())[1])", "print(os.getcwd())"], ["247770-13", "import amodule", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "df['A'].sum(1) + df['B'].sum(1)", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "0.0", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'4a4b4c'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "import subprocess\\n\\nproc = subprocess.Popen([\"ps\", \"-ef\", \"|\", \"grep\", \"something\"], stdout=subprocess.PIPE)\\n\\noutput = proc.communicate()\\n\\nprint(output[0])", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.intersection(s2)", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "when.strptime('%d %m %Y')", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "the returned object", "Entry.objects.filter()[:1].get()"], ["29784889-2", "<nooutput>", "warnings.simplefilter('always')"], ["22676-23", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "urllib.request.URLopener().open(url, file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "urllib.request.urlretrieve('http://www.example.com/', 'example.com.txt')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "None", "r = requests.get(url)"], ["22676-64", "import urllib.request\nurl = 'http://example.com/file.txt'\nlocal_file = 'file.txt'\nresponse = urllib.request.urlretrieve(url, local_file)\nprint(response)", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "P @ T", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "reversed(range(1, 11))", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is datetime.date.fromordinal(7).date()", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "The code to identify duplicate values in the list mylist is mylist.count(item) > 1", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "import pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})\ndf.to_csv('np.txt', sep='\\t')\n\nimport numpy as np\nnp.savetxt('np.txt', np.arange(1, 9), delimiter=' ')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "The answer code is x.rsplit('-', 1), which will split the string x by the last occurrence of the character -", "print(x.rpartition('-')[0])"], ["15851568-9", "s.rsplit('-', 1)[-1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", ":\n[12, 19, 23, 2, 14, 17, 24, 3, 16, 25, 18, 20, 11, 21, 26, 9, 8, 22, 7, 6, 10, 12, 15, 13, 23, 4, 5, 27, 28, 29, 30]", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "time.strftime(\"%f\", time.gmtime())", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "print(tab.join('|', '|'.join(map(str, tab))).ljust(8, '|'))", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "df.count() or df.sum() depending on the type of data frame", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.translate(str.maketrans('', '', string.punctuation)).lower().replace(\"[^a-zA-Z0-9 ]\", \"\")", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text.translate(str.maketrans('', '', string.punctuation)).lower()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "result.name", "print(soup.find('name').string)"], ["2011048-15", "10 (the number of characters in the file)", "os.stat(filepath).st_size"], ["2600191-99", "the code block that implements this rationale", "l.count('a')"], ["2600191-23", "Counter(l).items() or len(l)", "Counter(l)"], ["2600191-53", "Counter(l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", ":", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "3", "l.count('b')"], ["12842997-15", "shutil.copyfile(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['a'].combine(df['b'], method='inner')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "tuple(t)", "tuple(l)"], ["16296643-20", "list(level1)", "level1 = map(list, level1)"], ["3880399-74", "logging.info(dataobject, logFile)", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "0", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.isin(True)", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df.BoolCol.isin(True)", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "div = soup.find('div', {'id': 'main-content'})", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "def join_with_tuples(a, b):\n    return zip(a, b)[::2]", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "zip(a, b)", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "The output of m.start() and m.end() is (8, 11)", "'abcd}def}'.rfind('}')"], ["20546419-7", "r.shuffle()", "np.random.shuffle(np.transpose(r))"], ["574236-63", "os.listdir('C:/') or os.stat('C:/').st_numfiles", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor.execute(\"SELECT * FROM table_name WHERE column_name = ?\", [value])", "cursor.fetchone()[0]"], ["4454298-91", "", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "if re.search(r'ba[rzd]', 'foobarrrr'):\n    print(True)\nelse:\n    print(False)", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "list(set(t)) or list(t.items())", "list(set(t))"], ["7961363-86", "source_list = list(set(source_list))", "list(set(source_list))"], ["7961363-7", ":", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a[0].tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find_all(text=True, recursive=False)[0].parent.find('td').text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", ":", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "the string data to be encoded encoded in the ascii encoding", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "A[~numpy.in1d(A, [1, 3, 4])] = 0", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "a.mean(axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "The answer code is writer.writerow([header])", "writer.writeheader()"], ["23359886-48", "ndarray[bool](a[0, 0] == 0 & a[0, 1] == 1)", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.apply(lambda x: pd.Series([x.email, x.list]))\ndf = sf.dropna().apply(lambda x: pd.Series([x.email, x.list]))", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "import skimage.io\nimport matplotlib.image\n\nimage = skimage.io.imread('image.jpg')\n\nwidth, height = image.shape[:2]\n\nimage = image.resize((x, y), antialias=True)\n\nimshow(image)\n\nplt.show()", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "The answer code is list(zip_longest(l1, l2, fillvalue=0))[1:10]", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "[<span class=\"starGryB sp\">G</span>, <span class=\"starGryB sp\">R</span>, <span class=\"starGryB sp\">B</span>, <span class=\"starGryB sp\">S</span>]", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "The answer code is list5.sort(key=lambda x: x.degree)", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "sorted(mylist, key=itemgetter(1))", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "'{\"3.9\":}'", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df[df.A.isin(df.A.values)]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "The answer code is plt.imshow(mappable).colorbar()", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "the code block above", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "datetime.datetime.utcnow().astimezone(pytz.timezone.utc).strftime('%Y-%m-%d')", "datetime.now(pytz.utc)"], ["9262278-9", "response = HttpResponse(json.dumps(data), content_type='application/json')", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", ":\n\nsubprocess.Popen([\"background-process\", \"arguments\"])", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "myList.index('how')", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", ":\n\ndf = df.apply(lambda x: x.tolist(), axis=1).T", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "xticklabels = ax.get_xticklabels().rotate(45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "11", "len(list(yourdict.keys()))"], ["2212433-64", "5", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df = pd.concat([pd.DataFrame([[1,2,3], [4,5,6], [7,8,9]]), pd.DataFrame([[10, 11, 12], [13, 14, 15], [16, 17, 18]])], axis=1), axis=1).reorder_levels([0, 1, 2]).take([1, 2])", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "p.communicate(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heappush(item)", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate(a, b)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "ndarray([a, b], dtype=float32)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a = np.concatenate((a, b))\nAnswer: \na = np.hstack((a, b))\nAnswer: \na = np.stack((a, b))", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "ndarray(shape=(len(a),), dtype=float)", "np.array((a, b))"], ["4356842-88", "the code block that implements this rationale", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "The code snippet to achieve this is:\n\ndf.loc[df['name'] == 'bob']", "df.index.get_loc('bob')"], ["18730044-52", "", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "'it is icy' -> 'it is ys'", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "The code to delete all instances of a character 'i' in a string 'it is icy' is string = re.sub(r'i', '', 'it is icy').", "re.sub('i', '', 'it is icy')"], ["22187233-75", "str.translate(\"it is icy\", dict(i=\"\"))", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "re.search(r'[x]', 'hello world').start()", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(x) for x in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, myList))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "os.listdir(\"/mydir\") + [f for f in os.scandir(\"/mydir\") if f.suffix == \".txt\"]", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "the code snippet:\n\nos.scandir(\"/mydir\")", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "for root, dirs, files in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "json.loads(request.body)"], ["36402748-46", "df.sort_values('occurences', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "data = urllib.parse.urlencode(dict(name='John')).encode('utf-8').replace('+', '%20').replace('%7E', '~').replace('%2F', '/').replace('%3A', ':').replace('%40', '@').replace('%5B', '[').replace('%7B', '{').replace('%5D', ']').replace('%3D', '=').replace('%3F', '?').replace('%25', '%').replace('%0A', '\\n').replace('%0D', '\\r').replace('%08', '\\b').replace('%09', '\\t').replace('%0C', '\\r\\n').replace('%E2%80%99', '\\u2019').replace('%E2%80%9E', '\\u2013').replace('%E2%80%94', '\\u2014').replace('%E2%80%92', '\\u2018').replace('%E2%80%93', '\\u201C').replace('%E2%80%90', '\\u2010').replace('%E2%80%91', '\\u2011').replace('%E2%80%9F', '\\u201E').replace('%E2%80%96', '\\u2016').replace('%E2%80%99', '\\u2019').replace('%E2%80%9E', '\\u2013').replace('%E2%80%94', '\\u2014').replace('%E2%80%92', '\\u2018').replace('%E2%80%93', '\\u201C').replace('%E2%80%90', '\\u2010').replace('%E2%80%91', '\\u2011').replace('%E2%80%9F', '\\u201E').replace('%E2%80%", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "def filter_by_hour(hours):\n    return (record for record in records if record['hour'] == hours)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "the sorted list of dictionaries obtained by using this code snippet", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "0bstruct.unpack('H', struct.pack('h', number))"], ["20107570-40", "import pandas\ndf = pandas.DataFrame({'col1': ['a', 'b', 'c'], 'col2': ['d', 'e', 'f']})\ndf.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.parse.urlencode(urllib.parse.parse_qs(unescaped)).decode().strip()", "json_data = json.loads(unescaped)"], ["18367007-15", "newFile.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.items()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "255", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "datetime.now().strftime('%B %d, %Y')", "datetime.datetime.now()"], ["17794266-82", "x.argmin()", "max(x.min(), x.max(), key=abs)"]]}