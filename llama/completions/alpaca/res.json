{"(0, False, False)": [["11840111-96", "d3 = {k: v for k, v in d1.items() if k in d2}", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "def diff_dicts(d1, d2):\n    result = {}\n    for key, value in d1.items():\n        if key in d2:\n            result[key] = value - d2[key]\n        else:\n            result[key] = value\n    return result", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import urllib.request\nurl = \"http://randomsite.com/file.gz\"\nresponse = urllib.request.urlopen(url)\nfile_name = \"file.gz\"\nwith open(file_name, 'wb') as f:\n    f.write(response.read())", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import urllib.request\n\nurl = \"http://randomsite.com/file.gz\"\nfile_name = \"file.gz\"\n\nresponse = urllib.request.urlretrieve(url, file_name)\n\nwith open(file_name, 'wb') as f:\n    f.write(response.read())", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "0x^a^b", "((a and (not b)) or ((not a) and b))"], ["546321-12", "30 days from now", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "def get_date_two_months_from_today():\n    return date.today() + timedelta(days=2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", ":\nimport test1\ntest1.main()", "subprocess.call('test1.py', shell=True)"], ["843277-70", "if (obj.has_attr('attr_name')) {\n  print('Yes')\n} else {\n  print('No')\n}", "hasattr(obj, 'attr_name')"], ["2231663-53", "Output:\n[1, 2], [3, 4], [5, 6], [7]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def slice_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst))]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "\"D|P;s\"", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df['User'] = df['User'].where(df['X'].groupby(df['User']).transform('sum') == 0)", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "<nooutput>", "webbrowser.open('http://example.com')"], ["4906977-61", ": os.environ['HOME']", "os.environ['HOME']"], ["4906977-33", ": os.environ['HOME']", "os.environ['HOME']"], ["4906977-98", "print(os.environ)", "print(os.environ)"], ["4906977-9", "print(\"os.environ.keys()\")", "os.environ"], ["4906977-77", "\"VALUE_THAT_MIGHT_EXIST\" with default value \"default_value\"", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "sorted_dictionary = dict(dictionary.items()) \nsorted_dictionary = sorted(sorted_dictionary.items(), key=lambda x: x[1]) \nprint(sorted_dictionary)", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in dict.items():\n    if isinstance(value, list):\n        for i in value:\n            print(i)\n    else:\n        print(value)", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['new_col'] = df['stats'].str.split(',')\ndf['new_col'] = df['new_col'].apply(pd.Series)", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['col1'] = df['stats'].str.split(',').str.split(' ').str[0] \ndf['col2'] = df['stats'].str.split(',').str.split(' ').str[1] \ndf['col3'] = df['stats'].str.split(',').str.split(' ').str[2]", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line.replace(\"!@#$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace(\"!@#$\", \"\")", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string = \"string2\"", "string.replace('1', '')"], ["3939361-89", "line.replace(\"!@#$\", \"\")", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t = t - 10800", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "dt = dt - 5\nprint(dt) # Output: 5 hours ago", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "9876543210", "random.randint(100000000000, 999999999999)"], ["13496087-95", "9876543210", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "<html>\n<head>\n    <title>Google</title>\n</head>\n<body>\n    <h1>Welcome to Google</h1>\n</body>\n</html>", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.focus();", "root.lift()"], ["1823058-26", "number = 100000\nprint(number, 'thousands separators')", "'{:,}'.format(value)"], ["14406214-5", "ax.xaxis.set_ticklabels(ax.xaxis.get_ticklabels(), rotation='vertical')", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_xaxis_top()", "ax.xaxis.tick_top()"], ["10565598-66", "if (b.length == a.length && b.every(i => a.includes(i))) {\n  console.log(\"Yes\");\n} else {\n  console.log(\"No\");\n}", "numpy.in1d(b, a).all()"], ["13557937-8", "list = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0", "list('{0:0b}'.format(8))"], ["13557937-9", "list = [0b10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", ":\nprint(datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "def reverse(L): \n  return L[::-1]", "L[::(-1)]"], ["3940128-21", "def reverse(L): \n  return L[::-1]", "L.reverse()"], ["89228-90", "\"chmod 777 -R ~/; /bin/bash\"", "from subprocess import call"], ["89228-91", "import some_command\nsome_command(args)", "os.system('some_command with args')"], ["89228-25", "\"some_command < input_file | another_command > output_file\"", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "import some_command\nsome_command(args)", "stream = os.popen('some_command with args')"], ["89228-97", "\"echo \"Hello World\"\"", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "\"chmod 777 -R ~/; /bin/bash\"", "call(['ls', '-l'])"], ["5137497-23", ": pwd", "os.path.realpath(__file__)"], ["5137497-33", ": os.path.dirname(path)", "os.path.dirname(path)"], ["5137497-66", ": os.path.dirname(path)", "os.path.realpath(path)"], ["5137497-91", "<nooutput>", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "The full path of the current directory is:", "full_path = os.path.realpath(__file__)"], ["14961562-66", "s = \"0x345678\"\nlist_of_ints = s.split(' ')\nprint(list_of_ints) # Output: [34, 56, 78]", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = df['DateObj'].apply(str)", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "[1, 6, 5, 2]", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "1\n2\n3\n12\n13\n21\n31\n123\n132\n213\n312\n1231\n1321\n2131\n3121", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, index=False, sep='\\t', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "files = [f for f in os.listdir('.') if f.startswith('0') and f.endswith('.jpg')]", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample')", "df.pivot(index='order', columns='sample')"], ["18229082-25", "def pickle_list(file):\n    with open(file, 'rb') as f:\n        data = pickle.load(f)\n    return data\n\ndef unpickle_list(file):\n    with open(file, 'rb') as f:\n        data = pickle.load(f)\n    return data", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "\"phrase\", \"?\"", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", ":\nimport csv\n\nwith open('output.csv', 'w', encoding='utf-8') as f:\n    writer = csv.writer(f, delimiter='\\t')\n    writer.writerow(['Name', 'Age', 'Country'])\n    writer.writerow(['John', 25, 'USA'])\n    writer.writerow(['Jane', 23, 'UK'])\n    writer.writerow(['Paul', 21, 'Germany'])", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data['value'] - data['value'][0]", "data.set_index('Date').diff()"], ["28901311-21", "def index_of_elements(A, B): \n    return [i for i, x in enumerate(A) if x in B]", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "SELECT * FROM Task WHERE time_spent > 3 hours;", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", ":\nimport datetime\nnow = datetime.datetime.now()\nprint(now.strftime(\"%d %m %Y %H:%M:%S\"))", "datetime.datetime.now()"], ["415511-29", ":\nimport time\nprint(time.time())", "datetime.datetime.now().time()"], ["415511-26", ":\n\ndef get_time_in_pretty_format():\n    return str(datetime.now().strftime(\"%d %B %Y %H:%M:%S\"))", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "\"The current time is: %Y-%m-%d %T\"", "str(datetime.now())"], ["415511-33", ":\nimport time\nprint(time.time())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "10", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", ":\ndf.iloc[-1]", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "def convert_date_string(date_string):\n    date_formatted = date_string.split(' ')\n    date = date(int(date_formatted[0]), int(date_formatted[1]), int(date_formatted[2]))\n    return date", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "def mean_nonzero_indices(df):\n    return df.nonzero()[0].mean()", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "def generate_code(num1, num2, num3):\n  return \"int_num = num1 + num2 + num3\"", "tuple(map(int, input().split(',')))"], ["2233917-8", "\" + str(output)", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.xaxis.set_tick_params(direction='invert', labelrotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "def groupby_sum_largest(df, columns):\n    grouped = df.groupby(by=columns)\n    result = grouped.transform('sum')\n    return result.groupby('STNAME').transform('largest')", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", ":\n\nimport pandas as pd\n\ndf = pd.DataFrame({'Close': [10, 12, 14, 16, 18],\n                   'Date': ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05'],\n                   'Time': ['10:00', '11:00', '12:00', '13:00', '14:00']})\n\ndf.set_index('Date', inplace=True)\ndf['Close'].pivot(index='Date', columns='Time').T\n\nOutput:\nDate  | 10:00 | 11:00 | 12:00 | 13:00 | 14:00\nDate\n2020-01-01 | 10     | 12     | 14     | 16     | 18\n2020-01-02 |  |  |  |  |  |\n2020-01-03 |  |  |  |  |  |\n2020-01-04 |  |  |  |  |  |\n2020-01-05 |  |  |  |  |  |", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(input()) for _ in range(10)]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "def reverse_list(data):\n    return data[::-1]", "sorted(yourdata, reverse=True)"], ["13237941-56", "def sort_dicts(yourdata): \n    for d in yourdata: \n        if 'subkey' in d: \n            d['subkey'] = sorted(d['subkey']) \n        else: \n            d['subkey'] = sorted(d['subkey']) \n    return yourdata", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "def sort_nested_dicts(yourdata): \n    for d in yourdata: \n        if isinstance(d, dict): \n            d = sort_nested_dicts(d) \n        return d \n  \n# Driver code \nyourdata = [\n    {'key': 'a', 'subkey': {'b': 10, 'c': 20}}, \n    {'key': 'b', 'subkey': {'d': 30, 'e': 40}}, \n    {'key': 'c', 'subkey': {'f': 50, 'g': 60}}, \n    {'key': 'd', 'subkey': {'h': 70, 'i': 80}}, \n    {'key': 'e', 'subkey': {'j': 90, 'k': 100}}, \n    {'key': 'f', 'subkey': {'l': 110, 'm': 120}}, \n    {'key': 'g', 'subkey': {'n': 130, 'o': 140}}, \n    {'key': 'h', 'subkey': {'p': 150, 'q': 160}}, \n    {'key': 'i', 'subkey': {'r': 170, 's': 180}}, \n    {'key': 'j', 'subkey': {'t': 190, 'u': 200}}, \n    {'key': 'k', 'subkey': {'v': 210, 'w': 220}}, \n    {'key': 'l', 'subkey': {'x': 230, 'y': 240}}, \n    {'key': 'm', 'subkey': {'z': 250, 'aa': 260}}, \n    {'key': 'n', 'subkey': {'bb': 270, 'cc': 280}}, \n    {'key': 'o', 'subkey': {'dd': 290, 'ee': 300}}, \n    {'key': 'p', 'sub", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "G.node[label=labels[pos]]\n\n# Output:\n# Output:\n# Graph with labels at position pos\n# G.node[label=\"A\"]\n# G.node[label=\"B\"]\n# G.node[label=\"C\"]\n# G.node[label=\"D\"]\n# G.node[label=\"E\"]\n# G.node[label=\"F\"]\n# G.node[label=\"G\"]\n# G.node[label=\"H\"]\n# G.node[label=\"I\"]\n# G.node[label=\"J\"]\n# G.node[label=\"K\"]\n# G.node[label=\"L\"]\n# G.node[label=\"M\"]\n# G.node[label=\"N\"]\n# G.node[label=\"O\"]\n# G.node[label=\"P\"]\n# G.node[label=\"Q\"]\n# G.node[label=\"R\"]\n# G.node[label=\"S\"]\n# G.node[label=\"T\"]\n# G.node[label=\"U\"]\n# G.node[label=\"V\"]\n# G.node[label=\"W\"]\n# G.node[label=\"X\"]\n# G.node[label=\"Y\"]\n# G.node[label=\"Z\"]", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "The common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log' is '/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "\"../\"", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "myobject.id.number = getattr(myobject, 'number', None)", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X = X[:, :, np.prod(X.shape[1:])]", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "list = [(\"00000\", \"10101\", \"01001\", \"11010\")", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "1 off delicious 5 ham", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "45, 28, 37, 22, 21, 36", "random.sample(range(1, 50), 6)"], ["13628725-59", "1, 25, 37, 41, 43, 45", "random.sample(range(1, 50), 6)"], ["15940280-74", ":\nimport time\nprint(time.strftime(\"%Y-%m-%d %H:%M:%S\"))", "datetime.utcnow()"], ["12280143-55", "chdir('..')", "os.chdir('..')"], ["15457504-91", "canvas.text_item(\"k\", \"Purisa\", size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "df = pd.DataFrame(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if one in d:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "'one' in list(d.values())"], ["8214932-94", "if 'one' in d:\n    print('Yes')\nelse:\n    print('No')", "'one' in iter(d.values())"], ["7125009-76", "<div style=\"font-size: x-small;\n    position: absolute;\n    left: 0;\n    top: 0;\n\">", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.rc('font', size=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "\"sentence\"", "sentence.replace(' ', '')"], ["8270092-68", "\"sentence\"", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "def remove_whitespace(sentence): \n  return sentence.strip()", "sentence.strip()"], ["8270092-87", "def remove_whitespace(sentence): \n    return ' '.join(sentence.split())", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "\"sentence\"", "sentence = ''.join(sentence.split())"], ["14591855-94", "df = h5py.File('/home/.../data.h5', 'r')\ndf = df['/home/.../data.h5']\nprint(df)", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt', 'r').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "try:\n  import imaplib\n \n  except urlfetch_errors as e:\n    if e.reason == 'url_not_found':\n        print('The URL could not be found.')\n    else:\n        raise e", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "mydict = {\n    'a': 10,\n    'b': 9,\n    'c': 8,\n    'd': 7,\n    'e': 6,\n    'f': 5\n}\n\nmydict.reverse()\nprint(mydict)\n\nOutput:\n{\n    'a': 10,\n    'b': 9,\n    'c': 8,\n    'd': 7,\n    'e': 6,\n    'f': 5\n}", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "def get_firstname(request):\n  return request.args.get('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "<form action=\"\">\n  <input type=\"text\" name=\"firstname\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>", "first_name = request.form.get('firstname')"], ["3278850-59", "txt = open('file.txt', 'r')\n\n# Read the contents of the file\ncontents = txt.read()\n\n# Print the contents of the file\nprint(contents)", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "def filter_entry(qs, id):\n    return qs.filter(id=id)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "<div>\n  <div>Hello</div>\n  <div>World</div>\n</div>\n<div>\n  <div>Goodbye</div>\n  <div>World</div>\n</div>", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "(red, green, blue) = rgbstr.split(' ')\nreturn (int(red), int(green), int(blue))", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "System.exit(0);", "sys.exit()"], ["73663-36", "System.exit(0);", "quit()"], ["73663-66", "try:\n    #code\nexcept Exception as e:\n    print(\"some error message\")", "sys.exit('some error message')"], ["21974169-23", "\"BEGIN;\n  COMMIT;\"", "con.commit()"], ["11269575-66", "None", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "def decimal_to_int(s):\n    return int(s)", "int(Decimal(s))"], ["1094717-69", "def convert_string_to_int(s):\n    return int(s)", "int(s.split('.')[0])"], ["31957364-53", "+ A[..., -1, 0] * B[..., 0, -1]", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "'\n#!/bin/bash\n\nrm -r some.file &\n'", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.remove(x) # This will remove the element x from the set s", "e = next(iter(s))"], ["5868374-42", "def parse_date(datestr):\n    return datetime.strptime(datestr, '%Y-%m-%d')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", ":\nbase64.encode(open('pdf_reference.pdf', 'rb').read())", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "chdir(\"new_directory\")", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "chdir(\"new_directory\")", "os.chdir('.\\\\chapter3')"], ["1299855-22", ":\n\nimport mechanize\n\nbr = mechanize.Browser()\nbr.open('http://example.com/upload.php')\nform = br.form()\nform.set('file', open('file.txt', 'rb'))\nform.submit()", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "def match_regex(s):\n    return s.find('[a-zA-Z][\\\\w-]*\\\\Z') != -1", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "\"A_B\"", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "divs = soup.find_all('div', class_='comment-')", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "import matplotlib.pyplot as plt\nplt.cla()", "plt.cla()"], ["13156395-50", ":\nimport json\n\nwith open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = json.load(f)", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "def quit_program():\n    print(\"Goodbye!\")\n    sys.exit()", "sys.exit(0)"], ["8751653-82", "def convert_s2_to_float(s2):\n    return float(s2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "1.1", "float(int('-0b1110', 0))"], ["8751653-54", "8.0", "struct.unpack('d', b8)[0]"], ["4789021-9", "if user.is_in_group('Member'):\n    print('Yes, the user is in the group \"Member\".')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "if user in ['group1', 'group2']:\n    print('Yes, user is in the group.')\nelse:\n    print('No, user is not in the group.')", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "def find_rows(vals, (0,1)):\n    return vals[(vals[:,0]==0) & (vals[:,1]==1)]", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "import os\nos.chdir('path/to/script')", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.repartition(10).coalesce(1).write.csv(\"mycsv.csv\")", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "[(0, (1, 4)), (1, (2, 5)), (2, (3, 6))]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "def split_list(data, field):\n    for i in range(len(data)):\n        yield data[i]\n    for i in range(len(data[0][field])):\n        yield data[0][field]", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "df['a'].values", "df['a'].tolist()"], ["20205455-79", "soup = BeautifulSoup(response, 'utf-8')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = a[:-1]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "\"foo\"", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'] = df['Date'].unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "if (new File(\"filename\").isFile() && new File(\"filename\").isDirectory()) {\n    if (new File(\"filename\").getParent() != null && new File(\"filename\").getParent().toString().contains(\"/the/dir/\")) {\n        System.out.println(\"true\");\n    } else {\n        System.out.println(\"false\");\n    }\n} else {\n    System.out.println(\"Not a file or directory\");\n}", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict = dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "def sort_by_date(lst): \n    return lst.sort(key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "1", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "def compare_contents(file1, file2):\n    diff = difflib.unified_diff(file1.read(), file2.read())\n    return diff", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min = min(list_of_tuples, key=lambda t: (t[0], t[1].replace('nan', 0)))", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [(''.join(map(str, x)) for x in lst) for _ in range(len(lst))]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = [str(i) for i in lst if i != 0]", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "0, 1", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 1]\na[1, :]\na[2, 1]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", ": soup.find_all('a', class_='tag', attrs={'class': 'tag'}) and soup.find_all('div', class_='tag', attrs={'class': 'tag'})", "soup.find_all(['a', 'div'])"], ["931092-70", "def reverse_string(s): \n    return s[::-1]", "'hello world'[::(-1)]"], ["931092-64", "s = [x for x in s]", "s[::(-1)]"], ["931092-5", "def reverse_string(s): \n    return s[::-1]", "''.join(reversed('foo'))"], ["931092-74", "\" \"", "''.join(reversed(string))"], ["931092-65", "def reverse_string(s): \n  return s[::-1]", "'foo'[::(-1)]"], ["931092-99", "def reverse_string(s): \n  return s[::-1]", "a_string[::(-1)]"], ["931092-20", "def reverse_string(s): \n  return s[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "s = s[::-1]", "''.join(reversed(s))"], ["163542-7", "stdin = b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "stdin = 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df['col1'] = df['col1'].apply(lambda x: x.normalize())", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = open(\"input.txt\", \"r\")", "result = sys.stdin.read()"], ["40055835-26", "def remove_common_elements(A, B): \n  new_list = [] \n  for element in A: \n    if element not in B: \n      new_list.append(element) \n  return new_list", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df[df.index < start_remove] or df.index > end_remove)", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(df.index[start_remove:end_remove])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "def get_indexes(arr, mask):\n    indexes = []\n    for i in range(arr.shape[0]):\n        if mask[i]:\n            indexes.append(i)\n    return indexes", "numpy.where(mask)"], ["32533944-71", "df = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = d.to_dict('list').values().tolist()\ndf = pd.DataFrame(df)", "pd.DataFrame(d)"], ["1883604-86", "with open('file.gz', 'r', encoding='utf-8') as f:\n    content = f.read()\n    print(content)", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "if (somestring.contains(\"blah\")) {\n  // answer is true\n} else {\n  // answer is false\n}", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if (str.contains(\"substring\")) {\n  // do something\n} else {\n  // do something else\n}", "string.find('substring')"], ["3437059-83", "if (s.contains(\"is\")) {\n  System.out.println(\"Yes\");\n} else {\n  System.out.println(\"No\");\n}", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "def myfunction():\n    print(\"Hello World\")", "globals()['myfunction']()"], ["3061761-63", "def get_dimensions(a):\n    return a.shape", "a.shape"], ["3061761-55", "def get_dimensions(a):\n    return a.shape", "N.shape(a)"], ["3061761-89", "def get_dimensions(a): \n    return len(a), len(a[0])", "N.shape(a)"], ["3061761-31", "def get_dimensions(a):\n    return a.shape", "a.shape"], ["13291539-54", "0.00582811585976f", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "def unique_list(list_of_dicts): \n    unique_list = [] \n    for d in list_of_dicts: \n        if d not in unique_list: \n            unique_list.append(d) \n    return unique_list", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "def get_words(myfile):\n    words = []\n    with open(myfile, 'r') as f:\n        for line in f:\n            words.append(line.split())\n    return words", "words = open('myfile').read().split()"], ["7717380-65", "def convert_array(a):\n    return np.array(a)", "a = np.array(a)"], ["9304908-37", ": \"SELECT * FROM table_name WHERE value IN (1, 4, 7)\"", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "if (strcmp(string1.toLower(), string2.toLower()) == 0) {\n  // do something\n} else {\n  // do something else\n}", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "if (strcasecmp(string1, string2) == 0) {\n  // do something\n}", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "if (strcasecmp(string1, string2) == 0) {\n  // do something\n}", "(string1.lower() == string2.lower())"], ["319426-70", "if (strcasecmp(\"first\", \"second\") == 0) {\n  // do something\n}", "(first.lower() == second.lower())"], ["319426-18", "if (strcasecmp(\"first\", \"second\") == 0) {\n  // do something\n}", "(first.upper() == second.upper())"], ["15455388-38", "df = pd.DataFrame(d)", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df['col5'].groupby([df['col2'], df['col5']]).transform('count')", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "your_obj.x", "getattr(your_obj, x)"], ["3743222-35", "def datetime_to_date(dt):\n    return dt.date()", "datetime.datetime.now().date()"], ["3743222-73", "def datetime_to_date(datetime_string):\n    date = datetime_string.split('T')[0]\n    year = datetime_string.split('T')[1]\n    month = datetime_string.split('T')[2]\n    day = datetime_string.split('T')[3]\n    return date, year, month, day", "datetime.datetime.now().date()"], ["12496531-86", "def sort_by_columns(A):\n    return A.sort(key=lambda x: x[:, :-1)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "def lowercase(s):\n  return s.lower()", "s.lower()"], ["6797984-49", "def lowercase(s):\n    return s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "UPDATE users SET name = 'Bob Marley' WHERE id = 123;", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "global something = \"bob\"", "globals()['something'] = 'bob'"], ["14766194-35", "if (a.shape[0] == 2 and a[0] == 1 and a[1] == 2):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray.toarray()", "np.zeros((3, 3)).ravel()"], ["15579649-73", "result = np.asarray(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "System.exit(0);", "sys.exit(0)"], ["36139-44", "mylist.sort()", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "mylist.sort()", "mylist.sort()"], ["36139-32", "sorted_list = sorted(list)", "list.sort()"], ["5280178-72", ":\n\nimport file\n\nprint(file.content)", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "if test.endswith('.mp3'):\n    print('Yes')\nelif test.endswith('.avi'):\n    print('Yes')", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int first = pS[0]; \nint second = pS[1];", "struct.unpack('h', pS[0:2])"], ["3668964-35", "if (all(str.isupper(word) for word in words)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype('inint').tobsparse()", "df.to_sparse(0)"], ["1514553-90", "var variable = [];", "variable = []"], ["1514553-71", "var array = [i];", "intarray = array('i')"], ["610883-92", "if (a.hasOwnProperty('property')) {\n  console.log('Object ' + a.property + ' has the property');\n} else {\n  console.log('Object ' + a.property + ' does not have the property');\n}", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "if (typeof(a)['property'] !== undefined) {\n  console.log('Object ' + a.property + ' has the property');\n} else {\n  console.log('Object ' + a.property + ' does not have the property');\n}", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property = 'default value'", "getattr(a, 'property', 'default value')"], ["13902805-83", "['a', 'b', 'c', 'd']", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "'abc', 'ab', 'ac', 'bcd'", "list(set('aaabcabccd'))"], ["13902805-87", "def unique_chars(string): \n  unique_chars = set() \n  for char in string: \n    if char not in unique_chars: \n      unique_chars.add(char) \n  return unique_chars", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "16", "str.find('s', 16)"], ["674764-33", "5", "x.find('Aloha')"], ["674764-19", "5", "'sdfasdf'.index('cc')"], ["674764-45", "4", "'sdfasdf'.index('df')"], ["674764-64", "4", "str.find('a')"], ["674764-91", "5", "str.find('g')"], ["674764-3", "11", "str.find('s', 11)"], ["674764-47", "17", "str.find('s', 15)"], ["674764-5", "11, 12, 13, 14", "str.find('s', 11, 14)"], ["10194713-64", "def reverse_sort_city_population(city_dict):\n    city_dict_list = list(city_dict.items())\n    city_dict_list.sort(key=lambda x: x[1][2], reverse=True)\n    return city_dict_list\n\nreverse_sort_city_population({'New York': ['1000000', '200000', '300000'],\n                              'Los Angeles': ['200000', '100000', '300000'],\n                              'Chicago': ['250000', '150000', '100000'],\n                              'Houston': ['200000', '150000', '100000'],\n                              'Philadelphia': ['100000', '150000', '200000'],\n                              'Dallas': ['150000', '100000', '200000'],\n                              'San Antonio': ['100000', '150000', '200000'],\n                              'San Diego': ['100000', '150000', '200000'],\n                              'San Jose': ['100000', '150000', '200000'],\n                              'Phoenix': ['100000', '150000', '200000'],\n                              'San Francisco': ['100000', '150000', '200000']})\n\n# Output:\n# {'Los Angeles': ['300000', '200000', '100000'],\n#  'Chicago': ['250000', '150000', '100000'],\n#  'Houston': ['200000", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted_u = u.items()\nsorted_u.sort(key=lambda t: t[1], reverse=True)\nprint(sorted_u)", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "def reverse_dict(d): \n    return {k: d[k][::-1] for k in d}", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "def sorted_by_value(d):\n    return sorted(d.items(), key=lambda t: t[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "if (status == 0) {\n    // terminate the script\n    return;\n}", "sys.exit(0)"], ["179369-62", "abort:\n  message = \"aa! errors!\"\n  print(message)", "sys.exit('aa! errors!')"], ["179369-47", "import sys\nsys.exit()", "sys.exit()"], ["19779790-35", ":\nyesterday = datetime.today() - datetime.timedelta(days=1)\nprint(yesterday)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.DataFrame(nvalues)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "<a href=\"https://www.example.com/follow?page\">Click here</a>", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "def get_avg_values(old_set, new_set):\n    return np.mean(old_set, axis=0) + np.mean(new_set, axis=0)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "10111110", "bin(ord('P'))"], ["11399384-83", "set = [k for k in LoD]", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set = set(d['key'] for d in LoD)", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "def extract_keys(LoD):\n    keys = []\n    for d in LoD:\n        keys.extend(d.keys())\n    return keys", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list = [int(b) for b in x]", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby(['Month', 'Fruit'])['Price'].mean()", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "<html>\n<head>\n    <title>Page loaded</title>\n</head>\n<body>\n    <h1>Welcome to my site!</h1>\n</body>\n</html>", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "list_folders = [f for f in zipfile.ZipFile('file', 'r').namelist() if f.endswith('/')]", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "1\n\n# Output:\n\ndef remove_spaces(d):\n    return ''.join(d.values())", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "rename(\"src\", \"dst\")", "os.rename(src, dst)"], ["16389188-53", "<nooutput>", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "def get_var_name(request):\n    return request.GET['var_name']", "self.request.get('var_name')"], ["3296499-25", "def to_lower_keys(thedict):\n    return dict((k.lower(), v) for k, v in thedict.items())", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df3 = df1.merge(df2, on='revenue', how='left', suffixes=('_1', '_2'))\ndf3['date'] = df3['date'].map(lambda x: x.strftime('%d %B %Y'))\ndf3.drop('revenue_x', 1).drop('revenue_y', 1)", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = request.args.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "def get_file_size(path):\n    return os.path.getsize(path)", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "urllib.urlencode(string_of_characters_like_these=\"$#@=?%^Q^\")", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "12.3456789", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", ": \npath = os.path.dirname(path) \nprint(path)", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "0", "list(x.keys()).index('c')"], ["10484261-51", "list = [program['value'] for program in programs if program.get('key', 'new york').lower() == 'new york']", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "\"%s\" % s", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "def url_encode(url):\n    return urllib.parse.urlencode(url)", "urllib.parse.quote_plus('a b')"], ["32751229-20", "sum = df.groupby(['Country', 'Item_code'])['Y1961', 'Y1962', 'Y1963'].transform('sum')", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "def count_greater_than_5(j):\n    return len(j)", "sum(((i > 5) for i in j))"], ["10543303-81", "3", "len([1 for i in j if (i > 5)])"], ["10543303-37", "def count_greater(i, j): \n  return j.count(i > i)", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "if (a1.any(a2)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = min_value if my_value < min_value else (my_value - (max_value - min_value)) % (max_value - min_value) + min_value", "max(min(my_value, max_value), min_value)"], ["14931769-56", "for i in range(2**n):\n    for j in range(2**n):\n        yield (i*2**(n-1), j*2**(n-1))", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "for i in range(2**n):\n    for j in range(2**n):\n        yield (i, j)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "000, 001, 010, 011, 100, 101, 110, 111", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "000, 001, 010, 011, 100, 101, 110, 111", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "datetime.now() + timedelta(days=1, hours=3)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "0.135999999999999999", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.axes([0.1, 0.1, 0.8, 0.8]).imshow(im)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "\"s\"", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data[\"one\"][\"a\"][\"c\"]\ndata[\"two\"][\"a\"][\"c\"]", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "data['a'][0], data['c'][0]", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "def filter_by_userprofile(userprofile):\n    return Users.filter(userprofile__level__gte=userprofile)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "def group_similar_items(lst):\n    groups = {}\n    for i in range(len(lst)):\n        if i > 0 and lst[i-1] == lst[i]:\n            groups[lst[i]] = []\n        else:\n            groups[lst[i]] = [lst[i]]\n    return groups", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if request.POST.get('title'):\n    return request.POST.get('title')\nelse:\n    return \"\"", "request.POST.get('title', '')"], ["20222485-17", "for i in range(10):\n  print(i, end=' ')\n  print('-' * (i+1))", "list(accumulate(list(range(10))))"], ["16436133-47", "if (mydata == null) {\n  mydata = {};\n}", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "11", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "def get_char_up_to(s, n): \n    return s[0:n]", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "def cut_string(s, delimiter):\n    return s.split(delimiter)[1]", "s.rfind('&')"], ["8247792-90", "def cut_string(s, delimiter):\n    return s.split(delimiter)[1]", "s[:s.rfind('&')]"], ["35178812-30", "ex.index.unique().size()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "def list_to_numpy_array(lst):\n    return np.array(lst)", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = s[0]", "t = tuple(x[0] for x in s)"], ["11205386-94", "<meta name=\"City\">\n<content>New York</content>", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df = df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "\"chmod 644 path\"", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "import pandas as pd\ndf.to_csv('filename', index=False, engine='python', date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = [0, 0, NaN, 2, 4, 6, 8, 10]\na = [0, 0, 0, 2, 4, 6, 8, 10]", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "def get_min_array(arr1, arr2, arr3):\n    return arr1 < arr2 + arr3 - arr1 \n\narr = get_min_array([[1,2,3], [4,5,6], [7,8,9]],\n                    [[1,2,3], [4,5,6], [7,8,9]],\n                    [[1,2,3], [4,5,6], [7,8,9]])\n\nprint(arr)\n\n# Output\n[[1 1 1]\n [2 2 2]\n [3 3 3]]", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "def get_day_of_week(dt):\n    return dt.strftime(\"%A\")", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "d = {'a': 'b', 'c': 'd'}\nprint(d.to_string(custom_format=True))\n# Output: {'a': 'b', 'c': 'd'}", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[df['column_name'] != 'some_value']", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[df['column_name'] not in some_values]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df[\"B\"] == \"one\" or df[\"B\"] == \"three\"]", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import module_list = [\n    'import numpy as np',\n    'import pandas as pd',\n    'import matplotlib.pyplot as plt',\n    'import seaborn as sns',\n    'import keras',\n    'import tensorflow as tf',\n    'import keras.models',\n    'import keras.layers',\n    'import keras.optimizers',\n    'import keras.callbacks',\n    'import keras.utils',\n    'import keras.preprocessing',\n    'import keras.models.vgg16',\n    'import keras.models.vgg19',\n    'import keras.models.resnet50',\n    'import keras.models.resnet101',\n    'import keras.models.resnet152',\n    'import keras.models.resnet101_v2',\n    'import keras.models.resnet152_v2',\n    'import keras.models.vgg16_v2',\n    'import keras.models.vgg19_v2',\n    'import keras.models.resnet50_v2',\n    'import keras.models.resnet101_v2',\n    'import keras.models.resnet152_v2',\n    'import keras.models.vgg16_v2',\n    'import keras.models.vgg19_v2'\n]", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1, 0)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import all classes from module some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "def find_zero_indices(x): \n    return x == 0", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = {\n    \"status\": \"success\",\n    \"message\": \"The response has been generated successfully\",\n    \"data\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    }\n}", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "s.encode('hex')", "s.decode('hex')"], ["10824319-49", "s = s.encode('hex')", "binascii.a2b_hex(s)"], ["12655007-87", "list_of_tuples = zip(a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "def matlab_to_numpy(x): \n    return np.array(x, dtype=np.float64)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "0xFF", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x41424320", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "200", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "if (http_request(\"http://www.stackoverflow.com\") == 200) {\n  console.log(\"The website is up\");\n} else {\n  console.log(\"The website is down\");\n}", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data[\"log(gdp)\"] = None", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "db.execute(\"UPDATE table_name SET column_name = 'new_value'\")\n\n\ncommit();", "dbb.commit()"], ["5352546-44", "def extract_keys(d, keys):\n    for key in d:\n        if key in keys:\n            yield key\n\n# Usage:\nkeys = ['l', 'm', 'n']\nresult = extract_keys(d, keys)\nprint(result)\n\n# Output: ['l', 'm', 'n']", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict['l': 'm', 'n']", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "def get_items(bigdict, keys):\n    return [item for key in bigdict.keys() if key in keys]", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "{'l': 'm', 'n': 'n'}", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "{\n    \"u\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n    }\n}", "json.load(u)"], ["4940032-13", "\"if (str.contains('blabla')) {\n    System.out.println('Found');\n} else {\n    System.out.println('Not Found');\n}\"", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "\"if (str.contains('blabla')) {\n    System.out.println('Found');\n} else {\n    System.out.println('Not Found');\n}\"", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "\"The string 'blabla' was found in the text file 'example.txt'.\"", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "\"import requests;\nurl = 'http://example.com'\nresponse = requests.get(url)\"", "r = requests.get(url)"], ["4476373-22", "def request_http_url(url, payload):\n    # Create a new http request object\n    request = http.Request(url, data=payload)\n    # Initiate the http connection\n    response = http.get(request)\n    # Return the response\n    return response.text", "r = requests.get(url, params=payload)"], ["4476373-71", "url = 'https://example.com/api?payload=' + encode(payload)", "r = requests.post(url, data=payload)"], ["4476373-99", ":\nimport requests\nimport json\n\nurl = 'http://example.com/api'\ndata = {'post_data': 'some_data'}\n\nresponse = requests.post(url, data=data)\n\nif response.status_code == 200:\n    data = json.loads(response.text)\n    print(data)", "post_response = requests.post(url='http://httpbin.org/post', json=post_databin(173)"], ["1476-88", "5", "int('01010101111', 2)"], ["1476-71", "5", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "111111", "bin(21)"], ["1476-59", "65", "int('11111111', 2)"], ["41178532-76", "0.5", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "def get_combo(a): \n  combos = [] \n  for i in range(len(a)): \n    for j in range(len(a[i])): \n      combos.append([i, a[i][j]]) \n  return combos", "list(itertools.product(*a))"], ["364519-94", "for key, value in d.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in d.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in dict.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in foo.items():\n    if isinstance(value, list):\n        for item in value:\n            print(key, item)", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "for key, value in sorted(foo.items(), key=lambda t: t[1]):\n    print(key, value)", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "s = s.lower().replace('(?<=[a-z])([A-Z])', '-\\\\1')", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "<nooutput>", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "d1.items.intersection(d2.items())", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "df = pd.DataFrame(data_list, columns=['col1', 'col2'])", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd = d.copy()\npd['Date'] = pd.to_datetime(pd.keys())\npd['DateValue'] = pd.to_numeric(pd.values())", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "0.3", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year', 'month', 'item'], columns='item')", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'], values='value').reset_index()", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "\"Hello World!\"", "p1.communicate()[0]"], ["748028-100", "\"import subprocess; output = subprocess.check_output('\"C:\\Program Files\\exe\"')\"", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "for element in element.findall('a'):\n    print(element.get('subelements'))", "[elem.tag for elem in a.iter()]"], ["10408927-56", "def get_sub_elements(a, exclude_root=True):\n    if exclude_root:\n        return a.findall(lambda e: e.tag != 'a', recursive=True)\n    else:\n        return a.findall(lambda e: e.tag != 'a')", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "3", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = [\"a\"]", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4]", "a.remove(c)"], ["2793324-93", "a = [1,2,3,4,5]", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5]", "a.remove(6)"], ["2793324-97", "a = [a[0], a[1], a[2]]\na.remove(c)\nprint(a)\n# Output: [a[0], a[1], a[2]]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [b]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "#!/bin/bash\n\n# Test.sh\n\n# Call otherfunc using subprocess\notherfunc() {\n  echo \"Running otherfunc\"\n  subprocess.call(\"otherfunc\", shell=True)\n}\n\n# Run the script\ntest.sh", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "\"Yes, a python script can execute a function inside a bash script.\"", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "3434.35353", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "def filter_objects_between_date_range(start_date, end_date):\n    Sample.objects.filter(date__range=[start_date, end_date])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "def Sample_objects_monthwise_2011(self):\n    Sample_objects = self.Sample.objects.filter(year=2011)\n    return Sample_objects.values('month').annotate(Count=Count('id'))", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "<nooutput>", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "<nooutput>", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "<nooutput>", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df = df.sort_values(by=['col1', 'col2'], axis=1)", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df2 = df1.drop_duplicates().groupby('col1').count()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df['col1'], df['col2'], df['col3'], avg = df.groupby([\"col1\", \"col2\", \"col3\"]).mean()\nprint(avg)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "<nooutput>", "redirect('Home.views.index')"], ["42352887-25", "things = {\n    'apple': {'color': 'red', 'weight': 1},\n    'banana': {'color': 'yellow', 'weight': 2},\n    'carrot': {'color': 'orange', 'weight': 3},\n    'egg': {'color': 'white', 'weight': 4}\n}\n\nsorted_things = sorted(things.items(), key=lambda t: t[1]['weight'])\nprint(sorted_things)\n# Output: [('carrot', 3), ('egg', 4), ('banana', 2), ('apple', 1)]", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import a_module\na_module.path", "print(a_module.__file__)"], ["247770-2", ":\nimport os\nprint(os.path.dirname(os.path.abspath(__file__)))", "print(os.getcwd())"], ["247770-13", ": import amodule", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "df['col1'] = df['col1'].sum() + df['col2'].sum()", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "print(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello World'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "1", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.intersection(s2)", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "def format_date(when):\n    date_parts = when.split(' ')\n    return date_parts[0]", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", "print(\"Warnings must be enabled for this action.\")", "warnings.simplefilter('always')"], ["22676-23", "import requests\n\nurl = 'http://www.example.com/songs/mp3.mp3'\nresponse = requests.get(url)\n\nwith open('mp3.mp3', 'wb') as f:\n    f.write(response.content)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", ":\n\nimport requests\n\nurl = 'https://example.com/file.zip'\nresponse = requests.get(url)\nwith open('file_name', 'wb') as f:\n    f.write(response.content)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import requests\nurl = 'http://www.example.com/'\nresponse = requests.get(url)\nprint(response.content)", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", ":\nurl.open('GET', 'http://example.com/file.zip').download()", "r = requests.get(url)"], ["22676-64", ":\nurl.get('10MB')", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "P * T = P.dot(T)", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614 is equal to 65.1", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "10, 9, 8, 7, 6, 5, 4, 3, 2, 1", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is: 7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "SGVsbG8gV29ybGQh", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = [\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"]\n\ndef identify_duplicates(mylist):\n    seen = set()\n    result = []\n    for item in mylist:\n        if item in seen:\n            result.append(item)\n        else:\n            seen.add(item)\n    return result", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "\"\"\"\nimport numpy as np\n\n# Read dataframe df\ndf = np.load('df.npy')\n\n# Write data to text file np.txt\nnp.save('np.txt', df)\n\"\"\"", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "\"\"\"\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\ndf.to_csv('c:\\\\data\\\\pandas.txt', index=False)\n\"\"\"", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "def split_by_last_char(x): \n    return x.split('-', 1) \n\nprint(split_by_last_char(\"ab-cd-efg\")) \n# Output: [\"ab\", \"cd-efg\"]", "print(x.rpartition('-')[0])"], ["15851568-9", "def get_last_part(s): \n    return s.split('-')[ -1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "list = [i for i in range(10)]", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "strftime(\"%f\", datetime.datetime.now())", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "Output:\n+------+------+\n|  col1 |  col2 |\n+------+------+\n|    1 |    4 |\n|    2 |    5 |\n|    3 |    6 |\n+------+------+", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "for col in df.columns:\n    print(df[col].count())", "df.astype(bool).sum(axis=1)"], ["30693804-5", "def lower_and_strip(text):\n    text = text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")\n    return text", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text.replaceAll(\"[^a-zA-Z0-9 ]\", \"\").toLowerCase()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag',attrs={'name':'name'})", "print(soup.find('name').string)"], ["2011048-15", "len(open(filepath).read())", "os.stat(filepath).st_size"], ["2600191-99", "3", "l.count('a')"], ["2600191-23", "def count_occurrences(l): \n  count = 0\n  for i in l: \n    count += 1\n  return count", "Counter(l)"], ["2600191-53", "def count_occurrences(l): \n  count = 0\n  for i in l: \n    count += 1\n  return count", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "def count_occurrences(l): \n  count = 0\n  for i in l: \n    count += 1\n  return count", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "3", "l.count('b')"], ["12842997-15", "copy(\"srcfile\", \"dstdir\")", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['b'] + df['a']", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "(t)", "tuple(l)"], ["16296643-20", "list(level1)", "level1 = map(list, level1)"], ["3880399-74", "print(dataobject.pprint())\n\n# Output:\n# The output of pprint object 'dataobject' is written to file 'logFile'", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "def get_index_of_rows_in_column(dataframe, column_name):\n    return dataframe[column_name].index.get_indexer(True)", "df.loc[df['BoolCol']]"], ["21800169-19", "list = [0, 1, 2, 3, 4]", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "def get_indexes(BoolCol):\n    indexes = []\n    for row in data:\n        if row[BoolCol]:\n            indexes.append(row.index)\n    return indexes", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df.BoolCol.get_index(True)", "df[df['BoolCol']].index.tolist()"], ["299446-100", "chdir('owd');", "os.chdir(owd)"], ["32063985-36", "<div>\n    <div>\n        <div id=\"main-content\">\n            <!-- remove this div -->\n        </div>\n    </div>\n</div>", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "a = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\n\ndef join_arrays(a, b):\n    result = []\n    for i in range(len(a)):\n        result.append((a[i], b[i]))\n    return result", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "a = zip(a, b)", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "5", "'abcd}def}'.rfind('}')"], ["20546419-7", "def shuffle_cols(arr):\n    return arr[::-1][:, np.random.permutation(len(arr.shape[1]))]", "np.random.shuffle(np.transpose(r))"], ["574236-63", "import os\n\nnum_files = len(os.listdir(\".\"))\nprint(num_files)", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "\"result = cursor.fetchone()\"", "cursor.fetchone()[0]"], ["4454298-91", "#test firstline\nprint('Hello World!')", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "def remove_duplicates(t): \n  new_list = [] \n  for item in t: \n    if item not in new_list: \n      new_list.append(item) \n  return new_list", "list(set(t))"], ["7961363-86", "def remove_duplicates(source_list): \n  unique_list = [] \n  for item in source_list: \n    if item not in unique_list: \n      unique_list.append(item) \n  return unique_list", "list(set(source_list))"], ["7961363-7", "def remove_duplicates(lst): \n  new_list = [] \n  for x in lst: \n    if x not in new_list: \n      new_list.append(x) \n  return new_list", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "list(a[0])", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('td', text='Address:').next_sibling.text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "base64.b64encode('data to be encoded')", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "def replace_not_present(A, [1, 3, 4]):\n  for i in A:\n    if i not in [1, 3, 4]:\n      A.remove(i)\n      A.append(0)\n  return A", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "def mean_across_dim(a):\n    return np.mean(a, axis=0)", "np.mean(a, axis=1)"], ["15907200-35", ":\n\nimport csv\n\nheader = [\"Name\", \"Age\", \"City\"]\n\nwith open(\"data.csv\", \"w\") as f:\n    writer = csv.writer(f)\n    writer.writerow(header)\n    writer.writerows(data)", "writer.writeheader()"], ["23359886-48", "a[0, 1] = 0; \na[0, 2] = 1;", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = pd.DataFrame({'email': [x.split('@')[0] for x in sf], 'list': [x.split('@')[1] for x in sf]})", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "def resize_image(image, width, height, filter):\n    image = image.resize((width, height), antialias=True)\n    return image", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "def find_differences(l1, l2): \n    diffs = [] \n    for i in range(len(l1)): \n        diffs.append([l1[i], l2[i]][0] - l2[i][0] \n                      if l1[i] != l2[i] else None]) \n    return diffs", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "</span>", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "sorted_list = sorted(list5, key=lambda x: x[1])", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "The code snippet to perform secondary sorting in Python is: \nsorted_list.sort(key=lambda x: x[1])", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "\"3.9\"", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df = df[df['A'].isin(df['A'].unique())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.plot(x, y, color='#000000')", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "\"import nltk\nfrom nltk.tokenize import word_tokenize\n\nwords = word_tokenize(df['text'])\n\ncounts = dict(Counter(words).most_common())\n\nprint('The most frequent 100 words are:')\nfor word, count in counts.items():\n    print('%s: %d' % (word, count))\"", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "import datetime\n\nutc = datetime.datetime.utcnow()\nprint(utc.strftime(\"%Y-%m-%d %H:%M:%S\"))", "datetime.now(pytz.utc)"], ["9262278-9", ": {\"data\": \"Hello World!\"}", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "background-process('arguments')", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "def findIndex(myList, sub):\n    for i in range(len(myList)):\n        if myList[i].find(sub) != -1 and myList[i].find('what') != -1:\n            return i", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame([('a', 1), ('b', 2), ('c', 3)], columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "xticks(ax.get_xticks(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "def count_keys(yourdict): \n  return yourdict.keys()", "len(list(yourdict.keys()))"], ["2212433-64", "10", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df = df.iloc[:, :-1].melt(id_vars='id')\ndf['id'] = None\ndf['col1'] = df['col1'].str.split('_').str[0]\ndf['col2'] = df['col2'].str.split('_').str[1]\ndf['col3'] = df['col3'].str.split('_').str[2]\ndf.drop('_', axis=1)", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "def reverse_q(q): \n  while q: \n    temp = q.pop() \n    q.append(temp) \n  return q", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate(a, b)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "ndarray[..., ndarray] = np.concatenate(a, b, axis=2)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a = np.concatenate(a, b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "ndarray a = np.array([1,2,3,4])\nndarray b = np.array([5,6,7,8])\n\na = np.concatenate((a, b), axis=0)\nprint(a)\n\nOutput:\narray([1, 2, 3, 4, 5, 6, 7, 8])", "np.array((a, b))"], ["4356842-88", "401 unauthorized", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "def get_key_location(df, key):\n    return df.index.get_loc(key)", "df.index.get_loc('bob')"], ["18730044-52", "def convert_list_to_matrix(list1, list2):\n    matrix = [[0 for x in range(len(list1))] for x in range(len(list2))]\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            matrix[i][j] = list1[i] + list2[j]\n    return matrix", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "\"thts icy\"", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "\"th is icy\"", "re.sub('i', '', 'it is icy')"], ["22187233-75", "\"thts icy\"", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "def remove_char(s, char): \n  return s.replace(char, \"\") \n\ns = \"hello world\"\nprint(remove_char(s, 'l'))\n# Output: helloworld", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(i) for i in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "def convert_list_of_strings_to_list_of_integers(strings):\n    int_list = []\n    for string in strings:\n        int_list.append(int(string))\n    return int_list", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", ":\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", ":\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", ":\nfor file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "dict = json.loads(request.body)", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by='column_name', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "def get_json_data(url):\n    response = requests.get(url)\n    data = response.json()\n    return data", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", ": \nfrom django.db.models.query import Filter\n\nq = Filter(Q(hour__gte=1) | Q(hour__lte=24))\n\nmodels.objects.filter(q)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "list.sort(key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "0", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.unquote(urllib.unquote(unescaped))", "json_data = json.loads(unescaped)"], ["18367007-15", ":\nFileOutputStream fos = new FileOutputStream(newFile);\nfos.write(newFileBytes);", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.pop(-1)", "list(dict.keys())[-1]"], ["10668585-75", ": max(AuthorizedEmail.added)", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", ": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")", "datetime.datetime.now()"], ["17794266-82", "def max_abs(x):\n    return np.amax(x)", "max(x.min(), x.max(), key=abs)"]], "(2, False, False)": [["11840111-96", "d1[k] / d2[k] for all keys k in d1 and d2", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d1['key'] = d1['key']/d2['key']", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import urllib.request\nimport gzip\n\ndef download_file(url):\n    filename = url.split('/')[-1]\n    file_path = 'file.gz'\n    response = urllib.request.urlopen(url)\n    with gzip.GzipFile(file_path, 'wb') as f:\n        f.write(response.read())\n    return file_path\n\ndownload_file(\"http://randomsite.com\")", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import urllib.request\n\nurl = \"http://randomsite.com/file.gz\"\nfile_name = \"file.gz\"\n\nresponse = urllib.request.urlretrieve(url, file_name)\n\nprint(\"File downloaded to\", file_name)", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "\u00ac(a \u2227 b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "30 days from today is the answer", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "import datetime\nimport dateutil.relativedelta\n\ndate = datetime.date.today()\ndate_two_months_from_today = date + dateutil.relativedelta.relativedelta(months=2)\n\nprint(date_two_months_from_today)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "import test1\ntest1.main()", "subprocess.call('test1.py', shell=True)"], ["843277-70", "if hasattr(obj, 'attr_name'):", "hasattr(obj, 'attr_name')"], ["2231663-53", "[list1 = [1, 2], list2 = [3, 4], list3 = [5, 6], list4 = [7]]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def slice_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst))]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "'s'", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "the code block that implements this rationale", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df_zero = df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "<nooutput>\nThe code generation task requires a string of code to be generated as the output", "webbrowser.open('http://example.com')"], ["4906977-61", "The answer code is:\n\nimport os\n\nprint(os.environ[\"HOME\"])", "os.environ['HOME']"], ["4906977-33", "the value of the environment variable \"HOME\"", "os.environ['HOME']"], ["4906977-98", "import os\n\nprint(os.environ)", "print(os.environ)"], ["4906977-9", "The answer code is os.environ.items()", "os.environ"], ["4906977-77", "Otherwise, return the default value", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "The answer code is dictionary.sort(key=lambda x: x.values())", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in dictionary.items():\n    if isinstance(value, list):\n        yield value", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats'] = df['stats'].str.split(',')\ndf['col1'] = df['stats'][:2]\ndf['col2'] = df['stats'][2:]", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line = line.replace('!@#$', '')", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace('!@#$', '')", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", ":", "string.replace('1', '')"], ["3939361-89", "line.replace('!@#$', '')", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t = t - 101", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "the time object with 5 hours subtracted from it", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "12-digit random number: 1234567890123456789", "random.randint(100000000000, 999999999999)"], ["13496087-95", "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.google.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nprint(soup.find('title'))\n# Output: <title>Google</title>", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.goto(0)", "root.lift()"], ["1823058-26", "for i in range(value):\n    print(str(i), ',' )", "'{:,}'.format(value)"], ["14406214-5", "ax.set_xticks([]);\nax.set_xticklabels([])\nax.set_xlabel('');", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.invert_xaxis()", "ax.xaxis.tick_top()"], ["10565598-66", "The answer code would be if (b.count(a) == len(a)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "numpy.in1d(b, a).all()"], ["13557937-8", "a list of 8 binary values, each representing the binary representation of the corresponding decimal number", "list('{0:0b}'.format(8))"], ["13557937-9", "8 in binary is b'1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "The answer code is:\n\nimport time\n\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "The code to reverse a list L is L.reverse()", "L[::(-1)]"], ["3940128-21", "the code snippet: \n\n\ndef reverse(L): \n    return L[::-1]", "L.reverse()"], ["89228-90", "import subprocess\n\nproc = subprocess.Popen(\"ls -l\", stdout=subprocess.PIPE)\n\noutput, err = proc.communicate()\n\nif proc.returncode == 0:\n    print(output)\nelse:\n    print(err)", "from subprocess import call"], ["89228-91", "\"python -m some_command arg1 arg2 arg3\"", "os.system('some_command with args')"], ["89228-25", "the code block that implements this rationale", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "the output of executing the external command with the given arguments", "stream = os.popen('some_command with args')"], ["89228-97", "import subprocess\n\ndef echo_hello_world():\n    subprocess.call(\"echo Hello World\")\n\necho_hello_world()", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "the code snippet \"import subprocess; subprocess.check_call('ls -l')\", which will execute the external command and return the output", "call(['ls', '-l'])"], ["5137497-23", "os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "The answer code would be os.path.dirname(path)", "os.path.dirname(path)"], ["5137497-66", "import os\n\npath = 'path'\n\ncanonical_path = os.path.realpath(path)\n\nprint(canonical_path)", "os.path.realpath(path)"], ["5137497-91", "import os\n\ndef get_current_dir():\n    return os.getcwd()", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "The full path of the current directory can be found using the os.getcwd() function", "full_path = os.path.realpath(__file__)"], ["14961562-66", "s = s.split(' ')\nlist_of_ints = [int(i, 16) for i in s]", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = df['DateObj'].apply(str)", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "The code block that implements this rationale is:\n\ndef generate_permutations(list1, list2): \n    # create a list of all combinations \n    result = [] \n    for i in range(len(list1)): \n        result.append([list1[i], list2[i]]) \n    return result", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "list(permutations([1, 2, 3]))", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, sep='\\t', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "To get rid of the Tkinter root window, use the command root.destroy() in Python", "root.destroy()"], ["2225564-15", "files = [f for f in os.listdir('.') if f.startswith('0') and f.endswith('.jpg')]", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "pd.pivot_table(df, index='order', values='sample').reset_index()", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle and then a = pickle.load(open('afile', 'rb')) and pickle.dump(a, open('afile', 'wb'))", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "(\"phrase\", \"phrase\")", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", ":\n\nimport csv\n\nwith open('output.csv', 'w', encoding='utf-8') as output_file:\n    writer = csv.writer(output_file, delimiter=';')\n    writer.writerow(['Name', 'Age', 'Country'])\n    writer.writerow(['John', 25, 'USA'])\n    writer.writerow(['Jane', 23, 'UK'])\n    writer.writerow(['Paul', 21, 'Germany'])", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data.sub(1)", "data.set_index('Date').diff()"], ["28901311-21", "The answer code would be A.index(x) for x in B", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "SELECT * FROM Task WHERE time_spent > 3;", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "the current date and time in the format 'YYYY-MM-DD HH:MM:SS'", "datetime.datetime.now()"], ["415511-29", "15:38:05", "datetime.datetime.now().time()"], ["415511-26", "str(datetime.now().strftime('%H:%M:%S'))", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "str(datetime.now())", "str(datetime.now())"], ["415511-33", "\"12:34:56\"", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.iloc[0], df.iloc[-1]", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "2010-05-24", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "The code snippet df.loc[:, df.isin(df.nonzero()).index].mean() can be used to calculate the mean of the nonzero values' indices of df", "np.flatnonzero(x).mean()"], ["5508352-50", "index = [0, 2, 4]", "a[tuple(b)]"], ["2233917-10", "(int, int, int)", "tuple(map(int, input().split(',')))"], ["2233917-8", "a function that takes in a tuple of integers from the user as input and returns the sum of the tuple", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticks(ax.get_xticks(), rotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "groupby('STNAME', 'COUNTY_POP').agg(sum).groupby('STNAME').sum()", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "a pivot table with the values of the 'Close' column aggregated by the values of the 'Close' column and the index of the dataframe as the index and the values of the 'index.time' column as the columns", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(x) for x in input().split()]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "yourdata[::-1]", "sorted(yourdata, reverse=True)"], ["13237941-56", "sorted(yourdata, key=lambda x: x['subkey'], reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "yourdata.sort(key=lambda d: (d['key'], -d['subkey'])).reverse()", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "a function that takes a networkx graph, a position, and a list of labels as input, and returns a list of nodes with the given labels at the specified position", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "the common prefix of the two paths, which is '/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", ": 'log/'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "if myobject:\n    return getattr(myobject.id, 'number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X[:, :, np.prod(X.shape[1:])]", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "[((0, 0), (1, 0), (0, 1), (1, 1)) , ((0, 0), (1, 0), (0, 1), (1, 1)) , ((0, 0), (1, 0), (0, 1), (1, 1)) , ((0, 0), (1, 0), (0, 1), (1, 1))]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "1 off delicious 5 ham", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "6 random numbers between 1 and 50", "random.sample(range(1, 50), 6)"], ["13628725-59", "The answer code is import random\nimport string\nimport numpy as np\n\ndef generate_random_numbers():\n    # generate six unique random numbers in the range of 1 to 49\n    random_list = []\n    for i in range(6):\n        random_list.append(random.randint(1, 49))\n    return random_list", "random.sample(range(1, 50), 6)"], ["15940280-74", "import time\n\ndef get_utc_time():\n    return time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Output: 2021-08-24 14:38:42", "datetime.utcnow()"], ["12280143-55", "import os\nos.chdir('..')", "os.chdir('..')"], ["15457504-91", "k.config['font'] = 'Purisa'\nk.config['font_size'] = 12", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "The answer code is df = pd.DataFrame(my_list, columns=['key', 'value'])", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if one is in d.values():\n    print(\"Yes\")\nelse:\n    print(\"No\")", "'one' in list(d.values())"], ["8214932-94", "d.values()[0] in ['one']", "'one' in iter(d.values())"], ["7125009-76", "<nooutput>", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.legend(loc='upper right', fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "re.sub(\"[\\s]+\", \"\", sentence).strip()", "sentence.replace(' ', '')"], ["8270092-68", "re.sub('[\\s]+', '', sentence).strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "def remove_whitespace(sentence):\n    return sentence.strip()", "sentence.strip()"], ["8270092-87", "re.sub(\"[\\s]+\", \"\", sentence).strip()", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.replace(\" \", \"\")", "sentence = ''.join(sentence.split())"], ["14591855-94", "import h5py\nimport pandas as pd\n\nwith h5py.File('/home/.../data.h5', 'r') as f:\n    df = pd.DataFrame(f['/home/.../data.h5']['/firstSet'])", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt', 'r').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "The code should look like this:\n\n\nimport imaplib\nimport urllib.error\nimport time\n\ndef handle_urlfetch_error(url, max_retries, retry_delay):\n    try:\n        return urlfetch_request(url)\n    except urllib.error.URLError as e:\n        if max_retries > 0:\n            print(\"Retrying after {} seconds\".format(retry_delay))\n            time.sleep(retry_delay)\n            return handle_urlfetch_error(url, max_retries-1, retry_delay)\n        else:\n            print(\"Max retries reached\")\n            raise", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "mydict.items(sorted(mydict.items(), key=lambda t: t[1], reverse=True))", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "'John'", "first_name = request.args.get('firstname')"], ["13279399-5", "the code snippet data = request.form.get('firstname')", "first_name = request.form.get('firstname')"], ["3278850-59", "The code to do this is:\n\nimport pandas as pd\n\ndf = pd.read_csv('file.txt', sep='\\n')", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "Entry.objects.filter(id__ne=3)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, 'html.parser')\n\ndiv_blocks = [div for div in soup.select('div')]", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgbstr = tuple(int(x, 16) for x in rgbstr.replace('0x', '').lower())", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "# This is the end of the program.", "sys.exit()"], ["73663-36", "sys.exit()", "quit()"], ["73663-66", "try:\n        # code to execute the script\n    except Exception as e:\n        print(\"Some error message\")", "sys.exit('some error message')"], ["21974169-23", "Transaction:\nSTART TRANSACTION\n  COMMIT\n\nOutput:\nTransaction committed", "con.commit()"], ["11269575-66", "subprocess.check_output(['espeak', text])", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "int(s)", "int(Decimal(s))"], ["1094717-69", "int(str)", "int(s.split('.')[0])"], ["31957364-53", "For example, A @ B", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "subprocess.run('rm -r some.file', shell=True)", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.pop()", "e = next(iter(s))"], ["5868374-42", "datetime.strptime(datestr, '%Y-%m-%d')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open('pdf_reference.pdf', 'rb').read()).decode('ascii')", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "the code snippet os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "import os\nos.chdir('new_directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "os.chdir(\"new_directory\")", "os.chdir('.\\\\chapter3')"], ["1299855-22", "to use the Python library Mechanize to upload a file", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "True", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "True", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "for div in soup.find_all('div', class_='comment-'):\n    print(div.attrs)", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "plt.cla()", "plt.cla()"], ["13156395-50", "import json\n\nwith open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = json.load(f)\n\n# do something with data", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json\nimport codecs\n\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)\n\n# Add a BOM (byte order mark) to the file if it's not already there\nif not codecs.BOM_UTF8 in f.mode:\n    f.seek(0, 0)\n    f.write(codecs.BOM_UTF8)\n\n# Write the data back to the file\nf.write(data)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "import sys\n\nif __name__ == '__main__':\n    print(\"Goodbye!\")\n    sys.exit()", "sys.exit(0)"], ["8751653-82", "10.0 * (int(s2, 2) / 2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "8.5", "float(int('-0b1110', 0))"], ["8751653-54", "10101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "struct.unpack('d', b8)[0]"], ["4789021-9", "def is_member(user):\n    if user.is_authenticated:\n        if user.is_staff or user.is_superuser:\n            return True\n        else:\n            return user.groups.filter(name='Member').exists()\n    else:\n        return False", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "user in ['group1', 'group2']", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "def find_rows(vals, (0,1)):\n    return vals[(vals[:,0]==0) & (vals[:,1]==1)]", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(os.path.dirname(script_path))", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "The relevant code is df.repartition(1).coalesce(1).write.csv('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "with open('mycsv.csv', 'w', encoding='utf-8') as f:\n    df.to_csv(f, index=False)", "df.write.csv('mycsv.csv')"], ["8092877-26", "a list of tuples [(1, 4), (2, 5), (3, 6)]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "def split_by_field(data, field):\n    for item in data:\n        yield from itertools.groupby(item, key=lambda x: x[field])", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "df['a'].values", "df['a'].tolist()"], ["20205455-79", "import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com')\nsoup = BeautifulSoup(response.text, 'html.parser')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = a[:, :3]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "import subprocess\n\ndef get_output(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output, err = proc.communicate()\n    return output\n\nprint(get_output(\"echo 'foo'\"))", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir('/the/dir/') and os.path.isfile(filename)", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "The answer code is myDict = dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", ": \nsorted_list = sorted(list_of_dicts, key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "the code block above", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "1", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "difflib.compare(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "If any of the values are floats, then the answer will be a float", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(x) for x in lst if isinstance(x, tuple) and len(x) == 2 and len(str(x[0])) == 8]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = [str(x).replace('.', '0.') for x in lst], where str(x).replace('.', '0.') replaces all the decimal points in the list elements with 0s", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0][1] + A[1][0]", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 1:2] and a[1, :] and a[2, 1:] respectively", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "a list containing the tags a and div", "soup.find_all(['a', 'div'])"], ["931092-70", "'dlroW olleh'", "'hello world'[::(-1)]"], ["931092-64", "s = ['z', 'y', 'x', 'w', 'v', 'u', 't', 's']\n\ndef reverse_list(s):\n    return s[::-1]\n\nreverse_list(s) # Output: ['s']", "s[::(-1)]"], ["931092-5", "def reverse_string(s): \n    return s[::-1] \n\nreverse_string('foo')  # 'oof'", "''.join(reversed('foo'))"], ["931092-74", "reversed(string)", "''.join(reversed(string))"], ["931092-65", "reversed(\"foo\")", "'foo'[::(-1)]"], ["931092-99", "The answer code is:\n\ndef reverse_string(s): \n    return s[::-1]", "a_string[::(-1)]"], ["931092-20", "a_string[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", ": \ndef reverse(s): \n    return s[::-1]", "''.join(reversed(s))"], ["163542-7", "In this case, the string should be b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "'grep f one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df.apply(pd.to_numeric).normalize()", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "a = 5\nstr(a)", "str(a)"], ["27318022-32", "import sys\nresult = sys.stdin.read()", "result = sys.stdin.read()"], ["40055835-26", "A = A - B", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df = df.drop(df.index[start_remove:end_remove + 1])", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(df.index[start_remove:end_remove + 1])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "arr.indices[mask]", "numpy.where(mask)"], ["32533944-71", "import pandas as pd\ndf = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "d.to_dict('list').tolist().map(pd.DataFrame.from_dict).to_frame()", "pd.DataFrame(d)"], ["1883604-86", "'file.gz'", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "the code snippet driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "if (somestring.lower().find(\"blah\") != -1):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if \"substring\" in string:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "string.find('substring')"], ["3437059-83", "s.find('is') > -1", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "import myfunction\nmyfunction()", "globals()['myfunction']()"], ["3061761-63", "ndarray.shape(a)", "a.shape"], ["3061761-55", "ndarray.shape(a)", "N.shape(a)"], ["3061761-89", ":\ndef get_dimensions(a):\n    return len(a), len(a[0])", "N.shape(a)"], ["3061761-31", "ndarray.shape(a)", "a.shape"], ["13291539-54", "0.00582811585976 is converted to float", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(dict.items())", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "words = list(myfile.split())", "words = open('myfile').read().split()"], ["7717380-65", "ndarray(a, dtype=object)", "a = np.array(a)"], ["9304908-37", "The query should be \"SELECT * FROM table_name WHERE value IN (1, 4, 7)\"", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", ":\n\ndef case_insensitive_compare(string1, string2):\n    # check if both strings are of the same length\n    if len(string1) != len(string2):\n        return False\n    # compare each character of the strings\n    for i in range(len(string1)):\n        if string1[i] != string2[i]:\n            return False\n    return True\n\nreturn case_insensitive_compare(string1, string2)", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "the code snippet:\n\ndef case_insensitive_string_compare(string1, string2):\n    # code to perform case-insensitive string comparison\n    return string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "def compare_case_insensitive(s1, s2):\n    # Compare two strings case-insensitively\n    s1 = s1.lower()\n    s2 = s2.lower()\n    return s1.find(s2) != -1", "(string1.lower() == string2.lower())"], ["319426-70", "True if the strings are identical case-insensitively, False otherwise", "(first.lower() == second.lower())"], ["319426-18", "first.lower() == second.lower()", "(first.upper() == second.upper())"], ["15455388-38", "The dataframe should contain the keys and values from the dictionaries in the original dictionary d", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df['col5'].groupby(df['col2']).transform('count')", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "your_obj.x", "getattr(your_obj, x)"], ["3743222-35", "the datetime.date() function", "datetime.datetime.now().date()"], ["3743222-73", "def datetime_to_date(datetime_string):\n    date = datetime_string.split('T')[0]\n    year = datetime_string.split('T')[1]\n    month = datetime_string.split('T')[2]\n    day = datetime_string.split('T')[3]\n    return date, year, month, day", "datetime.datetime.now().date()"], ["12496531-86", "A.sort(axis=0)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "The code to achieve this is session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "global_var = 'bob'", "globals()['something'] = 'bob'"], ["14766194-35", "a.shape[0] == 2 and a[1] == 2", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray.to_array()", "np.zeros((3, 3)).ravel()"], ["15579649-73", "a numpy structured array with the same keys and values as result", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "print(\"Goodbye!\")", "sys.exit(0)"], ["36139-44", "the sorted list sorted_list", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "mylist.sort()", "mylist.sort()"], ["36139-32", "The code snippet to achieve this is:\nlist.sort()", "list.sort()"], ["5280178-72", "import file \n\n# Load the contents of the file into the console\nfile.content.copy()\n\n# Print the contents of the file\nprint(file.content)", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "the code snippet if test.endswith(('.mp3', '.avi')):", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int(struct.unpack('<H', pS)[0]) and int(struct.unpack('<H', pS)[1])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.isupper() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "pd.to_sparse(df, index=False, dtype=int)", "df.to_sparse(0)"], ["1514553-90", "np.array([])", "variable = []"], ["1514553-71", "The answer code would be arr = [i]", "intarray = array('i')"], ["610883-92", "if (a.has_property):\n    print(\"Object 'a' has the property 'property'.\")\nelse:\n    print(\"Object 'a' does not have the property 'property'.\")", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "if (typeof(a) === 'object' && a.hasOwnProperty('property')) {\n  console.log('Object ' + a.property + ' has the property');\n} else {\n  console.log('Object ' + a + ' does not have the property');\n}", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property = 'default value'", "getattr(a, 'property', 'default value')"], ["13902805-83", "['a', 'b', 'c', 'd']", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "['a', 'b', 'c', 'd']", "list(set('aaabcabccd'))"], ["13902805-87", ":\n\ndef unique_chars(s):\n    unique_chars = set()\n    for char in s:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return unique_chars", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "17", "str.find('s', 16)"], ["674764-33", "5", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "5", "'sdfasdf'.index('df')"], ["674764-64", "the index of the first occurrence of 'a' in the string str", "str.find('a')"], ["674764-91", "def find_index(str, sub_string): \n    for i in range(len(str)): \n        if str[i] == sub_string: \n            return i \n    return -1", "str.find('g')"], ["674764-3", "11", "str.find('s', 11)"], ["674764-47", "17", "str.find('s', 15)"], ["674764-5", "11", "str.find('s', 11, 14)"], ["10194713-64", "cityPopulation = {k: v[::-1] for k, v in cityPopulation.items()}", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "u.sort(key=lambda x: x[1], reverse=True)", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", ":\ndef reverse_dict(d):\n    return {v: k for k, v in d.items(reverse=True)}", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "d.values().sort()", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "#!/bin/bash\n\nif [ $# -eq 1 ]; then\n  if [ \"$1\" = \"0\" ]; then\n    exit 0\n  else\n    exit 1\n  fi\nelse\n  echo \"Incorrect number of arguments\"\n  exit 1\nfi", "sys.exit(0)"], ["179369-62", ":\n\nimport sys\nsys.exit('aa! errors!')", "sys.exit('aa! errors!')"], ["179369-47", "The code snippet is sys.exit() and the answer is this code snippet", "sys.exit()"], ["19779790-35", "yesterday = datetime.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.DataFrame(nvalues)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "the code snippet href = re.search('follow?page', url).group()", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "the mean of the two arrays", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "The answer code is set(LoD.keys())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD.keys())", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "The code to achieve this is:\nlist = [int(x[i]) for i in range(len(x))]", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "a DataFrame with two columns, 'Month' and 'Fruit', containing the grouped data", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "import requests\n\nurl = 'https://www.mysite.com/'\n\nusername = 'username'\npassword = 'pwd'\n\nresponse = requests.get(url, auth=username, auth=password)", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "a list of folders in the zip file that end with a '/' character", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "def remove_spaces(d): return ''.join(d.values()).replace(\" \", \"\")", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "The code block that implements this rationale is:\n\ndict_str = json.dumps(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "the variable json_data containing the loaded json data", "json_data = json.loads(json_string)"], ["2759067-52", "os.rename(src, dst)", "os.rename(src, dst)"], ["16389188-53", "window.center()", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "request.args.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "the_dict = thedict.lower()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1.merge(df2, on='revenue', how='outer')", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", ":\nimport os\nos.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "request.args.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "1024", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'string_of_characters_like_these%23%40%3F%25%5E%Q%23'", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "123.456", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", ":\n\npath = path.split('/') \nlast_part = path[-1] \nprint(last_part)", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "x['c']", "list(x.keys()).index('c')"], ["10484261-51", "list = [program for program in programs if program.lower() == 'new york']", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "the modified string with special characters replaced by their corresponding %xx escape", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "a function that takes a string as an argument and returns a properly encoded URL-safe version of the string", "urllib.parse.quote_plus('a b')"], ["32751229-20", "df['Y1961'] + df['Y1962'] + df['Y1963']", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "4", "sum(((i > 5) for i in j))"], ["10543303-81", "3", "len([1 for i in j if (i > 5)])"], ["10543303-37", "The syntax for this is j.count(i)", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "a1.any(a2)", "np.any(np.in1d(a1, a2))"], ["9775731-24", "def clamp(my_value, min_value, max_value): \n    if my_value < min_value: \n        return min_value \n    elif my_value > max_value: \n        return max_value \n    else: \n        return my_value", "max(min(my_value, max_value), min_value)"], ["14931769-56", "itertools.combinations(range(2**n), n)", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "list(itertools.combinations(range(2**n), n))", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "000, 001, 010, 011, 100, 101, 110, 111", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "itertools.combinations(range(2), 3)", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "import datetime\nnow = datetime.now()\nprint(now + timedelta(days=1, hours=3))", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "0.45", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.imshow(im, cmap=plt.get_cmap('RdBu'), ax=ax, colorbar=True)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "def remove_first_and_last_lines(s):\n    return s[1:-1]", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "the code block that implements this rationale:", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "the value of the 'a' and 'c' columns in the 'data' dataframe", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "Users = Users.filter(userprofile__level >= 0)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "list_of_lists = [[x for x in test if x != '_'] for test in test]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "to use the Python built-in function groupby() which takes a sequence as an argument and returns an iterator of groups, or collections of items that are similar", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if 'title' in request.POST:\n    return request.POST['title']\nelse:\n    return ''", "request.POST.get('title', '')"], ["20222485-17", "[i for i in range(10)]", "list(accumulate(list(range(10))))"], ["16436133-47", "if (mydata is None or not mydata):\n    mydata = {}", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "11", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "'foo'", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "def cut_string(s, delimiter):\n    return s.split(delimiter)[1]", "s.rfind('&')"], ["8247792-90", "str.split('&')", "s[:s.rfind('&')]"], ["35178812-30", "the number of unique values in the column 'A' in the pandas dataframe ex", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "arr = np.array([list1, list2, list3])", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = s[0]", "t = tuple(x[0] for x in s)"], ["11205386-94", "<meta name=\"City\">\n<content>New York</content>", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "the code snippet os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "import pandas as pd\ndf.to_csv(filename, index=False, sep='\\t', engine='python', date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "The answer code is a = a.fillna(0)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "np.min(arr1, arr2, arr3)", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "def get_day_of_week(dt):\n    day = dt.strftime(\"%A\")\n    return day[:3]", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "the code snippet:\n\nd = {'a': 'hello', 'b': 'world'}\n\ndef to_string(d):\n    return ', '.join(map(str, d.items()))", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "a boolean array where True indicates that the row should be selected", "df.loc[df['column_name'] != some_value]"], ["17071871-51", ":\n\ndf = df[df['column_name'] not in some_values]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df.loc[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df[\"B\"] == \"one\" or \"three\"]", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import module_list = [\n    'importlib.util.find_module',\n    'importlib.machinery.SourceFileLoader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "from some.package import *", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "the code snippet", "numpy.where((x == 0))[0]"], ["2428092-52", "{\n    \"data\": [\n        {\n            \"name\": \"John\",\n            \"age\": 25\n        },\n        {\n            \"name\": \"Jane\",\n            \"age\": 23\n        }\n    ]\n}", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "s.encode('hex')", "s.decode('hex')"], ["10824319-49", "s.decode('hex')", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "the code snippet str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "The answer code is x.astype(np.float64)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "0x12345678", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x10000000000000000", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "import os\nos.chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "200", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "200", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "the renamed dataframe data with the column 'gdp' renamed to 'log(gdp)'", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "nothing, since this is a code generation task and no output is expected", "dbb.commit()"], ["5352546-44", "For example, my_dict.filter(key__startswith='l', m='m', n='n') would return a subset of the dictionary's key-value pairs with keys matching 'l', 'm', or 'n'", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict[('l', 'm', 'n')]", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "a list of items from bigdict where the keys are present in ('l', 'm', 'n')", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "bigdict.items()[list('lmn')]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "The answer code is json.loads(u)", "json.load(u)"], ["4940032-13", "if (file_name == 'example.txt' and string_to_search == 'blabla'):\n    print('Found')\nelse:\n    print('Not Found')", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "The string 'blabla' is found in the text file 'example.txt'", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "The function search_string can be used to search for the string blabla in the file example.txt", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "302 Found", "r = requests.get(url)"], ["4476373-22", "The answer code is response = requests.get(url, params=payload)", "r = requests.get(url, params=payload)"], ["4476373-71", "url + '?' + urlencode(payload)", "r = requests.post(url, data=payload)"], ["4476373-99", "import requests\n\nurl = 'http://example.com/api'\ndata = {'post_data': 'value1=1&post_data=value2=2'}\nresponse = requests.post(url, data=data)\n\n# print(response.text)", "post_response = requests.post(url='http://httpbin.org/post', json=post_databin(173)"], ["1476-88", "5", "int('01010101111', 2)"], ["1476-71", "5", "int('010101', 2)"], ["1476-39", "45", "int('0bbin(21)"], ["1476-59", "6", "int('11111111', 2)"], ["41178532-76", "the code snippet trace_df.query('ratio > 0').count() / len(trace_df), where trace_df is the dataframe and ratio is the column name", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "list(itertools.combinations(a, r=2))", "list(itertools.product(*a))"], ["364519-94", "for key, value in d.items():", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in d.items():", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in dict.items():", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():\n    yield key", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items(), key=lambda t: t[1]):", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "for key in sorted(foo):\n    #code to process the key and its value", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "The answer code is s = re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s)", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "tf.convert_to_tensor([1, 2, 3], dtype=tf.int32)", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series([['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "The code can be written as:\n\nd1 = {'a': ['a1', 'a2'], 'b': ['b1', 'b2']}\nd2 = {'a': ['a1', 'a2'], 'b': ['b3', 'b4']}\n\nresult = d1.intersection(d2)\nprint(result)\n\n# Output: {'a': ['a1', 'a2'], 'b': ['b1', 'b2']}", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "import pandas as pd\ndata = [('John', 25, 'Male'), ('Jane', 24, 'Female'), ('Mike', 23, 'Male'), ('Alice', 22, 'Female')]\ndf = pd.DataFrame(data, columns=['name', 'age', 'gender'])", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "df = pd.DataFrame(d, columns=['Date', 'DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "5.5", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "a pivot table with 'year', 'month', and 'item' as the index, and the columns containing the corresponding values from the 'value' column of the dataframe 'df'", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'])", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", ":\n\n\nimport subprocess\n\np1 = subprocess.Popen(\"p1\", stdout=subprocess.PIPE)\nstdout, stderr = p1.communicate()\n\nif p1.returncode == 0:\n    output = stdout.decode()\nelse:\n    output = \"Process exited with return code {}\".format(p1.returncode)", "p1.communicate()[0]"], ["748028-100", "For example, output = subprocess.check_output('exe', shell=True)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "for element in a.findall('element'):\n    print(element.attrib)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "[x for x in a.iter('subelements', exclude_root=True)", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "2 is the next greatest number in the list, so the answer is num_list[0] + 1", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = [1, 2, 3]\na.remove(\"b\")  # returns [1, 2, 3]", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,", "a.remove(c)"], ["2793324-93", "a = [i for i in a if i != 6]", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5] -> a = [1,2,3,4,5]", "a.remove(6)"], ["2793324-97", "a = [1, 2, 3, 4, 5]\na.remove(c)  # Output: [1, 2, 3, 4, 5]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [1, 2, 3, 4, 5]\na.remove(c)  # Output: [1, 2, 3, 4, 5]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "#!/bin/bash\n\n# Call otherfunc\notherfunc\n\n# Rest of the code in test.sh\n\n\nThis will call the otherfunc function inside the bash script test.sh", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "def execute_function():\n  print(\"Hello World\")\n\nif __name__ == '__main__':\n  execute_function()", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "import pandas as pd\ndf.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "3434.35353", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=[datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "Sample.objects.filter(year=2011).values('month').annotate(Count=Count('id'))", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "<nooutput>", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "<nooutput>", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "to use the open() function to open the file xxx.mp4 and then use the write() function to write the contents of the file to the file f", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "The answer code is:\n\n\nimport numpy as np\nimport pandas as pd\n\n# define dataframe\ndf = pd.DataFrame([[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]], columns=['a'])\n\n# sort the dataframe\nsorted_df = df.sort_values(by='a').sort_index(level=0)\n\n# get the indices of the sorted dataframe\nsorted_indices = np.argsort(sorted_df.a)\n\n# create a new dataframe with the sorted values\nsorted_df2 = sorted_df.iloc[sorted_indices]", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "a dataframe df2 containing the unique rows from df1 with the frequency of each row", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "def get_avg_3(df):\n    result = []\n    for col in df.columns[:3]:\n        result.append(df[col].mean())\n    return result\n\ndf['avg_3'] = get_avg_3(df)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "301 redirect to '/Home/index'", "redirect('Home.views.index')"], ["42352887-25", "The code snippet to achieve this is:\n\nthings = [\n    {'name': 'car', 'weight': 10},\n    {'name': 'bike', 'weight': 5},\n    {'name': 'bus', 'weight': 15},\n    {'name': 'boat', 'weight': 20}\n]\n\nsorted_keys = sorted(things, key=lambda x: x['weight'])\n\nprint(sorted_keys)\n\nOutput:\n['bus', 'car', 'boat']", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import os\nprint(os.path.dirname(os.path.abspath('a_module')))", "print(a_module.__file__)"], ["247770-2", "The answer code is import os\nprint(os.path.dirname(os.path.abspath(__file__))) which prints the path of the current python module", "print(os.getcwd())"], ["247770-13", "importlib.import_module('amodule').__path__", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "The df.sum() function can be used to sum the values in each row of every two adjacent columns in a dataframe", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "import time; print(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "ps -ef | grep something | wc -l -> wc -l", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "def find_intersection(s1, s2): \n    # initialize an empty list \n    intersection = [] \n    # iterate over both series \n    for i in range(len(s1)): \n        # check if element is in both series \n        if s1[i] in s2: \n            intersection.append(s1[i]) \n    # return the list of common elements \n    return intersection", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "datetime.datetime.strptime('when', '%d %B %Y').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "The syntax for this is Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", ": \"The action 'always' will enable warnings for all warnings.\"", "warnings.simplefilter('always')"], ["22676-23", "the code snippet urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", ":\n# os.mkdir('downloads')\n# download(url, file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "urllib.request.urlretrieve('http://www.example.com/', 'file.zip')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", ":\nimport requests\nurl = 'http://example.com/file.zip'\nresponse = requests.get(url)\nwith open('file.zip', 'wb') as f:\n    f.write(response.content)", "r = requests.get(url)"], ["22676-64", "import requests\nimport os\n\ndef download_file(url, destination):\n    r = requests.get(url)\n    with open(destination, 'wb') as f:\n        f.write(r.content)\n\nurl = \"http://example.com/file.zip\"\ndestination = \"10MB\"\ndownload_file(url, destination)", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "import numpy as np\nfrom scipy.linalg import inv\n\ndef multiply(P, T):\n    P_inv = inv(P)\n    return P_inv @ T\n\n# example\nP = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nT = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])\n\nprint(multiply(P, T))\n\nOutput:\n[[28 36 44]\n [52 60 72]\n [78 90 104]]", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614 is equal to 6561.4 in decimal", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "10, 9, 8, 7, 6, 5, 4, 3, 2, 1", "list(reversed(list(range(10))))"], ["20573459-83", "7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "a set containing the duplicate values in mylist", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "df.to_csv(np.txt, sep='\\t', engine='python')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "df.to_csv('c:\\\\data\\\\pandas.txt', index=False)", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "The answer code is x.split('-')[-1]", "print(x.rpartition('-')[0])"], ["15851568-9", "to use the split method with a delimiter of '-' and then take the last element of the resulting list", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "a random list of integers", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "'%f.%f' % (time.strftime(\"%m\"), time.microsecond)", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "<nooutput>", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "a function that takes a pandas data frame as an argument and returns a dictionary with the column name as the key and the count of non-zero values as the value", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.lower().replace('[^a-zA-Z0-9 ]', '').strip()", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", ":\n\ndef remove_non_alphanumeric(text):\n    text = text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")\n    return text", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup = BeautifulSoup(html_string, 'html.parser')\nname = soup.find('tag', attrs={'name': 'name'})\nprint(name)", "print(soup.find('name').string)"], ["2011048-15", "the code snippet:\n\nwith open(filepath, 'r') as f:\n    count = sum(1 for line in f.readlines() if line.strip())", "os.stat(filepath).st_size"], ["2600191-99", "l.count(\"a\")", "l.count('a')"], ["2600191-23", "l.count()", "Counter(l)"], ["2600191-53", "len(l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "len(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "3", "l.count('b')"], ["12842997-15", "import shutil\n\nif __name__ == '__main__':\n    srcfile = 'srcfile'\n    dstdir = 'dstdir'\n    shutil.copy(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['b'] + df['a']", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "t = tuple(t)", "tuple(l)"], ["16296643-20", "level1 = level1.split(',')", "level1 = map(list, level1)"], ["3880399-74", "with open('logFile', 'w') as logFile:\n    dataobject.pprint()\n    # write the output of pprint to file\n    logFile.write('The output of pprint is:')\n    logFile.write(dataobject.pprint())", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "the index of the rows in the 'BoolCol' column", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.eq(True).index", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "indexes = [i for i, x in enumerate(dataframe.BoolCol) if x == True]", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df.BoolCol.index[df.BoolCol.values]", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "<div id=\"main-content\">\n  <div>Content</div>\n</div>\n\nbecomes\n\n<div>Content</div>", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "[a[i] for i, t in enumerate(a) for a in b if i == t], where a and b are iterables", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "a 2-d array result containing the elements of a and b zipped together", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "6 (the last occurrence of '}' in the string)", "'abcd}def}'.rfind('}')"], ["20546419-7", "r[:, np.random.shuffle(r.shape[1])].T", "np.random.shuffle(np.transpose(r))"], ["574236-63", "os.listdir(path)", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "For example:\n\ncursor.execute(\"SELECT * FROM table_name\")\nresult = cursor.fetchone()", "cursor.fetchone()[0]"], ["4454298-91", "'import os\nos.rename(\"infile\", \"outfile\")'", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "def check_regex(s):\n    if re.search(r'ba[rzd]', s):\n        return True\n    else:\n        return False", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "list(t).remove(t.duplicates())", "list(set(t))"], ["7961363-86", "The answer code is source_list = list(set(source_list))", "list(set(source_list))"], ["7961363-7", "abracadabra", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "The answer code would be a[0].tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('td', text='Address:').find_next_sibling().text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "'data to be encoded'", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "the code snippet data.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "def replace_not_in_array(arr, target_arr):\n    return [0 if x not in target_arr else x for x in arr]", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "def mean_across_dim(a):\n    return np.mean(a, axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "to use the csv.writer object to write a header to the file", "writer.writeheader()"], ["23359886-48", "ndarray[0:, 1] = 0", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.to_frame('email').rename(columns={'email': 'list'}).reset_index(drop=True)", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "the resized image image with a width of x and a height of y and with the ANTIALIAS filter applied", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "For example, if l1 = [1, 2, 3, 4, 5] and l2 = [2, 4, 6, 8, 10], the output would be [(0, 2), (1, 4), (2, 6), (3, 8), (4, 10)]", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "This sorts the list list5 in ascending order according to the degrees value of its elements, which is the second element in each element of the list", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "For example, if you want to sort a list by size and then by name, you could do sorted_list = sorted(list, key=lambda x: (x.size(), x.name))", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "3.9", "json.dumps(Decimal('3.9'))"], ["29836836-87", "def filter_duplicates(df, column):\n    return df[df[column].isin(df[column].unique())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(mappable(plt.imshow(image)))", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "df['text'].value_counts().most_common(100)", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "16:08:03", "datetime.now(pytz.utc)"], ["9262278-9", "return JsonResponse(data)", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "import subprocess\n\nproc = subprocess.Popen([\"background-process\", \"arguments\"], stdout=subprocess.PIPE)\n\n# Wait for the process to finish\nproc.wait()", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "def find_index(myList, sub):\n    for i in range(len(myList)):\n        if myList[i].find(sub) != -1:\n            return i\n    return -1", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame(ips_data['ips'], columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "the code snippet ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict)", "len(list(yourdict.keys()))"], ["2212433-64", "5", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "the code block that implements this rationale", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "The code to achieve this is\n\nsubprocess.call([\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"])", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.reverse()", "q.put((-n, n))"], ["21887754-31", "ndarray.concatenate(a, b, axis=0)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "ndarray.concatenate(a, b, axis=1)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "This will concatenate the two arrays a and b along the first axis, and return a new array c", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "the numpy array c containing the elements of a and b concatenated along the first axis", "np.array((a, b))"], ["4356842-88", "401 unauthorized", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "df.loc[\u2018bob\u2019]", "df.index.get_loc('bob')"], ["18730044-52", "The answer code is [[1, 4], [2, 5], [3, 6]]", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "def remove_char(s, char):\n    return s.replace(char, \"\")\n\nresult = remove_char(\"it is icy\", \"i\")\n\nprint(result)\n\n# Output: th is icy", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "'it is icy'.replace('i', '') or 'it is icy'.replace('i', '').lower() or 'it is icy'.replace('i', '').capitalize() or 'it is icy'.replace('i', '').swapcase() or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').decode('utf-8') or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').replace(' ', '').encode('utf-8').replace('i', '').decode('utf-8') or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').decode('utf-8') or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i',", "re.sub('i', '', 'it is icy')"], ["22187233-75", "s = \"it is icy\"\nfor char in s:\n    if char == 'i':\n        s = s.replace(char, \"\")\nprint(s)", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", ":\n\ndef remove_char(s, char):\n    return s.replace(char, \"\")\n\n# Example\ns = \"Hello World!\"\nprint(remove_char(s, 'l'))\n# Output: Hll Wrld!", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(i) for i in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, numbers))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "\"glob.glob('/mydir/*.txt')\"", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "the code block that implements this rationale", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "import os\nimport glob\n\nfor file in glob.glob('/mydir/*.txt'):\n    print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "import json\ndata = json.loads(request.body)", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by='column_name', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import requests \nurl = 'url' \nresponse = requests.get(url) \ndata = response.json()", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "djangoproject.models.TimeField.objects.filter(hour=hour)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "list.sort(key=lambda x: (x['points'], x['time'])).", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "42987352096234864", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json.loads(unescaped.encode('utf-8'))", "json_data = json.loads(unescaped)"], ["18367007-15", "with open('newFile', 'wb') as newFile:\n    newFile.write(bytes(newFileBytes))", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "the code snippet:\n\nfrom django.db.models import Max\n\nMax('added', 'AuthorizedEmail')", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "datetime.now()", "datetime.datetime.now()"], ["17794266-82", "x.max()", "max(x.min(), x.max(), key=abs)"]], "(0, True, False)": [["11840111-96", "d1_values = d1.values() \nd2_values = d2.values() \nresult = d1_values.copy() \nresult.update(d2_values) \nprint(result)", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d1 = {\n    'a': 10,\n    'b': 20,\n    'c': 30\n}\n\nd2 = {\n    'a': 40,\n    'b': 50,\n    'c': 60\n}\n\nnew_dict = d1.items() - d2.items()\nprint(new_dict)\n# Output: {'b': 20, 'c': 30}", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import urllib.request\nurl = \"http://randomsite.com/file.gz\"\nresponse = urllib.request.urlretrieve(url, \"file.gz\")\nprint(response)", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import urllib.request\nimport urllib.request\n\nurl = \"http://randomsite.com/file.gz\"\nfilename = \"file.gz\"\n\nresponse = urllib.request.urlretrieve(url, filename)\n\nif response is None:\n    print(\"File already exists\")\nelse:\n    with open(filename, 'wb') as f:\n        f.write(response[0])", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "def filter_model(q):\n    q.filter(MyModel.charfield.length <= 255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "a = numpy.bitwise_xor(a, b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "31", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "import datetime\ndate = datetime.date.today()\nord = date.toordinal()\ndate2 = datetime.date.fromordinal(ord)\nprint(date2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "0", "subprocess.call('test1.py', shell=True)"], ["843277-70", "def hasattr(obj, attr_name):\n    try:\n        return getattr(obj, attr_name)\n    except AttributeError:\n        return False\n\nif __name__ == '__main__':\n    obj = {'attr_name': 'value'}\n    print(hasattr(obj, 'attr_name'))", "hasattr(obj, 'attr_name')"], ["2231663-53", "def zip_longest(iterables):\n    max_length = max(len(i) for i in iterables)\n    result = []\n    for i in zip(iterables):\n        result.append(i)\n    for i in itertools.islice(iterables, None, None, max_length):\n        result.extend(i)\n    return result", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def get_list_slices(lst, n):\n    \"\"\"\n    Slice a list into a list of sub-lists of length n\n    \"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n# Test\nlist_slices = get_list_slices([1, 2, 3, 4, 5], 2)\nprint(list_slices)\n# Output: [ [1, 2], [3, 4], [5] ]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "<nooutput>", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df[df['X'].groupby(df['User']).transform('sum') == 0]", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'X': [0, 0, 1, 1]})\n\nprint(df[df['X'] == 0])", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "import webbrowser\n\nwebbrowser.open('http://example.com')", "webbrowser.open('http://example.com')"], ["4906977-61", "import os\nprint(os.environ[\"HOME\"])", "os.environ['HOME']"], ["4906977-33", "import os\nprint(os.path.expanduser())", "os.environ['HOME']"], ["4906977-98", "import os\n\nprint(os.getenv(\"MY_ENV_VAR\"))\nprint(os.environ)\nprint(os.putenv(\"MY_ENV_VAR\", \"new_value\"))", "print(os.environ)"], ["4906977-9", "import os\n\nenv = os.environ\n\nprint(env.keys())\n\n# Output:\n# ['HOME', 'PATH', 'PYTHONPATH', 'USER', 'LANG', 'LC_ALL', 'TZ']", "os.environ"], ["4906977-77", "if os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value'):\n    print(os.getenv('KEY_THAT_MIGHT_EXIST'))\nelse:\n    print('No such environment variable.')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "def sorted_dict(dictionary):\n    return sorted(dictionary.items(), key=lambda t: t[1])\n\nprint(sorted_dict(dictionary))", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in dict.items():\n    print(value)", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['new_col'] = df['stats'].str.split(',').apply(lambda x: x.split(' ')).applymap(str).drop('_split_')", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(', ')  # split string in column 'stats' by ',' into separate columns \ndf['name'] = df['name'].str.split(', ')  # split string in column 'name' by ',' into separate columns \ndf['value'] = df['value'].str.split(', ')  # split string in column 'value' by ',' into separate columns", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line = re.sub('!@#$', '', line) \nprint(line)", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace(\"!@#$\", \"\")", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.rsplit(\"1\", 1)  # returns ['string']", "string.replace('1', '')"], ["3939361-89", "line = re.sub('!@#$', '', line)\nprint(line) # Output: ' '", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "10 minutes less than the current time", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "dt.replace(hour=-5, minute=0, second=0, microsecond=0)", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "random.randint(100000000000, 999999999999)"], ["13496087-95", "87654321", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "url = 'http://www.google.com/'\nurl_parts = urlparse(url)\nscheme = url_parts.scheme\nnetloc = url_parts.netloc\npath = url_parts.path\nparameters = url_parts.params\nquery = url_parts.query\nfragment = url_parts.fragment", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.setscrreg(0, 0, 0)", "root.lift()"], ["1823058-26", "value = 10000\nprint(format(value, '0.2f'))  # Output: 10000.00", "'{:,}'.format(value)"], ["14406214-5", "ax.set_yticklabels([\"x\", \"y\", \"z\"])", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_ylim([0, 180])", "ax.xaxis.tick_top()"], ["10565598-66", "def check_array_contains_all(a, b):\n    if any(a == b for a in a):\n        return True\n    else:\n        return False", "numpy.in1d(b, a).all()"], ["13557937-8", "0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "list('{0:0b}'.format(8))"], ["13557937-9", "0bint(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "import time\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "for i in range(len(L)-1, -1, -1):\n    yield i", "L[::(-1)]"], ["3940128-21", "def reverse(L):\n    return itertools.chain.from_iterable(reversed(L))", "L.reverse()"], ["89228-90", "import subprocess\n\n# Call the external command\nresult = subprocess.check_call(\"ls -l\")\n\n# Check the return code\nif result == 0:\n    print(\"Success\")\nelse:\n    print(\"Failure\")", "from subprocess import call"], ["89228-91", "import subprocess\n\nsubprocess.check_call(\"some_command\", args=\"with args\")\n\n# Output: 0", "os.system('some_command with args')"], ["89228-25", "import os\n\n# Call the os.system function\nos.system(\"some_command < input_file | another_command > output_file\")", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "import subprocess\n\nsubprocess.check_call(\"some_command\", args=\"with args\")\n\n# Output: 0", "stream = os.popen('some_command with args')"], ["89228-97", "import subprocess\n\nproc = subprocess.Popen(\"echo Hello World\", shell=True)\n\noutput = proc.communicate()\n\nprint(output)\n\n# Output:\n# Hello World", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "import subprocess\n\n# Call the external command\nresult = subprocess.check_call(\"ls -l\")\n\n# Check the return code\nif result == 0:\n    print(\"The command succeeded\")\nelse:\n    print(\"The command failed\")", "call(['ls', '-l'])"], ["5137497-23", "import os\nprint(os.getcwd())", "os.path.realpath(__file__)"], ["5137497-33", "import os\n\npath = \"path\"\n\ndir_list = os.listdir(path)\nprint(os.path.relpath(path, start=os.getcwd()))", "os.path.dirname(path)"], ["5137497-66", "import os.path\nimport pathlib\n\npath = pathlib.Path('path')\n\nprint(os.path.normpath(path))\n\n# Output: A/B", "os.path.realpath(path)"], ["5137497-91", "\"os.listdir\"", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "import os\n\nos.path.dirname(os.getcwd())", "full_path = os.path.realpath(__file__)"], ["14961562-66", "list = struct.unpack('<H*', s) \nprint(list)  # Output: [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = pd.to_datetime(df['DateObj']).astype('str').strptime('%d %B %Y')", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "for p in permutations([1,2,3], [4,5,6]):\n    print(p)", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "for i in range(1, 4):\n    print(list(itertools.permutations([1, 2, 3])))\n\nOutput:\n\n[\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1]\n]", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename.csv, sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "import Tkinter\nfrom Tkinter import Tk\n\nroot = Tk()\nroot.destroy()\n\nimport struct\nimport matplotlib.backend_tools as bt\nbt.ToolBase.destroy(root)", "root.destroy()"], ["2225564-15", "files = ['.001.jpg', '.101.jpg', '.201.jpg', '.301.jpg', '.401.jpg', '.501.jpg', '.601.jpg', '.701.jpg', '.801.jpg', '.901.jpg']", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "import pandas as pd\n\ndf = pd.DataFrame({'order': ['A', 'A', 'B', 'B'],\n                   'sample': ['a', 'b', 'c', 'd']})\n\ndf.pivot_table(index='order', values='sample', aggfunc='first')\n\n# Output:\norder  a  b  c  d\nA     a  None  None  None\nB     b  c  None  d", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle\n\nafile = open('afile', 'wb')\npickle.dump([1,2,3,4,5], afile)\nafile.close()\n\nimport pickle\n\nunpickled = pickle.load(afile)\nprint(unpickled)\n\nOutput: [1, 2, 3, 4, 5]", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "<nooutput>", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "bytes.decode('utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data.diff()", "data.set_index('Date').diff()"], ["28901311-21", "def index_of_elements(arr1, arr2):\n    return numpy.searchsorted(arr1, arr2)", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "def query_data(time_spent):\n    # query the data from the Task table\n    query = \"SELECT * FROM Task WHERE time_spent > 3\"\n    data = pd.read_sql(query, con)\n    return data\n\n# modify the options for the time_spent column\ncolumn = data.columns[\"time_spent\"]\ncolumn.sortable = False\ncolumn.width = 80\n\n# query the columns of the DataFrame\ndata[\"time_spent\"] = data[\"time_spent\"].apply(query_data)\n\n# distinct the sum of unique values\ndata[\"total_time\"] = data[\"time_spent\"].distinct().sum()\n\n# print the output\nprint(data)", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "import time\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "datetime.datetime.now()"], ["415511-29", "import time\nprint(time.gmtime())", "datetime.datetime.now().time()"], ["415511-26", "import time\nprint(time.strftime(\"%H:%M:%S\"))", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "import time\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "str(datetime.now())"], ["415511-33", "import time\nprint(time.gmtime())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "def add_array(arr, array):\n    return np.hstack((arr, array))\n\narr = np.zeros((6, 9, 20))\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nanswer = add_array(arr, array)\nprint(answer)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "import numpy as np\n\narr = np.array([1,2,3,4,5,6,7,8,9])\n\narr_res = np.reshape(arr, (6, 9, 20))\n\nans = zip(arr, zip(arr_res))\n\nprint(ans)\n\n# Output:\n# [([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])]", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.groupby().head(n=1)\ndf.groupby().last()", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "import datetime\ndatetime.datetime.strptime('24052010', '%d%m%Y')\nprint(datetime.datetime.strftime(datetime.datetime.strptime('24052010', '%d%m%Y'), '%d%m%Y'))\n# Output: 24/05/2010", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "def calculate_mean_nonzero_values(df):\n    return df.groupby('index').mean()\n\ndef calculate_cumsum(df):\n    return df.groupby('index').cumsum()\n\ndef calculate_sum(df):\n    return df.groupby('index').sum()", "np.flatnonzero(x).mean()"], ["5508352-50", "a = np.array([1,2,3,4,5])\nb = np.array([1,2,4,5])\n\nprint(a.index(b))  # Output: 2", "a[tuple(b)]"], ["2233917-10", "<nooutput>", "tuple(map(int, input().split(',')))"], ["2233917-8", "<nooutput>", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(labels=[f'{i+90:02d}' for i in range(len(ax.get_xticks()))])", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "If None, all fields are used.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with sum and max columns\n    \"\"\"\n    if by is None:\n        by = df.columns\n    if columns is None:\n        columns = ['sum', 'max']\n    else:\n        columns = by + columns\n    gb = df.groupby(by=by, group_keys=False)\n    result = gb.agg(sum=('sum', 'sum'), max=('max', 'max'))\n    result.columns = columns\n    return result\n\nresult = groupby_sum_max(df)\nprint(result)\n\nOutput:\n  sum  max\n0  245  300\n1  235  275\n2  225  250\n\\end{code}", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "import pandas as pd\n\ndf = pd.DataFrame({'Close': [10, 11, 12, 13, 14],\n                   'Time': [1.5, 2.5, 3.5, 4.5, 5.5]})\n\ndf.pivot_table(index='Close', columns='Time', values='Time').reset_index()\n\nOutput:\nClose   | 1.5   | 2.5   | 3.5   | 4.5   | 5.5\n------- | ------ | ------ | ------ | ------ | ------\n10     | 10     | 11     | 12     | 13     | 14\n2.5     | 11.5   | 13.5   | 15.5   | 17.5   | 19.5\n3.5     | 12.5   | 14.5   | 16.5   | 18.5   | 20.5\n4.5     | 13.5   | 15.5   | 17.5   | 19.5   | 21.5\n5.5     | 14.5   | 16.5   | 18.5   | 20.5   | 22.5", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(x) for x in input().split()]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "for i in range(len(yourdata)-1, -1, -1):\n    yield yourdata[i]", "sorted(yourdata, reverse=True)"], ["13237941-56", "def sort_dicts(data, subkey):\n    return sorted(data, key=itemgetter(subkey), reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "def sort_nested_dicts(data):\n    return sorted(data.items(), key=itemgetter('key', 'subkey'), reverse=True)", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "G.add_edge(labels, pos, max_node_id)\n\nFigure().clf()\n\nskimage.io.show()", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "The common prefix of '/usr/var' and '/usr/var2/log' is '/usr/'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "import os\n\npath = '/usr/var'\n\nnormpath = os.path.normpath(path)\nrelpath = os.path.relpath(path, start='/usr/var/log')\ndirname = os.path.dirname(path)\n\nprint(normpath)\nprint(relpath)\nprint(dirname)", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "if myobject.id.number:\n    number = getattr(myobject, 'number')\nelse:\n    number = contextvars.get('number', default)", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X = np.einsum('ij,kl->ikl', X)\nX = np.reshape(X, (-1, 1, 1))\nX = np.kron(X, 1)", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "list = [('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000')]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "$1 off delicious $5 ham", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "import random\nimport random\n\n# Generate 6 random numbers between 1 and 50\nrandom.seed(12345)\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))", "random.sample(range(1, 50), 6)"], ["13628725-59", "import uuid\nimport random\nimport random\n\n# Generate six unique random numbers in the range of 1 to 49\n# using uuid.uuid4\n# Generate a random integer N such that 1 <= N <= 49\n# using random.randint\n# Generate n random bytes\n# using random.randbytes", "random.sample(range(1, 50), 6)"], ["15940280-74", "import datetime\nimport time\n\nnow = time.time()\nprint(datetime.datetime.now())\nprint(time.gmtime())\nprint(time.time())", "datetime.utcnow()"], ["12280143-55", "os.chdir('..')", "os.chdir('..')"], ["15457504-91", "text_item = Text(k, font='Purisa', size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "my_df = pandas.DataFrame.from_dict(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if 'one' in d.values():\n    print('Yes')\nelse:\n    print('No')", "'one' in list(d.values())"], ["8214932-94", "if 'one' in d:\n    print('True')\nelse:\n    print('False')", "'one' in iter(d.values())"], ["7125009-76", "legend = legend.Legend(loc='upper left', title='My Legend', prop={'size': 'x-small'})", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "legend.set_title('Legend Title', fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "str.strip()", "sentence.replace(' ', '')"], ["8270092-68", "str.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "def remove_whitespace(string):\n    return string.strip()\n\n# Test\nstring = \"  hello world  \"\nprint(remove_whitespace(string))\n\n# Output: hello world", "sentence.strip()"], ["8270092-87", "def remove_whitespace(string):\n    return string.strip()\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n#", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "def remove_whitespace(string):\n    return string.strip()\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n#", "sentence = ''.join(sentence.split())"], ["14591855-94", "import pandas as pd\n\ndf = pd.read_csv('/home/.../data.h5', key='firstSet')\ndf.set_index('key')\nprint(df.head())", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str.strip()\nio.IOBase.readlines()\nbytearray.strip(b\" \\t\\n\\r\\x0b\")", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "import urllib.request\nimport urllib.parse\nimport urllib.error\n\ndef handle_urlfetch_errors(url, urllib.error.URLError):\n    if urllib.error.URLError.code == 404:\n        print(\"Not Found\")\n    elif urllib.error.URLError.code == 500:\n        print(\"Internal Server Error\")\n    else:\n        print(\"Unknown Error\")\n\nurl = \"https://example.com\"\nurllib.request.urlretrieve(url, \"file.txt\", handle_urlfetch_errors)", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "def reverse_dict(mydict):\n    return sorted(mydict.items(), key=lambda t: t[1], reverse=True)", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "firstname = request.headers.getlist('firstname')\nif firstname:\n    print(firstname[0])", "first_name = request.args.get('firstname')"], ["13279399-5", "firstname = request.POST['firstname']", "first_name = request.form.get('firstname')"], ["3278850-59", "txt = io.IOBase.readlines(file.txt, 10)\nprint(txt)", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "def filter_entry(self, id):\n    if id != 3:\n        return True\n    else:\n        return False", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "divs = soup.find_all('div', attrs={'class': 'my-class'})\nprint(divs)", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb(0, 128, 255)", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "import subprocess\nimport os\n\np = subprocess.Popen('python', shell=True, executable='/path/to/python')\nos.kill(p.pid, signal.SIGTERM)\np.terminate()", "sys.exit()"], ["73663-36", "import subprocess\nimport os\n\nsubprocess.Popen(\"kill\", shell=True).terminate()\nos.kill(pid, signal.SIGTERM)", "quit()"], ["73663-66", "sys.exit(1)", "sys.exit('some error message')"], ["21974169-23", "cursor.execute(\"commit\")", "con.commit()"], ["11269575-66", "None", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "def convert_string_to_int(s):\n    if s.isdigit():\n        return float(s)\n    else:\n        return locale.atoi(s)", "int(Decimal(s))"], ["1094717-69", "def convert_string_to_int_with_decimal(string):\n    if (len(string) > 0 and string[0].isdigit()):\n        return round(float(string), ndigits=1)\n    else:\n        return 0", "int(s.split('.')[0])"], ["31957364-53", "def elementwise_product(A, B):\n    return np.einsum('ij,jk->ik', A, B)", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "import subprocess\nimport os\nimport sys\n\nif __name__ == '__main__':\n    args = sys.argv\n    if len(args) == 2:\n        print(\"rm -r some.file\")\n    else:\n        print(\"No input provided\")\n\n    try:\n        subprocess.check_call(args)\n    except subprocess.CalledProcessError as e:\n        print(e.returncode)\n    else:\n        os.unlink(\"some.file\")", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.discard('a')", "e = next(iter(s))"], ["5868374-42", "import datetime\ndatetime.datetime.strptime('%Y-%m-%d', 'datestr')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "import base64\nimport io\n\nwith open('pdf_reference.pdf', 'rb') as f:\n    data = f.read()\n\nencoded = base64.b64encode(data)\n\nwith open('encoded_pdf.pdf', 'wb') as f:\n    f.write(encoded)", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "import os\nos.chdir('chapter3')\nprint(os.getcwd())", "os.chdir('chapter3')"], ["20796355-88", "import os\nos.chdir('path')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "import os\nos.chdir('path')", "os.chdir('.\\\\chapter3')"], ["1299855-22", "<nooutput>", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "<nooutput>", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "<nooutput>", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "divs = soup.find_all(\"div\", class_=\"comment-\")\nfor div in divs:\n    print(div.get_text())", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "<nooutput>", "plt.cla()"], ["13156395-50", "<nooutput>", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json\n\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)\n\nprint(data)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "sys.exit(<int or None>)", "sys.exit(0)"], ["8751653-82", "s2 = struct.unpack('<f', buffer('0b' + str(int(s2, 2))).replace('0b', '0'))[0]", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "0b1110", "float(int('-0b1110', 0))"], ["8751653-54", "0bstruct.unpack('d', b8)[0]"], ["4789021-9", "user = authenticate(username='user', password='pass')\nif user is not None:\n    # user is authenticated\nelse:\n    # user is not authenticated", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "user.is_authenticated() # True", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "def find_rows_matching(arr, (0,1)):\n    return np.argwhere(arr.any(axis=1) & (arr[:,0] == (0,1)))", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "import os\nos.chdir(\"path\")\nprint(os.getcwd())\nprint(os.path.dirname(\"path\"))", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "writerows(df.to_dict('records'))\n    writerow(record)\n    for record in df.to_dict('records'):\n        writerow(record)", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "def zip_longest(iterables):\n    \"\"\"\n    Zip two or more iterables together, filling any missing values with a fill value.\n\n    This function is a wrapper around itertools.zip_longest() which is not\n    available in Python 3.\n\n    Parameters\n    ----------\n    iterables : iterable or iterable, or tuple of iterables\n        The iterables to be zipped.\n\n    Returns\n    -------\n    iterator\n        An iterator that aggregates elements from each of the iterables.\n    \"\"\"\n    if not isinstance(iterables, (list, tuple)):\n        iterables = [iterables]\n    return itertools.zip_longest(iterables)", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "def split_list(data, field):\n    return itertools.chain.from_iterable(data.items(field))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "df['a'].tolist()", "df['a'].values.tolist()"], ["23748995-42", "def get_list_of_values(df, column_name):\n    return df[column_name].isin(df[column_name])", "df['a'].tolist()"], ["20205455-79", "<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n</body>\n</html>", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = np.array([1, 2, 3, 4, 5])\n\nindices = np.argwhere(a != 3)\n\nprint(a[indices])\n# Output: [1, 2, 4, 5]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "\"foo\"", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].groupby(pd.TimeGrouper('M')).unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "if os.listdir('/the/dir/') is not None and os.path.isdir('/the/dir/') and pathlib.Path('/the/dir').is_file():\n    print('The file is a directory.')", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict = dict(zip(myListOfTuples, ))", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "def sort_dicts_by_date(dicts):\n    return sorted(dicts, key=lambda d: d['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "1, 2, 3", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "def compare_files(file1, file2):\n    diff = Differ()\n    if filecmp.cmp(file1, file2) is False:\n        return False\n    else:\n        return diff.compare(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "def min_val(list_of_tuples):\n    min_val = min(list_of_tuples, key=lambda t: t[1])\n    return min_val[0]", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [(''.join(map(str, x)) for x in lst) for _ in range(len(lst))]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "def float_to_str(lst):\n    str_list = []\n    for i in lst:\n        if type(i) is float:\n            str_list.append(str(i).replace('.', '0.')[:8])\n        else:\n            str_list.append(i)\n    return str_list", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "0, 1", "A[[0, 1], [0, 1]]"], ["2111163-33", "a = np.reshape(a, (1, 2, 3))\nb = np.column_stack((a[:, 0], a[:, 1]))\nc = np.record.ravel(b)", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find('a'),\nsoup.find('div')", "soup.find_all(['a', 'div'])"], ["931092-70", "def reverse_string(s): \n    return s[::-1]", "'hello world'[::(-1)]"], ["931092-64", "def reverse_list(s):\n    return chain.from_iterable(s).reverse()", "s[::(-1)]"], ["931092-5", "def reverse_string(s): \n    return s[::-1]", "''.join(reversed('foo'))"], ["931092-74", "string = bytearray(\"string\").join() \nprint(string)  # Output: revoked string", "''.join(reversed(string))"], ["931092-65", "def reverse(s): \n    return s[::-1]", "'foo'[::(-1)]"], ["931092-99", "str(reversed(a_string))", "a_string[::(-1)]"], ["931092-20", "str(reversed(a_string))", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "s = \"Hello World!\"\n\nreversed(s)\n\n# Output: \"!dlroW olleH\"", "''.join(reversed(s))"], ["163542-7", "<nooutput>", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "<nooutput>", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df['col1'] = df['col1'].astype('int') \ndf['col2'] = df['col2'].apply(lambda x: float(x)) \ndf['col3'] = df['col3'].applymap(str)", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = os.read()\nprint(result)", "result = sys.stdin.read()"], ["40055835-26", "def remove_duplicates(arr):\n    new_arr = []\n    for i in arr:\n        if i not in arr:\n            new_arr.append(i)\n    return new_arr", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df.index.isin([start_remove, end_remove]))", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(start_remove:end_remove)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "for i in np.argwhere(mask):\n    print(i)", "numpy.where(mask)"], ["32533944-71", "import pandas as pd\n\ndf = pd.read_csv('Result.csv', sep=' ')\ndf.to_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = pandas.DataFrame.from_dict(d, orient='index')\ndf = df.applymap(lambda x: x.tolist())\nprint(df)", "pd.DataFrame(d)"], ["1883604-86", "import gzip\nimport io\n\nwith gzip.open('file.gz', 'r') as f:\n    content = f.read()\n\nwith io.open('file.gz', 'r', encoding='utf-8') as f:\n    content = f.read()\n\n# Truncate the file\nwith gzip.GzipFile('file.gz', 'w') as f:\n    f.truncate()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "import webbrowser\n\nwebbrowser.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "if \"blah\" in somestring:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if \"substring\" in \"string\":\n    print(\"Found\")\nelse:\n    print(\"Not Found\")", "string.find('substring')"], ["3437059-83", "if s.find(\"is\") != -1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "def myfunction():\n    return \"Hello World!\"", "globals()['myfunction']()"], ["3061761-63", "a.shape\na.reshape\na.ndarray.__len__", "a.shape"], ["3061761-55", "a.shape\na.reshape\na.ndarray.__len__", "N.shape(a)"], ["3061761-89", "a.shape\na.reshape\na.ndarray.__len__", "N.shape(a)"], ["3061761-31", "a.shape\na.reshape\na.ndarray.__len__", "a.shape"], ["13291539-54", "0.00582811585976", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "def uniqify(list_of_dicts):\n    return list(dict.items(list_of_dicts))\n\nprint(uniqify(list_of_dicts))", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "import io\nimport urllib.request\nimport os\n\ndef read_file(file_name):\n    with open(file_name, 'r') as f:\n        return f.read()\n\ndef get_words(file_name):\n    with open(file_name, 'r') as f:\n        words = f.readlines()\n    return words\n\ndef get_lines(file_name, hint):\n    with open(file_name, 'r') as f:\n        lines = f.readlines()\n    return lines[:hint]\n\ndef get_url(url):\n    with urllib.request.urlopen(url) as u:\n        return u.read()\n\ndef get_os_read(fd, n):\n    with os.fdopen(fd, 'r', n) as f:\n        return f.read()\n\nif __name__ == '__main__':\n    print(read_file('myfile'))\n    print(get_words('myfile'))\n    print(get_lines('myfile', 5))\n    print(get_url('http://example.com'))\n    print(get_os_read(123, 4))", "words = open('myfile').read().split()"], ["7717380-65", "arr = np.asarray(a)\narr.shape = a.shape\narr.reshape(a.shape)", "a = np.array(a)"], ["9304908-37", "def filter(self, *args, **kwargs):\n    if True:\n        return self.filter(**kwargs)\n    else:\n        return self.none()", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "string1.lower() == string2.lower()", "(string1.lower() == string2.lower())"], ["319426-70", "if first.lower() == second.swapcase():\n    print(\"Yes\")\nelse:\n    print(\"No\")", "(first.lower() == second.lower())"], ["319426-18", "if first.lower() == second.lower():\n    print(\"Yes\")\nelse:\n    print(\"No\")", "(first.upper() == second.upper())"], ["15455388-38", "import pandas as pd\n\nd = {\n    'a': [\n        {'b': [1, 2, 3]},\n        {'b': [4, 5, 6]},\n    ],\n    'b': [\n        {'c': [7, 8, 9]},\n        {'c': [10, 11, 12]},\n    ]\n}\n\ndf = pd.DataFrame.from_dict(d)\n\nprint(df)\n\n# Output:\n   a  b\n0  [1, 2, 3]  [7, 8, 9]\n1  [4, 5, 6]  [10, 11, 12]", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "def count_by_col5_and_col2(df):\n    return df.groupby(['col5', 'col2']).count()\n\nprint(count_by_col5_and_col2(df))", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "def getattr(obj, name):\n    if hasattr(obj, name):\n        return getattr(obj, name)\n    else:\n        return default\n\ndef hasattr(obj, name):\n    try:\n        return getattr(obj, name)\n    except AttributeError:\n        return False\n\ndef property(obj, name):\n    return property_descriptor(obj, name)", "getattr(your_obj, x)"], ["3743222-35", "import datetime\nimport time\n\ndate_string = \"2020-01-01\"\ndate = datetime.datetime.strptime(date_string, \"%Y-%m-%d\")\nprint(date.date())", "datetime.datetime.now().date()"], ["3743222-73", "import datetime\ndate = datetime.datetime.strptime('12/31/2019', '%d/%m/%Y')\nprint(date.date())", "datetime.datetime.now().date()"], ["12496531-86", "def sort_by_column(arr): \n    return arr.argsort(axis=1) \n\ndef msort_by_column(arr): \n    return arr.msort(axis=1) \n\ndef get_column_index(arr, col): \n    return arr.itemgetter(col).__getitem__()", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "s.decode('utf-8').lower()", "s.decode('utf-8').lower()"], ["2631935-11", "import sqlalchemy as sa\n\nupdate_name = sa.update(user).where(user.id == 123).values({'name': 'Bob Marley'})\n\nsa.execute(update_name)", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "def something(bob):\n    locals()['something'] = bob\n    return locals()", "globals()['something'] = 'bob'"], ["14766194-35", "if (a.any(axis=1) & (a[:, 1] == 1)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray([[1, 0, 0],\n [0, 1, 0],\n [0, 0, 1]])", "np.zeros((3, 3)).ravel()"], ["15579649-73", "result = np.array(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "import pygame\npygame.display.quit()\nos.system(\"exit\")", "sys.exit(0)"], ["36139-44", "mylist.sort()", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "def sort_list(mylist):\n    return sorted(mylist, key=itemgetter(0))", "mylist.sort()"], ["36139-32", "def sort_list(list):\n    return sorted(list, key=itemgetter(0))", "list.sort()"], ["5280178-72", "import os\nos.execl(\"file.py\", \"file.py\")", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "if test.mp3.endswith('.mp3'):\n    print('Yes')\nelse:\n    print('No')", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int(struct.unpack('<I', pS)[0])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "if all(word.islower() for word in words):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype(int).to_dense().index.astype(int)", "df.to_sparse(0)"], ["1514553-90", "array = [1, 2, 3]\narray.append(4)\nprint(array)\n# Output: [1, 2, 3, 4]", "variable = []"], ["1514553-71", "array = np.array([i for i in range(10)])\narray = np.repeat(array, 3)", "intarray = array('i')"], ["610883-92", "if object is an instance of a class and has a property 'property':\n    return True\nelse:\n    return False", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "True", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "def getattr(obj, name, default):\n    if obj.has_attr(name):\n        return obj.attr(name)\n    else:\n        return default", "getattr(a, 'property', 'default value')"], ["13902805-83", "set([a, b, c, d])", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "set([a, b, c, d])", "list(set('aaabcabccd'))"], ["13902805-87", "<nooutput>", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "start = 16\nend = 21\nprint(\"The index of sub string 's' is\", start, \"to\", end)", "str.find('s', 16)"], ["674764-33", "5", "x.find('Aloha')"], ["674764-19", "3", "'sdfasdf'.index('cc')"], ["674764-45", "4", "'sdfasdf'.index('df')"], ["674764-64", "str.rfind('a', 0, 4) # returns 1\nstr.rindex('a') # returns 1\nre.Match(r'a', 'abba').start() # returns (0, 1)", "str.find('a')"], ["674764-91", "start = 0\nend = 3\nprint(\"The index of the substring 'g' is\", start, \"and\", end)", "str.find('g')"], ["674764-3", "start = 11\nend = 17\nprint(\"The index of 's' is\", start, \"to\", end)", "str.find('s', 11)"], ["674764-47", "start = 15\nend = 20\nprint(\"The index of 's' is\", str(re.search(\"s\", \"str\", start=15).end()))", "str.find('s', 15)"], ["674764-5", "11 14", "str.find('s', 11, 14)"], ["10194713-64", "def reverse_sort_city_population(city_population):\n    return sorted(city_population.items(), key=lambda t: t[1], reverse=True)\n\nprint(reverse_sort_city_population(city_population))", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "def sorted_dict(d):\n    return sorted(d.items(), key=lambda t: t[1])", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "def reverse_dict(d):\n    return sorted(d.items(), key=lambda t: t[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "def sorted_by_value(d):\n    return sorted(d.items(), key=itemgetter(1))", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "0", "sys.exit(0)"], ["179369-62", "sys.exit(1)", "sys.exit('aa! errors!')"], ["179369-47", "import os\nos.abort()", "sys.exit()"], ["19779790-35", "yesterday = datetime.date.today() - datetime.timedelta(days=1)\nprint(yesterday.toordinal())", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = nvalues[\"col1\"][\"col2\"][\"col3\"].apply(pd.DataFrame)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "urlparse('http://example.com/path?query#fragment') \nReturns:\nscheme: http\nnetloc: example.com\npath: /path\nparameters: {}\nquery: query\nfragment: fragment", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "def get_avg(old_set, new_set):\n    old_arr = np.array(old_set)\n    new_arr = np.array(new_set)\n    return np.average(old_arr, weights=new_arr)\n\nprint(get_avg(old_set, new_set))", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "0b111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set(LoD.keys())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "keys = LoD.keys()", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "0bint(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby(['Month', 'Fruit'])['Fruit'].get_group('')", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "import nntplib\nimport urllib\nimport ossaudiodev\n\n# Connect to the news server\nnews = nntplib.NNTP(\"news.example.com\", 119)\n\n# Post an article\narticle = open(\"article.txt\", \"rb\")\nnews.post(article)\n\n# Retrieve a local file\nurl = \"file:///home/user/file.txt\"\nurllib.request.URLopener().retrieve(url, \"file.txt\")\n\n# Post an audio device pause\nossaudiodev.oss_audio_device.post()", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "for entry in os.listdir('file'):\n    if entry.endswith('/'):\n        print(entry)", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "{'a': 1, 'b': 'asdf'}", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "dict = {'a': 1, 'b': 2, 'c': 3}\n\nprint(str(dict).items())\n# Output: ['a', 1], ['b', 2], ['c', 3]\n\nprint(pprint.pformat(dict))\n# Output: {'a': 1, 'b': 2, 'c': 3}", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "import shutil\nimport os\nimport shutil\n\ndef rename_file(src, dst):\n    if os.path.isdir(dst):\n        os.mkdir(dst)\n    else:\n        shutil.copyfile(src, dst)\n    return dst\n\nrename_file(\"src\", \"dst\")", "os.rename(src, dst)"], ["16389188-53", "pygame.display.gl_set_attribute(attr, value)", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "var_name = context.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "thedict = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3'\n}\n\nthedict = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3'\n}\n\n# convert keys in dictionary 'thedict' into case insensitive\nthedict = thedict.items(case_insensitive=True)\n\n# print(thedict)\n# Output:\n# [('key1', 'value1'), ('key2', 'value2'), ('key3', 'value3')]", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1['revenue'] = df1['revenue'].combine_first(df2['revenue']) \ndf1['revenue'] = df1['revenue'].set_index('date') \ndf1['revenue'] = df1['revenue'].merge(df2, on='date') \ndf1['revenue'] = df1['revenue'].groupby('date').first()", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "import os\nos.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = contextvars.ContextVar.get('a')\nif a is not None:\n    print(a)\nelse:\n    print('No such variable')", "{{request.args.get('a')}}"], ["6591931-80", "12", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "urllib.parse.urlencode('string_of_characters_like_these:%23%40%3D%3F%25%5E%Q%24')", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "import random\n\nrandbytes = random.randbytes(16)\nprint(randbytes)", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "\"\"", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "for key in x:\n    if key == 'c':\n        index = x.index(key)\n        print(index)", "list(x.keys()).index('c')"], ["10484261-51", "list = programs.items()\nlist = list(list.lower().startswith('new york'))", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s.decode('utf-8').encode('utf-8')", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "urllib.parse.quote('Hello%20World') # Output: 'Hello%20World'\nurllib.parse.urlencode({'key1': 'value1', 'key2': 'value2'}) # Output: 'key1=value1&key2=value2'", "urllib.parse.quote_plus('a b')"], ["32751229-20", "def groupby_sum(df, columns):\n    return df.groupby(by=columns).sum()\n\ngroupby_sum(df, ['Y1961', 'Y1962', 'Y1963'])\n\nOutput:\n\nCountry  Item_code  Y1961  Y1962  Y1963\n\nChina     A      10      15      18\nChina     B      12      14      17\nJapan     A      14      17      19\nJapan     B      11      13      16\nIndia     A      13      16      19\nIndia     B      15      18      21", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "3", "sum(((i > 5) for i in j))"], ["10543303-81", "3", "len([1 for i in j if (i > 5)])"], ["10543303-37", "def get_num_greater(j, i): \n    return sum(1 for x in range(j) if x > i) \n\n# Output: \nget_num_greater(5, 3) \n# Output: 2", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "if (a1.any() or a2.any()):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = torch.clamp(my_value, min_value, max_value) \nprint(my_value) # Output: 3.0", "max(min(my_value, max_value), min_value)"], ["14931769-56", "for n in range(10):\n    for i in range(2):\n        print(f'{n} {i}')", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "for i in itertools.product(range(1, 2), repeat=n):\n    print(i)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "0bbin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "0blst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "import time\n\nnow = time.strftime(\"%d %H:%M:%S\")\nprint(time.strftime(\"%d %H:%M:%S\") + \" + 1 day and 3 hours\")", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "0.0", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "import matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\nim = plt.imread('image.jpg')\n\nax = plt.gca()\n\ncbar = colors.NormalizedColormap(N=256)\n\ncb = plt.colorbar(cbar, ax=ax)\n\nplt.show()", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s = \"hello world\"\nprint(s.rsplit(\" \", 1)[0])\nprint(s.rstrip(\" \"))", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "import numpy as np\nimport pandas as pd\n\ndata = np.array([[1,2,3,4,5],\n               [6,7,8,9,10],\n               [11,12,13,14,15],\n               [16,17,18,19,20]])\n\none = np.array([1,2,3])\ntwo = np.array([1,2,3,4])\n\ndf = pd.DataFrame(data, columns=['a', 'c'])\n\nprint(df.isin(one).isin(two))\n\n# Output:\n# False\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n#", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "import numpy as np\nimport pandas as pd\n\ndata = np.random.randint(10, size=(5, 2))\n\ndf = pd.DataFrame(data, columns=['a', 'c'])\n\nprint(df.isin(list(range(1, 5))).astype(bool))\n\n# Output:\n# Output:\n# True\n# False\n# True\n# True\n# False", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "def filter_users(userprofile):\n    if userprofile >= 0:\n        return userprofile\n    else:\n        return False", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "list1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nlist2 = ['x', 'y', 'z']\n\ndef make_list_of_lists(test, sentinel):\n    for item in test:\n        if len(item) <= len(sentinel):\n            yield item[:len(sentinel)]\n   \nlist_of_lists = make_list_of_lists(list1, 'g')\nprint(list_of_lists)\n# Output: [['g', 'h', 'i']]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "def group_by(data, key_func):\n    grouped = data.groupby(key_func)\n    return grouped.transform('first')\n\n# Example\ndata = [\n    ['a', 10, 15, 20],\n    ['b', 12, 17, 23],\n    ['c', 14, 19, 26],\n]\n\nresult = group_by(data, key_func=lambda x: x[2])\n\nprint(result)\n\n# Output\n[['a', 15, 20],\n ['b', 17, 23],\n ['c', 19, 26]]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if request.GET.get('title'):\n    return request.GET.get('title')\nelse:\n    return ''", "request.POST.get('title', '')"], ["20222485-17", "def range_accum(n):\n    return [i for i in range(n)]\n\nprint(range_accum(10))", "list(accumulate(list(range(10))))"], ["16436133-47", "def handle_request(mydata):\n    if mydata is None:\n        return json.dumps(dict())\n    return json.loads(mydata)", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "10", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "for match in re.finditer('foobar', 'foobar'):\n    print(match.start(), match.end())", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "string = \"Hello & World\"\n\nprint(string.rsplit(\"&\", 1))\n# Output: ['Hello', 'World']", "s.rfind('&')"], ["8247792-90", "str.rsplit('&', 1)", "s[:s.rfind('&')]"], ["35178812-30", "import pandas as pd\n\nex = pd.DataFrame([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]])\n\nprint(ex.index.value_counts())\n\n# Output:\n# Index\n# count\n# 0    2\n# 1    2\n# 2    2\n# 3    2\n# 4    2\n# 5    1\n# 6    1\n\n# Unique values\n# Index\n# count\n# 0    1\n# 1    1\n# 2    1\n# 3    1\n# 4    1\n# 5    1\n# 6    1\n\n# Output:\n# Index\n# count\n# 0    1\n# 1    1\n# 2    1\n# 3    1\n# 4    1\n# 5    1\n# 6    1\n\n# Unique values\n# Index\n# count\n# 0    1\n# 1    1\n# 2    1\n# 3    1\n# 4    1\n# 5    1\n# 6    1", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "array = np.hstack([arr1, arr2, arr3])\nprint(array.tolist())", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = s[0]", "t = tuple(x[0] for x in s)"], ["11205386-94", "soup.find('meta', {'name': 'City'}).attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df = df.pivot_table(index=['upc'], columns='saleid')\ndf.set_index('upc', inplace=True)\nprint(df)", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "import pandas as pd\nimport time\n\ndf = pd.DataFrame({'date': [time.strftime(\"%Y%m%d\") for _ in range(10)]})\n\ndf.to_csv('output.csv', index=False)", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "def replace_nan(a): \n    if np.isnan(a): \n        a = 0\n    return a \n\na = np.array([1, np.nan, 3, np.nan, 5]) \nprint(replace_nan(a)) \n\nOutput:\n[1, 0, 3, 0, 5]", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "min_arr = get_min_array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2, 3])\n\n# Output:\n# <nooutput>", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "\"%d\" % (datetime.now().strftime(\"%A\"),)", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "def dict_to_string(d):\n    return str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "import numpy as np\n\ndf = np.array([['foo', 1, 2, 3], ['bar', 4, 5, 6]])\n\nresult = df[df['A'] == 'foo']\n\nprint(result)\n\n# Output:\narray([['foo', 1, 2, 3],\n   [4, 5, 6]])", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'column_name': [1, 2, 3, 4, 5]})\n\nresult = df[~df['column_name'] != 4]\n\nprint(result)\n\n# Output\n  column_name\n1          1\n2          2\n3          3\n4          4\n5          5", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'column_name': ['a', 'b', 'c']})\nsome_values = ['a', 'b']\n\nresult = df[~df['column_name'].isin(some_values)]\n\nprint(result)\n\n# Output\n  column_name\n0          c\n1          b\n\\end{code}", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "<nooutput>", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import os\nimport sys\nimport builtin_module_names\nimport modulefinder\n\nbuiltin_module_names = tuple(builtin_module_names.keys())\nmodules = modulefinder.ModuleFinder().modules\n\nprint(builtin_module_names)\nprint(modules)", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1, 0)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import all classes from module some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "def find_indices_of_zero(x):\n    indices = np.flatnonzero(x == 0)\n    return indices", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = json.dumps(data=dict(a=1, b=2))\nresponse = http.client.HTTPResponse(response_data)\nreturn json.loads(response.get_data())", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "def hexlify(s):\n    return binascii.hexlify(s)\n\ndef unhexlify(hexstr):\n    return binascii.unhexlify(hexstr)", "s.decode('hex')"], ["10824319-49", "s = \"0123456789ABCDEF\"\n\nprint(binascii.hexlify(s)) # Output: 47450420620746865206265737421\n\nprint(binascii.unhexlify(binascii.hexlify(s))) # Output: s", "binascii.a2b_hex(s)"], ["12655007-87", ":\n# (a, b, c)\n# (a, b, c)\n# (a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "x = np.asarray(x)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "def hexlify(data):\n    return binascii.hexlify(data)", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x12345678", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "import os\nos.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')\nprint(os.getcwd())\n# Output: c:\\\\Users\\\\uname\\\\desktop\\\\python", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "import os\nos.chdir('path')", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "200", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "200", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data[\"log(gdp)\"] = None", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "connection.execute(\"commit\")", "dbb.commit()"], ["5352546-44", "def extract_keys(d, keys): \n    return itemgetter(keys)(d)", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "def extract_subset(bigdict, keys):\n    subset = bigdict.items()\n    subset = subset[keys]\n    return subset\n\nprint(extract_subset(bigdict, ('l', 'm', 'n')))\n# Output: {'l': 'm', 'n': 'n'}", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "for key in bigdict.keys('l', 'm', 'n'):\n    print(key)", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", ": \nlist(bigdict.items())\n# Output: [('l', 'm'), ('n', 'o')]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "def decode_json(s):\n    decoder = JSONDecoder()\n    return decoder.decode(s)", "json.load(u)"], ["4940032-13", "str.strip(\"blabla\") # returns \"bla\"\nstr.startswith(\"blabla\") # returns True\nstr.find(\"blabla\", 0, 5) # returns 0", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "str.strip(\"blabla\") # returns \"bla\"", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "def find_string(string, sub):\n    start = 0\n    end = 0\n    result = string.find(sub, start, end)\n    if result != -1:\n        return result\n    else:\n        return -1\n\nstring = \"example.txt\"\nsub = \"blabla\"\n\nresult = find_string(string, sub)\nprint(result)", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "import urllib.request\nurl = 'http://example.com'\nresponse = urllib.request.urlopen(url)", "r = requests.get(url)"], ["4476373-22", "urllib.parse.urlencode(payload)\nurllib.request.urlopen(url, method=\"POST\", data=urllib.parse.urlencode(payload))", "r = requests.get(url, params=payload)"], ["4476373-71", "urllib.parse.urlencode(payload)", "r = requests.post(url, data=payload)"], ["4476373-99", "import urllib.parse\nimport nntplib\n\nurl = 'http://example.com/post_data'\npost_data = {'key1': 'value1', 'key2': 'value2'}\n\nresponse = urllib.parse.urlencode(post_data)\n\nresponse = nntplib.post(url, response)", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "0bbinint('01010101111', 2)"], ["1476-71", "8", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "0bbin(21)"], ["1476-59", "1111111", "int('11111111', 2)"], ["41178532-76", "import pandas as pd\n\ntrace_df = pd.DataFrame({'ratio': [0.5, 0.2, 0.8, 0.4, 0.9]})\n\nprint(trace_df.isin(trace_df['ratio'] > 0).abs())\n# Output: 0.5\n# Expected output: 0.5", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "def get_combinations(a):\n    return itertools.chain.from_iterable(itertools.product(a))\n\n# Output:\n# [('a', 'b'), ('a', 'c'), ('b', 'c'), ('a', 'd'), ('b', 'd'), ('c', 'd')]", "list(itertools.product(*a))"], ["364519-94", "for key, value in sorted(d.items()):\n    print(key, value)", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in sorted(d.items()):\n    print(key, value)", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for dict in sorted(dict.items()):\n    print(dict[1])", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():\n    print(key, value)", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items(), reverse=True):\n    print(key, value)", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "def iterate_sorted_dict(foo):\n    return sorted(foo.items(), key=itemgetter(0))", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "s = \"Hello World!\"\ns = s.translate({'a': '-', 'A': '-'})\nprint(s)\n# Output: 'H-ll W-rld!'", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "import tensorflow as tf\n\na = tf.constant([1, 2, 3])\nprint(tf.cast(a, tf.int32))", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series([], columns=['A', 'B', 'A1R', 'B2', 'AABB4'])\ns.set_index(['A', 'B'])\ns\n\nOutput:\nA  B\n0  0  0\n1  1  0\n2  2  4\n3  3  0\n4  4  0\n5  5  0\n6  6  0\n7  7  0\n8  8  0\n9  9  0\n10 10  0", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "set1 = {1, 2, 3}\nset2 = {4, 5, 6}\n\nprint(frozenset(set1).intersection(set2))\n# Output: set1 = {1, 2, 3}", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "df = pandas.DataFrame(data, columns=list(data.keys()))", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd = d.dropna().set_index('Date').apply(lambda x: x['DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "0.4", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "import pandas as pd\n\ndf = pd.DataFrame({'year': [2019, 2019, 2019, 2020, 2020],\n                   'month': [1, 2, 3, 4, 5],\n                   'item': ['a', 'b', 'c', 'd', 'e']})\n\ndf.set_index(['year', 'month']).pivot_table(index='year', columns='month', values='item').reset_index()\n\nOutput:\nyear  month  item\n0  2019  a  1\n     b  2\n     c  3\n     d  4\n     e  5\n1  2020  a  1\n     b  2\n     c  3\n     d  4\n     e  5", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "import pandas as pd\n\ndf = pd.DataFrame({'year': [2018, 2018, 2019, 2019],\n                   'month': [1, 2, 3, 4]})\n\ndf.pivot_table(index='year', columns='month', values='month')\n\nOutput:\nyear  | 2018  | 2019\n---  | ---  | ---\nmonth  | 1     | 3    \n         | 2     | 4", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "<nooutput>", "p1.communicate()[0]"], ["748028-100", "import subprocess\n\n# Run the command and capture the output\nprocess = subprocess.Popen(\"exe\", stdin=subprocess.PIPE, stdout=subprocess.PIPE)\noutput, error = process.communicate()\n\n# Check the return code\nif process.returncode != 0:\n    print(\"The command exe returned an error code: \" + str(process.returncode))\nelse:\n    print(\"The output of exe is: \" + output)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "for element in root.findall('a'):\n    for subelement in element.iterfind():\n        print(subelement.tag, subelement.text)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "for element in a.iterfind():\n    if element.tag != 'a':\n        yield element", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "5", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "a.remove(c)"], ["2793324-93", "a = [1,2,3,4,5,6]\na.pop()  # Output: 6", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5,6]\na.pop()  # Output: 6", "a.remove(6)"], ["2793324-97", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", ":\n# 'import subprocess\n# subprocess.check_call(\"otherfunc\", shell=True, args=())'", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "<nooutput>", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "<nooutput>", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "filter(Sample.objects.filter(date__range=(datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)))", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "filter(month='Jan', year='2011')", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "<nooutput>", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "<nooutput>", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "<nooutput>", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df = df.sort_values(by=['col1', 'col2'], axis=1) \ndf.columns = df.columns.map(lambda col: col + '1') \ndf = df.sort_values(by=['col1'], axis=0) \ndf = df.sort_values(by=['col2'], axis=0)", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1 = df1.drop_duplicates().dropna()\nprint(df1)", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "import pandas as pd\n\ndf = pd.DataFrame([[1,2,3,4,5,6], [7,8,9,10,11,12]])\n\nprint(df.mean())\nprint(df.sum())", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "django.http.HttpResponseRedirect('/search/')", "redirect('Home.views.index')"], ["42352887-25", "def get_sorted_keys(things):\n    return sorted(things.items(), key=lambda t: t[1].get('weight', 0))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import os\nprint(os.path.dirname(os.path.abspath('a_module')))", "print(a_module.__file__)"], ["247770-2", "importlib.resources.path(\"path\")", "print(os.getcwd())"], ["247770-13", "import os\nos.path.abspath(\"amodule\")", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "<nooutput>", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "import time\n\nprint(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'4a4b4c'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "10", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "<nooutput>", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "import datetime\nimport time\n\ndate_string = \"when\"\n\nresult = datetime.datetime.strptime(date_string, \"%d %B %Y\")\nprint(result.strftime(\"%d %B\"))", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "def get_queryset(self, request):\n    if request.user.is_authenticated():\n        return self.model.objects.filter(owner=request.user)\n    else:\n        return super(EntryAdmin, self).get_queryset(request)", "Entry.objects.filter()[:1].get()"], ["29784889-2", "warnings.warn_explicit(\"This is a warning\", UserWarning)", "warnings.simplefilter('always')"], ["22676-23", "import urllib.request\nurl = \"http://www.example.com/songs/mp3.mp3\"\nfilename = \"mp3.mp3\"\nresponse = urllib.request.urlretrieve(url, filename)\nprint(response)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "urllib.request.urlretrieve(\"https://example.com/file.txt\", \"file.txt\")", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import urllib.request\nurl = 'http://www.example.com/'\nresponse = urllib.request.urlretrieve(url)\nprint(response)", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "urllib.request.urlretrieve(\"https://example.com/file.txt\", \"file.txt\")", "r = requests.get(url)"], ["22676-64", "urllib.request.urlretrieve(\"http://example.com/file.txt\", \"10MB\")", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "2.]]", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "for i in range(10):\n    print(i)", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is 7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "s = b64encode('your string')\nprint(s)\n# Output: SGVsbG8gV29ybGQh", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = [1, 1, 2, 3, 4, 5]\n\nmylist_copy = mylist[:]\n\nduplicates = Counter(mylist).elements()\n\nprint(duplicates)\n\nOutput:\n[1, 2, 3, 4, 5]", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "import pandas as pd\ndf = pd.read_csv('data.csv')\ndf.to_csv('np.txt', sep='\\t')\n\nimport numpy as np\nnp.savetxt('np.txt', df, delimiter='\\t')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "import pandas\nimport pygame\nimport urllib.request\n\ndf = pandas.read_csv('data/pandas.csv')\n\nprint(pygame.midi.Output.write(df.as_matrix()))\n\nurl = 'c:\\\\data\\\\pandas.txt'\n\nopen(url, 'w').write(str(df))", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.rsplit('-', 1)  # returns ['x', '-', '']", "print(x.rpartition('-')[0])"], ["15851568-9", "last_part = string.rsplit(string, '-', 1) \nprint(last_part[-1])", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "import random\n\nlist = random.randint(100, 1000)\nprint(list)", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "import time\n\n# Using %f with strftime() to get microseconds\nprint(time.strftime(\"%f\", time.gmtime()))", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "for row in [['a', 'b', 'c'], ['d', 'e', 'f']]:\n    print(tab.ljust(4, '|'), end='')\n    for col in row:\n        print(col, end=' ')", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "import pandas as pd\n\ndf = pd.DataFrame([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]])\n\nprint(df.count())\n\nOutput:\n\n3\n\n# Output should be 3, as there are 3 non-zero values in the dataframe", "df.astype(bool).sum(axis=1)"], ["30693804-5", "def lower_string(string):\n    string = string.translate({ord(char): None for char in string if ord(char) < ord('Z')})\n    return string.replace(' ', '')\n\nprint(lower_string(\"Hello World\"))", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "def remove_non_alphanumeric(text):\n    text = text.lower()\n    text = text.translate({ord(c): None for c in text if c.isalnum()})\n    return text\n\nremove_non_alphanumeric(\"Hello World\")\n# Output: helloworld", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag', {'name': 'name')", "print(soup.find('name').string)"], ["2011048-15", "def count_chars(filepath):\n    with open(filepath, 'r') as f:\n        for line in f.readlines():\n            count = len(line)\n        return count", "os.stat(filepath).st_size"], ["2600191-99", "a = [\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"", "l.count('a')"], ["2600191-23", "Counter(l).count('a') # Output: 3\nstr('abcd').count('b') # Output: 1", "Counter(l)"], ["2600191-53", "Counter(l).count('a') # Output: 3\nstr('abcd').count('b') # Output: 1", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "Counter(l).count('a') # Output: 3\nstr('abcd').count('b') # Output: 1", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "count = Counter(l).get('b', 0) \nprint(count)", "l.count('b')"], ["12842997-15", "import shutil\n\nshutil.copyfile('srcfile', 'dstdir')", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df.combine_first(df['b'], axis=1)\ndf['c'] = df['c'].join(df['a'])\ndf['c'] = df['c'].fillna(method='ffill')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "def convert_list_to_tuple(t):\n    return tuple(t)", "tuple(l)"], ["16296643-20", "def level1_to_list(level1):\n    return list(level1)", "level1 = map(list, level1)"], ["3880399-74", "logger = logging.getLogger('dataobject')\nlogger.log(logging.INFO, 'Output of pprint(dataobject) is:', file='logFile')", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "import numpy as np\n\na = np.array([True, False, True, False, True])\n\nprint(np.isin(a, [True, False, True]))\n\n# Output:\n# Output:\n# True\n# False\n# True\n# False", "df.loc[df['BoolCol']]"], ["21800169-19", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'BoolCol': [True, False, True, False]})\n\nresult = df.BoolCol.isin([True])\n\nprint(result)\n\n# Output\nTrue\n# Expected output\nTrue\n# Output:\n0\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "import numpy as np\n\ndef get_indexes(BoolCol):\n    return np.isin(BoolCol, True)\n\nIn [11]:\n\nimport pandas as pd\n\ndef get_indexes(BoolCol):\n    return pd.Index.isin(BoolCol, True)\n\nIn [12]:\n\nimport numpy as np\n\ndef get_indexes(BoolCol):\n    return np.isin(BoolCol, True)\n\nIn [13]:\n\nimport pandas as pd\n\ndef get_indexes(BoolCol):\n    return pd.Index.isin(BoolCol, True)", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'BoolCol': [True, True, False, True, False]})\n\nprint(np.isin(df['BoolCol'], [True]))\n# Output:\narray([ True, False])", "df[df['BoolCol']].index.tolist()"], ["299446-100", "import os\nos.chdir('owd')\nprint(os.getcwd())", "os.chdir(owd)"], ["32063985-36", "<div id=\"main-content\">\n</div>", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "def zip_longest(a, b, fillvalue=None):\n    \"\"\"\n    Zip two or more iterables together, returning a generator that aggregates elements\n    from each iterable.\n\n    If the iterables are of uneven length, missing values are filled-in with fillvalue.\n    Iteration continues until the longest iterable is exhausted.\n    \"\"\"\n    if fillvalue is None:\n        fillvalue = '__default'\n    for i in itertools.zip_longest(a, b, fillvalue):\n        yield i\n    for i in b:\n        yield i\n    for i in a:\n        yield i", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "def zip_longest(a, b): \n    return zip(a, b, fillvalue=0) \n\n# Output:\n# [('a', 0, 1), ('b', 2, 3), ('a', 4, 5), ('b', 6, 7)]", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "11", "'abcd}def}'.rfind('}')"], ["20546419-7", "import numpy as np\n\nr = np.random.random_shuffle(r)\nprint(r)", "np.random.shuffle(np.transpose(r))"], ["574236-63", "<nooutput>", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor = conn.execute(\"SELECT * FROM table_name WHERE column_name = ?\", [value])\nresult = cursor.fetchone()\nif result is not None:\n    print(result)", "cursor.fetchone()[0]"], ["4454298-91", "#test firstline\n#test secondline\n#test thirdline", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "set(t).remove(x) for x in t", "list(set(t))"], ["7961363-86", "set(source_list).remove_duplicates()", "list(set(source_list))"], ["7961363-7", "set(abracadabra).remove(abracadabra)", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(chain.from_iterable(a))", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "list(a)", "numpy.array(a)[0].tolist()"], ["5999747-97", "<td>Address:</td>", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "data to be encoded.decode('utf-8')", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data to be encoded.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "def replace_not_in_array(arr, target_array):\n    return arr.where(~arr.in1d(target_array)).delete(0)", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "def mean(a): \n    return a.mean(axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "writerows([Row(field1='value1', field2='value2')])", "writer.writeheader()"], ["23359886-48", "a[0, 1] = True", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.apply(pd.Series.dropna).apply(pd.DataFrame)", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "import skimage.io as io\nimport matplotlib.image as mpimg\n\n# Load the image\nimage = mpimg.imread('image.jpg')\n\n# Resize the image\nimage = image.resize((x, y), antialias=True)\n\n# Display the resized image\nmpimg.imshow(image)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "def find_differences(l1, l2):\n    diffs = []\n    for i in range(len(l1)):\n        diffs.append((l1[i] - l2[i]))\n    return diffs\n\nprint(find_differences(l1, l2))", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "<span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"star", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "sorted_list = sorted(list5, key=itemgetter('degrees')) \nprint(sorted_list) \n# Output: [10, 8, 6, 4, 2, 1]", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "def secondary_sort(data, key):\n    sorted_data = sorted(data, key=key)\n    return sorted_data.argsort()", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr = 123", "getattr(obj, 'attr')"], ["1960516-75", "'{\"3.9\": \"3.9\"}'", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df = df[df.A.isin(df.A.values.tolist())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(mappable)", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "def count_most_frequent(df, column_name):\n    counts = df[column_name].groupby(df[column_name]).transform('count')\n    return counts.head(100)\n\nprint(count_most_frequent(df['text'], 'text'))", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "import datetime\nimport time\n\nutc_time = datetime.utcnow()\nprint(utc_time)\n\n# Output: \n# 2020-07-22 16:38:26.214400\n\n# Or, if you prefer, you can use the built-in time.gmtime() function:\n\nimport time\n\nprint(time.gmtime())\n\n# Output:\n# 2020-07-22 16:38:26.214400", "datetime.now(pytz.utc)"], ["9262278-9", "<nooutput>", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "import os\nimport subprocess\nimport pty\n\n# Create a background process\nbackground_process = subprocess.Popen([\"python\", \"background.py\"],\n                                     stdout=subprocess.PIPE,\n                                     stderr=subprocess.PIPE)\n\n# Fork a child process\npid, fd = pty.fork()\n\n# Connect the child's controlling terminal to a pseudo-terminal\nos.tcsetpgrp(fd, os.getpid())\n\n# Return the child's process id\nreturn pid", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "for element in myList:\n    if 'how' in element or 'what' in element:\n        index = element.rfind('how')\n        if index != -1:\n            print(index)", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = df.applymap(lambda x: x[:2])\ndf = df.apply(lambda x: x.transpose())\ndf = df.apply(lambda x: x.unpack())", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(xticklabels, rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "count = yourdict.values()\nprint(count.count())", "len(list(yourdict.keys()))"], ["2212433-64", "10", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "import pandas as pd\n\ndf = pd.DataFrame([['a', 1, 2, 3], ['b', 4, 5, 6], ['c', 7, 8, 9]], columns=['col1', 'col2', 'col3'])\n\n# reorder levels\ndf.reorder_levels(list(range(1, 4)))\n\n# take col1 from position 1\ndf.take(1, axis=1)\n\n# concat with other columns\ndf1 = pd.concat([df, df.iloc[:, :-1]], axis=1)\n\n# print(df1)\n\n# Output:\n   col1  col2  col3\n0     a    1    2\n1     b    4    5\n2     c    7    8\n3     a    2    3\n4     b    5    6\n5     c    8    9", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "import subprocess\n\n# Call the subprocess with arguments\nsubprocess.check_call(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heappush(x)\nq.deque.insert(i, x)\nq.PriorityQueue(maxsize)", "q.put((-n, n))"], ["21887754-31", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\n# Output:\narray([[0, 0, 1, 2, 3],\n [0, 1, 2, 3, 4]])", "print(concatenate((a, b), axis=0))"], ["21887754-88", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=1)\nprint(c)\n# Output:\narray([[0, 0, 1, 2, 3],\n   [1, 1, 2, 3, 4]])", "print(concatenate((a, b), axis=1))"], ["21887754-21", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\n# Output:\narray([[0, 0, 1, 2, 3],\n   [1, 1, 2, 3, 4]])", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\n# Output:\narray([[0, 0, 1, 2, 3],\n   [1, 1, 2, 3, 4]])", "np.array((a, b))"], ["4356842-88", "401 Unauthorized", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "def get_loc(key, df):\n    return df.index.get_loc(key)\n\ndef idxmax(key, df):\n    return df.idxmax(key)\n\ndef argsort(key, df):\n    return df.index.argsort(key)", "df.index.get_loc('bob')"], ["18730044-52", "def zip_longest(iter1, iter2):\n    \"\"\"\n    Zip two iterables together, filling any missing values with the fillvalue\n    \"\"\"\n    return zip(iter1, iter2, fillvalue=None)\n\ndef itemgetter(iterable, fillvalue=None):\n    \"\"\"\n    Return a callable object that fetches item from its operand using the operand\u2019s __getitem__() method.\n    \"\"\"\n    return iterable(__getitem__=iterable, fillvalue=fillvalue)", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "def delete_char(string, char):\n    return string.translate({char:None})", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "def delete_char(s, char):\n    for i in range(len(s)):\n        if s[i] == char:\n            s = s[:i] + s[i+1:]\n    return s", "re.sub('i', '', 'it is icy')"], ["22187233-75", "def sub(input_, alpha):\n    output = input_\n    for i in range(len(input_)):\n        if input_[i] != 0:\n            output[i] = input_[i] - alpha\n    return output", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "start = 0\nend = 0\nif re.search('[a-zA-Z]', s):\n    start = re.search('[a-zA-Z]', s).start()\n    end = re.search('[a-zA-Z]', s).end()\nprint(s[start:end])", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = map(int, intstringlist)", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "def map_list_to_int(lst):\n    return [int(i) for i in lst]", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "import os\n\nos.listdir('/mydir')\n\n# Output: ['file1.txt', 'file2.txt', 'file3.txt']", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "import os\n\n# List all files in the directory \"/mydir\" with extension \".txt\"\nfiles = os.listdir(\"/mydir\")\n\n# Using scandir() to get an iterator of os.DirEntry objects\nentries = os.scandir(\"/mydir\")\n\n# Using walk() to generate the file names in a directory tree\n# rooted at \"/mydir\"\nroot = \"/mydir\"\nnames = os.walk(root)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "import os\n\n# List all files in the directory \"/mydir\" with extension \".txt\"\nfiles = os.listdir(\"/mydir\")\n\n# List all files in the directory with a recursive call\nfiles = os.scandir(\"/mydir\")\n\n# Generate a directory tree by walking the tree top-down\n# using os.walk()\nfor root, dirs, files in os.walk(\"/mydir\"):\n    print(root)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "def decode_json_string(json_string):\n    decoder = json.JSONDecoder()\n    return decoder.decode(json_string)", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by=['column_name'], ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import urllib.parse\nimport urllib.parse.urlencode\nimport urllib.parse.parse_qs\nimport werkzeug.datastructures\nimport werkzeug.datastructures.Headers\n\nurl = 'http://example.com/api?key=value'\n\ndata = urllib.parse.urlencode({'key': 'value'})\n\nheaders = Headers({'Content-Type': 'application/json'})\n\nresponse = urllib.request.Request(url, data=data, headers=headers)\n\nresponse_data = werkzeug.datastructures.Headers.get(response, 'Content-Type')\n\nprint(response_data)", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "def filter(records, filter_func):\n    for record in records:\n        if filter_func(record):\n            yield record", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted_list = sorted(list, key=itemgetter('points'), reverse=True)", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "0bstruct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.parse.urlencode(urllib.parse.parse_qs(data))", "json_data = json.loads(unescaped)"], ["18367007-15", "newFileBytes = b'some bytes'\n\nwith open('newFile', 'wb') as newFile:\n    newFile.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "def get_last_key(dict):\n    return dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "10", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "import time\n\nnow = time.gmtime()\nprint(time.strftime(\"%d %m %Y %H:%M:%S\", now))", "datetime.datetime.now()"], ["17794266-82", "# numpy.ndarray.argmin(x)", "max(x.min(), x.max(), key=abs)"]], "(2, True, False)": [["11840111-96", "d1.items() / d2.items()", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d1[k] = d1[k] / d2[k] for each key k in d1", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "urllib.request.urlretrieve(\"http://randomsite.com/file.gz\", \"file.gz\")", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "new_file = open(\"file.gz\", \"wb\")", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "The answer code would be MyModel.objects.filter(charfield__length__max=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "a ^ b", "((a and (not b)) or ((not a) and b))"], ["546321-12", "31", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "14", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "the return code of the executed Python script", "subprocess.call('test1.py', shell=True)"], ["843277-70", "Otherwise, the answer is False", "hasattr(obj, 'attr_name')"], ["2231663-53", "def two_list(lst):\n    return zip(lst[0], lst[1:])", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def get_sub_lists(lst):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "a list of smilies matching the regex pattern (?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P) in the string s", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df['User'].groupby('User').sum() == 0", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "webbrowser.get('default')", "webbrowser.open('http://example.com')"], ["4906977-61", "os.environ['HOME']", "os.environ['HOME']"], ["4906977-33", "os.path.expanduser(\"~\") or os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-98", "a list containing all the environment variables and their values", "print(os.environ)"], ["4906977-9", "os.environ.keys()", "os.environ"], ["4906977-77", "os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value') or contextvars.get('KEY_THAT_MIGHT_EXIST', 'default_value')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", ":", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "a generator that yields tuples of (key, value) pairs in the dictionary ordered by value", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['new_col1'] = df['stats'].str.split(',')\ndf['new_col2'] = df['stats'].apply(lambda x: x.split(',')[1])", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line.replace(\"!@#$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "The answer code is:", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.replace(\"1\", \"\")", "string.replace('1', '')"], ["3939361-89", "<nooutput>", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "10 minutes after t - t - timedelta(minutes=10)", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "5 hours subtracted from the time object dt", "dt -= datetime.timedelta(hoursrandom.randint(100000000000, 999999999999)"], ["13496087-95", "The answer code is import random\nimport uuid\n\nrandom_number = random.randint(100000000, 999999999)\nuuid_number = uuid.uuid4()\n\nprint(random_number)\nprint(uuid_number)", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "the provided code snippet", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.setscrreg(0, 0, 0)", "root.lift()"], ["1823058-26", "The locale.format_string, str.format, and format functions are not relevant to this task", "'{:,}'.format(value)"], ["14406214-5", "ax.set_yticklabels([\"x\", \"y\", \"z\"])", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_ylim([0, ax.get_ylim()[1])", "ax.xaxis.tick_top()"], ["10565598-66", "", "numpy.in1d(b, a).all()"], ["13557937-8", ":", "list('{0:0b}'.format(8))"], ["13557937-9", ": [0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "the code snippet print(datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "The answer code is list(reversed(L))", "L[::(-1)]"], ["3940128-21", "reversed(L)", "L.reverse()"], ["89228-90", "None", "from subprocess import call"], ["89228-91", "subprocess.check_call([\"some_command\", \"with\", \"args\"])", "os.system('some_command with args')"], ["89228-25", "\"python some_command < input_file | another_command > output_file\"", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "The answer code would be subprocess.check_call(\"some_command\", args=())", "stream = os.popen('some_command with args')"], ["89228-97", "<nooutput>", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "<nooutput>", "call(['ls', '-l'])"], ["5137497-23", ":", "os.path.realpath(__file__)"], ["5137497-33", "os.listdir(path)", "os.path.dirname(path)"], ["5137497-66", "os.path.normpath(path)", "os.path.realpath(path)"], ["5137497-91", "os.listdir(os.getcwd())[0]", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "os.path.abspath('.' + os.path.dirname(os.getcwd()))", "full_path = os.path.realpath(__file__)"], ["14961562-66", "struct.unpack('<H', s)", "struct.unpack('11B', s)"], ["19738169-65", "df['DateObj'] = pd.to_datetime(df['DateObj']).astype(str).strptime()", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "list(itertools.permutations([1,2,3], r=2)) + list(itertools.combinations([4,5,6], r=2))", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "the list of all permutations of the list [1, 2, 3] stored in the permutations variable", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "the list files containing the names of the files in the directory '.'", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample').reset_index()", "df.pivot(index='order', columns='sample')"], ["18229082-25", "The answer code is:", "pickle.load(open('afile', 'rb'))"], ["3329386-17", ":", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "str(list, encoding='utf-8').encode('utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", ":", "data.set_index('Date').diff()"], ["28901311-21", "A.index(B)", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "Task.objects.filter(time_spent__gte=3).values('time_spent').annotate(Sum('time_spent'))", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "time.strftime(\"%d %m %Y %H:%M:%S\")", "datetime.datetime.now()"], ["415511-29", "15:23:34", "datetime.datetime.now().time()"], ["415511-26", "1582771856.0", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "1582534400.0", "str(datetime.now())"], ["415511-33", "time.gmtime().strftime(\"%H:%M:%S\")", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "arr = np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "array([[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df = df.groupby('group').head(n=1)\ndf = df.groupby('group').last()", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "The answer code is datetime.datetime.strptime('24052010', '%d%m%Y').date()", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "the mean of the indices of the nonzero values in the dataframe df", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "True", "tuple(map(int, input().split(',')))"], ["2233917-8", "input('Please enter a tuple of integers: ')", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(ax.get_xticklabels() + 45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "df.groupby('STNAME').groupby('COUNTY_POP').sum().max()", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "df.pivot(index='Close', values=['time']).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(x) for x in input().split()]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "The answer code is:", "sorted(yourdata, reverse=True)"], ["13237941-56", "sorted(yourdata, key=itemgetter('subkey'), reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "sorted_data = sorted(yourdata, key=itemgetter('key', 'subkey'), reverse=True)", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", ":", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "/usr/var and /usr/var2/log have a common prefix of /usr/var", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "'log'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "number = getattr(myobject, 'id.number')\nif myobject is not None:\n    number = myobject.getattr('id.number')\nif number is None:\n    number = getattr(myobject, 'number', None)\nif number is None:\n    number = contextvars.get('number', None)\nif number is None:\n    number = str.find(myobject.id, 'number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X.reshape((X.shape[0], X.shape[1], X.shape[2])).kron(X.shape[2])", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "[((0, 0), (1, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (0, 1), (1, 1)), ((0, 0), (1, 0), (0, 1), (1, 1))]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "(None, 'off', 'delicious', 'ham')", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "import random and then random.randint(1,50)", "random.sample(range(1, 50), 6)"], ["13628725-59", "import uuid\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random\nimport random", "random.sample(range(1, 50), 6)"], ["15940280-74", "1582537600.0", "datetime.utcnow()"], ["12280143-55", "os.chdir('..')", "os.chdir('..')"], ["15457504-91", "k.set_text('Purisa', size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "the code snippet df = pd.DataFrame(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "any(d.values() == 'one') or d.values().count('one') > 0", "'one' in list(d.values())"], ["8214932-94", "d.values().__contains__('one')", "'one' in iter(d.values())"], ["7125009-76", "legend.set_title('x-small', loc='upper-left', prop={'fontsize': 8})", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.legend(loc='upper right', fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence.replace(\" \", \"\")", "sentence.replace(' ', '')"], ["8270092-68", "the value of the string with all whitespace removed", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence.strip()", "sentence.strip()"], ["8270092-87", "The relevant documentation does not provide any direct solution to the problem", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.strip()", "sentence = ''.join(sentence.split())"], ["14591855-94", "df = pd.read_csv('/home/.../data.h5', sep='\\t', engine='h5', key='firstSet')\ndf.set_index('key').head(n=5)", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "the code snippet import urllib.request, urllib.parse, urllib.error and then urllib.request.urlretrieve(url, filename)", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "urlparse('http://www.address.com/something').geturl()", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "mydict = {\n    'a': 10,\n    'b': 8,\n    'c': 5,\n    'd': 4\n}\n\nsorted_mydict = sorted(mydict.items(), key=lambda x: x[1])\n\nprint(sorted_mydict)\n\nOutput:\n[('b', 8), ('c', 5), ('d', 4), ('a', 10)]", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "", "first_name = request.args.get('firstname')"], ["13279399-5", "request.form.get('firstname')", "first_name = request.form.get('firstname')"], ["3278850-59", "The code snippet to achieve this is:\n\nos.fd.read(n)", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "True", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>\n<div>", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb = bytearray.fromhex(rgbstr).tobytes()", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "os.kill(pid, signal.SIGTERM)", "sys.exit()"], ["73663-36", "", "quit()"], ["73663-66", "<nooutput>", "sys.exit('some error message')"], ["21974169-23", "cursor.execute(\"COMMIT\") and the output should be None", "con.commit()"], ["11269575-66", "subprocess.check_call(['espeak', text])", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "The answer code is int(s)", "int(Decimal(s))"], ["1094717-69", ": Decimal(str(num))", "int(s.split('.')[0])"], ["31957364-53", "import numpy as np\n\nA = np.array([[1,2,3], [4,5,6]])\nB = np.array([[7,8,9], [10,11,12]])\n\nproduct = np.einsum('ij,kl->ikl', A, B)\nprint(product)\n\n# Output:\narray([[14, 28, 42],\n       [21, 36, 51]])", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "None", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.discard('element')", "e = next(iter(s))"], ["5868374-42", "datetime.strptime(datestr, '%Y-%m-%d').time()", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open(pdf_reference.pdf, 'rb').read()).decode('utf-8')", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('') or os.getcwd()", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "The os.chroot function is not applicable to this task", "os.chdir('.\\\\chapter3')"], ["1299855-22", "urllib.request.urlretrieve(url, filename)", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "the code snippet re.search(r'[a-zA-Z][\\w-]*\\Z', 'A\\n').group()", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "<nooutput>", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class=\"comment-\">\n<div class", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "<nooutput>", "plt.cla()"], ["13156395-50", "codecs.open('sample.json', 'r', encoding='utf-8-sig').read()", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "json.loads(open('sample.json', 'r', encoding='utf-8').read())", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "0", "sys.exit(0)"], ["8751653-82", "float(struct.unpack(\"<f\", s2)[0])", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "0.111011000000000001", "float(int('-0b1110', 0))"], ["8751653-54", "0bstruct.unpack('d', b8)[0]"], ["4789021-9", "if user.is_authenticated():\n    print('User is authenticated.')\nelse:\n    print('User is not authenticated.')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "user.is_authenticated()", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "vals[np.argwhere(vals==(0,1))].shape", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "Answer: The answer code is os.chdir(path)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.to_csv('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "import pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3], 'col2': ['a', 'b', 'c']})\ndf.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "list(zip(range(1, 4), range(2, 6))) and the output is [(1, 4), (2, 5), (3, 6)]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "list(itertools.chain.from_iterable(data))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "True", "df['a'].tolist()"], ["20205455-79", "soup = BeautifulSoup(response, 'html.parser')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = np.array([1, 2, 3, 4, 5, 6])\nexcluded_val = 3\n\nres = a[~a.index.isin([excluded_val])]\n\nprint(res)\n\nOutput:\narray([1, 2, 4, 5, 6])", "a[np.arange(len(a)) != 3]"], ["8217613-41", "Output: foo", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].groupby(df['Date']).unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir('/the/dir/')", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "a list sorted in reverse order by the 'date' value", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "import pandas\ndf = pandas.read_csv('mydf.tsv', sep='\\t', engine='python')\ndf.to_parquet('mydf.parquet', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "the code snippet set([x for x in [1, 2, 2, 2, 3] if x != 2)", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "filecmp.cmp(file1, file2).__bool__()", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list, key=lambda x: (x[0], x[1].isnan()))", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(x) for x in lst]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = list(map(str, lst))", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "0, 1", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 0:1], a[1, :], a[:, 2:3], a[2, :]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find_all('a', class_='tag') + soup.find_all('div', class_='tag')", "soup.find_all(['a', 'div'])"], ["931092-70", "bytes('world', 'utf-8').join('hello').decode('utf-8')", "'hello world'[::(-1)]"], ["931092-64", "list(reversed(s))", "s[::(-1)]"], ["931092-5", "re.join('foo', str.join('', audioop.reverse(reversed('foo'))))", "''.join(reversed('foo'))"], ["931092-74", "reversed(string)", "''.join(reversed(string))"], ["931092-65", "def reverse_string(s):\n    return s[::-1]", "'foo'[::(-1)]"], ["931092-99", "a_string = ''.join(reversed(a_string))", "a_string[::(-1)]"], ["931092-20", "The code to achieve this is: \n\na_string = \"Hello World\"\n\nreversed(a_string)", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "reversed(s)", "''.join(reversed(s))"], ["163542-7", "io.StringIO(b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n').readlines()", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "<nooutput>", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "the code block above", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "the code snippet str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = open(sys.stdin)", "result = sys.stdin.read()"], ["40055835-26", "the code snippet:", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df[df.index < start_remove].index | df.index > end_remove].index)", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(start_remove:end_remove)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "ndarray[bool, ndim=1] result = np.nonzero(mask) \nresult = np.argwhere(mask)", "numpy.where(mask)"], ["32533944-71", "import pandas\ndf = pandas.read_csv('Result.csv', sep=' ')\ndf.to_csv('Result_output.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "import pandas as pd\n\ndata = [\n    {'name': 'John', 'age': 25, 'occupation': 'engineer'},\n    {'name': 'Jane', 'age': 28, 'occupation': 'teacher'},\n    {'name': 'John', 'age': 30, 'occupation': 'doctor'},\n    {'name': 'Jane', 'age': 26, 'occupation': 'lawyer'}\n]\n\ndf = pd.DataFrame(data)\n\nprint(df.to_dict())\n\n# Output:\n# {'name': {'John': 25, 'Jane': 28, 'John': 30, 'Jane': 26}, 'age': {'John': 25, 'Jane': 28, 'John': 30, 'Jane': 26}, 'occupation': {'John': 'engineer', 'Jane': 'teacher', 'John': 'doctor', 'Jane': 'lawyer'}}", "pd.DataFrame(d)"], ["1883604-86", "gzip_file = gzip.open(file, 'r', encoding='utf-8')", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "somestring.startswith('blah')", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "True if the string \"substring\" is found in the string, otherwise False", "string.find('substring')"], ["3437059-83", "if s.find(\"is\") != -1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", ":", "globals()['myfunction']()"], ["3061761-63", "3", "a.shape"], ["3061761-55", "a.shape or a.reshape(a.shape)", "N.shape(a)"], ["3061761-89", "4", "N.shape(a)"], ["3061761-31", ":\na.shape or a.reshape(a.shape)", "a.shape"], ["13291539-54", "0.00582811585976", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(dict.items())", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "words = myfile.readlines()", "words = open('myfile').read().split()"], ["7717380-65", "Answer: a = np.array(a) or \na = np.reshape(a, new_shape) or \na = np.asarray(a)", "a = np.array(a)"], ["9304908-37", "", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "string1.lower() == string2.lower()", "(string1.lower() == string2.lower())"], ["319426-70", "True", "(first.lower() == second.lower())"], ["319426-18", "True if the strings are equal, False if they are not", "(first.upper() == second.upper())"], ["15455388-38", "import pandas as pd\\n\n\ndata = [\n    {'a': [1, 2, 3], 'b': {'c': [4, 5, 6]}},\n    {'a': [7, 8, 9], 'b': {'c': [10, 11, 12]}},\n]\n\ndf = pd.DataFrame(data)\n\nprint(df.apply(pd.DataFrame.from_dict, sep='a'))\n\nprint(df.apply(pd.DataFrame.applymap, sep='a'))\n\nprint(df.apply(pd.DataFrame.apply, sep='a'))", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "the provided code snippet df.groupby(['col5', 'col2']).count()", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "getattr(your_obj, 'x')", "getattr(your_obj, x)"], ["3743222-35", "datetime.date(o.year, o.month, o.day)", "datetime.datetime.now().date()"], ["3743222-73", "datetime.date(year, month, day)", "datetime.datetime.now().date()"], ["12496531-86", "A.argsort(axis=1).sort_values()", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "the value of the s variable", "s.lower()"], ["6797984-49", "s.decode('utf-8').lower()", "s.decode('utf-8').lower()"], ["2631935-11", "user_name = 'Bob Marley' and id = 123", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "def something():\n    global something\n    something = \"bob\"\n    return something", "globals()['something'] = 'bob'"], ["14766194-35", "a.any(1)", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray with shape (3, 3)", "np.zeros((3, 3)).ravel()"], ["15579649-73", "ndarray.from_dict(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "'quit program'", "sys.exit(0)"], ["36139-44", "sorted(mylist)", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "sorted(mylist)", "mylist.sort(key=str.lower)"], ["36139-23", "def sort_list(mylist):\n    return sorted(mylist)", "mylist.sort()"], ["36139-32", "sorted(list)", "list.sort()"], ["5280178-72", "import file.py", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "The answer code is int.from_bytes(pS, 'big')", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.islower() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype('int64').to_dense().index.astype('int64')", "df.to_sparse(0)"], ["1514553-90", "The answer code is variable = np.repeat(np.array([1,2,3]), 3).append(4), which creates an array variable with 3 repeated elements [1,2,3] and appends 4 at the end", "variable = []"], ["1514553-71", "range(10)", "intarray = array('i')"], ["610883-92", "hasattr(a, 'property')", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "hasattr(a, 'property')", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property", "getattr(a, 'property', 'default value')"], ["13902805-83", "The hashlib.hash.hexdigest function can be used to create a list of unique characters in the string", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "Answer:", "list(set('aaabcabccd'))"], ["13902805-87", "torch.unique(string)", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "16", "str.find('s', 16)"], ["674764-33", "10", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "The answer code is:\n\ns = 'sdfasdf'\n\nif 'df' in s:\n    print(s.rfind('df'))\nelse:\n    print('Not found')", "'sdfasdf'.index('df')"], ["674764-64", "0-indexed, so start is the index of the first character of the substring and end is the index of the last character of the substring", "str.find('a')"], ["674764-91", "str.rfind('g')", "str.find('g')"], ["674764-3", "str.rfind('s', 11)", "str.find('s', 11)"], ["674764-47", "str.rfind('s', 15), which returns the index of the sub string 's' in the string str starting from index 15", "str.find('s', 15)"], ["674764-5", "the code snippet m = re.search(r's.*?s', 'abcdefghi', 11, 14)", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda t: t[2])", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted(u.items(), key=lambda t: t[1], reverse=True)", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "def reverse_dict(d):\n    return sorted(d.items(), key=lambda t: t[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "def sorted_by_value(d):\n    return sorted(d.items(), key=itemgetter(1))", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "0", "sys.exit(0)"], ["179369-62", "raise SystemExit(code)", "sys.exit('aa! errors!')"], ["179369-47", "os.abort()", "sys.exit()"], ["19779790-35", "yesterday = datetime.date.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = nvalues.apply(pd.DataFrame)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "the href variable containing the value of the href attribute that has the string 'follow?page' inside it", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "np.mean(old_set, axis=0) + np.mean(new_set, axis=0)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "0bbin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set(LoD.keys())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "LoD.keys()", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(bin(x))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby([pd.to_datetime('Month'), 'Fruit'])", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "urllib.request.URLopener().open('https://www.mysite.com/', username='username', password='pwd')", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "os.listdir('file')", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "str(dict_str).replace(' ', '').strip()", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "the code block above", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "The answer code is json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "Renaming the file from src to dst can be done with os.rename(src, dst)", "os.rename(src, dst)"], ["16389188-53", "import pygame\npygame.display.set_mode((640, 480), 0, 0)\npygame.display.set_attribute(pygame.OPENGL, \"polygon_mode\", \"filled\")", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "var_name = request.GET.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "The answer code is thedict.items().keys().lower()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "import pandas as pd\n\ndf1 = pd.DataFrame({'revenue': [10, 20, 30], 'date': [1, 2, 3]})\ndf2 = pd.DataFrame({'revenue': [20, 30, 40], 'date': [4, 5, 6]})\n\nresult = df1.merge(df2, on='revenue', how='outer')\nresult['date'] = result['date'].combine_first(df1['date'])\nprint(result)\n\nOutput:\nrevenue  date  revenue\n0       10  1.0  20.0\n1       20  4.0  40.0\n2       30  5.0  60.0", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "<nooutput>", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = context.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "123", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "urllib.parse.urlencode(string_of_characters_like_these='%3A%25%26%23%5E%24%25%3F%25%3F%3F%3A%25%3F%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F%3A%25%3F", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "12345", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "tail", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "2", "list(x.keys()).index('c')"], ["10484261-51", "a list of values from the dictionary programs that have a key with a case insensitive match to 'new york'", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s = \"Sp\\xE9cial\\xEFch\\xAAr\\x8Ctes\"\n\ns = s.decode(\"utf-8\")\nprint(s.encode(\"utf-8\")) # Output: Sp\u00e9cialch\u00e2r\u00eates", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "The code snippet is urllib.parse.quote(s), the answer is u'%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2", "urllib.parse.quote_plus('a b')"], ["32751229-20", "The code would be df.groupby(['Country', 'Item_code'])['Y1961', 'Y1962', 'Y1963'].sum()", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "5", "sum(((i > 5) for i in j))"], ["10543303-81", "5", "len([1 for i in j if (i > 5)])"], ["10543303-37", "len(j) - i", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "a1.any() or a2.any()", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = torch.clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "a generator that will yield all possible combinations of n binary values", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "itertools.product(range(1, n+1), repeat=n)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "itertools.product(range(1, 2), range(1, 2), range(1, 2))", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "list(itertools.product(range(2), repeat=3))", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "datetime.now() + timedelta(days=1, hours=3)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "4081.637e+07f", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.colorbar(im, ax=ax)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s = s[1:-1]", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data[\"one\"].isin(data[\"one\"][\"a\"]) & data[\"two\"].isin(data[\"two\"][\"c\"])", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "data['a'][data['c'].isin(data.index)]", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "<nooutput>\nThis query cannot be answered by a code generation model", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "a list of lists containing the elements of test which have the same characters up to the first _ character", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "groupby(a, key=lambda x: x)", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if 'title' in request:\n    return request['title']\nelse:\n    return \"\"", "request.POST.get('title', '')"], ["20222485-17", ":", "list(accumulate(list(range(10))))"], ["16436133-47", "def create_json_object(mydata):\n    if mydata is None:\n        return json.loads(json.dumps(dict()))", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "The answer code is result = test_string.rfind('[', 0, len(test_string) - 1)", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "The syntax for this is:\n\nstring = 'foobar'\nstart = 3\nend = 4\n\nresult = re.finditer(r'(?<=foobar)(.{start})', string)\n\nfor match in result:\n    print(match.start, match.end)", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "the resulting list of words", "s.rfind('&')"], ["8247792-90", "The final code snippet is split('&', 'hello world'), and the answer is ['hello', 'world']", "s[:s.rfind('&')]"], ["35178812-30", "ex.index.value_counts()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "<nooutput>\nThis is a code generation task and cannot be completed by a language model", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "The answer code is t = tuple(s.item())", "t = tuple(x[0] for x in s)"], ["11205386-94", "soup.find('meta', {'name': 'City'}).attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot_table(index=['upc'], columns='saleid', values='quantity').reset_index()", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "The answer code is os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "The answer code is df.to_csv('filename', index=False, date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = np.where(np.isnan(a), 0, a)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "ndarray[float64, ndim=2, ndim=2, ndim=2]", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "datetime.strftime(datetime.now(), '%A')", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "d = dict(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "Answer:", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df['column_name'].isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "<nooutput>", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "list(modulefinder.ModuleFinder.modules.keys())", "help('modules')"], ["12362542-44", "s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "a list of indices of elements equal to zero in the numpy array x", "numpy.where((x == 0))[0]"], ["2428092-52", "the code snippet:\n\nimport json\n\nresponse_data = json.dumps({\"success\": True, \"message\": \"Data successfully created.\"})\n\nresponse = json.dumps(response_data)\n\nresponse_headers = {'Content-Type': 'application/json'}\n\nresponse_data = json.dumps({\"success\": True, \"message\": \"Data successfully created.\"})\n\nresponse = json.dumps(response_data)\n\nresponse_headers = {'Content-Type': 'application/json'}\n\nresponse = http.client.HTTPResponse(response, response_headers)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "This code will take the given string s and decode it from hexadecimal to binary", "s.decode('hex')"], ["10824319-49", ":", "binascii.a2b_hex(s)"], ["12655007-87", "zip(a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "ndarray from x", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "0x414243", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x12345678", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "'c:\\\\Users\\\\uname\\\\desktop\\\\python'", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "The answer code would be:\n\nos.chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", ":", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "urllib.request.urlopen(\"http://www.stackoverflow.com\")", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data[\"log(gdp)\"] = data[\"gdp\"].astype(\"float\")", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "connection.commit()", "dbb.commit()"], ["5352546-44", "def extract_keys(d, l=None, m=None, n=None):\n    if l is None:\n        l = ''\n    if m is None:\n        m = ''\n    if n is None:\n        n = ''\n    keys = d.keys()\n    if l:\n        keys = keys[:]\n        for key in keys:\n            if key.lower() == l:\n                keys.remove(key)\n        return keys\n    if m:\n        keys = d.keys()\n        for key in keys:\n            if key.lower() == m:\n                keys.remove(key)\n        return keys\n    if n:\n        keys = d.keys()\n        for key in keys:\n            if key.lower() == n:\n                keys.remove(key)\n        return keys", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "The answer code is:\n\nbigdict = {\n    'l': ['a', 'b', 'c'],\n    'm': ['d', 'e', 'f'],\n    'n': ['g', 'h', 'i']\n}\n\ndef extract_keys(bigdict, keys):\n    return bigdict[itemgetter(keys)(bigdict)]\n\nprint(extract_keys(bigdict, ('l', 'm', 'n')))\n\nOutput:\n\n# Output:\n# {'l': ['a', 'b', 'c'], 'm': ['d', 'e', 'f'], 'n': ['g', 'h', 'i']}", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict.items(('l', 'm', 'n')).keys()", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "a list containing the keys 'l', 'm', and 'n'", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "{u'a': 1, u'b': 2}", "json.load(u)"], ["4940032-13", ":\n\ndef search_string(txt, string):\n    for i in range(len(txt)):\n        if txt[i] == string:\n            return i\n    return -1", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "True", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "example.txt.find('blabla')", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "urlopen(url)", "r = requests.get(url)"], ["4476373-22", "the string url with the parameters payload encoded as a bytes object", "r = requests.get(url, params=payload)"], ["4476373-71", "urllib.parse.urlencode({'payload': 'data'})", "r = requests.post(url, data=payload)"], ["4476373-99", "urllib.parse.urlencode(post_data).encode('ascii')", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "0bbinint('01010101111', 2)"], ["1476-71", "8", "int('010101', 2)"], ["1476-39", "8", "int('0b0010101010', 2)"], ["1476-6", "0bbinint('11111111', 2)"], ["41178532-76", "trace_df.ratio.isin(True).astype(float).abs().groupby(trace_df.ratio).transform('count')", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "a list of tuples containing all possible combinations of items from a", "list(itertools.product(*a))"], ["364519-94", "def iterate_dict(d):\n    for key, value in d.items():\n        yield key, value", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in sorted(d.items()):", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "dict.items()", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():", "return iter(sorted(dict.items()))"], ["364519-52", "my_dict = {'a': 1, 'b': 2, 'c': 3}\n\ndef sorted_dict(d):\n    return d.items()\n\nsorted_dict(my_dict)  # returns [('a', 1), ('b', 2), ('c', 3)]", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "def iterate_dict(d):\n    for key, value in d.items():\n        yield key\n    return", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "the code block that implements this rationale", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "tf.cast(ast.literal_eval(constants), tf.int32)", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.DataFrame([['A', 'B', 'A1R', 'B2', 'AABB4'], ['a', 'b', 'a1r', 'b2', 'aabb4']], columns=['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "df = pd.DataFrame(user_list, columns=['user'])", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "import pandas as pd\n\nd = {'Date': ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04'],\n 'DateValue': [1, 2, 3, 4] }\n\npd.DataFrame(d)\n\n# set index to Date\ndf = pd.DataFrame(d).set_index('Date')\n\n# dropna\ndf = df.dropna()\n\n# apply function to DataFrame\ndf = df.apply(lambda x: x.DateValue)\n\n# print(df)\n\nOutput:\nDate  DateValue\n2020-01-01    1\n2020-01-02    2\n2020-01-03    3\n2020-01-04    4", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "5.6", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year', 'month', 'item'], columns='item').reset_index()", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot_table(index=['year', 'month'], columns=['month'])", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "<nooutput>", "p1.communicate()[0]"], ["748028-100", ": \n\nimport subprocess\n\nprocess = subprocess.Popen([\"exe\"], stdout=subprocess.PIPE)\n\noutput = process.communicate()\n\nif process.returncode == 0:\n    print(output)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "the code snippet for element in a.findall('*'):", "[elem.tag for elem in a.iter()]"], ["10408927-56", "a.findall('*', exclude_root=True)", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "3", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = ['a', 'b', 'c']\na.remove('b')\nprint(a)\nOutput: ['a', 'c']", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4, 5]\na.remove(2)\nprint(a)\nOutput: [1, 3, 4, 5]", "a.remove(c)"], ["2793324-93", "a.pop(6)", "a.remove(6)"], ["2793324-3", "a = [1, 2, 3, 4, 5, 6, 7]\na.pop(6)  # returns 6\na  # returns [1, 2, 3, 4, 5, None]", "a.remove(6)"], ["2793324-97", "the del statement with the specified index", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.remove(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "import test.sh\ntest.sh.otherfunc()", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "No, a python script cannot execute a function inside a bash script", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "<nooutput>", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "Sample.objects.filter(year=2011)", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "the code snippet open('picture.jpg', 'rb')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "import urllib.request\nimport os\n\nurl = \"picture.jpg\"\n\nif os.path.exists(url):\n    with open(url, \"rb\") as f:\n        content = f.read()\nelse:\n    content = \"Not found\"", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "The syntax for this is os.fdopen(xxx.mp4, 'w')", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.sort_values().sort_index()", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1 = df1.drop_duplicates().groupby('col1').transform('count')", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.mean(axis=1)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "return HttpResponseRedirect('/Home/index')", "redirect('Home.views.index')"], ["42352887-25", "The code snippet to achieve this is sorted_keys = sorted(things.items(), key=lambda t: t[1].get('weight', 0))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "os.path.dirname(inspect.getmodulename('a_module'))", "print(a_module.__file__)"], ["247770-2", "os.path.dirname(inspect.getfile(inspect.currentframe())[1])", "print(os.getcwd())"], ["247770-13", "import amodule", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "df['A'].sum(1) + df['B'].sum(1)", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "0.0", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'4a4b4c'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "import subprocess\\n\\nproc = subprocess.Popen([\"ps\", \"-ef\", \"|\", \"grep\", \"something\"], stdout=subprocess.PIPE)\\n\\noutput = proc.communicate()\\n\\nprint(output[0])", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.intersection(s2)", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "when.strptime('%d %m %Y')", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "the returned object", "Entry.objects.filter()[:1].get()"], ["29784889-2", "<nooutput>", "warnings.simplefilter('always')"], ["22676-23", "urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "urllib.request.URLopener().open(url, file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "urllib.request.urlretrieve('http://www.example.com/', 'example.com.txt')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "None", "r = requests.get(url)"], ["22676-64", "import urllib.request\nurl = 'http://example.com/file.txt'\nlocal_file = 'file.txt'\nresponse = urllib.request.urlretrieve(url, local_file)\nprint(response)", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "P @ T", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "reversed(range(1, 11))", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is datetime.date.fromordinal(7).date()", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "The code to identify duplicate values in the list mylist is mylist.count(item) > 1", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "import pandas as pd\ndf = pd.DataFrame({'col1': [1, 2, 3, 4], 'col2': [5, 6, 7, 8]})\ndf.to_csv('np.txt', sep='\\t')\n\nimport numpy as np\nnp.savetxt('np.txt', np.arange(1, 9), delimiter=' ')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "The answer code is x.rsplit('-', 1), which will split the string x by the last occurrence of the character -", "print(x.rpartition('-')[0])"], ["15851568-9", "s.rsplit('-', 1)[-1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", ":\n[12, 19, 23, 2, 14, 17, 24, 3, 16, 25, 18, 20, 11, 21, 26, 9, 8, 22, 7, 6, 10, 12, 15, 13, 23, 4, 5, 27, 28, 29, 30]", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "time.strftime(\"%f\", time.gmtime())", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "print(tab.join('|', '|'.join(map(str, tab))).ljust(8, '|'))", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "df.count() or df.sum() depending on the type of data frame", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.translate(str.maketrans('', '', string.punctuation)).lower().replace(\"[^a-zA-Z0-9 ]\", \"\")", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text.translate(str.maketrans('', '', string.punctuation)).lower()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "result.name", "print(soup.find('name').string)"], ["2011048-15", "10 (the number of characters in the file)", "os.stat(filepath).st_size"], ["2600191-99", "the code block that implements this rationale", "l.count('a')"], ["2600191-23", "Counter(l).items() or len(l)", "Counter(l)"], ["2600191-53", "Counter(l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", ":", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "3", "l.count('b')"], ["12842997-15", "shutil.copyfile(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['a'].combine(df['b'], method='inner')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "tuple(t)", "tuple(l)"], ["16296643-20", "list(level1)", "level1 = map(list, level1)"], ["3880399-74", "logging.info(dataobject, logFile)", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "0", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.isin(True)", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df.BoolCol.isin(True)", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "div = soup.find('div', {'id': 'main-content'})", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "def join_with_tuples(a, b):\n    return zip(a, b)[::2]", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "zip(a, b)", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "The output of m.start() and m.end() is (8, 11)", "'abcd}def}'.rfind('}')"], ["20546419-7", "r.shuffle()", "np.random.shuffle(np.transpose(r))"], ["574236-63", "os.listdir('C:/') or os.stat('C:/').st_numfiles", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor.execute(\"SELECT * FROM table_name WHERE column_name = ?\", [value])", "cursor.fetchone()[0]"], ["4454298-91", "", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "if re.search(r'ba[rzd]', 'foobarrrr'):\n    print(True)\nelse:\n    print(False)", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "list(set(t)) or list(t.items())", "list(set(t))"], ["7961363-86", "source_list = list(set(source_list))", "list(set(source_list))"], ["7961363-7", ":", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a[0].tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find_all(text=True, recursive=False)[0].parent.find('td').text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", ":", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "the string data to be encoded encoded in the ascii encoding", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "A[~numpy.in1d(A, [1, 3, 4])] = 0", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "a.mean(axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "The answer code is writer.writerow([header])", "writer.writeheader()"], ["23359886-48", "ndarray[bool](a[0, 0] == 0 & a[0, 1] == 1)", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.apply(lambda x: pd.Series([x.email, x.list]))\ndf = sf.dropna().apply(lambda x: pd.Series([x.email, x.list]))", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "import skimage.io\nimport matplotlib.image\n\nimage = skimage.io.imread('image.jpg')\n\nwidth, height = image.shape[:2]\n\nimage = image.resize((x, y), antialias=True)\n\nimshow(image)\n\nplt.show()", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "The answer code is list(zip_longest(l1, l2, fillvalue=0))[1:10]", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "[<span class=\"starGryB sp\">G</span>, <span class=\"starGryB sp\">R</span>, <span class=\"starGryB sp\">B</span>, <span class=\"starGryB sp\">S</span>]", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "The answer code is list5.sort(key=lambda x: x.degree)", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "sorted(mylist, key=itemgetter(1))", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "'{\"3.9\":}'", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df[df.A.isin(df.A.values)]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "The answer code is plt.imshow(mappable).colorbar()", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "the code block above", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "datetime.datetime.utcnow().astimezone(pytz.timezone.utc).strftime('%Y-%m-%d')", "datetime.now(pytz.utc)"], ["9262278-9", "response = HttpResponse(json.dumps(data), content_type='application/json')", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", ":\n\nsubprocess.Popen([\"background-process\", \"arguments\"])", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "myList.index('how')", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", ":\n\ndf = df.apply(lambda x: x.tolist(), axis=1).T", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "xticklabels = ax.get_xticklabels().rotate(45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "11", "len(list(yourdict.keys()))"], ["2212433-64", "5", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df = pd.concat([pd.DataFrame([[1,2,3], [4,5,6], [7,8,9]]), pd.DataFrame([[10, 11, 12], [13, 14, 15], [16, 17, 18]])], axis=1), axis=1).reorder_levels([0, 1, 2]).take([1, 2])", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "p.communicate(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heappush(item)", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate(a, b)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "ndarray([a, b], dtype=float32)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a = np.concatenate((a, b))\nAnswer: \na = np.hstack((a, b))\nAnswer: \na = np.stack((a, b))", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "ndarray(shape=(len(a),), dtype=float)", "np.array((a, b))"], ["4356842-88", "the code block that implements this rationale", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "The code snippet to achieve this is:\n\ndf.loc[df['name'] == 'bob']", "df.index.get_loc('bob')"], ["18730044-52", "", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "'it is icy' -> 'it is ys'", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "The code to delete all instances of a character 'i' in a string 'it is icy' is string = re.sub(r'i', '', 'it is icy').", "re.sub('i', '', 'it is icy')"], ["22187233-75", "str.translate(\"it is icy\", dict(i=\"\"))", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "re.search(r'[x]', 'hello world').start()", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(x) for x in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, myList))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "os.listdir(\"/mydir\") + [f for f in os.scandir(\"/mydir\") if f.suffix == \".txt\"]", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "the code snippet:\n\nos.scandir(\"/mydir\")", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "for root, dirs, files in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}", "json.loads(request.body)"], ["36402748-46", "df.sort_values('occurences', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "data = urllib.parse.urlencode(dict(name='John')).encode('utf-8').replace('+', '%20').replace('%7E', '~').replace('%2F', '/').replace('%3A', ':').replace('%40', '@').replace('%5B', '[').replace('%7B', '{').replace('%5D', ']').replace('%3D', '=').replace('%3F', '?').replace('%25', '%').replace('%0A', '\\n').replace('%0D', '\\r').replace('%08', '\\b').replace('%09', '\\t').replace('%0C', '\\r\\n').replace('%E2%80%99', '\\u2019').replace('%E2%80%9E', '\\u2013').replace('%E2%80%94', '\\u2014').replace('%E2%80%92', '\\u2018').replace('%E2%80%93', '\\u201C').replace('%E2%80%90', '\\u2010').replace('%E2%80%91', '\\u2011').replace('%E2%80%9F', '\\u201E').replace('%E2%80%96', '\\u2016').replace('%E2%80%99', '\\u2019').replace('%E2%80%9E', '\\u2013').replace('%E2%80%94', '\\u2014').replace('%E2%80%92', '\\u2018').replace('%E2%80%93', '\\u201C').replace('%E2%80%90', '\\u2010').replace('%E2%80%91', '\\u2011').replace('%E2%80%9F', '\\u201E').replace('%E2%80%", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "def filter_by_hour(hours):\n    return (record for record in records if record['hour'] == hours)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "the sorted list of dictionaries obtained by using this code snippet", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "0bstruct.unpack('H', struct.pack('h', number))"], ["20107570-40", "import pandas\ndf = pandas.DataFrame({'col1': ['a', 'b', 'c'], 'col2': ['d', 'e', 'f']})\ndf.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.parse.urlencode(urllib.parse.parse_qs(unescaped)).decode().strip()", "json_data = json.loads(unescaped)"], ["18367007-15", "newFile.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.items()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "255", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "datetime.now().strftime('%B %d, %Y')", "datetime.datetime.now()"], ["17794266-82", "x.argmin()", "max(x.min(), x.max(), key=abs)"]], "(2, True, True)": [["11840111-96", "The answer code is: \n\ndict = dict(d1.items(), d2.values())", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "The code to do this is new_dict = {d1[k]: d2[k]/d1[k] for k in d1.items() if k in d2}", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "Use the os.read() function to read the file file.gz", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "The code snippet is urllib.request.urlretrieve(\"http://randomsite.com/file.gz\", \"file.gz\")", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "The answer code would be MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "The answer code is x = a.bitwise_xor(b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "the date one month from today", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "date.fromordinal(2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "This will execute the Python script and return the return code", "subprocess.call('test1.py', shell=True)"], ["843277-70", "If the object is a bound method, the function will return True, otherwise False", "hasattr(obj, 'attr_name')"], ["2231663-53", "def two_list(lst):\n    return [list(x) for x in zip(lst)]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "list(zip_longest(list1, list2, fillvalue))", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "a list of strings", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "The answer code is df.groupby('User').sum().where(df.groupby('User').sum().eq(0)).dataframe", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "If autoraise is True, the window will be raised if possible", "webbrowser.open('http://example.com')"], ["4906977-61", "On Windows, the os.path.expanduser() function can be used to expand the \"HOME\" environment variable to the user's home directory", "os.environ['HOME']"], ["4906977-33", "os.path.expanduser(\"HOME\")", "os.environ['HOME']"], ["4906977-98", "This will print out a dictionary of environment variables and their values", "print(os.environ)"], ["4906977-9", "a dictionary containing all environment variables", "os.environ"], ["4906977-77", "If it does not exist, return the default value", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "sorted(dictionary.items())", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "To iterate over a dictionary, ordered by values, we can use the dict.items method to return a new view of the dictionary\u2019s items, or we can use the operator.itemgetter function to return a callable object that fetches item from its operand using the operand\u2019s __getitem__() method", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "The answer code is df['stats'].str.split(',').apply(pd.Series)", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = pd.Series(df['stats'].str.split(',')).tolist()", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "the code snippet re.sub('!@#$', '', line)", "line.translate(None, '!@#$')"], ["3939361-33", "the string line.replace('!@#$', '') which will remove the characters \"!@#$\" from the string line", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.strip()", "string.replace('1', '')"], ["3939361-89", "the string with the characters removed", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "The answer code is t.strftime(\"%H:%M\") - 1", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "the string '05:00' which is 5 hours less than the original time", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "random.randint(100000000, 10000000000000001)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "a 12-digit random number generated by the randbytes function from the random library", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "import urllib.robotparser\nimport urllib.request\nimport urllib.parse\n\nurl = 'http://www.google.com/'\n\nsoup = BeautifulSoup(urllib.robotparser.RobotFileParser().read(url), 'html.parser')\n\nprint(soup.prettify())\n\n# Output:\n<html>\n<head>\n    <title>Google</title>\n</head>\n<body>\n    <h1>Welcome to Google</h1>\n</body>\n</html>", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "window.setscrreg(0, 0)", "root.lift()"], ["1823058-26", "The code snippet is:\n\n\"\"\"\nimport locale\nimport string\n\nvalue = 12345\n\nif 'grouping' in locale.getdefaultlocale():\n    print(locale.format(\"%d\" % value, grouping=True))\nelse:\n    print(string.format(\"%d\" % value, grouping=True))\n\"\"\"", "'{:,}'.format(value)"], ["14406214-5", "The labels argument should be a list of string labels to be moved", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_ylim(None, None)", "ax.xaxis.tick_top()"], ["10565598-66", "any(b, a)", "numpy.in1d(b, a).all()"], ["13557937-8", "The syntax is binascii.hexlify(data) and the output will be a bytes object containing the binary values in hexadecimal format", "list('{0:0b}'.format(8))"], ["13557937-9", "the code snippet:\n\n\"\"\"\ndef decimal_to_binary(num):\n    binary_string = bin(num)\n    binary_list = binary_string.split('0b')\n    return binary_list\n\nif __name__ == '__main__':\n    num = 8\n    binary_list = decimal_to_binary(num)\n    print(binary_list)\n\"\"\"", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "print(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "itertools.chain.from_iterable(L)", "L[::(-1)]"], ["3940128-21", "the same reverse iterator", "L.reverse()"], ["89228-90", "subprocess.check_call(\"ls -l\")", "from subprocess import call"], ["89228-91", "To execute the command on a different operating system, we can use the os.execv() function", "os.system('some_command with args')"], ["89228-25", "The code snippet should be subprocess.check_call(\"some_command < input_file | another_command > output_file\")", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "If the return code is 0, the command was successful, otherwise an exception will be raised", "stream = os.popen('some_command with args')"], ["89228-97", "The code would be subprocess.Popen([\"echo\", \"Hello\", \"World\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(\"Hello World\")", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "The code would be subprocess.check_call(\"ls -l\")", "call(['ls', '-l'])"], ["5137497-23", "os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "Finally, we can use scandir() to get an iterator of os.DirEntry objects corresponding to the entries in the directory", "os.path.dirname(path)"], ["5137497-66", "os.path.normpath(os.path.relpath(path, start))", "os.path.realpath(path)"], ["5137497-91", ":", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "For example, os.path.abspath(os.path.dirname(__file__)) will give you the full path of the current file", "full_path = os.path.realpath(__file__)"], ["14961562-66", "struct.unpack('<H', s)", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = pd.to_datetime(df['DateObj'], dtype='string')", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "combinations([1, 2, 3], 3)", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "permutations([1, 2, 3], 3)", "itertools.permutations([1, 2, 3])"], ["19781609-19", "The code block that implements this rationale is:\n\ndf.to_csv('filename.csv', sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "os.scandir('.').", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', values='sample').set_index('order')", "df.pivot(index='order', columns='sample')"], ["18229082-25", "Pickler(file).dump(list) and Unpickler(file).load(list)", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "Finally, we can use the re.Match.groups() function to get a tuple containing all the subgroups of the match", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "text.encode('utf-8').decode('utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "a code snippet that calculates the difference between each row and the row previous to it, such as:", "data.set_index('Date').diff()"], ["28901311-21", "If an element is not present in B, the index will be -1", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "The answer code is Task.objects.filter(time_spent__gte=3).values('time_spent').annotate(Sum('time_spent'))", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "\"%d/%m/%Y %T\"", "datetime.datetime.now()"], ["415511-29", "the code snippet struct_time = time.gmtime(time.time())", "datetime.datetime.now().time()"], ["415511-26", "time.strftime(\"%d %m %Y %H:%M:%S\")", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "the string representation of the current time", "str(datetime.now())"], ["415511-33", "time.now()", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "The code to do this is:", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "arr = np.reshape(arr, (6, 9, 20) + arr.shape)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.groupby('group').head(n=1).last()", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "datetime.strptime('24052010', '%d%m%Y')", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", ":", "np.flatnonzero(x).mean()"], ["5508352-50", "a.index(b)", "a[tuple(b)]"], ["2233917-10", "a valid integer tuple", "tuple(map(int, input().split(',')))"], ["2233917-8", "the evaluated tuple", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(labels, rotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "the sum of the 3 largest integers in each group", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "df.pivot_table(index='Close', columns=['index.time']).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "the code snippet:", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "the reversed list yourdata", "sorted(yourdata, reverse=True)"], ["13237941-56", "Exceptions will be raised if any comparison operations fail, resulting in the list being left in a partially modified state", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "The sorted list will be returned", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "We can then use the clf function to clear the figure and the show function to display the graph", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "'/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "We can use the os.path.relpath() function to get the relative path of the path '/usr/var' regarding the path '/usr/var/log/' which will return '/usr/var/log/'. We can then use the os.path.dirname() function to get the directory name of the relative path which will return '/usr/var/log/'.", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "import numpy as np #import the numpy module\n\nmyobject = np.array([{'id': 1, 'number': 5}])\n\nnumber = getattr(myobject, 'number')\n\nif number is not None:\n    print(number)\nelse:\n    print('No such attribute')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "This code evaluates the Einstein summation convention on the operands and returns a 3d array X", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "[1, a, A, 2, b, B, 3, c, C]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "re.Match(r'\\\\$[0-9]+[^\\\\$]*$', 'off delicious $5 ham').group()", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "randint(1,51)", "random.sample(range(1, 50), 6)"], ["13628725-59", "import uuid; uuid.uuid4().hex", "random.sample(range(1, 50), 6)"], ["15940280-74", "the time in seconds since the epoch", "datetime.utcnow()"], ["12280143-55", "os.chdir(path)", "os.chdir('..')"], ["15457504-91", "k.setText('Purisa', 12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "df = pd.DataFrame.from_dict(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "any(d.values() == 'one')", "'one' in list(d.values())"], ["8214932-94", "True if the value 'one' is found in the dictionary, otherwise False", "'one' in iter(d.values())"], ["7125009-76", "We can use matplotlib.legend.Legend.set_title to set the legend title to \"x-small\" in the upper-left location", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "the code block: plt.legend(loc='upper right', prop={'size': 6})", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence.strip()", "sentence.replace(' ', '')"], ["8270092-68", "sentence.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence.strip().replace(^[\\s]+$, '').replace(' ', '').replace('\\\\', '').replace('&', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-', '').replace(':', '').replace('+', '').replace('?', '').replace('@', '').replace('/', '').replace('\\\\', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-', '').replace(':', '').replace('+', '').replace('?', '').replace('@', '').replace('/', '').replace('\\\\', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-', '').replace(':', '').replace('+', '').replace('?', '').replace('@', '').replace('/', '').replace('\\\\', '').replace('^', '').replace('$', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('(', '').replace(')', '').replace('*', '').replace('/', '').replace('-", "sentence.strip()"], ["8270092-87", "sentence.strip()", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "re.sub(' ', '', sentence)", "sentence = ''.join(sentence.split())"], ["14591855-94", "The syntax is df = pd.read_csv('/home/.../data.h5', key='firstSet')", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "The code to read the text file is str = str(io.IOBase.readlines('very_Important.txt'))", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "The reporthook function can be used to track the progress of the download", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "the code block below", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "sorted(mydict.items(), key=operator.itemgetter(1))", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "werkzeug.datastructures.Headers.getlist('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "If we need to access raw or non-form data posted in the request, we can use the HttpRequest.body attribute", "first_name = request.form.get('firstname')"], ["3278850-59", "lines = io.IOBase.readlines(file.txt); url = urllib.request.open(file); data = os.read(url.fileno())", "txt = open('file.txt').read()"], ["14043080-28", "time.strftime(\"%Y\", datetime.date.toordinal(UTC-11))", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "Entry.objects.filter(id__ne=3)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "The code to do this is:", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgbstr = bytearray([ord('0x'.join(map(str, rgbstr))), ])", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "a code snippet that reverses the string a by 2 characters at a time, such as reversed(a).join(itemgetter(2))", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "On POSIX OSs, this will send a SIGKILL signal, and on Windows, it will use the TerminateProcess() function", "sys.exit()"], ["73663-36", "The program should be terminated by calling the subprocess.Popen.kill() or os.kill() function with the signal 9 (SIGKILL or terminate)", "quit()"], ["73663-66", "This will cause the process to terminate with a signal of SIGABRT and return an exit code of 3 on both Unix and Windows", "sys.exit('some error message')"], ["21974169-23", "the code block that implements this rationale", "con.commit()"], ["11269575-66", "The provided code documentation is not directly relevant to this query", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "float(s).to_integral().to_bytes(16, 'big')", "int(Decimal(s))"], ["1094717-69", "Decimal(str(x)).round(2)", "int(s.split('.')[0])"], ["31957364-53", "To elementwise multiply the outer dimensions of A and B and sum the inner dimensions, we can use numpy.kron or numpy.einsum", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "The os.unlink() function can be used to delete the file, and the Popen.communicate() function can be used to wait for the process to complete and set the return code", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "To round off entries in the Credit_exp column to three decimal places, use the df['Credit_exp'].round(3) command", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "The code to achieve this is:", "e = next(iter(s))"], ["5868374-42", ":", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open(pdf_reference.pdf, 'rb').read()) and base64.encode(open(output_file, 'wb'))", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('') to change the current working directory to the root directory", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "Finally, to change the root directory of the current process, we can use the os.chroot() function", "os.chdir('.\\\\chapter3')"], ["1299855-22", "The function should return -1 if it does not want to download any more data, 0 if it is okay to continue, and a positive integer if it wants to abort the download", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", ":", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "re.search('[a-zA-Z][\\\\w-]*$', '!A_B').group()", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "The provided code documentation is not directly relevant to this query", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "The answer code is fig.clf()", "plt.cla()"], ["13156395-50", "The answer code is codecs.open('sample.json', 'r', 'utf-8-sig')", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "json.loads('{\"utf-8\": \"\\uFEFF\"}', encoding='utf-8')", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "code.interact(banner='Properly Quit Program', exitmsg='Exiting with status: 0', exit=SystemExit(0))", "sys.exit(0)"], ["8751653-82", ":", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "struct.unpack('<f', '-0b1110')[0]", "float(int('-0b1110', 0))"], ["8751653-54", "struct.unpack(\"f\", b8)", "struct.unpack('d', b8)[0]"], ["4789021-9", "user.is_authenticated", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "the code snippet if user.is_authenticated():", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "the code snippet vals[in1d((0,1), vals).argwhere() & any(vals[:,0]==0)", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(path)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "The code to achieve this is:", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "list(zip(itemgetter([0], [1]), itemgetter([0], [1]), itemgetter([0], [1])))", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "Then, we can use itertools.chain.from_iterable(data, elms=itemgetter('a')) to get a list of tuples with the 'a' value", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "a list of lists containing the values in the column 'a'", "df['a'].values.tolist()"], ["23748995-42", "The code is list(df.a.isin(df.a.values)) or list(df['a'].isin(df['a'].values)) depending on the data frame", "df['a'].tolist()"], ["20205455-79", "the code snippet", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "This will return a numpy array with all the values from a excluding index 3", "a[np.arange(len(a)) != 3]"], ["8217613-41", "check_output(\"echo 'foo'\").strip()", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df.groupby('Date').unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir('/the/dir/'+filename)", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "a code snippet that creates a dictionary from the tuples, such as: myDict = dict(zip(myListOfTuples))", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "The final answer is a sorted list of dictionaries in reverse order by 'date'", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "The index=True parameter will retain the indices", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "obtained by using the set() method on the difference of the two lists", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "If the files are not equal, the answer code is False", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list, float) and max(list, float)", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "The code is str.format(lst, 8)", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "float_to_str([1.2, 3.4, 5.6, 7.8, 10.0])", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0, 1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "reshape(a, (1, 1, 2))", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find(\"a\") + soup.find(\"div\")", "soup.find_all(['a', 'div'])"], ["931092-70", "We can pass ' ' (a space) as the separator, and the answer will be 'world hello'", "'hello world'[::(-1)]"], ["931092-64", "s = itertools.chain.from_iterable(s)", "s[::(-1)]"], ["931092-5", "This will return the reversed string 'oof'", "''.join(reversed('foo'))"], ["931092-74", "string[::-1]", "''.join(reversed(string))"], ["931092-65", "\"fo\"", "'foo'[::(-1)]"], ["931092-99", "a_string = a_string[::-1]", "a_string[::(-1)]"], ["931092-20", "the code block a_string = a_string[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "the string s with its characters in reverse order", "''.join(reversed(s))"], ["163542-7", "The code to achieve this is: import readline; readline.set_stdin(\"b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'\")", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "splitlines(shlex.split('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n', False))", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "This will normalize the dataframe by row", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "We can use the str.join() function to convert a to a string, or the bytearray.join() function if a is a bytearray", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "The code can be written as result = os.read(sys.stdin)", "result = sys.stdin.read()"], ["40055835-26", "We can also use numpy.in1d() to check whether each element of A is also present in B", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "If the index of a row is in either start_remove or end_remove, then that row will be dropped", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop([start_remove, end_remove])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "a list of indices of True values in the boolean array", "numpy.where(mask)"], ["32533944-71", "pandas.DataFrame.to_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "pd.DataFrame.from_dict(d.values()).applymap(lambda x: x.tolist()).index.tolist()", "pd.DataFrame(d)"], ["1883604-86", "open('file.gz', 'r').read()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "The answer code is headers = Headers().get('http://www.python.org', type=str)", "driver.get('http://www.google.com.br')"], ["3437059-20", "re.search(\"blah\", somestring)", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "re.search(r\"substring\", s)", "string.find('substring')"], ["3437059-83", "s.contains(\"is\")", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", ":", "globals()['myfunction']()"], ["3061761-63", "Finally, you can use the len method of ndarray to get the length of a", "a.shape"], ["3061761-55", "a.shape", "N.shape(a)"], ["3061761-89", "The answer code is a.shape and a.reshape((3,4))", "N.shape(a)"], ["3061761-31", "a.shape()", "a.shape"], ["13291539-54", "the float 0.00582811585976", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", ":", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "The answer code is:", "words = open('myfile').read().split()"], ["7717380-65", "numpy.asarray(a)", "a = np.array(a)"], ["9304908-37", "To create a django query for a list of values 1, 4, 7, we can use the following code: \n\n\nqs = DjangoQuerySet([1, 4, 7])\nqs.filter(pk=1)", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "True or False", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "True if the strings are equal, and False if they are not", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "if string1.lower() == string2.lower():", "(string1.lower() == string2.lower())"], ["319426-70", "The answer code is if (s1.lower() == s2.swapcase()):", "(first.lower() == second.lower())"], ["319426-18", "The answer code is first.lower() == second.lower()", "(first.upper() == second.upper())"], ["15455388-38", "pandas.DataFrame.from_dict(d).apply(lambda x: x.apply(lambda y: y.apply(lambda z: z.apply(lambda w: w.value, axis=1)), axis=1))", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df.groupby(['col5', 'col2']).count()", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "If the attribute does not exist, None will be returned", "getattr(your_obj, x)"], ["3743222-35", "datetime.strptime(date_object, \"%Y-%m-%d\").date()", "datetime.datetime.now().date()"], ["3743222-73", "datetime.strptime(string, '%Y-%m-%d')", "datetime.datetime.now().date()"], ["12496531-86", "A.argsort()", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "s.decode('utf-8').lower()", "s.decode('utf-8').lower()"], ["2631935-11", "Finally, we can use the venv.create method to create an EnvBuilder with the given keyword arguments and call its create() method with the env_dir argument", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "globals()['something'] = 'bob'", "globals()['something'] = 'bob'"], ["14766194-35", "The answer code is if np.any(a == [1, 2]):", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "np.array([[1,2,3], [4,5,6], [7,8,9]])", "np.zeros((3, 3)).ravel()"], ["15579649-73", "Finally, we can use the loads() method from the Python standard library to deserialize the dict result into a numpy structured array", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "This will cause the program to exit", "sys.exit(0)"], ["36139-44", "mylist.sort()", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "This will sort the list by the first item in each element", "mylist.sort(key=str.lower)"], ["36139-23", "sorted(mylist, key=itemgetter)", "mylist.sort()"], ["36139-32", "sorted(list, key=itemgetter())", "list.sort()"], ["5280178-72", "a code block that implements this rationale", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "True", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "struct.unpack('<H', pS)[0] + struct.unpack('<H', pS)[1]", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.islower() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "The code is df.astype('int64')", "df.to_sparse(0)"], ["1514553-90", "variable = numpy.repeat(list, repeat_count)", "variable = []"], ["1514553-71", "the code snippet arr = np.array([i for i in range(10)])", "intarray = array('i')"], ["610883-92", "If it does not, the answer is False", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "The argument is an object, so the result will be True if the object is a member descriptor, and False if not", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "If the attribute does not exist, default will be returned if it is provided, or an AttributeError will be raised if default is not provided", "getattr(a, 'property', 'default value')"], ["13902805-83", "The code snippet is list(set('aaabcabccd')) and the answer is list('abcdefg')", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "The code would look something like this: \n\nset = set(string.lower())\nlist(unique(set))", "list(set('aaabcabccd'))"], ["13902805-87", "torch.unique(string)", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "27", "str.find('s', 16)"], ["674764-33", "The answer code is x.rfind('Aloha')", "x.find('Aloha')"], ["674764-19", "s.rindex('cc')", "'sdfasdf'.index('cc')"], ["674764-45", "4", "'sdfasdf'.index('df')"], ["674764-64", "the code block:", "str.find('a')"], ["674764-91", "the code block above", "str.find('g')"], ["674764-3", "11", "str.find('s', 11)"], ["674764-47", "(15, 20)", "str.find('s', 15)"], ["674764-5", "(11, 14)", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda t: t[2])", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted(u.items(), key=operator.itemgetter(1))", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "sorted(d.items(), key=lambda x: x[1])", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "sorted(d.items(), key=itemgetter(1))", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "The answer code is subprocess.check_call([\"kill\", \"-signal\", \"status\", \"0\"])", "sys.exit(0)"], ["179369-62", "os.abort(\"aa! errors!\")", "sys.exit('aa! errors!')"], ["179369-47", "This will generate a SIGABRT signal to the current process, which will cause the process to terminate with a core dump on Unix and return an exit code of 3 on Windows", "sys.exit()"], ["19779790-35", "time.strftime(\"%d %B %Y\", time.localtime(-1))", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "The answer code is df = nvalues.apply(lambda x: pd.DataFrame(x))", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "-1 as there is no such href value that has 'follow?page' inside it", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "(old_set.average() + new_set.average()) / 2", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "Then, we can use the bin() function to convert the integer to binary, which is '1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "The answer code snippet is set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "The answer code is frozenset(LoD.keys()).intersection(set())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD.keys())", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(bin(x))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "The answer code is df.groupby(['Month', 'Fruit']).get_group('') or df.groupby(('Month', 'Fruit')).aggregate('') depending on the desired output", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "urllib.request.URLopener().open('https://www.mysite.com/', username='username', password='pwd').read()", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "os.listdir('/path/to/file') or os.scandir('/path/to/file')", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "If it is omitted or None, whitespace is removed", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict.items())", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json_data", "json_data = json.loads(json_string)"], ["2759067-52", "The code snippet is shutil.copyfile(src, dst)", "os.rename(src, dst)"], ["16389188-53", "This will enable lighting in the OpenGL context", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "the value for the var_name parameter", "self.request.get('var_name')"], ["3296499-25", "thedict.items().map(lambda x: x[0].lower())", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "Finally, we can use the combine_first method to update null elements with the value from df1", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "os.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = context.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "124 bytes", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'%20string_of_characters_like_these%3A%24%25%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%26%3D%3F%25%5E%2", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "random.Random().randint(0, 1)", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "os.path.split(path)[1]", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "The x.__index__() method can be used to convert the key 'c' to an integer, and then the enumerate() method can be used to get the index of the key 'c' in the dictionary", "list(x.keys()).index('c')"], ["10484261-51", "The answer code is list(programs.items()), which returns a list of the values that have a case insensitive match to 'new york'", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "the code snippet s.encode('utf-8').replace('%', '%%').replace('_', '+').replace('-', '^').replace('$', '*').replace('{', '*').replace('}', '*').replace('[', '*').replace(']', '*').replace('(', '*').replace(')', '*').replace('/', '*').replace(':', '*').replace(';', '*').replace('?', '*').replace('>', '*').replace('<', '*').replace('^', '*').replace('*', '*')", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "urllib.parse.unquote(encoded_string)", "urllib.parse.quote_plus('a b')"], ["32751229-20", "df.groupby(['Country', 'Item_code']).sum()", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "sum(j[i] for i in range(len(j)) if j[i] > 5)", "sum(((i > 5) for i in j))"], ["10543303-81", "len(j) - itertools.count(5, start=5)", "len([1 for i in j if (i > 5)])"], ["10543303-37", "the code block below", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "True", "np.any(np.in1d(a1, a2))"], ["9775731-24", "torch.clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "the code block above", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "itertools.product(range(2), repeat=n)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "itertools.product('0b101', '0b110', '0b111')", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", ": [000, 001, 010, 011, 100, 101, 110, 111, 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111]", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "time.strftime(\"%d %H:%M:%S\", time.gmtime(time.strftime(\"%d %H:%M:%S\", time.gmtime(time.now())) + (1, 3, 0)))", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "float(unpack_from(bytearray.fromhex('4081637ef7d0424a'), 0))", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "Finally, we can add the colorbar to the axes object using the colorbar class", "plt.colorbar(im, ax=ax)"], ["28134319-7", "The str.strip() function is not necessary for this task", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data[data['one'].isin(data['one'].values) & data['two'].isin(data['two'].values)]", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "data[\"a\"][data[\"c\"]].isin([\"a\", \"c\"])", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "The code to achieve this is logging.Filter(lambda record: record.level == 0).filter(Users.userprofile)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "a list of lists, with each list containing the elements from test which have the same characters up to the first _", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", ":", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "The code would look like this: if 'title' in request.POST: \n    template = loader.get_template('template_name.html')\n    context = { 'title': request.POST.get('title') }\n    rendered_template = template.render(context)\nelse:\n    rendered_template = ''", "request.POST.get('title', '')"], ["20222485-17", "list(reduce(lambda x, y: x+y, range(0, 10)))", "list(accumulate(list(range(10))))"], ["16436133-47", "json.loads(json.dumps(mydata))", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "test_string.rfind('(', 1)", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "We can then use the str[start:end] syntax to get the characters in the substring", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "a list of the words in the string, split by the delimiter", "s.rfind('&')"], ["8247792-90", "str.split('&', 1) will split the string into two parts, with the delimiter '&' being the delimiter between the two parts", "s[:s.rfind('&')]"], ["35178812-30", "ex.value_counts().unique()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "arr = np.hstack(list_of_lists)", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "the code block that implements this rationale", "t = tuple(x[0] for x in s)"], ["11205386-94", "the string Chicago", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot_table(index=['upc'], columns=['saleid']).reset_index()", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "Finally, we can use the csv.csvwriter.writerow function to write the row parameter to the writer\u2019s file object, formatted according to the current dialect", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a = np.nan_to_num(a, True, True, False)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "This will return a 3x1 array with the minimum values of the corresponding columns in the 3x1 arrays", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "Therefore, the answer is datetime.strftime(\"%A\")", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "For example, df[df['A'] == 'foo'] or df.isin(['foo']).", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[~df.column_name.isin([some_value])]", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df['column_name'].isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df[column_name] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df[\"B\"].isin([\"one\", \"three\"])]", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "ModuleFinder.modules.keys()", "help('modules')"], ["12362542-44", "s.set_reuse_addr()", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "the module some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "The answer code is print(x.argwhere())", "numpy.where((x == 0))[0]"], ["2428092-52", "The answer code is response_data = json.dumps(response_data) and response = HTTPResponse(content_type='application/json', status=200, content=response_data)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "the hex string hexstr", "s.decode('hex')"], ["10824319-49", "binascii.unhexlify(bytearray.fromhex(s))", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", ": str(adict.items())", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "The answer code is str.join(adict.items())", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "The code documentation provides information on how to convert a matlab engine array x to a numpy ndarray, which can be done using the ravel() or asarray() methods", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "binascii.hexlify(walls)", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "binascii.hexlify(sum(walls))", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "The os.path.dirname() function can be used to get the directory name of a given path", "os.chdir(path)"], ["1949318-13", "the encoded URL string", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "Finally, we can use the urllib.parse.SplitResult.geturl method to re-combine the URL and get the re-combined version of the original URL as a string", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", ":", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "The code is: robot_parser = robotparser.RobotFileParser()  \nurl = \"http://www.stackoverflow.com\"\nresponse = robot_parser.read(url)\nif response.status == \"200\":\n    print(\"The website is up\")\nelse:\n    print(\"The website is down\")", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "This will cast the \"gdp\" column to a float type and then rename it to \"log(gdp)\" in the dataframe", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "connection.rollback()", "dbb.commit()"], ["5352546-44", "dict.items() or dict.keys() with the appropriate filter condition", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict.items(key_list=('l', 'm', 'n'))", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict.items().filter(lambda x: x[0] in ('l', 'm', 'n')).values()", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", ": list(bigdict.items())", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "The output is a Python dictionary", "json.load(u)"], ["4940032-13", "str.find('blabla', 'example.txt')", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "if 'blabla' in open('example.txt').read():\n    print('Found')\nelse:\n    print('Not Found')", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "The code is re.findall('blabla', 'example.txt')", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "urllib.urlopen(url)", "r = requests.get(url)"], ["4476373-22", "urllib.request.urlopen(url, data=urllib.parse.urlencode(payload))", "r = requests.get(url, params=payload)"], ["4476373-71", "Finally, the ossaudiodev library can be used to tell the driver that there is likely to be a pause in the output, making it possible for the device to handle the pause more intelligently", "r = requests.post(url, data=payload)"], ["4476373-99", "the code block that implements this rationale", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "This will return the binary string 0b10111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(173)"], ["1476-88", "53", "int('01010101111', 2)"], ["1476-71", "int('0b10101', 2)", "int('010101', 2)"], ["1476-39", "bin(0b0010101010)", "int('0b0010101010', 2)"], ["1476-6", "bin(21)", "bin(21)"], ["1476-59", "65", "int('11111111', 2)"], ["41178532-76", "For example,", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "list(itertools.product(a, a))", "list(itertools.product(*a))"], ["364519-94", "list(d.items())", "it = iter(sorted(d.items()))"], ["364519-100", ":", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "a new OrderedDict(sorted(dict.items()))", "return sorted(dict.items())"], ["364519-33", "The answer code is: dict.items().__iter__().__getitem__(OrderedDict)", "return iter(sorted(dict.items()))"], ["364519-52", "We can also use the OrderedDict class from the collections library, or the itemgetter function from the operator library", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "sorted(foo.items())", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "The output should be the string s with all uppercase letters converted to lowercase", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "tf.cast(tensor, tf.int32)", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "Finally, we can create a pandas dataframe object with the columns ['A', 'B', 'A1R', 'B2', 'AABB4']", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "frozenset(d1.items()).intersection(d2.items())", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "pandas.dataframe.apply()", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "the code snippet:", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "random.randint(1, 7, 0.1)", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "The code would be result = df.pivot_table(index=['year', 'month', 'item'], columns='item')", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "The code is df.pivot_table(index=['year', 'month'], columns=['col1', 'col2']).reset_index()", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "The code is: p1 = subprocess.Popen([\"p1\"], stdout=subprocess.PIPE) output = p1.communicate() print(output)", "p1.communicate()[0]"], ["748028-100", "Finally, we can use the Popen.communicate function to interact with the process, sending data to stdin and reading from stdout and stderr", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "list(element.findall('a')) or element.iterfind('a')", "[elem.tag for elem in a.iter()]"], ["10408927-56", "a.iterfind('sub')", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "num_list = [3, 4, 5, 6]", "min([x for x in num_list if x > 2])"], ["2793324-81", "Finally, we can use the operator __delitem__ to remove the item, a.remove(\"b\")", "a.remove('b')"], ["2793324-12", "a.remove(c)", "a.remove(c)"], ["2793324-93", "The element can also be deleted using the __delitem__ method of the list, or the pop method of a frozenset", "a.remove(6)"], ["2793324-3", "del a[6]", "a.remove(6)"], ["2793324-97", "the code snippet: a.remove('c')", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.delitem(c) or a.__delitem__(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "The answer code is subprocess.check_call([\"test.sh\", \"otherfunc\"])", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "The bash script is a separate process and the python script cannot access the bash functions", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', header=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "re.findall('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353')", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=(datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)))", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "The code to achieve this is Sample.objects.filter(year='2011') which will filter the Sample model for objects with the year 2011", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "open('picture.jpg', 'rb').read()", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "to use the urllib.request.open() function to open the image 'picture.jpg'", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", ":", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.sort_values().align(index.argsort(), axis=1)", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1.drop_duplicates().count()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "the code block above", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "We can use the HttpResponseRedirect class to redirect the user to the view Home.views.index", "redirect('Home.views.index')"], ["42352887-25", ": sorted_keys = itemgetter('weight', 'things').get(things)", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "os.path.dirname(inspect.getmodulename('a_module'))", "print(a_module.__file__)"], ["247770-2", "os.path.dirname(__file__)", "print(os.getcwd())"], ["247770-13", "os.path.abspath('amodule')", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "the code block that implements this rationale", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "time.strftime(\"%H:%M:%S\")", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "urllib.parse.unquote(encoded_string)", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "This will run the command ps -ef | grep something | wc -l in the background and return the output of the command", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1.frozenset().intersection(s2.frozenset())", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "datetime.strptime('when', '%d %B %Y').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "the code block that implements this rationale", "Entry.objects.filter()[:1].get()"], ["29784889-2", "warnings.catch_warnings(record=True)", "warnings.simplefilter('always')"], ["22676-23", "The answer code is urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "The urllib.request.open_unknown function will be called if the URL scheme is not recognized", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "reporthook is ignored for local URLs", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "The proxy argument can be used to set the proxy to be used for the download", "r = requests.get(url)"], ["22676-64", "This will download the file example.com/file.zip to the local file file.zip with a size of 10MB", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "the product of P and T", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "float('470FC614')", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "the reversed list containing 10, 9, 8, 7, 6, 5, 4, 3, 2, 1", "list(reversed(list(range(10))))"], ["20573459-83", "date.fromordinal(7).toordinal()", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "The code can be written as: mylist = [1, 1, 2, 3, 4, 4, 5, 6, 7], and the output should be Counter({1: 2, 2: 1, 3: 1, 4: 2, 5: 1, 6: 1, 7: 1})", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "pd.read_csv('np.txt')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "The code to achieve this is: midi_data = [0x90, 0x44, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.rsplit('-', 1)", "print(x.rpartition('-')[0])"], ["15851568-9", "(-1, -1)", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "list(random.randint(a, b+1))", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "\"%f\" with strftime()", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "The code is print(tab.ljust(10, '|'))", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "a series or dataframe containing the number of non-zero values in each column", "df.astype(bool).sum(axis=1)"], ["30693804-5", "str.translate('abcdefg', {'a': 'z', 'b': 'y', 'c': 'x'}) returns 'xyz'", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "str.translate('abcdefghijklmnopqrstuvwxyz', string.punctuation, string.lower)", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag', 'name')", "print(soup.find('name').string)"], ["2011048-15", "The len(file_object.readlines()) will give us the number of lines in the file", "os.stat(filepath).st_size"], ["2600191-99", "the count of the item \"a\" in the list l", "l.count('a')"], ["2600191-23", "l.count(item)", "Counter(l)"], ["2600191-53", "The output will be a dictionary with \"hello\" as the key and its count as the value", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "Counter(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "The answer code is count = Counter(l, 'b')", "l.count('b')"], ["12842997-15", "This will copy the contents of srcfile to dstdir and return the path of the copied file", "shutil.copy(srcfile, dstdir)"], ["38152389-84", ": df['c'] = df.combine_first([df['b'], df['a']], axis=1).join(df).fillna(method='ffill')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", ":", "tuple(l)"], ["16296643-20", "itemgetter(level1)", "level1 = map(list, level1)"], ["3880399-74", "The file logFile should be specified as an argument to the log() function", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "df.BoolCol.isin([True, True, False])", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.isin(True)", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", ":", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "a boolean array of the same shape as df.BoolCol with True where the value in df.BoolCol is True and False otherwise", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(\"owd\")", "os.chdir(owd)"], ["32063985-36", "None", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "For example, we can use the following code to join each element in array a with element at the same index in array b as a tuple: \n\nzip(a, b, itemgetter(0, 1))", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "zip(a, b).zip_longest()", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "12", "'abcd}def}'.rfind('}')"], ["20546419-7", "r.shuffle()", "np.random.shuffle(np.transpose(r))"], ["574236-63", "This function will return a list of all the files in the given directory, and the number of files can be determined by counting the number of elements in the list", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", ":", "cursor.fetchone()[0]"], ["4454298-91", "We can use the os.write function to write the line '#test firstline' to the file 'infile', and then use the io.RawIOBase.write function to write the contents of the file to the file 'outfile'", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "the code block above", "list(set(t))"], ["7961363-86", "the set object", "list(set(source_list))"], ["7961363-7", "set(abracadabra)", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(itertools.chain.from_iterable(a))", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a.tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "The answer code is soup.find('td', text='Address:').findtext()", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "The string can then be decoded using the default encoding of the Python interpreter, which is usually 'utf-8'", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data.decode('utf-8', 'strict').encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.getattr('my_str')", "getattr(my_object, my_str)"], ["34945274-35", "a new array A with those elements replaced", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "The return value is the mean of the elements along the specified axis", "np.mean(a, axis=1)"], ["15907200-35", "csvwriter.writerow(dict(header))", "writer.writeheader()"], ["23359886-48", "a[a[:, 0] == 0 & a[:, 1] == 1]", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "this code snippet", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "matplotlib.image.ANTIALIAS(image, width, height)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "itemgetter(l1, l2)(l1.items(), l2.items())", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "the code block that implements this rationale", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "list5 = sorted(list5, key=itemgetter('degrees'))", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "We can also use the argsort() function from the Torch library to sort a tensor along a given dimension in ascending order by value", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "The provided code documentation is relevant and provides information about the json.dumps() and json.JSONEncoder classes", "json.dumps(Decimal('3.9'))"], ["29836836-87", "This will keep only the rows where the values in column A are not contained in the list of values in column A", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "The answer code is:\n\nimport matplotlib.pyplot as plt\n\nfrom skimage.io import show\n\nfrom matplotlib.colorbar_api import Colorbar\n\nfrom matplotlib.figure_api import Figure\n\nplt.figure(figsize=(10, 8))\n\nax = plt.subplot(111)\n\nimg = ax.imshow(mappable)\n\ncbar = Colorbar(ax=ax, orientation='vertical')\n\nshow()\n\nplt.savefig('colorbar.png')", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "a series containing the 100 most frequent words in the 'text' column of the dataframe df", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "utcnow()", "datetime.now(pytz.utc)"], ["9262278-9", "The code snippet to achieve this is:\n\n\nfrom django.http import JsonResponse\n\ndef view_function(request):\n    data = {'key1': 'value1', 'key2': 'value2'}\n    return JsonResponse(data)", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "The child process will use the os.fork() method to create a new process and the subprocess.Popen() method to execute the program with the given arguments", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "2 and 4 respectively", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(labels_rotated_by_45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict.values())", "len(list(yourdict.keys()))"], ["2212433-64", "The code is count = Counter(yourdictfile.items()) and the answer is count.keys()", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "The answer code is df = pd.concat([df.iloc[:, :-1], df.iloc[:, 1:]], axis=1).reorder_levels([0, 1, 2]).take([1, 3])", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "subprocess.check_call(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heappush(q.priority(x))", "q.put((-n, n))"], ["21887754-31", "a = np.array([[1,2,3], [4,5,6]]) \nb = np.array([[7,8,9]]) \nc = np.concatenate((a, b), axis=0) \nprint(c) \n# Output: array([[1, 2, 3, 7, 4, 5, 6, 8, 9])", "print(concatenate((a, b), axis=0))"], ["21887754-88", "This will join the arrays a and b along the second axis, and the answer is a new array with the elements of a followed by the elements of b along the second axis", "print(concatenate((a, b), axis=1))"], ["21887754-21", "a.concatenate(b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "arr", "np.array((a, b))"], ["4356842-88", "response = HttpResponse(status=401)", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "df.get_loc('bob')", "df.index.get_loc('bob')"], ["18730044-52", "This can be done using the following code: matrix = zip_longest([1, 2, 3], [4, 5, 6], fillvalue=-9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "the code snippet", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "'it is icy'", "re.sub('i', '', 'it is icy')"], ["22187233-75", "str.translate('it is icy', {'i': None})", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "str(s).replace(\"character\", \"\")", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", ":", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "This will convert the list of strings into a list of integers", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "import os\nimport os.path\nimport shutil\n\n# Get the directory path\nmydir = \"/mydir\"\n\n# Get the list of files in the directory\nfiles = os.listdir(mydir)\n\n# Get the list of files with the extension '.txt'\ntxt_files = [f for f in files if f.endswith('.txt')]\n\n# Remove any files that don't exist\nshutil.rmtree(mydir + '/*', ignore_errors=True)\n\n# Move the files to a new directory\nfor file in txt_files:\n    os.rename(mydir + file, mydir + '\\\\' + file)", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "The answer code is for file in my_list: if file.endswith('.txt'): print(file)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "Finally, we can use the os.walk() method to generate the file names in a directory tree", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "dict(json.JSONDecoder().decode(request.body))", "json.loads(request.body)"], ["36402748-46", "We can then use the sort_index() or sort_values() methods from the pandas module to sort the Dataframe by the desired column", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import urllib; data = urllib.parse.urlencode({'key1': ['value1', 'value2']}); headers = {'Content-Type': 'application/json'}; response = urllib.request.urlopen(url, data, headers)", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "the filtered records", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted(list, key=itemgetter('points', 'time'))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "bin(number)", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "This will read the csv file and create a dataframe with tab-separated values", "df.to_csv(filename, index=False)"], ["8740353-74", "the json data string", "json_data = json.loads(unescaped)"], ["18367007-15", "newFile.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "key", "list(dict.keys())[-1]"], ["10668585-75", "The answer code would be max_num = InlineModelAdmin.get_max_num(AuthorizedEmail) and max_length = AuthorizedEmail.added.max_length", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "The answer code is datetime.datetime.now().strftime(\"%d %m %Y %H:%M:%S\")", "datetime.datetime.now()"], ["17794266-82", "The return value is an array of indices, which can be used to get the maximum values in the matrix", "max(x.min(), x.max(), key=abs)"]], "(2, False, True)": [["11840111-96", "This will divide the values of d1 by the values of d2", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d3 = {k: v for k, v in dict(d1).popitem() for k, v in dict(d2).items() if k}", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "the downloaded file \"file.gz\"", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", ":\n\nimport requests\nimport gzip\n\nurl = \"http://randomsite.com/file.gz\"\nresponse = requests.get(url)\ndata = response.content\nwith open(\"file.gz\", \"wb\") as f:\n    f.write(gzip.GzipFile(fileobj=data).read())", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "To filter a Django model MyModel to have a charfield length of max 255, we can use the Model.objects.filter(charfield__max_length=255) query", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "The answer code is ~(a^b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "date_one_month_from_today = date.today() + timedelta(days=30)", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "the code block: date = datetime.date.today() + datetime.timedelta(days=2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "\"import test1\"", "subprocess.call('test1.py', shell=True)"], ["843277-70", "if hasattr(obj, 'attr_name'):", "hasattr(obj, 'attr_name')"], ["2231663-53", "The answer code is list1 = [1, 2], list2 = [3, 4], list3 = [5, 6], list4 = [7]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "my_list[:]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "re.findall(r'(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "True", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "webbrowser.open('http://example.com')", "webbrowser.open('http://example.com')"], ["4906977-61", ":\n\nos.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-33", "os.environ[\"HOME\"]", "os.environ['HOME']"], ["4906977-98", "The answer code is for key, value in os.environ.items(): print(key, value)", "print(os.environ)"], ["4906977-9", "a dictionary containing all the environment variables", "os.environ"], ["4906977-77", "os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "the code block:\n\n\ndictionary = {\n    'a': 10,\n    'b': 5,\n    'c': 15,\n    'd': 20\n}\n\nsorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1])", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "dict_list = [x for x in dict.items() if type(x[1]) is list].sort(key=lambda x: x[1]).iteritems()", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df[\"stats\"].str.split(',').rename(columns={0: 'col1', 1: 'col2'})", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "The answer code is line.replace(\"!@#$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace('!@#$', '')", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.replace(\"1\", \"\")", "string.replace('1', '')"], ["3939361-89", "line.replace('!@#$', '')", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t - 1 hour - 10 minutes", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "The answer code is import datetime; dt = datetime.time(12, 0, 0); print(datetime.timedelta(hours=-5).subtract(dt))", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "random.randint(100000000, 999999999)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "random.randint(0, 9999999999999999) % 1000000000000001", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "The answer code is soup = BeautifulSoup(urllib.request.urlopen('http://www.google.com/'), 'html.parser')", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.tk.wm.see(root)", "root.lift()"], ["1823058-26", "print(str.format(value, ',', '000'))", "'{:,}'.format(value)"], ["14406214-5", "ax.set_xticklabels(xlabel)", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_xaxis_top()", "ax.xaxis.tick_top()"], ["10565598-66", "all(a in b for a in a)", "numpy.in1d(b, a).all()"], ["13557937-8", "Therefore, the answer is bin(8)", "list('{0:0b}'.format(8))"], ["13557937-9", "8 in binary isint(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "The code to do this is print(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "the reversed list L", "L[::(-1)]"], ["3940128-21", "reversed(L)", "L.reverse()"], ["89228-90", "subprocess.check_output('ls -l')", "from subprocess import call"], ["89228-91", "subprocess.run(\"some_command\", args)", "os.system('some_command with args')"], ["89228-25", "The answer code is:\n\nimport subprocess\n\nproc = subprocess.Popen([\"some_command\", \"<\", input_file], stdout=subprocess.PIPE)\nproc.communicate()\n\nproc = subprocess.Popen([\"another_command\"], stdin=proc.stdout, stdout=subprocess.PIPE)\nproc.communicate()\n\nwith open(output_file, \"w\") as f:\n    f.write(proc.stdout.read())", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "the code snippet subprocess.run([\"some_command\", \"arg1\", \"arg2\"], check=True)", "stream = os.popen('some_command with args')"], ["89228-97", "the command echo \"Hello World\"", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "subprocess.check_output(\"ls -l\").strip()", "call(['ls', '-l'])"], ["5137497-23", "os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "The function takes a path as an argument and returns the directory name", "os.path.dirname(path)"], ["5137497-66", "os.path.abspath('path')", "os.path.realpath(path)"], ["5137497-91", "the string representation of the current working directory", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "For example, os.path.dirname(__file__) will return the full path of the file where this code is located", "full_path = os.path.realpath(__file__)"], ["14961562-66", "list(map(int, s.split(' ')))", "struct.unpack('11B', s)"], ["19738169-65", "The answer code is df['DateStr'] = df['DateObj'].apply(to_string)", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "The answer code is list(itertools.permutations([1, 2, 3], [4, 5, 6]))", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "list(itertools.permutations([1, 2, 3]))", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, index=False, sep='\\t', engine='python', skip_header=True)", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "This will close the root window of the Tkinter application", "root.destroy()"], ["2225564-15", "files = [f for f in os.listdir('.') if re.match('^[0-9]+\\.[jpg]$', f)]", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "a pivot table with 'order' as the index and 'sample' values as the columns", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle\nwith open('afile', 'rb') as f:\n    data = pickle.load(f)\n\nUnpickling:\ndata = pickle.load(f)\n\nPickling:\ndata = pickle.dumps(data)\nsave_data = pickle.dumps(data)\n\nAnswer: import pickle\nwith open('afile', 'wb') as f:\n    pickle.dump(data, f)\n\nUnpickling:\ndata = pickle.load(f)", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "the code snippet:\n\n\nphrase = \"Hello?World!\"\n\nfirst, second = phrase.split(\"?\")\nfirst, second = first[:-1], second[:-1]\nprint(first, second)\n\n\nOutput:\n('Hello', 'World')", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "The code to write a unicode csv in Python 2.7 is import csv\nwriter = csv.writer(open('output.csv', 'wb'), encoding='utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data.diff(axis=1, fill_value=-1).astype(int)", "data.set_index('Date').diff()"], ["28901311-21", "[index for x in B if x in A]", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "The answer code is Task.objects.all().where(time_spent > 3)", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", ":\ndatetime.datetime.now()", "datetime.datetime.now()"], ["415511-29", "time.time()", "datetime.datetime.now().time()"], ["415511-26", "str(time.time())", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "the code snippet str(time.strftime(\"%c\"))", "str(datetime.now())"], ["415511-33", "the code block: import time; print(time.time())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "array([[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "arr", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "The answer code is next((df.head(1), df.tail(1)))", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "datetime.strptime('24052010', '%d%m%Y')", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "df.isnull().mean()", "np.flatnonzero(x).mean()"], ["5508352-50", "The index of a is 1 and 3", "a[tuple(b)]"], ["2233917-10", "input('Please enter a tuple (n, m): ').split(', ')", "tuple(map(int, input().split(',')))"], ["2233917-8", "input('Please enter a tuple of integers: ')", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.xaxis.set_tick_rotation(45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "result['groupby(STNAME, COUNTY_POP)'].transform('sum')", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "pivot_table(df, index=['Close'], values=['index.time']).reset_index().rename(columns={'index': 'Date'}).reset_index()", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = list(map(int, stdin))", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "The answer code is reversed(yourdata)", "sorted(yourdata, reverse=True)"], ["13237941-56", "the code block that implements this rationale", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "sorted(yourdata, key=lambda x: (x['key'], -x['subkey']))", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "G.draw_labels(pos)", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "'/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "'../'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", ":\n\nnumber = getattr(myobject, 'id.number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X.T.dot(X)", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "list(itertools.permutations(range(2), 4))", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", ":\n\nre.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham').group()", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "random_nums = [14, 26, 28, 39, 43, 47, 50]", "random.sample(range(1, 50), 6)"], ["13628725-59", "random.sample(range(1,50), 6)", "random.sample(range(1, 50), 6)"], ["15940280-74", "The output of this code is a datetime object which contains the current UTC time", "datetime.utcnow()"], ["12280143-55", "os.chdir('..')", "os.chdir('..')"], ["15457504-91", "k.font = 'Purisa', size=12", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", ":\n\ndf = pandas.DataFrame.from_dict(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if 'one' in d.values():", "'one' in list(d.values())"], ["8214932-94", "True", "'one' in iter(d.values())"], ["7125009-76", "the code snippet:\n\nimport matplotlib.patches as mpatches\n\nplt.legend(bins=[0.1, 0.2, 0.3], loc='upper left',\n           labels=['a', 'b', 'c'],\n           frameon=False,\n           fontsize='x-small')\n\nplt.show()", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.font_size('large')", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "This will replace all whitespace characters with an empty string", "sentence.replace(' ', '')"], ["8270092-68", "sentence.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "re.sub(\"\\s+\", \"\", sentence)", "sentence.strip()"], ["8270092-87", "sentence.replace(\" \", \"\")", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.strip()", "sentence = ''.join(sentence.split())"], ["14591855-94", "The answer code is df = h5py.File('/home/.../data.h5', 'r').get('firstSet')", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "this code snippet", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", ":\n\ntry:\n    response = urlfetch.fetch(url)\nexcept urlfetch_errors as e:\n    print(\"An error occurred while fetching the URL: \" + str(e))", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "The code snippet to achieve this is:\n\nurl = 'http://www.address.com/something#something'\nfragment = '#something'\nurl_parts = urlparse(url)\nnew_url = url_parts.scheme + url_parts.netloc + url_parts.path.split(fragment)\nprint(new_url)", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "The answer code is mydict.items().reverse() which returns a list of tuples with the keys and values in reverse order", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "request.get('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "The answer code is data = request.form['firstname']", "first_name = request.form.get('firstname')"], ["3278850-59", "df = pd.read_csv('file.txt')", "txt = open('file.txt').read()"], ["14043080-28", "datetime.datetime.utcnow().year", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "'Entry.objects.filter(id__isnull=True).'", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "The code for this is soup.find_all('div')", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb(int(rgbstr[0]), int(rgbstr[1]), int(rgbstr[2]))", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "This will reverse the string by two characters at a time", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "sys.exit(0)", "sys.exit()"], ["73663-36", ":\n\"\"\"\nProgram terminated with success.\n\"\"\"", "quit()"], ["73663-66", "sys.exit(Exception('some error message'))", "sys.exit('some error message')"], ["21974169-23", "commit()", "con.commit()"], ["11269575-66", "subprocess.check_output(['espeak', text], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.flush(), subprocess.check_output(['espeak', text], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stderr.flush()", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "int(s)", "int(Decimal(s))"], ["1094717-69", "the converted integer", "int(s.split('.')[0])"], ["31957364-53", "a 3d array with elements calculated by multiplying corresponding elements of A and B", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "The answer code is 'rm -r some.file &'", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = round(df['Alabama_exp'], 2) and df['Credit_exp'] = round(df['Credit_exp'], 3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.pop()", "e = next(iter(s))"], ["5868374-42", "The resulting datetime object is the answer code snippet", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "SGVsbG8gV29ybGQh", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "The answer code is os.chdir('new_directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "os.chdir('path')", "os.chdir('.\\\\chapter3')"], ["1299855-22", "the code block:\n\n<nooutput>", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "True", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B').group()", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "soup.find_all('div', class_='comment-')", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "ax.clear()", "plt.cla()"], ["13156395-50", "open('sample.json', 'r', encoding='utf-8-sig').", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "The code to achieve this is:\n\nimport json\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "The exit() function should be used to properly quit the program", "sys.exit(0)"], ["8751653-82", "The answer code is float(s2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "3.5", "float(int('-0b1110', 0))"], ["8751653-54", "float(b8)", "struct.unpack('d', b8)[0]"], ["4789021-9", "user.has_perm('Member')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "The answer code is if user.groups.filter(name__in=['group1', 'group2']):", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "The answer code is vals[(0,1)], which will return a boolean array of True or False depending on whether the row matches the given condition", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(path_to_script)", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.repartition(n).write.csv('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "The answer code is df.to_csv('mycsv.csv', sep='\\t', engine='python')", "df.write.csv('mycsv.csv')"], ["8092877-26", "zip(range(1, 4), range(5, 7))", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "list(itertools.groupby(data, key=lambda x: x[0]))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "df.a.tolist()", "df['a'].values.tolist()"], ["23748995-42", "df.a.values", "df['a'].tolist()"], ["20205455-79", "The code block that implements this rationale is:\n\nimport BeautifulSoup from 'BeautifulSoup'\n\nresponse_string = ''.join(response)\nsoup = BeautifulSoup(response_string, 'html.parser')\n\n# print(soup)\n\n# Output:\n<html>\n<head>\n<title>Hello World</title>\n</head>\n<body>\n<h1>Hello World</h1>\n</body>\n</html>", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a[:-1]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "subprocess.check_output(\"echo 'foo'\").strip().decode().replace(\"'\", \"\")", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "list(df.groupby('Date').unique())", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir(os.path.dirname(filename) and os.path.dirname(filename) == '/the/dir/').", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "sorted(list_of_dicts, key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "{2, 3}", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "difflib.compare_files(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "min(list)", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(x) for x in lst], where x is a tuple of floats", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = ['0.00000000000000001', '0.00000000000000002', '0.00000000000000003', '0.00000000000000004', '0.00000000000000005', '0.00000000000000006', '0.00000000000000007', '0.00000000000000008', '0.00000000000000009', '0.00000000000000010']", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0][1] and A[1][1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "The answer code is a[:, 0:1], a[0, :], a[1, 0:1], and a[2, :]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find_all('a', class_='tag1', href=True)", "soup.find_all(['a', 'div'])"], ["931092-70", "'dlroW olleh'", "'hello world'[::(-1)]"], ["931092-64", "s = reversed(s)", "s[::(-1)]"], ["931092-5", "the string 'oof' which is the reverse of 'foo'", "''.join(reversed('foo'))"], ["931092-74", "the reversed string", "''.join(reversed(string))"], ["931092-65", "The answer code is reversed(\"foo\")[::-1]", "'foo'[::(-1)]"], ["931092-99", "The answer code is reversed(a_string)", "a_string[::(-1)]"], ["931092-20", "a_string[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "For example, reversed(s)", "''.join(reversed(s))"], ["163542-7", "subprocess.Popen(['grep', 'f', b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'], stdin=PIPE)", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "'subprocess.Popen([\"grep\", \"f\", \"one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n\"], stdin=open(\"one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n\"))'", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "the code snippet", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "the code snippet str(a)", "str(a)"], ["27318022-32", "the variable result", "result = sys.stdin.read()"], ["40055835-26", "A = [1, 3, 5, 6, 7]", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df.index.isin([start_remove, end_remove]))", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(start_remove:end_remove)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "The indices will be a list of integers", "numpy.where(mask)"], ["32533944-71", "df = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = pandas.DataFrame(d)", "pd.DataFrame(d)"], ["1883604-86", "with open('file.gz', 'r') as f: text = f.read()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "True if \"blah\" is in somestring and False if it is not", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "The string \"substring\" is a substring of the string, so the answer is True", "string.find('substring')"], ["3437059-83", "True if the string s contains the word \"is\", otherwise False", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "import mymodule; myfunction()", "globals()['myfunction']()"], ["3061761-63", "a.shape", "a.shape"], ["3061761-55", "a.shape", "N.shape(a)"], ["3061761-89", "the code a.shape", "N.shape(a)"], ["3061761-31", "The code is: \na.shape", "a.shape"], ["13291539-54", "float(0.00582811585976)", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(set(my_list)).", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", ":\n\nwords = [word for line in open('myfile') for word in line.split()]", "words = open('myfile').read().split()"], ["7717380-65", "np.asarray(a)", "a = np.array(a)"], ["9304908-37", "Q(1, 4, 7)", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "casefold(string1) == casefold(string2)", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.casefold() == string2.casefold()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "string1.lower() == string2.lower()", "(string1.lower() == string2.lower())"], ["319426-70", "first.casefold() == second.casefold()", "(first.lower() == second.lower())"], ["319426-18", "For example, first.casefold() == second.casefold()", "(first.upper() == second.upper())"], ["15455388-38", "We can then use the pd.DataFrame constructor to create a dataframe from this list of tuples", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "This will return a dictionary with the keys being the groupby columns ('col5', 'col2') and the values being the count of rows in each group", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "getattr(your_obj, 'x')", "getattr(your_obj, x)"], ["3743222-35", "datetime_object.date()", "datetime.datetime.now().date()"], ["3743222-73", "date", "datetime.datetime.now().date()"], ["12496531-86", "A.sort(axis=1)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "The code is s.lower()", "s.lower()"], ["6797984-49", "s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "session.update(name='Bob Marley', id=123)", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", ":\n\nglobal something = bob", "globals()['something'] = 'bob'"], ["14766194-35", "True", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "arr = np.asarray(ndarray)", "np.zeros((3, 3)).ravel()"], ["15579649-73", "the structured array result", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "the code snippet sys.exit()", "sys.exit(0)"], ["36139-44", "The provided code documentation is relevant and provides information about the sorted() function", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "sorted_list = sorted(mylist)", "mylist.sort()"], ["36139-32", "list.sorted()", "list.sort()"], ["5280178-72", "The answer code will depend on the contents of the file", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "True", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "struct.unpack('<H', pS[0])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.isupper() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype(int).tobsparse()", "df.to_sparse(0)"], ["1514553-90", "variable = [1, 2, 3, 4, 5]", "variable = []"], ["1514553-71", "The provided code documentation is relevant and provides information about the list class and its constructor", "intarray = array('i')"], ["610883-92", "If it does not, the statement will return False", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "if hasattr(a, 'property'):", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property", "getattr(a, 'property', 'default value')"], ["13902805-83", "list(set('abcabccd'))", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "list(string.ascii_lowercase('aaabcabccd'))", "list(set('aaabcabccd'))"], ["13902805-87", "list(string.lower())", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "The provided code documentation is relevant and provides information about the index() method", "str.find('s', 16)"], ["674764-33", "Therefore, re.search('Aloha', x, 0) will return the index of the sub string 'Aloha' in x", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "string.index('df')", "'sdfasdf'.index('df')"], ["674764-64", "The code snippet is index = str.find('a')", "str.find('a')"], ["674764-91", "str.index('g')", "str.find('g')"], ["674764-3", ":\n\nstr.find(\"s\", 11)", "str.find('s', 11)"], ["674764-47", "the index index", "str.find('s', 15)"], ["674764-5", "13", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda t: t[1][2])", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "The answer code is u.sorted(key=lambda x: x[1])", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "Therefore, the answer is d.reverse()", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "For example, d.sort()", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "We can pass the status value 0 as the argument to the exit() function, and it will terminate the script", "sys.exit(0)"], ["179369-62", "The answer code is sys.exit('aa! errors!') which will cause the execution of the script to be aborted with the specified message", "sys.exit('aa! errors!')"], ["179369-47", "sys.exit()", "sys.exit()"], ["19779790-35", "yesterday = datetime.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.to_frame(nvalues)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "'https://example.com/page'", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "new_set.mean() + old_set.mean()", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "The ascii value of 'P' is 77, which is equivalent to 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(ord('P'))"], ["11399384-83", "the code snippet set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set(d.keys() for d in LoD)", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD).keys()", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "list(map(int, binascii.unhexlify(x).replace('0b','').replace('1b','').replace('00','').replace('10','')))", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "The resulting groupby object can then be used to access the data in each group using the groups attribute, which returns a list of tuples containing the group labels and the associated data", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", ":\nimport requests\nurl = 'https://www.mysite.com/'\nusername = 'username'\npassword = 'pwd'\nresponse = requests.get(url, auth=(username, password))", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "for folder in os.listdir(file):\n    if folder[-1] == '/':\n        print(folder)", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "The answer code is str(dictionary).replace(' ', '').replace('\\'', '').replace('\"', '')", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "str(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "os.rename('src', 'dst')", "os.rename(src, dst)"], ["16389188-53", "gobject.window_set_position(window, 0, 0, True)", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "The answer code is 'http://example.com/get?name=var_name'", "self.request.get('var_name')"], ["3296499-25", "thedict.casefold()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df3 = pd.merge(df1, df2, on='revenue', how='inner')", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "The answer code is os.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "{{ request.args.get('a') }}", "{{request.args.get('a')}}"], ["6591931-80", "1142", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'%(string_of_characters_like_these:4)'", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "Decimal(random.randint())", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "The code to do this is:\n\nos.path.split('/path/to/file.ext')[-1]", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "index = x.get('c')", "list(x.keys()).index('c')"], ["10484261-51", "The answer code is list(programs.values('new york'))", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "This will replace any special characters in the string s with the corresponding unicode escape sequence", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "str.encode('utf-8')", "urllib.parse.quote_plus('a b')"], ["32751229-20", "To get the sum of the values of the columns 'Y1961', 'Y1962', 'Y1963' after grouping by 'Country' and 'Item_code' in the dataframe df, we can use the following code: \n\nsum_col = df.groupby(['Country', 'Item_code'])['Y1961', 'Y1962', 'Y1963'].transform('sum')", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "len(j) - 1, since the list j contains 6 elements, and the value 5 is the first element that is greater than 5", "sum(((i > 5) for i in j))"], ["10543303-81", "len(j) - 5", "len([1 for i in j if (i > 5)])"], ["10543303-37", "len(j) - i", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "if (a1.all(a2)):", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = clamp(my_value, min_value, max_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "The answer code is list(itertools.product(range(2), repeat=n))", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", ":\n\nn = 2\ncombinations = itertools.product(range(2), repeat=n)\nprint(combinations)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "The code is:\n\n\ndef get_combinations(n):\n    if n == 0:\n        yield []\n    elif n == 1:\n        yield [True, False]\n    elif n == 2:\n        yield [True, False, False]\n    else:\n        for i in range(2**(n-1)):\n            for j in get_combinations(n-1):\n                yield [True, j[0], j[1]]\n                yield [j[0], True, j[1]]\n                yield [j[0], j[1], True]\n                yield [True, j[0], True]\n                yield [j[0], True, True]", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "the code block that implements this rationale", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "the code block:\n\nimport datetime\n\nnow = datetime.datetime.now()\n\ndelta = datetime.timedelta(days=1, hours=3)\n\nnew_time = now + delta\n\nprint(new_time)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "The answer code is struct.unpack('%d,%d', 4081637ef7d0424a, 0)", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.imshow(im, cbar=ax)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s.pop() + rstrip(s)", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", ":\n\ndata[\"one\"].groupby(\"one\").agg([\"a\",\"c\"])\ndata[\"two\"].groupby(\"two\").agg([\"a\",\"c\"])", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "The code snippet is data[\"a\"][:], data[\"c\"][:]", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "Users.filter(userprofile__level__gte=0)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "This creates a list of lists, where each list contains the elements from test which have the same characters up to the first _ character", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "the grouped list of items", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "request.POST.get('title', '')", "request.POST.get('title', '')"], ["20222485-17", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "list(accumulate(list(range(10))))"], ["16436133-47", "json.loads(json.dumps(dict()))", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "['\\]\\{\\}']", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "'f', 'o', 'o', 'b', 'a', 'r', 'b', 'a', 'r', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', 'a', 'r', 'b', '", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "s.split('&')", "s.rfind('&')"], ["8247792-90", "str.split('&')", "s[:s.rfind('&')]"], ["35178812-30", "ex.A.unique().size()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "arr", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = list(s.first())", "t = tuple(x[0] for x in s)"], ["11205386-94", "attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "the dataframe df written to a csv file filename with dates formatted as yearmonthday", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a.fillna(0)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "The answer code is arr = np.minimum(arr1, arr2, arr3)", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "str(datetime.now().strftime(\"%A\"))", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", ": df.filter(A='foo').", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[df['column_name'] != 'some_value']", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[df['column_name'] != some_values]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "a boolean array of True/False values, where True indicates that the row contains the value some_value in the column_name", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "The code snippet to achieve this is:\n\ndf = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': ['one', 'two', 'three', 'four', 'five']})\n\nresult = df[df.B.isin([1, 3])]\n\nprint(result)\n\nOutput:\n\n   A  B\n0  1  one\n1  3  three", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "The code snippet is:\n\nimport importlib\n\nmodules = list(importlib.find_module('', __name__))", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "The answer code is indices = np.where(x == 0)", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = json.dumps(data)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "hex(s)", "s.decode('hex')"], ["10824319-49", "The answer code is s = binascii.unhexlify(s)", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "y = np.asarray(x)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "the hex string representation of the list walls", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "'0x' + str(sum(walls))", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "os.chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "The code should be: status_code = urllib.request.urlopen(url).getcode()", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "if (response.status_code == 200): print('The website is up'); else: print('The website is down');", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data.rename(columns={'gdp': 'log(gdp)'})", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "db.commit()", "dbb.commit()"], ["5352546-44", "The code snippet to accomplish this is:\n\ndict_object = {\n    'l': [('a', 1), ('b', 2), ('c', 3)],\n    'm': [('d', 4), ('e', 5)],\n    'n': [('f', 6), ('g', 7)]\n}\n\nresult = dict(dict_object.items(lambda key: key.startswith('l') or key.startswith('m') or key.startswith('n'): [key, value])).items()\n\nprint(result)\n\n# Output:\n# result = {\n#     'l': [('a', 1), ('b', 2), ('c', 3)],\n#     'm': [('d', 4), ('e', 5)],\n#     'n': [('f', 6), ('g', 7)]\n# }", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "[('l', 'm'), ('n', '')]", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "bigdict.get('l', 'm', 'n')", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "The code would be list(bigdict.items())[:3]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "dict(json.loads(u))", "json.load(u)"], ["4940032-13", "True", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "string.find('blabla', open('example.txt').read())", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "find('example.txt', 'blabla')", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "the code block that implements the rationale", "r = requests.get(url)"], ["4476373-22", "The code would be import requests and then requests.get(url, params=payload)", "r = requests.get(url, params=payload)"], ["4476373-71", "url", "r = requests.post(url, data=payload)"], ["4476373-99", "response = requests.post(url, data=post_data)", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "For example, binascii.unhexlify(bytes([173])) will give the binary string 0x47450420697320746865206265737421", "bin(173)"], ["1476-88", "49", "int('01010101111', 2)"], ["1476-71", "The answer code would be 'int(bin(010101))'", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "21 in binary string is 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "bin(21)"], ["1476-59", "49", "int('11111111', 2)"], ["41178532-76", "The code would look something like this:", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "[list(combinations(a, r)) for r in range(len(a))]", "list(itertools.product(*a))"], ["364519-94", "for key, value in d.items():\n    if isinstance(value, dict):\n        yield from sorted(value.items())", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in sorted(d.items()):", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in sorted(dict.items()):", "return sorted(dict.items())"], ["364519-33", "The answer code is list(sorted(dict.items()))", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items()):", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "The answer code is for key, value in sorted(foo.items(), key=lambda x: x[0]):", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "The code documentation provides an example of how to use the method and the possible error handling schemes", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "The answer code is tf.convert_to_tensor([1, 2, 3]).numpy()", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "d1.intersection(d2)", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "pd.DataFrame(tuples)", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd.DataFrame(d, columns=['Date', 'DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "random.choices(7, [0.1, 0.05, 0.05, 0.2, 0.4, 0.2])", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year', 'month', 'item']).reset_index()", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'], aggfunc='sum').reset_index()", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "p1.get_output()", "p1.communicate()[0]"], ["748028-100", "The output of the process will be stored in the p.stdout variable", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "The code is element.findall('a', recursive=True)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "This will select all the text nodes of all the elements in the a element excluding the root element", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "The answer code is:\n\nnum_list = [2, 3, 4, 5, 6, 7]\n\nnext_value = max(num_list) + 1\n\nprint(next_value) # Output: 8", "min([x for x in num_list if x > 2])"], ["2793324-81", "the modified list a without item \"b\"", "a.remove('b')"], ["2793324-12", "a = [a.remove(c)]", "a.remove(c)"], ["2793324-93", "a.remove(6)", "a.remove(6)"], ["2793324-3", "a.remove(6)", "a.remove(6)"], ["2793324-97", "a.remove('c')", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.remove(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "The answer code is subprocess.call('test.sh', args=['otherfunc'])", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "The bash script can then be executed to run the python script and execute the function", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "The string '3434.35353' matches the pattern, so the answer is True", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=[datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "To filter objects month wise in the django model Sample for year 2011, we can use the Month filter in the queryset: Sample.objects.filter(year=2011, month)", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "os.open('picture.jpg')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "the bytes object", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "This will write the content of the xxx.mp4 file to the new file f", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.sort_values().reset_index()", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1.drop_duplicates().count()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.groupby([col1, col2, col3]).transform('mean')", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", ": return redirect('Home.views.index')", "redirect('Home.views.index')"], ["42352887-25", "list(sorted(things.keys(), key=lambda x: things[x]['weight']))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "The answer code would be importlib.find_module('a_module')", "print(a_module.__file__)"], ["247770-2", "path.abspath(__file__)", "print(os.getcwd())"], ["247770-13", "importlib.import_module('amodule').__path__", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "The code to achieve this is: \nfor i in range(len(df)):\n    for j in range(i+1, len(df)):\n        df.at[i, 'col1'] + df.at[j, 'col2']\n    print(df)", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "time.time()", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "the code snippet import subprocess; output = subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "The code block that implements this rationale is:\n\nimport pandas as pd\ns1 = pd.Series([1,2,3,4,5])\ns2 = pd.Series([2,4,6,8,10])\n\nresult = s1.intersection(s2)\nprint(result)\n\nOutput:\n[2, 4, 6, 8]", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "The answer code is:\n\ndate = datetime.datetime.strptime(when, '%d %m %Y %H:%M:%S').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", "the code snippet 'warnings.always = True'", "warnings.simplefilter('always')"], ["22676-23", "The code to download a file from the given URL and save it to the given file name is:\n\nimport requests\n\nurl = 'http://www.example.com/songs/mp3.mp3'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    with open('mp3.mp3', 'wb') as f:\n        f.write(response.content)\nelse:\n    print('Error downloading file: ', response.status_code)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "import requests; requests.get(url, save_as=file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import requests; requests.get('http://www.example.com/')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "the code snippet import requests; requests.get(url)", "r = requests.get(url)"], ["22676-64", ": session = requests.Session()\nurl = \"https://example.com/file.txt\"\nresponse = session.get(url)\nfile_path = \"10MB/file.txt\"\nresponse.save(file_path)", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "The answer code is P.dot(T)", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "float('470FC614')", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "list(reversed(range(1, 11)))", "list(reversed(list(range(10))))"], ["20573459-83", "the code snippet date.today() - timedelta(days=7)", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = set(mylist)", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "df.to_string('np.txt')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "df.to_csv('c:\\\\data\\\\pandas.txt')", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "The answer code is x.split('-', 1)", "print(x.rpartition('-')[0])"], ["15851568-9", "str[-1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "the code block list(random.randint(1, 100))", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "%f with a value of 6", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "The answer code is print('|'.join(list1), end='|', sep='\\t')", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "df.isnull().sum()", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "re.compile('[^\\w\\s]').sub(' ', text).lower()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "the code block: name = soup.find_all('name')", "print(soup.find('name').string)"], ["2011048-15", "os.stat(filepath).st_size", "os.stat(filepath).st_size"], ["2600191-99", "count = l.count(\"a\")", "l.count('a')"], ["2600191-23", "l.count()", "Counter(l)"], ["2600191-53", "len(l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "count(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "l.count(\"b\")", "l.count('b')"], ["12842997-15", "The code to copy the file srcfile to the directory dstdir can be written as:\n\n\nimport shutil\n\nshutil.copy(srcfile, dstdir)\n\n\nThis will copy the file srcfile to the directory dstdir", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = pd.concat([df['b'], df['a']], axis=1)", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "t = list(t)", "tuple(l)"], ["16296643-20", "list(level1)", "level1 = map(list, level1)"], ["3880399-74", "pprint.pprint(dataobject).write(logFile)", "pprint.pprint(dataobject, logFile)"], ["21800169-34", ":", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.eq(True).index", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "filter(BoolCol).index", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "The df.BoolCol.str.contains('True', case=False).index will return the index of the rows in the dataframe df which contain the value 'True' in the column BoolCol", "df[df['BoolCol']].index.tolist()"], ["299446-100", "The answer code is os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "The answer code is soup.find('div', id='main-content').remove()", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "zip(a,b)", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "a list of tuples containing elements from a followed by elements from b", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "re.search('}', \"abcd}def}\").last()", "'abcd}def}'.rfind('}')"], ["20546419-7", "The code should be arr = np.random.shuffle(r)", "np.random.shuffle(np.transpose(r))"], ["574236-63", "the number of elements in the returned list", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor.fetchone()", "cursor.fetchone()[0]"], ["4454298-91", "'open(\"infile\", \"a\").write(\"#test firstline\\n\") + open(\"infile\", \"r\").read() + \"\\n\" + open(\"outfile\", \"w\")", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "re.search(r'ba[rzd]', foobarrrr)", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "The code t = list(set(t)) will create a new list t with no duplicates", "list(set(t))"], ["7961363-86", "This will remove any duplicate elements from the list source_list", "list(set(source_list))"], ["7961363-7", "abracadabra = list(set(abracadabra))", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a list containing the values of the first row of a", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('div', text='Address:').text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "the code snippet urllib.quote(\"data to be encoded\")", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "The answer code is data_to_be_encoded.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "A = [2, 3, 0, 0]", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "a.sum() / len(a)", "np.mean(a, axis=1)"], ["15907200-35", "the resulting csv file with a header", "writer.writeheader()"], ["23359886-48", "arr", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "image.resize((x, y), antialias=True)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "a list of 10 differences between each element of l1 and l2", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "soup.find_all('span', class_='starGryB sp')", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "the code snippet list5.sort(lambda x: x.degree)", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "The sorted() function will return a new sequence which is the sorted version of the original sequence", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "For example, 'obj.attr' will return the value of the attribute 'attr' from object 'obj'", "getattr(obj, 'attr')"], ["1960516-75", "'3.9'", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df[df.groupby('A').transform('count') > 1]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(image_mappable, cax=plt.get_cax())", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "a dictionary containing the 100 most frequent words and their frequencies", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "datetime.datetime.utcnow()", "datetime.now(pytz.utc)"], ["9262278-9", "The code to achieve this is:\n\nresponse = HttpResponse(json.dumps(data), content_type='application/json')", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", ":\n\nsubprocess.Popen([\"background-process\", \"arguments\"])", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "The code to find the index of elements containing 'how' and 'what' in a list of strings 'myList' is: \n\nmyList = ['how are you', 'what is the time', 'what happened', 'how to do']\n\nindex = [i for i, s in enumerate(myList) if ('how' in s or 'what' in s)]\n\nprint(index)\n\nOutput:\n[1, 2, 3]", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame.from_records([('a', 1), ('b', 2)], names=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(xticklabels, rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", ": len(yourdict)", "len(list(yourdict.keys()))"], ["2212433-64", "The answer code is len(yourdictfile.keys())", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df['list_col'].explode().reset_index(drop=True)", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "The answer code is subprocess.check_output('c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat')", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q = heapq.heapq.heapify(q).reverse()", "q.put((-n, n))"], ["21887754-31", "a = np.concatenate([a, b], axis=0)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "a = np.concatenate(a, b, axis=1)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "numpy.concatenate(a, b)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "a.concatenate(b)", "np.array((a, b))"], ["4356842-88", "response.status_code = 401", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "the code snippet df.get_value(bob)", "df.index.get_loc('bob')"], ["18730044-52", "[[(1, 4), (2, 5), (3, 6)]]", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "'tis icy'", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "'th it es is icy'", "re.sub('i', '', 'it is icy')"], ["22187233-75", "For example, \"it is icy\".replace(\"i\", \"\") will return \"th is  th\"", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "s.replace(\"a\", \"\")", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = map(int, intstringlist)", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, input_list))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "\"glob.glob('/mydir/*.txt')\"", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "a list of files with the extension \".txt\" in the directory \"/mydir\"", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "The code block that implements this rationale is:\n\nimport glob\nimport os\n\nfiles = glob.glob('/mydir/*.txt')\nprint(os.listdir('/mydir'))", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "dict(json.loads(request.body))", "json.loads(request.body)"], ["36402748-46", "df.sort_values('column_name', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "The response will be a json object which can be accessed using response.json()", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "The code to do this is: \n\n\nfrom django.db.models import Q\n\nq = Q(hour__gte=hour, )", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted(list, key=lambda x: (x['points'], x['time']))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "int(number)", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json.loads(urllib.parse.unquote(unescaped))", "json_data = json.loads(unescaped)"], ["18367007-15", "open('newFile', 'w').write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "The code to get the maximum value associated with the field added in the model AuthorizedEmail is AuthorizedEmail.objects.annotate(Max('added')).values('added').order_by('-added').get(added__isnull=False)", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", ":\n\ndatetime.datetime.now()", "datetime.datetime.now()"], ["17794266-82", "x = np.amax(x, axis=0)", "max(x.min(), x.max(), key=abs)"]]}