{"(0, True, False)": [["11840111-96", "d1_values = d1.values() \nd2_values = d2.values() \nresult = d1_values.copy() \nresult.update(d2_values) \nprint(result)", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d1 = {\n    'a': 10,\n    'b': 20,\n    'c': 30\n}\n\nd2 = {\n    'a': 40,\n    'b': 50,\n    'c': 60\n}\n\nnew_dict = d1.items() - d2.items()\nprint(new_dict)\n# Output: {'b': 20, 'c': 30}", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import urllib.request\nurl = \"http://randomsite.com/file.gz\"\nresponse = urllib.request.urlretrieve(url, \"file.gz\")\nprint(response)", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import urllib.request\nimport urllib.request\n\nurl = \"http://randomsite.com/file.gz\"\nfilename = \"file.gz\"\n\nresponse = urllib.request.urlretrieve(url, filename)\n\nif response is None:\n    print(\"File already exists\")\nelse:\n    with open(filename, 'wb') as f:\n        f.write(response[0])", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "def filter_model(q):\n    q.filter(MyModel.charfield.length <= 255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "a = numpy.bitwise_xor(a, b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "31", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "import datetime\ndate = datetime.date.today()\nord = date.toordinal()\ndate2 = datetime.date.fromordinal(ord)\nprint(date2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "0", "subprocess.call('test1.py', shell=True)"], ["843277-70", "def hasattr(obj, attr_name):\n    try:\n        return getattr(obj, attr_name)\n    except AttributeError:\n        return False\n\nif __name__ == '__main__':\n    obj = {'attr_name': 'value'}\n    print(hasattr(obj, 'attr_name'))", "hasattr(obj, 'attr_name')"], ["2231663-53", "def zip_longest(iterables):\n    max_length = max(len(i) for i in iterables)\n    result = []\n    for i in zip(iterables):\n        result.append(i)\n    for i in itertools.islice(iterables, None, None, max_length):\n        result.extend(i)\n    return result", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def get_list_slices(lst, n):\n    \"\"\"\n    Slice a list into a list of sub-lists of length n\n    \"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n# Test\nlist_slices = get_list_slices([1, 2, 3, 4, 5], 2)\nprint(list_slices)\n# Output: [ [1, 2], [3, 4], [5] ]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "<nooutput>", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df[df['X'].groupby(df['User']).transform('sum') == 0]", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'X': [0, 0, 1, 1]})\n\nprint(df[df['X'] == 0])", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "import webbrowser\n\nwebbrowser.open('http://example.com')", "webbrowser.open('http://example.com')"], ["4906977-61", "import os\nprint(os.environ[\"HOME\"])", "os.environ['HOME']"], ["4906977-33", "import os\nprint(os.path.expanduser())", "os.environ['HOME']"], ["4906977-98", "import os\n\nprint(os.getenv(\"MY_ENV_VAR\"))\nprint(os.environ)\nprint(os.putenv(\"MY_ENV_VAR\", \"new_value\"))", "print(os.environ)"], ["4906977-9", "import os\n\nenv = os.environ\n\nprint(env.keys())\n\n# Output:\n# ['HOME', 'PATH', 'PYTHONPATH', 'USER', 'LANG', 'LC_ALL', 'TZ']", "os.environ"], ["4906977-77", "if os.getenv('KEY_THAT_MIGHT_EXIST', 'default_value'):\n    print(os.getenv('KEY_THAT_MIGHT_EXIST'))\nelse:\n    print('No such environment variable.')", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "def sorted_dict(dictionary):\n    return sorted(dictionary.items(), key=lambda t: t[1])\n\nprint(sorted_dict(dictionary))", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in dict.items():\n    print(value)", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['new_col'] = df['stats'].str.split(',').apply(lambda x: x.split(' ')).applymap(str).drop('_split_')", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(', ')  # split string in column 'stats' by ',' into separate columns \ndf['name'] = df['name'].str.split(', ')  # split string in column 'name' by ',' into separate columns \ndf['value'] = df['value'].str.split(', ')  # split string in column 'value' by ',' into separate columns", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line = re.sub('!@#$', '', line) \nprint(line)", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace(\"!@#$\", \"\")", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string.rsplit(\"1\", 1)  # returns ['string']", "string.replace('1', '')"], ["3939361-89", "line = re.sub('!@#$', '', line)\nprint(line) # Output: ' '", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "10 minutes less than the current time", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "dt.replace(hour=-5, minute=0, second=0, microsecond=0)", "dt -= datetime.timedelta(hoursrandom.randint(100000000000, 999999999999)"], ["13496087-95", "87654321", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "url = 'http://www.google.com/'\nurl_parts = urlparse(url)\nscheme = url_parts.scheme\nnetloc = url_parts.netloc\npath = url_parts.path\nparameters = url_parts.params\nquery = url_parts.query\nfragment = url_parts.fragment", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.setscrreg(0, 0, 0)", "root.lift()"], ["1823058-26", "value = 10000\nprint(format(value, '0.2f'))  # Output: 10000.00", "'{:,}'.format(value)"], ["14406214-5", "ax.set_yticklabels([\"x\", \"y\", \"z\"])", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.set_ylim([0, 180])", "ax.xaxis.tick_top()"], ["10565598-66", "def check_array_contains_all(a, b):\n    if any(a == b for a in a):\n        return True\n    else:\n        return False", "numpy.in1d(b, a).all()"], ["13557937-8", "0blist('{0:0b}'.format(8))"], ["13557937-9", "0bint(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "import time\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "for i in range(len(L)-1, -1, -1):\n    yield i", "L[::(-1)]"], ["3940128-21", "def reverse(L):\n    return itertools.chain.from_iterable(reversed(L))", "L.reverse()"], ["89228-90", "import subprocess\n\n# Call the external command\nresult = subprocess.check_call(\"ls -l\")\n\n# Check the return code\nif result == 0:\n    print(\"Success\")\nelse:\n    print(\"Failure\")", "from subprocess import call"], ["89228-91", "import subprocess\n\nsubprocess.check_call(\"some_command\", args=\"with args\")\n\n# Output: 0", "os.system('some_command with args')"], ["89228-25", "import os\n\n# Call the os.system function\nos.system(\"some_command < input_file | another_command > output_file\")", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "import subprocess\n\nsubprocess.check_call(\"some_command\", args=\"with args\")\n\n# Output: 0", "stream = os.popen('some_command with args')"], ["89228-97", "import subprocess\n\nproc = subprocess.Popen(\"echo Hello World\", shell=True)\n\noutput = proc.communicate()\n\nprint(output)\n\n# Output:\n# Hello World", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "import subprocess\n\n# Call the external command\nresult = subprocess.check_call(\"ls -l\")\n\n# Check the return code\nif result == 0:\n    print(\"The command succeeded\")\nelse:\n    print(\"The command failed\")", "call(['ls', '-l'])"], ["5137497-23", "import os\nprint(os.getcwd())", "os.path.realpath(__file__)"], ["5137497-33", "import os\n\npath = \"path\"\n\ndir_list = os.listdir(path)\nprint(os.path.relpath(path, start=os.getcwd()))", "os.path.dirname(path)"], ["5137497-66", "import os.path\nimport pathlib\n\npath = pathlib.Path('path')\n\nprint(os.path.normpath(path))\n\n# Output: A/B", "os.path.realpath(path)"], ["5137497-91", "\"os.listdir\"", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "import os\n\nos.path.dirname(os.getcwd())", "full_path = os.path.realpath(__file__)"], ["14961562-66", "list = struct.unpack('<H*', s) \nprint(list)  # Output: [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = pd.to_datetime(df['DateObj']).astype('str').strptime('%d %B %Y')", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "for p in permutations([1,2,3], [4,5,6]):\n    print(p)", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "for i in range(1, 4):\n    print(list(itertools.permutations([1, 2, 3])))\n\nOutput:\n\n[\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1]\n]", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename.csv, sep='', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "import Tkinter\nfrom Tkinter import Tk\n\nroot = Tk()\nroot.destroy()\n\nimport struct\nimport matplotlib.backend_tools as bt\nbt.ToolBase.destroy(root)", "root.destroy()"], ["2225564-15", "files = ['.001.jpg', '.101.jpg', '.201.jpg', '.301.jpg', '.401.jpg', '.501.jpg', '.601.jpg', '.701.jpg', '.801.jpg', '.901.jpg']", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "import pandas as pd\n\ndf = pd.DataFrame({'order': ['A', 'A', 'B', 'B'],\n                   'sample': ['a', 'b', 'c', 'd']})\n\ndf.pivot_table(index='order', values='sample', aggfunc='first')\n\n# Output:\norder  a  b  c  d\nA     a  None  None  None\nB     b  c  None  d", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle\n\nafile = open('afile', 'wb')\npickle.dump([1,2,3,4,5], afile)\nafile.close()\n\nimport pickle\n\nunpickled = pickle.load(afile)\nprint(unpickled)\n\nOutput: [1, 2, 3, 4, 5]", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "<nooutput>", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "bytes.decode('utf-8')", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data.diff()", "data.set_index('Date').diff()"], ["28901311-21", "def index_of_elements(arr1, arr2):\n    return numpy.searchsorted(arr1, arr2)", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "def query_data(time_spent):\n    # query the data from the Task table\n    query = \"SELECT * FROM Task WHERE time_spent > 3\"\n    data = pd.read_sql(query, con)\n    return data\n\n# modify the options for the time_spent column\ncolumn = data.columns[\"time_spent\"]\ncolumn.sortable = False\ncolumn.width = 80\n\n# query the columns of the DataFrame\ndata[\"time_spent\"] = data[\"time_spent\"].apply(query_data)\n\n# distinct the sum of unique values\ndata[\"total_time\"] = data[\"time_spent\"].distinct().sum()\n\n# print the output\nprint(data)", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "import time\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "datetime.datetime.now()"], ["415511-29", "import time\nprint(time.gmtime())", "datetime.datetime.now().time()"], ["415511-26", "import time\nprint(time.strftime(\"%H:%M:%S\"))", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "import time\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "str(datetime.now())"], ["415511-33", "import time\nprint(time.gmtime())", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "def add_array(arr, array):\n    return np.hstack((arr, array))\n\narr = np.zeros((6, 9, 20))\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nanswer = add_array(arr, array)\nprint(answer)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "import numpy as np\n\narr = np.array([1,2,3,4,5,6,7,8,9])\n\narr_res = np.reshape(arr, (6, 9, 20))\n\nans = zip(arr, zip(arr_res))\n\nprint(ans)\n\n# Output:\n# [([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])]", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.groupby().head(n=1)\ndf.groupby().last()", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "import datetime\ndatetime.datetime.strptime('24052010', '%d%m%Y')\nprint(datetime.datetime.strftime(datetime.datetime.strptime('24052010', '%d%m%Y'), '%d%m%Y'))\n# Output: 24/05/2010", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "def calculate_mean_nonzero_values(df):\n    return df.groupby('index').mean()\n\ndef calculate_cumsum(df):\n    return df.groupby('index').cumsum()\n\ndef calculate_sum(df):\n    return df.groupby('index').sum()", "np.flatnonzero(x).mean()"], ["5508352-50", "a = np.array([1,2,3,4,5])\nb = np.array([1,2,4,5])\n\nprint(a.index(b))  # Output: 2", "a[tuple(b)]"], ["2233917-10", "<nooutput>", "tuple(map(int, input().split(',')))"], ["2233917-8", "<nooutput>", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticklabels(labels=[f'{i+90:02d}' for i in range(len(ax.get_xticks()))])", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "If None, all fields are used.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with sum and max columns\n    \"\"\"\n    if by is None:\n        by = df.columns\n    if columns is None:\n        columns = ['sum', 'max']\n    else:\n        columns = by + columns\n    gb = df.groupby(by=by, group_keys=False)\n    result = gb.agg(sum=('sum', 'sum'), max=('max', 'max'))\n    result.columns = columns\n    return result\n\nresult = groupby_sum_max(df)\nprint(result)\n\nOutput:\n  sum  max\n0  245  300\n1  235  275\n2  225  250\n\\end{code}", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "import pandas as pd\n\ndf = pd.DataFrame({'Close': [10, 11, 12, 13, 14],\n                   'Time': [1.5, 2.5, 3.5, 4.5, 5.5]})\n\ndf.pivot_table(index='Close', columns='Time', values='Time').reset_index()\n\nOutput:\nClose   | 1.5   | 2.5   | 3.5   | 4.5   | 5.5\n------- | ------ | ------ | ------ | ------ | ------\n10     | 10     | 11     | 12     | 13     | 14\n2.5     | 11.5   | 13.5   | 15.5   | 17.5   | 19.5\n3.5     | 12.5   | 14.5   | 16.5   | 18.5   | 20.5\n4.5     | 13.5   | 15.5   | 17.5   | 19.5   | 21.5\n5.5     | 14.5   | 16.5   | 18.5   | 20.5   | 22.5", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(x) for x in input().split()]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "for i in range(len(yourdata)-1, -1, -1):\n    yield yourdata[i]", "sorted(yourdata, reverse=True)"], ["13237941-56", "def sort_dicts(data, subkey):\n    return sorted(data, key=itemgetter(subkey), reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "def sort_nested_dicts(data):\n    return sorted(data.items(), key=itemgetter('key', 'subkey'), reverse=True)", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "G.add_edge(labels, pos, max_node_id)\n\nFigure().clf()\n\nskimage.io.show()", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "The common prefix of '/usr/var' and '/usr/var2/log' is '/usr/'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "import os\n\npath = '/usr/var'\n\nnormpath = os.path.normpath(path)\nrelpath = os.path.relpath(path, start='/usr/var/log')\ndirname = os.path.dirname(path)\n\nprint(normpath)\nprint(relpath)\nprint(dirname)", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "if myobject.id.number:\n    number = getattr(myobject, 'number')\nelse:\n    number = contextvars.get('number', default)", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X = np.einsum('ij,kl->ikl', X)\nX = np.reshape(X, (-1, 1, 1))\nX = np.kron(X, 1)", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "list = [('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000'), \n('00000', '00001', '00010', '00100', '01000', '10000')]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "$1 off delicious $5 ham", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "import random\nimport random\n\n# Generate 6 random numbers between 1 and 50\nrandom.seed(12345)\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))\nprint(random.randint(1,51))", "random.sample(range(1, 50), 6)"], ["13628725-59", "import uuid\nimport random\nimport random\n\n# Generate six unique random numbers in the range of 1 to 49\n# using uuid.uuid4\n# Generate a random integer N such that 1 <= N <= 49\n# using random.randint\n# Generate n random bytes\n# using random.randbytes", "random.sample(range(1, 50), 6)"], ["15940280-74", "import datetime\nimport time\n\nnow = time.time()\nprint(datetime.datetime.now())\nprint(time.gmtime())\nprint(time.time())", "datetime.utcnow()"], ["12280143-55", "os.chdir('..')", "os.chdir('..')"], ["15457504-91", "text_item = Text(k, font='Purisa', size=12)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "my_df = pandas.DataFrame.from_dict(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if 'one' in d.values():\n    print('Yes')\nelse:\n    print('No')", "'one' in list(d.values())"], ["8214932-94", "if 'one' in d:\n    print('True')\nelse:\n    print('False')", "'one' in iter(d.values())"], ["7125009-76", "legend = legend.Legend(loc='upper left', title='My Legend', prop={'size': 'x-small'})", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "legend.set_title('Legend Title', fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "str.strip()", "sentence.replace(' ', '')"], ["8270092-68", "str.strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "def remove_whitespace(string):\n    return string.strip()\n\n# Test\nstring = \"  hello world  \"\nprint(remove_whitespace(string))\n\n# Output: hello world", "sentence.strip()"], ["8270092-87", "def remove_whitespace(string):\n    return string.strip()\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n#", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "def remove_whitespace(string):\n    return string.strip()\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n# Output:\ndef remove_whitespace(string):\n    return string.replace(\" \", \"\")\n\n#", "sentence = ''.join(sentence.split())"], ["14591855-94", "import pandas as pd\n\ndf = pd.read_csv('/home/.../data.h5', key='firstSet')\ndf.set_index('key')\nprint(df.head())", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str.strip()\nio.IOBase.readlines()\nbytearray.strip(b\" \\t\\n\\r\\x0b\")", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "import urllib.request\nimport urllib.parse\nimport urllib.error\n\ndef handle_urlfetch_errors(url, urllib.error.URLError):\n    if urllib.error.URLError.code == 404:\n        print(\"Not Found\")\n    elif urllib.error.URLError.code == 500:\n        print(\"Internal Server Error\")\n    else:\n        print(\"Unknown Error\")\n\nurl = \"https://example.com\"\nurllib.request.urlretrieve(url, \"file.txt\", handle_urlfetch_errors)", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "def reverse_dict(mydict):\n    return sorted(mydict.items(), key=lambda t: t[1], reverse=True)", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "firstname = request.headers.getlist('firstname')\nif firstname:\n    print(firstname[0])", "first_name = request.args.get('firstname')"], ["13279399-5", "firstname = request.POST['firstname']", "first_name = request.form.get('firstname')"], ["3278850-59", "txt = io.IOBase.readlines(file.txt, 10)\nprint(txt)", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "def filter_entry(self, id):\n    if id != 3:\n        return True\n    else:\n        return False", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "divs = soup.find_all('div', attrs={'class': 'my-class'})\nprint(divs)", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb(0, 128, 255)", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "import subprocess\nimport os\n\np = subprocess.Popen('python', shell=True, executable='/path/to/python')\nos.kill(p.pid, signal.SIGTERM)\np.terminate()", "sys.exit()"], ["73663-36", "import subprocess\nimport os\n\nsubprocess.Popen(\"kill\", shell=True).terminate()\nos.kill(pid, signal.SIGTERM)", "quit()"], ["73663-66", "sys.exit(1)", "sys.exit('some error message')"], ["21974169-23", "cursor.execute(\"commit\")", "con.commit()"], ["11269575-66", "None", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "def convert_string_to_int(s):\n    if s.isdigit():\n        return float(s)\n    else:\n        return locale.atoi(s)", "int(Decimal(s))"], ["1094717-69", "def convert_string_to_int_with_decimal(string):\n    if (len(string) > 0 and string[0].isdigit()):\n        return round(float(string), ndigits=1)\n    else:\n        return 0", "int(s.split('.')[0])"], ["31957364-53", "def elementwise_product(A, B):\n    return np.einsum('ij,jk->ik', A, B)", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "import subprocess\nimport os\nimport sys\n\nif __name__ == '__main__':\n    args = sys.argv\n    if len(args) == 2:\n        print(\"rm -r some.file\")\n    else:\n        print(\"No input provided\")\n\n    try:\n        subprocess.check_call(args)\n    except subprocess.CalledProcessError as e:\n        print(e.returncode)\n    else:\n        os.unlink(\"some.file\")", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.discard('a')", "e = next(iter(s))"], ["5868374-42", "import datetime\ndatetime.datetime.strptime('%Y-%m-%d', 'datestr')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "import base64\nimport io\n\nwith open('pdf_reference.pdf', 'rb') as f:\n    data = f.read()\n\nencoded = base64.b64encode(data)\n\nwith open('encoded_pdf.pdf', 'wb') as f:\n    f.write(encoded)", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "import os\nos.chdir('chapter3')\nprint(os.getcwd())", "os.chdir('chapter3')"], ["20796355-88", "import os\nos.chdir('path')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "import os\nos.chdir('path')", "os.chdir('.\\\\chapter3')"], ["1299855-22", "<nooutput>", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "<nooutput>", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "<nooutput>", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "divs = soup.find_all(\"div\", class_=\"comment-\")\nfor div in divs:\n    print(div.get_text())", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "<nooutput>", "plt.cla()"], ["13156395-50", "<nooutput>", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json\n\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)\n\nprint(data)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "sys.exit(<int or None>)", "sys.exit(0)"], ["8751653-82", "s2 = struct.unpack('<f', buffer('0b' + str(int(s2, 2))).replace('0b', '0'))[0]", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "0b1110", "float(int('-0b1110', 0))"], ["8751653-54", "0bstruct.unpack('d', b8)[0]"], ["4789021-9", "user = authenticate(username='user', password='pass')\nif user is not None:\n    # user is authenticated\nelse:\n    # user is not authenticated", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "user.is_authenticated() # True", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "def find_rows_matching(arr, (0,1)):\n    return np.argwhere(arr.any(axis=1) & (arr[:,0] == (0,1)))", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "import os\nos.chdir(\"path\")\nprint(os.getcwd())\nprint(os.path.dirname(\"path\"))", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "writerows(df.to_dict('records'))\n    writerow(record)\n    for record in df.to_dict('records'):\n        writerow(record)", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv')", "df.write.csv('mycsv.csv')"], ["8092877-26", "def zip_longest(iterables):\n    \"\"\"\n    Zip two or more iterables together, filling any missing values with a fill value.\n\n    This function is a wrapper around itertools.zip_longest() which is not\n    available in Python 3.\n\n    Parameters\n    ----------\n    iterables : iterable or iterable, or tuple of iterables\n        The iterables to be zipped.\n\n    Returns\n    -------\n    iterator\n        An iterator that aggregates elements from each of the iterables.\n    \"\"\"\n    if not isinstance(iterables, (list, tuple)):\n        iterables = [iterables]\n    return itertools.zip_longest(iterables)", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "def split_list(data, field):\n    return itertools.chain.from_iterable(data.items(field))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "df['a'].tolist()", "df['a'].values.tolist()"], ["23748995-42", "def get_list_of_values(df, column_name):\n    return df[column_name].isin(df[column_name])", "df['a'].tolist()"], ["20205455-79", "<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n</body>\n</html>", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = np.array([1, 2, 3, 4, 5])\n\nindices = np.argwhere(a != 3)\n\nprint(a[indices])\n# Output: [1, 2, 4, 5]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "\"foo\"", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].groupby(pd.TimeGrouper('M')).unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "if os.listdir('/the/dir/') is not None and os.path.isdir('/the/dir/') and pathlib.Path('/the/dir').is_file():\n    print('The file is a directory.')", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict = dict(zip(myListOfTuples, ))", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "def sort_dicts_by_date(dicts):\n    return sorted(dicts, key=lambda d: d['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=True)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "1, 2, 3", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "def compare_files(file1, file2):\n    diff = Differ()\n    if filecmp.cmp(file1, file2) is False:\n        return False\n    else:\n        return diff.compare(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "def min_val(list_of_tuples):\n    min_val = min(list_of_tuples, key=lambda t: t[1])\n    return min_val[0]", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [(''.join(map(str, x)) for x in lst) for _ in range(len(lst))]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "def float_to_str(lst):\n    str_list = []\n    for i in lst:\n        if type(i) is float:\n            str_list.append(str(i).replace('.', '0.')[:8])\n        else:\n            str_list.append(i)\n    return str_list", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "0, 1", "A[[0, 1], [0, 1]]"], ["2111163-33", "a = np.reshape(a, (1, 2, 3))\nb = np.column_stack((a[:, 0], a[:, 1]))\nc = np.record.ravel(b)", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "soup.find('a'),\nsoup.find('div')", "soup.find_all(['a', 'div'])"], ["931092-70", "def reverse_string(s): \n    return s[::-1]", "'hello world'[::(-1)]"], ["931092-64", "def reverse_list(s):\n    return chain.from_iterable(s).reverse()", "s[::(-1)]"], ["931092-5", "def reverse_string(s): \n    return s[::-1]", "''.join(reversed('foo'))"], ["931092-74", "string = bytearray(\"string\").join() \nprint(string)  # Output: revoked string", "''.join(reversed(string))"], ["931092-65", "def reverse(s): \n    return s[::-1]", "'foo'[::(-1)]"], ["931092-99", "str(reversed(a_string))", "a_string[::(-1)]"], ["931092-20", "str(reversed(a_string))", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "s = \"Hello World!\"\n\nreversed(s)\n\n# Output: \"!dlroW olleH\"", "''.join(reversed(s))"], ["163542-7", "<nooutput>", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "<nooutput>", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df['col1'] = df['col1'].astype('int') \ndf['col2'] = df['col2'].apply(lambda x: float(x)) \ndf['col3'] = df['col3'].applymap(str)", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "str(a)", "str(a)"], ["27318022-32", "result = os.read()\nprint(result)", "result = sys.stdin.read()"], ["40055835-26", "def remove_duplicates(arr):\n    new_arr = []\n    for i in arr:\n        if i not in arr:\n            new_arr.append(i)\n    return new_arr", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df.drop(df.index.isin([start_remove, end_remove]))", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(start_remove:end_remove)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "for i in np.argwhere(mask):\n    print(i)", "numpy.where(mask)"], ["32533944-71", "import pandas as pd\n\ndf = pd.read_csv('Result.csv', sep=' ')\ndf.to_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "df = pandas.DataFrame.from_dict(d, orient='index')\ndf = df.applymap(lambda x: x.tolist())\nprint(df)", "pd.DataFrame(d)"], ["1883604-86", "import gzip\nimport io\n\nwith gzip.open('file.gz', 'r') as f:\n    content = f.read()\n\nwith io.open('file.gz', 'r', encoding='utf-8') as f:\n    content = f.read()\n\n# Truncate the file\nwith gzip.GzipFile('file.gz', 'w') as f:\n    f.truncate()", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "import webbrowser\n\nwebbrowser.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "if \"blah\" in somestring:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if \"substring\" in \"string\":\n    print(\"Found\")\nelse:\n    print(\"Not Found\")", "string.find('substring')"], ["3437059-83", "if s.find(\"is\") != -1:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "def myfunction():\n    return \"Hello World!\"", "globals()['myfunction']()"], ["3061761-63", "a.shape\na.reshape\na.ndarray.__len__", "a.shape"], ["3061761-55", "a.shape\na.reshape\na.ndarray.__len__", "N.shape(a)"], ["3061761-89", "a.shape\na.reshape\na.ndarray.__len__", "N.shape(a)"], ["3061761-31", "a.shape\na.reshape\na.ndarray.__len__", "a.shape"], ["13291539-54", "0.00582811585976", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "def uniqify(list_of_dicts):\n    return list(dict.items(list_of_dicts))\n\nprint(uniqify(list_of_dicts))", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "import io\nimport urllib.request\nimport os\n\ndef read_file(file_name):\n    with open(file_name, 'r') as f:\n        return f.read()\n\ndef get_words(file_name):\n    with open(file_name, 'r') as f:\n        words = f.readlines()\n    return words\n\ndef get_lines(file_name, hint):\n    with open(file_name, 'r') as f:\n        lines = f.readlines()\n    return lines[:hint]\n\ndef get_url(url):\n    with urllib.request.urlopen(url) as u:\n        return u.read()\n\ndef get_os_read(fd, n):\n    with os.fdopen(fd, 'r', n) as f:\n        return f.read()\n\nif __name__ == '__main__':\n    print(read_file('myfile'))\n    print(get_words('myfile'))\n    print(get_lines('myfile', 5))\n    print(get_url('http://example.com'))\n    print(get_os_read(123, 4))", "words = open('myfile').read().split()"], ["7717380-65", "arr = np.asarray(a)\narr.shape = a.shape\narr.reshape(a.shape)", "a = np.array(a)"], ["9304908-37", "def filter(self, *args, **kwargs):\n    if True:\n        return self.filter(**kwargs)\n    else:\n        return self.none()", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "string1.lower() == string2.lower()", "(string1.lower() == string2.lower())"], ["319426-70", "if first.lower() == second.swapcase():\n    print(\"Yes\")\nelse:\n    print(\"No\")", "(first.lower() == second.lower())"], ["319426-18", "if first.lower() == second.lower():\n    print(\"Yes\")\nelse:\n    print(\"No\")", "(first.upper() == second.upper())"], ["15455388-38", "import pandas as pd\n\nd = {\n    'a': [\n        {'b': [1, 2, 3]},\n        {'b': [4, 5, 6]},\n    ],\n    'b': [\n        {'c': [7, 8, 9]},\n        {'c': [10, 11, 12]},\n    ]\n}\n\ndf = pd.DataFrame.from_dict(d)\n\nprint(df)\n\n# Output:\n   a  b\n0  [1, 2, 3]  [7, 8, 9]\n1  [4, 5, 6]  [10, 11, 12]", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "def count_by_col5_and_col2(df):\n    return df.groupby(['col5', 'col2']).count()\n\nprint(count_by_col5_and_col2(df))", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "def getattr(obj, name):\n    if hasattr(obj, name):\n        return getattr(obj, name)\n    else:\n        return default\n\ndef hasattr(obj, name):\n    try:\n        return getattr(obj, name)\n    except AttributeError:\n        return False\n\ndef property(obj, name):\n    return property_descriptor(obj, name)", "getattr(your_obj, x)"], ["3743222-35", "import datetime\nimport time\n\ndate_string = \"2020-01-01\"\ndate = datetime.datetime.strptime(date_string, \"%Y-%m-%d\")\nprint(date.date())", "datetime.datetime.now().date()"], ["3743222-73", "import datetime\ndate = datetime.datetime.strptime('12/31/2019', '%d/%m/%Y')\nprint(date.date())", "datetime.datetime.now().date()"], ["12496531-86", "def sort_by_column(arr): \n    return arr.argsort(axis=1) \n\ndef msort_by_column(arr): \n    return arr.msort(axis=1) \n\ndef get_column_index(arr, col): \n    return arr.itemgetter(col).__getitem__()", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "s.decode('utf-8').lower()", "s.decode('utf-8').lower()"], ["2631935-11", "import sqlalchemy as sa\n\nupdate_name = sa.update(user).where(user.id == 123).values({'name': 'Bob Marley'})\n\nsa.execute(update_name)", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "def something(bob):\n    locals()['something'] = bob\n    return locals()", "globals()['something'] = 'bob'"], ["14766194-35", "if (a.any(axis=1) & (a[:, 1] == 1)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray([[1, 0, 0],\n [0, 1, 0],\n [0, 0, 1]])", "np.zeros((3, 3)).ravel()"], ["15579649-73", "result = np.array(result)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "import pygame\npygame.display.quit()\nos.system(\"exit\")", "sys.exit(0)"], ["36139-44", "mylist.sort()", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "def sort_list(mylist):\n    return sorted(mylist, key=itemgetter(0))", "mylist.sort()"], ["36139-32", "def sort_list(list):\n    return sorted(list, key=itemgetter(0))", "list.sort()"], ["5280178-72", "import os\nos.execl(\"file.py\", \"file.py\")", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "if test.mp3.endswith('.mp3'):\n    print('Yes')\nelse:\n    print('No')", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int(struct.unpack('<I', pS)[0])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "if all(word.islower() for word in words):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "df.astype(int).to_dense().index.astype(int)", "df.to_sparse(0)"], ["1514553-90", "array = [1, 2, 3]\narray.append(4)\nprint(array)\n# Output: [1, 2, 3, 4]", "variable = []"], ["1514553-71", "array = np.array([i for i in range(10)])\narray = np.repeat(array, 3)", "intarray = array('i')"], ["610883-92", "if object is an instance of a class and has a property 'property':\n    return True\nelse:\n    return False", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "True", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "def getattr(obj, name, default):\n    if obj.has_attr(name):\n        return obj.attr(name)\n    else:\n        return default", "getattr(a, 'property', 'default value')"], ["13902805-83", "set([a, b, c, d])", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "set([a, b, c, d])", "list(set('aaabcabccd'))"], ["13902805-87", "<nooutput>", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "start = 16\nend = 21\nprint(\"The index of sub string 's' is\", start, \"to\", end)", "str.find('s', 16)"], ["674764-33", "5", "x.find('Aloha')"], ["674764-19", "3", "'sdfasdf'.index('cc')"], ["674764-45", "4", "'sdfasdf'.index('df')"], ["674764-64", "str.rfind('a', 0, 4) # returns 1\nstr.rindex('a') # returns 1\nre.Match(r'a', 'abba').start() # returns (0, 1)", "str.find('a')"], ["674764-91", "start = 0\nend = 3\nprint(\"The index of the substring 'g' is\", start, \"and\", end)", "str.find('g')"], ["674764-3", "start = 11\nend = 17\nprint(\"The index of 's' is\", start, \"to\", end)", "str.find('s', 11)"], ["674764-47", "start = 15\nend = 20\nprint(\"The index of 's' is\", str(re.search(\"s\", \"str\", start=15).end()))", "str.find('s', 15)"], ["674764-5", "11 14", "str.find('s', 11, 14)"], ["10194713-64", "def reverse_sort_city_population(city_population):\n    return sorted(city_population.items(), key=lambda t: t[1], reverse=True)\n\nprint(reverse_sort_city_population(city_population))", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "def sorted_dict(d):\n    return sorted(d.items(), key=lambda t: t[1])", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "def reverse_dict(d):\n    return sorted(d.items(), key=lambda t: t[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "def sorted_by_value(d):\n    return sorted(d.items(), key=itemgetter(1))", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "0", "sys.exit(0)"], ["179369-62", "sys.exit(1)", "sys.exit('aa! errors!')"], ["179369-47", "import os\nos.abort()", "sys.exit()"], ["19779790-35", "yesterday = datetime.date.today() - datetime.timedelta(days=1)\nprint(yesterday.toordinal())", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = nvalues[\"col1\"][\"col2\"][\"col3\"].apply(pd.DataFrame)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "urlparse('http://example.com/path?query#fragment') \nReturns:\nscheme: http\nnetloc: example.com\npath: /path\nparameters: {}\nquery: query\nfragment: fragment", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "def get_avg(old_set, new_set):\n    old_arr = np.array(old_set)\n    new_arr = np.array(new_set)\n    return np.average(old_arr, weights=new_arr)\n\nprint(get_avg(old_set, new_set))", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "0bbin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "set(LoD.keys())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "keys = LoD.keys()", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "0bint(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby(['Month', 'Fruit'])['Fruit'].get_group('')", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "import nntplib\nimport urllib\nimport ossaudiodev\n\n# Connect to the news server\nnews = nntplib.NNTP(\"news.example.com\", 119)\n\n# Post an article\narticle = open(\"article.txt\", \"rb\")\nnews.post(article)\n\n# Retrieve a local file\nurl = \"file:///home/user/file.txt\"\nurllib.request.URLopener().retrieve(url, \"file.txt\")\n\n# Post an audio device pause\nossaudiodev.oss_audio_device.post()", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "for entry in os.listdir('file'):\n    if entry.endswith('/'):\n        print(entry)", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "{'a': 1, 'b': 'asdf'}", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "dict = {'a': 1, 'b': 2, 'c': 3}\n\nprint(str(dict).items())\n# Output: ['a', 1], ['b', 2], ['c', 3]\n\nprint(pprint.pformat(dict))\n# Output: {'a': 1, 'b': 2, 'c': 3}", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "json_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "import shutil\nimport os\nimport shutil\n\ndef rename_file(src, dst):\n    if os.path.isdir(dst):\n        os.mkdir(dst)\n    else:\n        shutil.copyfile(src, dst)\n    return dst\n\nrename_file(\"src\", \"dst\")", "os.rename(src, dst)"], ["16389188-53", "pygame.display.gl_set_attribute(attr, value)", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "var_name = context.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "thedict = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3'\n}\n\nthedict = {\n    'key1': 'value1',\n    'key2': 'value2',\n    'key3': 'value3'\n}\n\n# convert keys in dictionary 'thedict' into case insensitive\nthedict = thedict.items(case_insensitive=True)\n\n# print(thedict)\n# Output:\n# [('key1', 'value1'), ('key2', 'value2'), ('key3', 'value3')]", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1['revenue'] = df1['revenue'].combine_first(df2['revenue']) \ndf1['revenue'] = df1['revenue'].set_index('date') \ndf1['revenue'] = df1['revenue'].merge(df2, on='date') \ndf1['revenue'] = df1['revenue'].groupby('date').first()", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "import os\nos.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "a = contextvars.ContextVar.get('a')\nif a is not None:\n    print(a)\nelse:\n    print('No such variable')", "{{request.args.get('a')}}"], ["6591931-80", "12", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "urllib.parse.urlencode('string_of_characters_like_these:%23%40%3D%3F%25%5E%Q%24')", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "import random\n\nrandbytes = random.randbytes(16)\nprint(randbytes)", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "\"\"", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "for key in x:\n    if key == 'c':\n        index = x.index(key)\n        print(index)", "list(x.keys()).index('c')"], ["10484261-51", "list = programs.items()\nlist = list(list.lower().startswith('new york'))", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s.decode('utf-8').encode('utf-8')", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "urllib.parse.quote('Hello%20World') # Output: 'Hello%20World'\nurllib.parse.urlencode({'key1': 'value1', 'key2': 'value2'}) # Output: 'key1=value1&key2=value2'", "urllib.parse.quote_plus('a b')"], ["32751229-20", "def groupby_sum(df, columns):\n    return df.groupby(by=columns).sum()\n\ngroupby_sum(df, ['Y1961', 'Y1962', 'Y1963'])\n\nOutput:\n\nCountry  Item_code  Y1961  Y1962  Y1963\n\nChina     A      10      15      18\nChina     B      12      14      17\nJapan     A      14      17      19\nJapan     B      11      13      16\nIndia     A      13      16      19\nIndia     B      15      18      21", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "3", "sum(((i > 5) for i in j))"], ["10543303-81", "3", "len([1 for i in j if (i > 5)])"], ["10543303-37", "def get_num_greater(j, i): \n    return sum(1 for x in range(j) if x > i) \n\n# Output: \nget_num_greater(5, 3) \n# Output: 2", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "if (a1.any() or a2.any()):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = torch.clamp(my_value, min_value, max_value) \nprint(my_value) # Output: 3.0", "max(min(my_value, max_value), min_value)"], ["14931769-56", "for n in range(10):\n    for i in range(2):\n        print(f'{n} {i}')", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "for i in itertools.product(range(1, 2), repeat=n):\n    print(i)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "0bbin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "0blst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "import time\n\nnow = time.strftime(\"%d %H:%M:%S\")\nprint(time.strftime(\"%d %H:%M:%S\") + \" + 1 day and 3 hours\")", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "0.0", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "import matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n\nim = plt.imread('image.jpg')\n\nax = plt.gca()\n\ncbar = colors.NormalizedColormap(N=256)\n\ncb = plt.colorbar(cbar, ax=ax)\n\nplt.show()", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s = \"hello world\"\nprint(s.rsplit(\" \", 1)[0])\nprint(s.rstrip(\" \"))", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "import numpy as np\nimport pandas as pd\n\ndata = np.array([[1,2,3,4,5],\n               [6,7,8,9,10],\n               [11,12,13,14,15],\n               [16,17,18,19,20]])\n\none = np.array([1,2,3])\ntwo = np.array([1,2,3,4])\n\ndf = pd.DataFrame(data, columns=['a', 'c'])\n\nprint(df.isin(one).isin(two))\n\n# Output:\n# False\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n# True\n#", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "import numpy as np\nimport pandas as pd\n\ndata = np.random.randint(10, size=(5, 2))\n\ndf = pd.DataFrame(data, columns=['a', 'c'])\n\nprint(df.isin(list(range(1, 5))).astype(bool))\n\n# Output:\n# Output:\n# True\n# False\n# True\n# True\n# False", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "def filter_users(userprofile):\n    if userprofile >= 0:\n        return userprofile\n    else:\n        return False", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "list1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nlist2 = ['x', 'y', 'z']\n\ndef make_list_of_lists(test, sentinel):\n    for item in test:\n        if len(item) <= len(sentinel):\n            yield item[:len(sentinel)]\n   \nlist_of_lists = make_list_of_lists(list1, 'g')\nprint(list_of_lists)\n# Output: [['g', 'h', 'i']]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "def group_by(data, key_func):\n    grouped = data.groupby(key_func)\n    return grouped.transform('first')\n\n# Example\ndata = [\n    ['a', 10, 15, 20],\n    ['b', 12, 17, 23],\n    ['c', 14, 19, 26],\n]\n\nresult = group_by(data, key_func=lambda x: x[2])\n\nprint(result)\n\n# Output\n[['a', 15, 20],\n ['b', 17, 23],\n ['c', 19, 26]]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if request.GET.get('title'):\n    return request.GET.get('title')\nelse:\n    return ''", "request.POST.get('title', '')"], ["20222485-17", "def range_accum(n):\n    return [i for i in range(n)]\n\nprint(range_accum(10))", "list(accumulate(list(range(10))))"], ["16436133-47", "def handle_request(mydata):\n    if mydata is None:\n        return json.dumps(dict())\n    return json.loads(mydata)", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "10", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "for match in re.finditer('foobar', 'foobar'):\n    print(match.start(), match.end())", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "string = \"Hello & World\"\n\nprint(string.rsplit(\"&\", 1))\n# Output: ['Hello', 'World']", "s.rfind('&')"], ["8247792-90", "str.rsplit('&', 1)", "s[:s.rfind('&')]"], ["35178812-30", "import pandas as pd\n\nex = pd.DataFrame([[1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]])\n\nprint(ex.index.value_counts())\n\n# Output:\n# Index\n# count\n# 0    2\n# 1    2\n# 2    2\n# 3    2\n# 4    2\n# 5    1\n# 6    1\n\n# Unique values\n# Index\n# count\n# 0    1\n# 1    1\n# 2    1\n# 3    1\n# 4    1\n# 5    1\n# 6    1\n\n# Output:\n# Index\n# count\n# 0    1\n# 1    1\n# 2    1\n# 3    1\n# 4    1\n# 5    1\n# 6    1\n\n# Unique values\n# Index\n# count\n# 0    1\n# 1    1\n# 2    1\n# 3    1\n# 4    1\n# 5    1\n# 6    1", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "array = np.hstack([arr1, arr2, arr3])\nprint(array.tolist())", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = s[0]", "t = tuple(x[0] for x in s)"], ["11205386-94", "soup.find('meta', {'name': 'City'}).attrs['content']", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df = df.pivot_table(index=['upc'], columns='saleid')\ndf.set_index('upc', inplace=True)\nprint(df)", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "import pandas as pd\nimport time\n\ndf = pd.DataFrame({'date': [time.strftime(\"%Y%m%d\") for _ in range(10)]})\n\ndf.to_csv('output.csv', index=False)", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "def replace_nan(a): \n    if np.isnan(a): \n        a = 0\n    return a \n\na = np.array([1, np.nan, 3, np.nan, 5]) \nprint(replace_nan(a)) \n\nOutput:\n[1, 0, 3, 0, 5]", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "min_arr = get_min_array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2, 3])\n\n# Output:\n# <nooutput>", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "\"%d\" % (datetime.now().strftime(\"%A\"),)", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "def dict_to_string(d):\n    return str(d)", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "import numpy as np\n\ndf = np.array([['foo', 1, 2, 3], ['bar', 4, 5, 6]])\n\nresult = df[df['A'] == 'foo']\n\nprint(result)\n\n# Output:\narray([['foo', 1, 2, 3],\n   [4, 5, 6]])", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'column_name': [1, 2, 3, 4, 5]})\n\nresult = df[~df['column_name'] != 4]\n\nprint(result)\n\n# Output\n  column_name\n1          1\n2          2\n3          3\n4          4\n5          5", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'column_name': ['a', 'b', 'c']})\nsome_values = ['a', 'b']\n\nresult = df[~df['column_name'].isin(some_values)]\n\nprint(result)\n\n# Output\n  column_name\n0          c\n1          b\n\\end{code}", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "<nooutput>", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import os\nimport sys\nimport builtin_module_names\nimport modulefinder\n\nbuiltin_module_names = tuple(builtin_module_names.keys())\nmodules = modulefinder.ModuleFinder().modules\n\nprint(builtin_module_names)\nprint(modules)", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1, 0)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import all classes from module some.package", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "def find_indices_of_zero(x):\n    indices = np.flatnonzero(x == 0)\n    return indices", "numpy.where((x == 0))[0]"], ["2428092-52", "response_data = json.dumps(data=dict(a=1, b=2))\nresponse = http.client.HTTPResponse(response_data)\nreturn json.loads(response.get_data())", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "def hexlify(s):\n    return binascii.hexlify(s)\n\ndef unhexlify(hexstr):\n    return binascii.unhexlify(hexstr)", "s.decode('hex')"], ["10824319-49", "s = \"0123456789ABCDEF\"\n\nprint(binascii.hexlify(s)) # Output: 47450420620746865206265737421\n\nprint(binascii.unhexlify(binascii.hexlify(s))) # Output: s", "binascii.a2b_hex(s)"], ["12655007-87", ":\n# (a, b, c)\n# (a, b, c)\n# (a, b, c)", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "x = np.asarray(x)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "def hexlify(data):\n    return binascii.hexlify(data)", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x12345678", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "import os\nos.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')\nprint(os.getcwd())\n# Output: c:\\\\Users\\\\uname\\\\desktop\\\\python", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "import os\nos.chdir('path')", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "200", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "200", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data[\"log(gdp)\"] = None", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "connection.execute(\"commit\")", "dbb.commit()"], ["5352546-44", "def extract_keys(d, keys): \n    return itemgetter(keys)(d)", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "def extract_subset(bigdict, keys):\n    subset = bigdict.items()\n    subset = subset[keys]\n    return subset\n\nprint(extract_subset(bigdict, ('l', 'm', 'n')))\n# Output: {'l': 'm', 'n': 'n'}", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "for key in bigdict.keys('l', 'm', 'n'):\n    print(key)", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", ": \nlist(bigdict.items())\n# Output: [('l', 'm'), ('n', 'o')]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "def decode_json(s):\n    decoder = JSONDecoder()\n    return decoder.decode(s)", "json.load(u)"], ["4940032-13", "str.strip(\"blabla\") # returns \"bla\"\nstr.startswith(\"blabla\") # returns True\nstr.find(\"blabla\", 0, 5) # returns 0", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "str.strip(\"blabla\") # returns \"bla\"", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "def find_string(string, sub):\n    start = 0\n    end = 0\n    result = string.find(sub, start, end)\n    if result != -1:\n        return result\n    else:\n        return -1\n\nstring = \"example.txt\"\nsub = \"blabla\"\n\nresult = find_string(string, sub)\nprint(result)", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "import urllib.request\nurl = 'http://example.com'\nresponse = urllib.request.urlopen(url)", "r = requests.get(url)"], ["4476373-22", "urllib.parse.urlencode(payload)\nurllib.request.urlopen(url, method=\"POST\", data=urllib.parse.urlencode(payload))", "r = requests.get(url, params=payload)"], ["4476373-71", "urllib.parse.urlencode(payload)", "r = requests.post(url, data=payload)"], ["4476373-99", "import urllib.parse\nimport nntplib\n\nurl = 'http://example.com/post_data'\npost_data = {'key1': 'value1', 'key2': 'value2'}\n\nresponse = urllib.parse.urlencode(post_data)\n\nresponse = nntplib.post(url, response)", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "0bbinint('01010101111', 2)"], ["1476-71", "8", "int('010101', 2)"], ["1476-39", "5", "int('0b0010101010', 2)"], ["1476-6", "0bbin(21)"], ["1476-59", "1111111", "int('11111111', 2)"], ["41178532-76", "import pandas as pd\n\ntrace_df = pd.DataFrame({'ratio': [0.5, 0.2, 0.8, 0.4, 0.9]})\n\nprint(trace_df.isin(trace_df['ratio'] > 0).abs())\n# Output: 0.5\n# Expected output: 0.5", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "def get_combinations(a):\n    return itertools.chain.from_iterable(itertools.product(a))\n\n# Output:\n# [('a', 'b'), ('a', 'c'), ('b', 'c'), ('a', 'd'), ('b', 'd'), ('c', 'd')]", "list(itertools.product(*a))"], ["364519-94", "for key, value in sorted(d.items()):\n    print(key, value)", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in sorted(d.items()):\n    print(key, value)", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for dict in sorted(dict.items()):\n    print(dict[1])", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():\n    print(key, value)", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items(), reverse=True):\n    print(key, value)", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "def iterate_sorted_dict(foo):\n    return sorted(foo.items(), key=itemgetter(0))", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "s = \"Hello World!\"\ns = s.translate({'a': '-', 'A': '-'})\nprint(s)\n# Output: 'H-ll W-rld!'", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "import tensorflow as tf\n\na = tf.constant([1, 2, 3])\nprint(tf.cast(a, tf.int32))", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series([], columns=['A', 'B', 'A1R', 'B2', 'AABB4'])\ns.set_index(['A', 'B'])\ns\n\nOutput:\nA  B\n0  0  0\n1  1  0\n2  2  4\n3  3  0\n4  4  0\n5  5  0\n6  6  0\n7  7  0\n8  8  0\n9  9  0\n10 10  0", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "set1 = {1, 2, 3}\nset2 = {4, 5, 6}\n\nprint(frozenset(set1).intersection(set2))\n# Output: set1 = {1, 2, 3}", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "df = pandas.DataFrame(data, columns=list(data.keys()))", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "pd = d.dropna().set_index('Date').apply(lambda x: x['DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "0.4", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "import pandas as pd\n\ndf = pd.DataFrame({'year': [2019, 2019, 2019, 2020, 2020],\n                   'month': [1, 2, 3, 4, 5],\n                   'item': ['a', 'b', 'c', 'd', 'e']})\n\ndf.set_index(['year', 'month']).pivot_table(index='year', columns='month', values='item').reset_index()\n\nOutput:\nyear  month  item\n0  2019  a  1\n     b  2\n     c  3\n     d  4\n     e  5\n1  2020  a  1\n     b  2\n     c  3\n     d  4\n     e  5", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "import pandas as pd\n\ndf = pd.DataFrame({'year': [2018, 2018, 2019, 2019],\n                   'month': [1, 2, 3, 4]})\n\ndf.pivot_table(index='year', columns='month', values='month')\n\nOutput:\nyear  | 2018  | 2019\n---  | ---  | ---\nmonth  | 1     | 3    \n         | 2     | 4", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "<nooutput>", "p1.communicate()[0]"], ["748028-100", "import subprocess\n\n# Run the command and capture the output\nprocess = subprocess.Popen(\"exe\", stdin=subprocess.PIPE, stdout=subprocess.PIPE)\noutput, error = process.communicate()\n\n# Check the return code\nif process.returncode != 0:\n    print(\"The command exe returned an error code: \" + str(process.returncode))\nelse:\n    print(\"The output of exe is: \" + output)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "for element in root.findall('a'):\n    for subelement in element.iterfind():\n        print(subelement.tag, subelement.text)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "for element in a.iterfind():\n    if element.tag != 'a':\n        yield element", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "5", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "a.remove(c)"], ["2793324-93", "a = [1,2,3,4,5,6]\na.pop()  # Output: 6", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5,6]\na.pop()  # Output: 6", "a.remove(6)"], ["2793324-97", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [1, 2, 3, 4]\na.remove(2)  # Output: [1, 3, 4]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", ":\n# 'import subprocess\n# subprocess.check_call(\"otherfunc\", shell=True, args=())'", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "<nooutput>", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "<nooutput>", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "filter(Sample.objects.filter(date__range=(datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)))", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "filter(month='Jan', year='2011')", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "<nooutput>", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "<nooutput>", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "<nooutput>", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df = df.sort_values(by=['col1', 'col2'], axis=1) \ndf.columns = df.columns.map(lambda col: col + '1') \ndf = df.sort_values(by=['col1'], axis=0) \ndf = df.sort_values(by=['col2'], axis=0)", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1 = df1.drop_duplicates().dropna()\nprint(df1)", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "import pandas as pd\n\ndf = pd.DataFrame([[1,2,3,4,5,6], [7,8,9,10,11,12]])\n\nprint(df.mean())\nprint(df.sum())", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "django.http.HttpResponseRedirect('/search/')", "redirect('Home.views.index')"], ["42352887-25", "def get_sorted_keys(things):\n    return sorted(things.items(), key=lambda t: t[1].get('weight', 0))", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import os\nprint(os.path.dirname(os.path.abspath('a_module')))", "print(a_module.__file__)"], ["247770-2", "importlib.resources.path(\"path\")", "print(os.getcwd())"], ["247770-13", "import os\nos.path.abspath(\"amodule\")", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "<nooutput>", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "import time\n\nprint(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'4a4b4c'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "10", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "<nooutput>", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "import datetime\nimport time\n\ndate_string = \"when\"\n\nresult = datetime.datetime.strptime(date_string, \"%d %B %Y\")\nprint(result.strftime(\"%d %B\"))", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "def get_queryset(self, request):\n    if request.user.is_authenticated():\n        return self.model.objects.filter(owner=request.user)\n    else:\n        return super(EntryAdmin, self).get_queryset(request)", "Entry.objects.filter()[:1].get()"], ["29784889-2", "warnings.warn_explicit(\"This is a warning\", UserWarning)", "warnings.simplefilter('always')"], ["22676-23", "import urllib.request\nurl = \"http://www.example.com/songs/mp3.mp3\"\nfilename = \"mp3.mp3\"\nresponse = urllib.request.urlretrieve(url, filename)\nprint(response)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "urllib.request.urlretrieve(\"https://example.com/file.txt\", \"file.txt\")", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import urllib.request\nurl = 'http://www.example.com/'\nresponse = urllib.request.urlretrieve(url)\nprint(response)", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "urllib.request.urlretrieve(\"https://example.com/file.txt\", \"file.txt\")", "r = requests.get(url)"], ["22676-64", "urllib.request.urlretrieve(\"http://example.com/file.txt\", \"10MB\")", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "2.]]", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "for i in range(10):\n    print(i)", "list(reversed(list(range(10))))"], ["20573459-83", "7 days before the current date is 7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "s = b64encode('your string')\nprint(s)\n# Output: SGVsbG8gV29ybGQh", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "mylist = [1, 1, 2, 3, 4, 5]\n\nmylist_copy = mylist[:]\n\nduplicates = Counter(mylist).elements()\n\nprint(duplicates)\n\nOutput:\n[1, 2, 3, 4, 5]", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "import pandas as pd\ndf = pd.read_csv('data.csv')\ndf.to_csv('np.txt', sep='\\t')\n\nimport numpy as np\nnp.savetxt('np.txt', df, delimiter='\\t')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "import pandas\nimport pygame\nimport urllib.request\n\ndf = pandas.read_csv('data/pandas.csv')\n\nprint(pygame.midi.Output.write(df.as_matrix()))\n\nurl = 'c:\\\\data\\\\pandas.txt'\n\nopen(url, 'w').write(str(df))", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.rsplit('-', 1)  # returns ['x', '-', '']", "print(x.rpartition('-')[0])"], ["15851568-9", "last_part = string.rsplit(string, '-', 1) \nprint(last_part[-1])", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "import random\n\nlist = random.randint(100, 1000)\nprint(list)", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "import time\n\n# Using %f with strftime() to get microseconds\nprint(time.strftime(\"%f\", time.gmtime()))", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "for row in [['a', 'b', 'c'], ['d', 'e', 'f']]:\n    print(tab.ljust(4, '|'), end='')\n    for col in row:\n        print(col, end=' ')", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "import pandas as pd\n\ndf = pd.DataFrame([[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]])\n\nprint(df.count())\n\nOutput:\n\n3\n\n# Output should be 3, as there are 3 non-zero values in the dataframe", "df.astype(bool).sum(axis=1)"], ["30693804-5", "def lower_string(string):\n    string = string.translate({ord(char): None for char in string if ord(char) < ord('Z')})\n    return string.replace(' ', '')\n\nprint(lower_string(\"Hello World\"))", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "def remove_non_alphanumeric(text):\n    text = text.lower()\n    text = text.translate({ord(c): None for c in text if c.isalnum()})\n    return text\n\nremove_non_alphanumeric(\"Hello World\")\n# Output: helloworld", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup.find('tag', {'name': 'name')", "print(soup.find('name').string)"], ["2011048-15", "def count_chars(filepath):\n    with open(filepath, 'r') as f:\n        for line in f.readlines():\n            count = len(line)\n        return count", "os.stat(filepath).st_size"], ["2600191-99", "a = [\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"a\",\"b\",\"", "l.count('a')"], ["2600191-23", "Counter(l).count('a') # Output: 3\nstr('abcd').count('b') # Output: 1", "Counter(l)"], ["2600191-53", "Counter(l).count('a') # Output: 3\nstr('abcd').count('b') # Output: 1", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "Counter(l).count('a') # Output: 3\nstr('abcd').count('b') # Output: 1", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "count = Counter(l).get('b', 0) \nprint(count)", "l.count('b')"], ["12842997-15", "import shutil\n\nshutil.copyfile('srcfile', 'dstdir')", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df.combine_first(df['b'], axis=1)\ndf['c'] = df['c'].join(df['a'])\ndf['c'] = df['c'].fillna(method='ffill')", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "def convert_list_to_tuple(t):\n    return tuple(t)", "tuple(l)"], ["16296643-20", "def level1_to_list(level1):\n    return list(level1)", "level1 = map(list, level1)"], ["3880399-74", "logger = logging.getLogger('dataobject')\nlogger.log(logging.INFO, 'Output of pprint(dataobject) is:', file='logFile')", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "import numpy as np\n\na = np.array([True, False, True, False, True])\n\nprint(np.isin(a, [True, False, True]))\n\n# Output:\n# Output:\n# True\n# False\n# True\n# False", "df.loc[df['BoolCol']]"], ["21800169-19", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'BoolCol': [True, False, True, False]})\n\nresult = df.BoolCol.isin([True])\n\nprint(result)\n\n# Output\nTrue\n# Expected output\nTrue\n# Output:\n0\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nTrue\n# Expected output:\n1\n# Output:\nFalse\n# Expected output:\n0\n# Output:\nFalse\n# Expected output:\n0", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "import numpy as np\n\ndef get_indexes(BoolCol):\n    return np.isin(BoolCol, True)\n\nIn [11]:\n\nimport pandas as pd\n\ndef get_indexes(BoolCol):\n    return pd.Index.isin(BoolCol, True)\n\nIn [12]:\n\nimport numpy as np\n\ndef get_indexes(BoolCol):\n    return np.isin(BoolCol, True)\n\nIn [13]:\n\nimport pandas as pd\n\ndef get_indexes(BoolCol):\n    return pd.Index.isin(BoolCol, True)", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "import numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({'BoolCol': [True, True, False, True, False]})\n\nprint(np.isin(df['BoolCol'], [True]))\n# Output:\narray([ True, False])", "df[df['BoolCol']].index.tolist()"], ["299446-100", "import os\nos.chdir('owd')\nprint(os.getcwd())", "os.chdir(owd)"], ["32063985-36", "<div id=\"main-content\">\n</div>", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "def zip_longest(a, b, fillvalue=None):\n    \"\"\"\n    Zip two or more iterables together, returning a generator that aggregates elements\n    from each iterable.\n\n    If the iterables are of uneven length, missing values are filled-in with fillvalue.\n    Iteration continues until the longest iterable is exhausted.\n    \"\"\"\n    if fillvalue is None:\n        fillvalue = '__default'\n    for i in itertools.zip_longest(a, b, fillvalue):\n        yield i\n    for i in b:\n        yield i\n    for i in a:\n        yield i", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "def zip_longest(a, b): \n    return zip(a, b, fillvalue=0) \n\n# Output:\n# [('a', 0, 1), ('b', 2, 3), ('a', 4, 5), ('b', 6, 7)]", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "11", "'abcd}def}'.rfind('}')"], ["20546419-7", "import numpy as np\n\nr = np.random.random_shuffle(r)\nprint(r)", "np.random.shuffle(np.transpose(r))"], ["574236-63", "<nooutput>", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "cursor = conn.execute(\"SELECT * FROM table_name WHERE column_name = ?\", [value])\nresult = cursor.fetchone()\nif result is not None:\n    print(result)", "cursor.fetchone()[0]"], ["4454298-91", "#test firstline\n#test secondline\n#test thirdline", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "True", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "set(t).remove(x) for x in t", "list(set(t))"], ["7961363-86", "set(source_list).remove_duplicates()", "list(set(source_list))"], ["7961363-7", "set(abracadabra).remove(abracadabra)", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(chain.from_iterable(a))", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "list(a)", "numpy.array(a)[0].tolist()"], ["5999747-97", "<td>Address:</td>", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "data to be encoded.decode('utf-8')", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data to be encoded.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "def replace_not_in_array(arr, target_array):\n    return arr.where(~arr.in1d(target_array)).delete(0)", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "def mean(a): \n    return a.mean(axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "writerows([Row(field1='value1', field2='value2')])", "writer.writeheader()"], ["23359886-48", "a[0, 1] = True", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.apply(pd.Series.dropna).apply(pd.DataFrame)", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "import skimage.io as io\nimport matplotlib.image as mpimg\n\n# Load the image\nimage = mpimg.imread('image.jpg')\n\n# Resize the image\nimage = image.resize((x, y), antialias=True)\n\n# Display the resized image\nmpimg.imshow(image)", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "def find_differences(l1, l2):\n    diffs = []\n    for i in range(len(l1)):\n        diffs.append((l1[i] - l2[i]))\n    return diffs\n\nprint(find_differences(l1, l2))", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "<span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">n</span><span class=\"starGryB sp\">g</span><span class=\"starGryB sp\">i</span><span class=\"starGryB sp\">t</span><span class=\"starGryB sp\">a</span><span class=\"starGryB sp\">r</span><span class=\"starGryB sp\">s</span><span class=\"starGryB sp\">p</span><span class=\"star", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "sorted_list = sorted(list5, key=itemgetter('degrees')) \nprint(sorted_list) \n# Output: [10, 8, 6, 4, 2, 1]", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "def secondary_sort(data, key):\n    sorted_data = sorted(data, key=key)\n    return sorted_data.argsort()", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr = 123", "getattr(obj, 'attr')"], ["1960516-75", "'{\"3.9\": \"3.9\"}'", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df = df[df.A.isin(df.A.values.tolist())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(mappable)", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "def count_most_frequent(df, column_name):\n    counts = df[column_name].groupby(df[column_name]).transform('count')\n    return counts.head(100)\n\nprint(count_most_frequent(df['text'], 'text'))", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "import datetime\nimport time\n\nutc_time = datetime.utcnow()\nprint(utc_time)\n\n# Output: \n# 2020-07-22 16:38:26.214400\n\n# Or, if you prefer, you can use the built-in time.gmtime() function:\n\nimport time\n\nprint(time.gmtime())\n\n# Output:\n# 2020-07-22 16:38:26.214400", "datetime.now(pytz.utc)"], ["9262278-9", "<nooutput>", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "import os\nimport subprocess\nimport pty\n\n# Create a background process\nbackground_process = subprocess.Popen([\"python\", \"background.py\"],\n                                     stdout=subprocess.PIPE,\n                                     stderr=subprocess.PIPE)\n\n# Fork a child process\npid, fd = pty.fork()\n\n# Connect the child's controlling terminal to a pseudo-terminal\nos.tcsetpgrp(fd, os.getpid())\n\n# Return the child's process id\nreturn pid", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "for element in myList:\n    if 'how' in element or 'what' in element:\n        index = element.rfind('how')\n        if index != -1:\n            print(index)", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = df.applymap(lambda x: x[:2])\ndf = df.apply(lambda x: x.transpose())\ndf = df.apply(lambda x: x.unpack())", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(xticklabels, rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "count = yourdict.values()\nprint(count.count())", "len(list(yourdict.keys()))"], ["2212433-64", "10", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "import pandas as pd\n\ndf = pd.DataFrame([['a', 1, 2, 3], ['b', 4, 5, 6], ['c', 7, 8, 9]], columns=['col1', 'col2', 'col3'])\n\n# reorder levels\ndf.reorder_levels(list(range(1, 4)))\n\n# take col1 from position 1\ndf.take(1, axis=1)\n\n# concat with other columns\ndf1 = pd.concat([df, df.iloc[:, :-1]], axis=1)\n\n# print(df1)\n\n# Output:\n   col1  col2  col3\n0     a    1    2\n1     b    4    5\n2     c    7    8\n3     a    2    3\n4     b    5    6\n5     c    8    9", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "import subprocess\n\n# Call the subprocess with arguments\nsubprocess.check_call(\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\")", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.heappush(x)\nq.deque.insert(i, x)\nq.PriorityQueue(maxsize)", "q.put((-n, n))"], ["21887754-31", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\n# Output:\narray([[0, 0, 1, 2, 3],\n [0, 1, 2, 3, 4]])", "print(concatenate((a, b), axis=0))"], ["21887754-88", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=1)\nprint(c)\n# Output:\narray([[0, 0, 1, 2, 3],\n   [1, 1, 2, 3, 4]])", "print(concatenate((a, b), axis=1))"], ["21887754-21", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\n# Output:\narray([[0, 0, 1, 2, 3],\n   [1, 1, 2, 3, 4]])", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "import numpy as np\na = np.arange(4)\nb = np.arange(4)\n\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\n# Output:\narray([[0, 0, 1, 2, 3],\n   [1, 1, 2, 3, 4]])", "np.array((a, b))"], ["4356842-88", "401 Unauthorized", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "def get_loc(key, df):\n    return df.index.get_loc(key)\n\ndef idxmax(key, df):\n    return df.idxmax(key)\n\ndef argsort(key, df):\n    return df.index.argsort(key)", "df.index.get_loc('bob')"], ["18730044-52", "def zip_longest(iter1, iter2):\n    \"\"\"\n    Zip two iterables together, filling any missing values with the fillvalue\n    \"\"\"\n    return zip(iter1, iter2, fillvalue=None)\n\ndef itemgetter(iterable, fillvalue=None):\n    \"\"\"\n    Return a callable object that fetches item from its operand using the operand\u2019s __getitem__() method.\n    \"\"\"\n    return iterable(__getitem__=iterable, fillvalue=fillvalue)", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "def delete_char(string, char):\n    return string.translate({char:None})", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "def delete_char(s, char):\n    for i in range(len(s)):\n        if s[i] == char:\n            s = s[:i] + s[i+1:]\n    return s", "re.sub('i', '', 'it is icy')"], ["22187233-75", "def sub(input_, alpha):\n    output = input_\n    for i in range(len(input_)):\n        if input_[i] != 0:\n            output[i] = input_[i] - alpha\n    return output", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "start = 0\nend = 0\nif re.search('[a-zA-Z]', s):\n    start = re.search('[a-zA-Z]', s).start()\n    end = re.search('[a-zA-Z]', s).end()\nprint(s[start:end])", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = map(int, intstringlist)", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "def map_list_to_int(lst):\n    return [int(i) for i in lst]", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "import os\n\nos.listdir('/mydir')\n\n# Output: ['file1.txt', 'file2.txt', 'file3.txt']", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "import os\n\n# List all files in the directory \"/mydir\" with extension \".txt\"\nfiles = os.listdir(\"/mydir\")\n\n# Using scandir() to get an iterator of os.DirEntry objects\nentries = os.scandir(\"/mydir\")\n\n# Using walk() to generate the file names in a directory tree\n# rooted at \"/mydir\"\nroot = \"/mydir\"\nnames = os.walk(root)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "import os\n\n# List all files in the directory \"/mydir\" with extension \".txt\"\nfiles = os.listdir(\"/mydir\")\n\n# List all files in the directory with a recursive call\nfiles = os.scandir(\"/mydir\")\n\n# Generate a directory tree by walking the tree top-down\n# using os.walk()\nfor root, dirs, files in os.walk(\"/mydir\"):\n    print(root)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "def decode_json_string(json_string):\n    decoder = json.JSONDecoder()\n    return decoder.decode(json_string)", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by=['column_name'], ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import urllib.parse\nimport urllib.parse.urlencode\nimport urllib.parse.parse_qs\nimport werkzeug.datastructures\nimport werkzeug.datastructures.Headers\n\nurl = 'http://example.com/api?key=value'\n\ndata = urllib.parse.urlencode({'key': 'value'})\n\nheaders = Headers({'Content-Type': 'application/json'})\n\nresponse = urllib.request.Request(url, data=data, headers=headers)\n\nresponse_data = werkzeug.datastructures.Headers.get(response, 'Content-Type')\n\nprint(response_data)", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "def filter(records, filter_func):\n    for record in records:\n        if filter_func(record):\n            yield record", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted_list = sorted(list, key=itemgetter('points'), reverse=True)", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "0bstruct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json_data = urllib.parse.urlencode(urllib.parse.parse_qs(data))", "json_data = json.loads(unescaped)"], ["18367007-15", "newFileBytes = b'some bytes'\n\nwith open('newFile', 'wb') as newFile:\n    newFile.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "def get_last_key(dict):\n    return dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "10", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "import time\n\nnow = time.gmtime()\nprint(time.strftime(\"%d %m %Y %H:%M:%S\", now))", "datetime.datetime.now()"], ["17794266-82", "# numpy.ndarray.argmin(x)", "max(x.min(), x.max(), key=abs)"]]}