{"(2, False, False)": [["11840111-96", "d1[k] / d2[k] for all keys k in d1 and d2", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "d1['key'] = d1['key']/d2['key']", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import urllib.request\nimport gzip\n\ndef download_file(url):\n    filename = url.split('/')[-1]\n    file_path = 'file.gz'\n    response = urllib.request.urlopen(url)\n    with gzip.GzipFile(file_path, 'wb') as f:\n        f.write(response.read())\n    return file_path\n\ndownload_file(\"http://randomsite.com\")", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import urllib.request\n\nurl = \"http://randomsite.com/file.gz\"\nfile_name = \"file.gz\"\n\nresponse = urllib.request.urlretrieve(url, file_name)\n\nprint(\"File downloaded to\", file_name)", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "\u00ac(a \u2227 b)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "30 days from today is the answer", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "import datetime\nimport dateutil.relativedelta\n\ndate = datetime.date.today()\ndate_two_months_from_today = date + dateutil.relativedelta.relativedelta(months=2)\n\nprint(date_two_months_from_today)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "import test1\ntest1.main()", "subprocess.call('test1.py', shell=True)"], ["843277-70", "if hasattr(obj, 'attr_name'):", "hasattr(obj, 'attr_name')"], ["2231663-53", "[list1 = [1, 2], list2 = [3, 4], list3 = [5, 6], list4 = [7]]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "def slice_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst))]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "'s'", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "the code block that implements this rationale", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df_zero = df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "<nooutput>\nThe code generation task requires a string of code to be generated as the output", "webbrowser.open('http://example.com')"], ["4906977-61", "The answer code is:\n\nimport os\n\nprint(os.environ[\"HOME\"])", "os.environ['HOME']"], ["4906977-33", "the value of the environment variable \"HOME\"", "os.environ['HOME']"], ["4906977-98", "import os\n\nprint(os.environ)", "print(os.environ)"], ["4906977-9", "The answer code is os.environ.items()", "os.environ"], ["4906977-77", "Otherwise, return the default value", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "The answer code is dictionary.sort(key=lambda x: x.values())", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "for key, value in dictionary.items():\n    if isinstance(value, list):\n        yield value", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats'] = df['stats'].str.split(',')\ndf['col1'] = df['stats'][:2]\ndf['col2'] = df['stats'][2:]", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(',')", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line = line.replace('!@#$', '')", "line.translate(None, '!@#$')"], ["3939361-33", "line.replace('!@#$', '')", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", ":", "string.replace('1', '')"], ["3939361-89", "line.replace('!@#$', '')", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t = t - 101", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "the time object with 5 hours subtracted from it", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "12-digit random number: 1234567890123456789", "random.randint(100000000000, 999999999999)"], ["13496087-95", "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'http://www.google.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\n\nprint(soup.find('title'))\n# Output: <title>Google</title>", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.goto(0)", "root.lift()"], ["1823058-26", "for i in range(value):\n    print(str(i), ',' )", "'{:,}'.format(value)"], ["14406214-5", "ax.set_xticks([]);\nax.set_xticklabels([])\nax.set_xlabel('');", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.invert_xaxis()", "ax.xaxis.tick_top()"], ["10565598-66", "The answer code would be if (b.count(a) == len(a)):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "numpy.in1d(b, a).all()"], ["13557937-8", "a list of 8 binary values, each representing the binary representation of the corresponding decimal number", "list('{0:0b}'.format(8))"], ["13557937-9", "8 in binary is b'1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "The answer code is:\n\nimport time\n\nprint(time.strftime(\"%d %m %Y %H:%M:%S\"))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "The code to reverse a list L is L.reverse()", "L[::(-1)]"], ["3940128-21", "the code snippet: \n\n\ndef reverse(L): \n    return L[::-1]", "L.reverse()"], ["89228-90", "import subprocess\n\nproc = subprocess.Popen(\"ls -l\", stdout=subprocess.PIPE)\n\noutput, err = proc.communicate()\n\nif proc.returncode == 0:\n    print(output)\nelse:\n    print(err)", "from subprocess import call"], ["89228-91", "\"python -m some_command arg1 arg2 arg3\"", "os.system('some_command with args')"], ["89228-25", "the code block that implements this rationale", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", "the output of executing the external command with the given arguments", "stream = os.popen('some_command with args')"], ["89228-97", "import subprocess\n\ndef echo_hello_world():\n    subprocess.call(\"echo Hello World\")\n\necho_hello_world()", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "the code snippet \"import subprocess; subprocess.check_call('ls -l')\", which will execute the external command and return the output", "call(['ls', '-l'])"], ["5137497-23", "os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "The answer code would be os.path.dirname(path)", "os.path.dirname(path)"], ["5137497-66", "import os\n\npath = 'path'\n\ncanonical_path = os.path.realpath(path)\n\nprint(canonical_path)", "os.path.realpath(path)"], ["5137497-91", "import os\n\ndef get_current_dir():\n    return os.getcwd()", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "The full path of the current directory can be found using the os.getcwd() function", "full_path = os.path.realpath(__file__)"], ["14961562-66", "s = s.split(' ')\nlist_of_ints = [int(i, 16) for i in s]", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = df['DateObj'].apply(str)", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "The code block that implements this rationale is:\n\ndef generate_permutations(list1, list2): \n    # create a list of all combinations \n    result = [] \n    for i in range(len(list1)): \n        result.append([list1[i], list2[i]]) \n    return result", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "list(permutations([1, 2, 3]))", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, sep='\\t', engine='python')", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "To get rid of the Tkinter root window, use the command root.destroy() in Python", "root.destroy()"], ["2225564-15", "files = [f for f in os.listdir('.') if f.startswith('0') and f.endswith('.jpg')]", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "pd.pivot_table(df, index='order', values='sample').reset_index()", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle and then a = pickle.load(open('afile', 'rb')) and pickle.dump(a, open('afile', 'wb'))", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "(\"phrase\", \"phrase\")", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", ":\n\nimport csv\n\nwith open('output.csv', 'w', encoding='utf-8') as output_file:\n    writer = csv.writer(output_file, delimiter=';')\n    writer.writerow(['Name', 'Age', 'Country'])\n    writer.writerow(['John', 25, 'USA'])\n    writer.writerow(['Jane', 23, 'UK'])\n    writer.writerow(['Paul', 21, 'Germany'])", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data.sub(1)", "data.set_index('Date').diff()"], ["28901311-21", "The answer code would be A.index(x) for x in B", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "SELECT * FROM Task WHERE time_spent > 3;", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", "the current date and time in the format 'YYYY-MM-DD HH:MM:SS'", "datetime.datetime.now()"], ["415511-29", "15:38:05", "datetime.datetime.now().time()"], ["415511-26", "str(datetime.now().strftime('%H:%M:%S'))", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "str(datetime.now())", "str(datetime.now())"], ["415511-33", "\"12:34:56\"", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "array([[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.iloc[0], df.iloc[-1]", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "2010-05-24", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "The code snippet df.loc[:, df.isin(df.nonzero()).index].mean() can be used to calculate the mean of the nonzero values' indices of df", "np.flatnonzero(x).mean()"], ["5508352-50", "index = [0, 2, 4]", "a[tuple(b)]"], ["2233917-10", "(int, int, int)", "tuple(map(int, input().split(',')))"], ["2233917-8", "a function that takes in a tuple of integers from the user as input and returns the sum of the tuple", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticks(ax.get_xticks(), rotation=45)", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "groupby('STNAME', 'COUNTY_POP').agg(sum).groupby('STNAME').sum()", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "a pivot table with the values of the 'Close' column aggregated by the values of the 'Close' column and the index of the dataframe as the index and the values of the 'index.time' column as the columns", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "a = [int(x) for x in input().split()]", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "yourdata[::-1]", "sorted(yourdata, reverse=True)"], ["13237941-56", "sorted(yourdata, key=lambda x: x['subkey'], reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "yourdata.sort(key=lambda d: (d['key'], -d['subkey'])).reverse()", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "a function that takes a networkx graph, a position, and a list of labels as input, and returns a list of nodes with the given labels at the specified position", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "the common prefix of the two paths, which is '/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", ": 'log/'", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "if myobject:\n    return getattr(myobject.id, 'number')", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X[:, :, np.prod(X.shape[1:])]", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "[((0, 0), (1, 0), (0, 1), (1, 1)) , ((0, 0), (1, 0), (0, 1), (1, 1)) , ((0, 0), (1, 0), (0, 1), (1, 1)) , ((0, 0), (1, 0), (0, 1), (1, 1))]", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "1 off delicious 5 ham", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "6 random numbers between 1 and 50", "random.sample(range(1, 50), 6)"], ["13628725-59", "The answer code is import random\nimport string\nimport numpy as np\n\ndef generate_random_numbers():\n    # generate six unique random numbers in the range of 1 to 49\n    random_list = []\n    for i in range(6):\n        random_list.append(random.randint(1, 49))\n    return random_list", "random.sample(range(1, 50), 6)"], ["15940280-74", "import time\n\ndef get_utc_time():\n    return time.strftime(\"%Y-%m-%d %H:%M:%S\")\n\n# Output: 2021-08-24 14:38:42", "datetime.utcnow()"], ["12280143-55", "import os\nos.chdir('..')", "os.chdir('..')"], ["15457504-91", "k.config['font'] = 'Purisa'\nk.config['font_size'] = 12", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "The answer code is df = pd.DataFrame(my_list, columns=['key', 'value'])", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if one is in d.values():\n    print(\"Yes\")\nelse:\n    print(\"No\")", "'one' in list(d.values())"], ["8214932-94", "d.values()[0] in ['one']", "'one' in iter(d.values())"], ["7125009-76", "<nooutput>", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.legend(loc='upper right', fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "re.sub(\"[\\s]+\", \"\", sentence).strip()", "sentence.replace(' ', '')"], ["8270092-68", "re.sub('[\\s]+', '', sentence).strip()", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "def remove_whitespace(sentence):\n    return sentence.strip()", "sentence.strip()"], ["8270092-87", "re.sub(\"[\\s]+\", \"\", sentence).strip()", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence.replace(\" \", \"\")", "sentence = ''.join(sentence.split())"], ["14591855-94", "import h5py\nimport pandas as pd\n\nwith h5py.File('/home/.../data.h5', 'r') as f:\n    df = pd.DataFrame(f['/home/.../data.h5']['/firstSet'])", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", "str = open('very_Important.txt', 'r').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "The code should look like this:\n\n\nimport imaplib\nimport urllib.error\nimport time\n\ndef handle_urlfetch_error(url, max_retries, retry_delay):\n    try:\n        return urlfetch_request(url)\n    except urllib.error.URLError as e:\n        if max_retries > 0:\n            print(\"Retrying after {} seconds\".format(retry_delay))\n            time.sleep(retry_delay)\n            return handle_urlfetch_error(url, max_retries-1, retry_delay)\n        else:\n            print(\"Max retries reached\")\n            raise", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "mydict.items(sorted(mydict.items(), key=lambda t: t[1], reverse=True))", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "'John'", "first_name = request.args.get('firstname')"], ["13279399-5", "the code snippet data = request.form.get('firstname')", "first_name = request.form.get('firstname')"], ["3278850-59", "The code to do this is:\n\nimport pandas as pd\n\ndf = pd.read_csv('file.txt', sep='\\n')", "txt = open('file.txt').read()"], ["14043080-28", "2021", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "Entry.objects.filter(id__ne=3)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "from bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(html, 'html.parser')\n\ndiv_blocks = [div for div in soup.select('div')]", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgbstr = tuple(int(x, 16) for x in rgbstr.replace('0x', '').lower())", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "def reverse_string(s): \n    return s[::-1]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "# This is the end of the program.", "sys.exit()"], ["73663-36", "sys.exit()", "quit()"], ["73663-66", "try:\n        # code to execute the script\n    except Exception as e:\n        print(\"Some error message\")", "sys.exit('some error message')"], ["21974169-23", "Transaction:\nSTART TRANSACTION\n  COMMIT\n\nOutput:\nTransaction committed", "con.commit()"], ["11269575-66", "subprocess.check_output(['espeak', text])", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "int(s)", "int(Decimal(s))"], ["1094717-69", "int(str)", "int(s.split('.')[0])"], ["31957364-53", "For example, A @ B", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "subprocess.run('rm -r some.file', shell=True)", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.pop()", "e = next(iter(s))"], ["5868374-42", "datetime.strptime(datestr, '%Y-%m-%d')", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "base64.b64encode(open('pdf_reference.pdf', 'rb').read()).decode('ascii')", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "the code snippet os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "import os\nos.chdir('new_directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "os.chdir(\"new_directory\")", "os.chdir('.\\\\chapter3')"], ["1299855-22", "to use the Python library Mechanize to upload a file", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "True", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "True", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "for div in soup.find_all('div', class_='comment-'):\n    print(div.attrs)", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "plt.cla()", "plt.cla()"], ["13156395-50", "import json\n\nwith open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = json.load(f)\n\n# do something with data", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "import json\nimport codecs\n\nwith open('sample.json', 'r', encoding='utf-8') as f:\n    data = json.load(f)\n\n# Add a BOM (byte order mark) to the file if it's not already there\nif not codecs.BOM_UTF8 in f.mode:\n    f.seek(0, 0)\n    f.write(codecs.BOM_UTF8)\n\n# Write the data back to the file\nf.write(data)", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "import sys\n\nif __name__ == '__main__':\n    print(\"Goodbye!\")\n    sys.exit()", "sys.exit(0)"], ["8751653-82", "10.0 * (int(s2, 2) / 2)", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "8.5", "float(int('-0bstruct.unpack('d', b8)[0]"], ["4789021-9", "def is_member(user):\n    if user.is_authenticated:\n        if user.is_staff or user.is_superuser:\n            return True\n        else:\n            return user.groups.filter(name='Member').exists()\n    else:\n        return False", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "user in ['group1', 'group2']", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "def find_rows(vals, (0,1)):\n    return vals[(vals[:,0]==0) & (vals[:,1]==1)]", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "os.chdir(os.path.dirname(script_path))", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "The relevant code is df.repartition(1).coalesce(1).write.csv('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "with open('mycsv.csv', 'w', encoding='utf-8') as f:\n    df.to_csv(f, index=False)", "df.write.csv('mycsv.csv')"], ["8092877-26", "a list of tuples [(1, 4), (2, 5), (3, 6)]", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "def split_by_field(data, field):\n    for item in data:\n        yield from itertools.groupby(item, key=lambda x: x[field])", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "list(df['a'])", "df['a'].values.tolist()"], ["23748995-42", "df['a'].values", "df['a'].tolist()"], ["20205455-79", "import requests\nfrom bs4 import BeautifulSoup\n\nresponse = requests.get('https://example.com')\nsoup = BeautifulSoup(response.text, 'html.parser')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a = a[:, :3]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "import subprocess\n\ndef get_output(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output, err = proc.communicate()\n    return output\n\nprint(get_output(\"echo 'foo'\"))", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'].unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.isdir('/the/dir/') and os.path.isfile(filename)", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "The answer code is myDict = dict(myListOfTuples)", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", ": \nsorted_list = sorted(list_of_dicts, key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "the code block above", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "1", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "difflib.compare(file1, file2)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "If any of the values are floats, then the answer will be a float", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(x) for x in lst if isinstance(x, tuple) and len(x) == 2 and len(str(x[0])) == 8]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = [str(x).replace('.', '0.') for x in lst], where str(x).replace('.', '0.') replaces all the decimal points in the list elements with 0s", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0][1] + A[1][0]", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 1:2] and a[1, :] and a[2, 1:] respectively", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "a list containing the tags a and div", "soup.find_all(['a', 'div'])"], ["931092-70", "'dlroW olleh'", "'hello world'[::(-1)]"], ["931092-64", "s = ['z', 'y', 'x', 'w', 'v', 'u', 't', 's']\n\ndef reverse_list(s):\n    return s[::-1]\n\nreverse_list(s) # Output: ['s']", "s[::(-1)]"], ["931092-5", "def reverse_string(s): \n    return s[::-1] \n\nreverse_string('foo')  # 'oof'", "''.join(reversed('foo'))"], ["931092-74", "reversed(string)", "''.join(reversed(string))"], ["931092-65", "reversed(\"foo\")", "'foo'[::(-1)]"], ["931092-99", "The answer code is:\n\ndef reverse_string(s): \n    return s[::-1]", "a_string[::(-1)]"], ["931092-20", "a_string[::-1]", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", ": \ndef reverse(s): \n    return s[::-1]", "''.join(reversed(s))"], ["163542-7", "In this case, the string should be b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "'grep f one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "df.apply(pd.to_numeric).normalize()", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "str(i)", "str(i)"], ["961632-44", "str(a)", "a.__str__()"], ["961632-33", "a = 5\nstr(a)", "str(a)"], ["27318022-32", "import sys\nresult = sys.stdin.read()", "result = sys.stdin.read()"], ["40055835-26", "A = A - B", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df = df.drop(df.index[start_remove:end_remove + 1])", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(df.index[start_remove:end_remove + 1])", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "arr.indices[mask]", "numpy.where(mask)"], ["32533944-71", "import pandas as pd\ndf = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "d.to_dict('list').tolist().map(pd.DataFrame.from_dict).to_frame()", "pd.DataFrame(d)"], ["1883604-86", "'file.gz'", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "the code snippet driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "if (somestring.lower().find(\"blah\") != -1):\n    print(\"Yes\")\nelse:\n    print(\"No\")", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if \"substring\" in string:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "string.find('substring')"], ["3437059-83", "s.find('is') > -1", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "import myfunction\nmyfunction()", "globals()['myfunction']()"], ["3061761-63", "ndarray.shape(a)", "a.shape"], ["3061761-55", "ndarray.shape(a)", "N.shape(a)"], ["3061761-89", ":\ndef get_dimensions(a):\n    return len(a), len(a[0])", "N.shape(a)"], ["3061761-31", "ndarray.shape(a)", "a.shape"], ["13291539-54", "0.00582811585976 is converted to float", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(dict.items())", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "words = list(myfile.split())", "words = open('myfile').read().split()"], ["7717380-65", "ndarray(a, dtype=object)", "a = np.array(a)"], ["9304908-37", "The query should be \"SELECT * FROM table_name WHERE value IN (1, 4, 7)\"", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", ":\n\ndef case_insensitive_compare(string1, string2):\n    # check if both strings are of the same length\n    if len(string1) != len(string2):\n        return False\n    # compare each character of the strings\n    for i in range(len(string1)):\n        if string1[i] != string2[i]:\n            return False\n    return True\n\nreturn case_insensitive_compare(string1, string2)", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "the code snippet:\n\ndef case_insensitive_string_compare(string1, string2):\n    # code to perform case-insensitive string comparison\n    return string1.lower() == string2.lower()", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "def compare_case_insensitive(s1, s2):\n    # Compare two strings case-insensitively\n    s1 = s1.lower()\n    s2 = s2.lower()\n    return s1.find(s2) != -1", "(string1.lower() == string2.lower())"], ["319426-70", "True if the strings are identical case-insensitively, False otherwise", "(first.lower() == second.lower())"], ["319426-18", "first.lower() == second.lower()", "(first.upper() == second.upper())"], ["15455388-38", "The dataframe should contain the keys and values from the dictionaries in the original dictionary d", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "df['col5'].groupby(df['col2']).transform('count')", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "your_obj.x", "getattr(your_obj, x)"], ["3743222-35", "the datetime.date() function", "datetime.datetime.now().date()"], ["3743222-73", "def datetime_to_date(datetime_string):\n    date = datetime_string.split('T')[0]\n    year = datetime_string.split('T')[1]\n    month = datetime_string.split('T')[2]\n    day = datetime_string.split('T')[3]\n    return date, year, month, day", "datetime.datetime.now().date()"], ["12496531-86", "A.sort(axis=0)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s.lower()", "s.lower()"], ["6797984-49", "s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "The code to achieve this is session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "global_var = 'bob'", "globals()['something'] = 'bob'"], ["14766194-35", "a.shape[0] == 2 and a[1] == 2", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "ndarray.to_array()", "np.zeros((3, 3)).ravel()"], ["15579649-73", "a numpy structured array with the same keys and values as result", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "print(\"Goodbye!\")", "sys.exit(0)"], ["36139-44", "the sorted list sorted_list", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "mylist.sort()", "mylist.sort()"], ["36139-32", "The code snippet to achieve this is:\nlist.sort()", "list.sort()"], ["5280178-72", "import file \n\n# Load the contents of the file into the console\nfile.content.copy()\n\n# Print the contents of the file\nprint(file.content)", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "the code snippet if test.endswith(('.mp3', '.avi')):", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int(struct.unpack('<H', pS)[0]) and int(struct.unpack('<H', pS)[1])", "struct.unpack('h', pS[0:2])"], ["3668964-35", "all(word.isupper() for word in words)", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "pd.to_sparse(df, index=False, dtype=int)", "df.to_sparse(0)"], ["1514553-90", "np.array([])", "variable = []"], ["1514553-71", "The answer code would be arr = [i]", "intarray = array('i')"], ["610883-92", "if (a.has_property):\n    print(\"Object 'a' has the property 'property'.\")\nelse:\n    print(\"Object 'a' does not have the property 'property'.\")", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "if (typeof(a) === 'object' && a.hasOwnProperty('property')) {\n  console.log('Object ' + a.property + ' has the property');\n} else {\n  console.log('Object ' + a + ' does not have the property');\n}", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "a.property = 'default value'", "getattr(a, 'property', 'default value')"], ["13902805-83", "['a', 'b', 'c', 'd']", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "['a', 'b', 'c', 'd']", "list(set('aaabcabccd'))"], ["13902805-87", ":\n\ndef unique_chars(s):\n    unique_chars = set()\n    for char in s:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return unique_chars", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "17", "str.find('s', 16)"], ["674764-33", "5", "x.find('Aloha')"], ["674764-19", "4", "'sdfasdf'.index('cc')"], ["674764-45", "5", "'sdfasdf'.index('df')"], ["674764-64", "the index of the first occurrence of 'a' in the string str", "str.find('a')"], ["674764-91", "def find_index(str, sub_string): \n    for i in range(len(str)): \n        if str[i] == sub_string: \n            return i \n    return -1", "str.find('g')"], ["674764-3", "11", "str.find('s', 11)"], ["674764-47", "17", "str.find('s', 15)"], ["674764-5", "11", "str.find('s', 11, 14)"], ["10194713-64", "cityPopulation = {k: v[::-1] for k, v in cityPopulation.items()}", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "u.sort(key=lambda x: x[1], reverse=True)", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", ":\ndef reverse_dict(d):\n    return {v: k for k, v in d.items(reverse=True)}", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "d.values().sort()", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "#!/bin/bash\n\nif [ $# -eq 1 ]; then\n  if [ \"$1\" = \"0\" ]; then\n    exit 0\n  else\n    exit 1\n  fi\nelse\n  echo \"Incorrect number of arguments\"\n  exit 1\nfi", "sys.exit(0)"], ["179369-62", ":\n\nimport sys\nsys.exit('aa! errors!')", "sys.exit('aa! errors!')"], ["179369-47", "The code snippet is sys.exit() and the answer is this code snippet", "sys.exit()"], ["19779790-35", "yesterday = datetime.today() - datetime.timedelta(days=1)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "df = pd.DataFrame(nvalues)", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "the code snippet href = re.search('follow?page', url).group()", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "the mean of the two arrays", "np.mean(np.array([old_set, new_set]), axisbin(ord('P'))"], ["11399384-83", "set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "The answer code is set(LoD.keys())", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "list(LoD.keys())", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "The code to achieve this is:\nlist = [int(x[i]) for i in range(len(x))]", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "a DataFrame with two columns, 'Month' and 'Fruit', containing the grouped data", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "import requests\n\nurl = 'https://www.mysite.com/'\n\nusername = 'username'\npassword = 'pwd'\n\nresponse = requests.get(url, auth=username, auth=password)", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "a list of folders in the zip file that end with a '/' character", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "def remove_spaces(d): return ''.join(d.values()).replace(\" \", \"\")", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "The code block that implements this rationale is:\n\ndict_str = json.dumps(dict)", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "the variable json_data containing the loaded json data", "json_data = json.loads(json_string)"], ["2759067-52", "os.rename(src, dst)", "os.rename(src, dst)"], ["16389188-53", "window.center()", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "request.args.get('var_name')", "self.request.get('var_name')"], ["3296499-25", "the_dict = thedict.lower()", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1.merge(df2, on='revenue', how='outer')", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", ":\nimport os\nos.chdir('C:/Users/Name/Desktop')", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "request.args.get('a')", "{{request.args.get('a')}}"], ["6591931-80", "1024", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "'string_of_characters_like_these%23%40%3F%25%5E%Q%23'", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "123.456", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", ":\n\npath = path.split('/') \nlast_part = path[-1] \nprint(last_part)", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "x['c']", "list(x.keys()).index('c')"], ["10484261-51", "list = [program for program in programs if program.lower() == 'new york']", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "the modified string with special characters replaced by their corresponding %xx escape", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "a function that takes a string as an argument and returns a properly encoded URL-safe version of the string", "urllib.parse.quote_plus('a b')"], ["32751229-20", "df['Y1961'] + df['Y1962'] + df['Y1963']", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "4", "sum(((i > 5) for i in j))"], ["10543303-81", "3", "len([1 for i in j if (i > 5)])"], ["10543303-37", "The syntax for this is j.count(i)", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "a1.any(a2)", "np.any(np.in1d(a1, a2))"], ["9775731-24", "def clamp(my_value, min_value, max_value): \n    if my_value < min_value: \n        return min_value \n    elif my_value > max_value: \n        return max_value \n    else: \n        return my_value", "max(min(my_value, max_value), min_value)"], ["14931769-56", "itertools.combinations(range(2**n), n)", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "list(itertools.combinations(range(2**n), n))", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "000, 001, 010, 011, 100, 101, 110, 111", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "itertools.combinations(range(2), 3)", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "import datetime\nnow = datetime.now()\nprint(now + timedelta(days=1, hours=3))", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "0.45", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "plt.imshow(im, cmap=plt.get_cmap('RdBu'), ax=ax, colorbar=True)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "def remove_first_and_last_lines(s):\n    return s[1:-1]", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "the code block that implements this rationale:", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "the value of the 'a' and 'c' columns in the 'data' dataframe", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "Users = Users.filter(userprofile__level >= 0)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "list_of_lists = [[x for x in test if x != '_'] for test in test]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "to use the Python built-in function groupby() which takes a sequence as an argument and returns an iterator of groups, or collections of items that are similar", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "if 'title' in request.POST:\n    return request.POST['title']\nelse:\n    return ''", "request.POST.get('title', '')"], ["20222485-17", "[i for i in range(10)]", "list(accumulate(list(range(10))))"], ["16436133-47", "if (mydata is None or not mydata):\n    mydata = {}", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "11", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "'foo'", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "def cut_string(s, delimiter):\n    return s.split(delimiter)[1]", "s.rfind('&')"], ["8247792-90", "str.split('&')", "s[:s.rfind('&')]"], ["35178812-30", "the number of unique values in the column 'A' in the pandas dataframe ex", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "arr = np.array([list1, list2, list3])", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = s[0]", "t = tuple(x[0] for x in s)"], ["11205386-94", "<meta name=\"City\">\n<content>New York</content>", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot(index='saleid', columns='upc')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "the code snippet os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "import pandas as pd\ndf.to_csv(filename, index=False, sep='\\t', engine='python', date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "The answer code is a = a.fillna(0)", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "np.min(arr1, arr2, arr3)", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "def get_day_of_week(dt):\n    day = dt.strftime(\"%A\")\n    return day[:3]", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "the code snippet:\n\nd = {'a': 'hello', 'b': 'world'}\n\ndef to_string(d):\n    return ', '.join(map(str, d.items()))", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "a boolean array where True indicates that the row should be selected", "df.loc[df['column_name'] != some_value]"], ["17071871-51", ":\n\ndf = df[df['column_name'] not in some_values]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df.loc[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df[\"B\"] == \"one\" or \"three\"]", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import module_list = [\n    'importlib.util.find_module',\n    'importlib.machinery.SourceFileLoader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib.util.module_from_spec',\n    'importlib.util.get_loader',\n    'importlib.util.spec_from_file_location',\n    'importlib.util.find_spec',\n    'importlib", "help('modules')"], ["12362542-44", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "from some.package import *", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "the code snippet", "numpy.where((x == 0))[0]"], ["2428092-52", "{\n    \"data\": [\n        {\n            \"name\": \"John\",\n            \"age\": 25\n        },\n        {\n            \"name\": \"Jane\",\n            \"age\": 23\n        }\n    ]\n}", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "s.encode('hex')", "s.decode('hex')"], ["10824319-49", "s.decode('hex')", "binascii.a2b_hex(s)"], ["12655007-87", "list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "the code snippet str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "str(adict)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", "The answer code is x.astype(np.float64)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "0x12345678", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "0x10000000000000000", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "import os\nos.chdir(path)", "os.chdir(path)"], ["1949318-13", "200", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "200", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "200", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "200", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "the renamed dataframe data with the column 'gdp' renamed to 'log(gdp)'", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "nothing, since this is a code generation task and no output is expected", "dbb.commit()"], ["5352546-44", "For example, my_dict.filter(key__startswith='l', m='m', n='n') would return a subset of the dictionary's key-value pairs with keys matching 'l', 'm', or 'n'", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "bigdict[('l', 'm', 'n')]", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "a list of items from bigdict where the keys are present in ('l', 'm', 'n')", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "bigdict.items()[list('lmn')]", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "The answer code is json.loads(u)", "json.load(u)"], ["4940032-13", "if (file_name == 'example.txt' and string_to_search == 'blabla'):\n    print('Found')\nelse:\n    print('Not Found')", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "The string 'blabla' is found in the text file 'example.txt'", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "The function search_string can be used to search for the string blabla in the file example.txt", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "302 Found", "r = requests.get(url)"], ["4476373-22", "The answer code is response = requests.get(url, params=payload)", "r = requests.get(url, params=payload)"], ["4476373-71", "url + '?' + urlencode(payload)", "r = requests.post(url, data=payload)"], ["4476373-99", "import requests\n\nurl = 'http://example.com/api'\ndata = {'post_data': 'value1=1&post_data=value2=2'}\nresponse = requests.post(url, data=data)\n\n# print(response.text)", "post_response = requests.post(url='http://httpbin.org/post', json=post_databin(173)"], ["1476-88", "5", "int('01010101111', 2)"], ["1476-71", "5", "int('010101', 2)"], ["1476-39", "45", "int('0bbin(21)"], ["1476-59", "6", "int('11111111', 2)"], ["41178532-76", "the code snippet trace_df.query('ratio > 0').count() / len(trace_df), where trace_df is the dataframe and ratio is the column name", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "list(itertools.combinations(a, r=2))", "list(itertools.product(*a))"], ["364519-94", "for key, value in d.items():", "it = iter(sorted(d.items()))"], ["364519-100", "for key, value in d.items():", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key, value in dict.items():", "return sorted(dict.items())"], ["364519-33", "for key, value in dict.items():\n    yield key", "return iter(sorted(dict.items()))"], ["364519-52", "for key, value in sorted(foo.items(), key=lambda t: t[1]):", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "for key in sorted(foo):\n    #code to process the key and its value", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "The answer code is s = re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s)", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "tf.convert_to_tensor([1, 2, 3], dtype=tf.int32)", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series([['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "The code can be written as:\n\nd1 = {'a': ['a1', 'a2'], 'b': ['b1', 'b2']}\nd2 = {'a': ['a1', 'a2'], 'b': ['b3', 'b4']}\n\nresult = d1.intersection(d2)\nprint(result)\n\n# Output: {'a': ['a1', 'a2'], 'b': ['b1', 'b2']}", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "import pandas as pd\ndata = [('John', 25, 'Male'), ('Jane', 24, 'Female'), ('Mike', 23, 'Male'), ('Alice', 22, 'Female')]\ndf = pd.DataFrame(data, columns=['name', 'age', 'gender'])", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "df = pd.DataFrame(d, columns=['Date', 'DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "5.5", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "a pivot table with 'year', 'month', and 'item' as the index, and the columns containing the corresponding values from the 'value' column of the dataframe 'df'", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot(index=['year', 'month'])", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", ":\n\n\nimport subprocess\n\np1 = subprocess.Popen(\"p1\", stdout=subprocess.PIPE)\nstdout, stderr = p1.communicate()\n\nif p1.returncode == 0:\n    output = stdout.decode()\nelse:\n    output = \"Process exited with return code {}\".format(p1.returncode)", "p1.communicate()[0]"], ["748028-100", "For example, output = subprocess.check_output('exe', shell=True)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "for element in a.findall('element'):\n    print(element.attrib)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "[x for x in a.iter('subelements', exclude_root=True)", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "2 is the next greatest number in the list, so the answer is num_list[0] + 1", "min([x for x in num_list if x > 2])"], ["2793324-81", "a = [1, 2, 3]\na.remove(\"b\")  # returns [1, 2, 3]", "a.remove('b')"], ["2793324-12", "a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,", "a.remove(c)"], ["2793324-93", "a = [i for i in a if i != 6]", "a.remove(6)"], ["2793324-3", "a = [1,2,3,4,5] -> a = [1,2,3,4,5]", "a.remove(6)"], ["2793324-97", "a = [1, 2, 3, 4, 5]\na.remove(c)  # Output: [1, 2, 3, 4, 5]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a = [1, 2, 3, 4, 5]\na.remove(c)  # Output: [1, 2, 3, 4, 5]", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "#!/bin/bash\n\n# Call otherfunc\notherfunc\n\n# Rest of the code in test.sh\n\n\nThis will call the otherfunc function inside the bash script test.sh", "subprocess.call('test.sh otherfunc')"], ["5826427-73", "def execute_function():\n  print(\"Hello World\")\n\nif __name__ == '__main__':\n  execute_function()", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "import pandas as pd\ndf.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "3434.35353", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "Sample.objects.filter(date__range=[datetime.date(2011, 1, 1), datetime.date(2011, 1, 31)])", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "Sample.objects.filter(year=2011).values('month').annotate(Count=Count('id'))", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "<nooutput>", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "<nooutput>", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "to use the open() function to open the file xxx.mp4 and then use the write() function to write the contents of the file to the file f", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "The answer code is:\n\n\nimport numpy as np\nimport pandas as pd\n\n# define dataframe\ndf = pd.DataFrame([[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]], columns=['a'])\n\n# sort the dataframe\nsorted_df = df.sort_values(by='a').sort_index(level=0)\n\n# get the indices of the sorted dataframe\nsorted_indices = np.argsort(sorted_df.a)\n\n# create a new dataframe with the sorted values\nsorted_df2 = sorted_df.iloc[sorted_indices]", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "a dataframe df2 containing the unique rows from df1 with the frequency of each row", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "def get_avg_3(df):\n    result = []\n    for col in df.columns[:3]:\n        result.append(df[col].mean())\n    return result\n\ndf['avg_3'] = get_avg_3(df)", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "301 redirect to '/Home/index'", "redirect('Home.views.index')"], ["42352887-25", "The code snippet to achieve this is:\n\nthings = [\n    {'name': 'car', 'weight': 10},\n    {'name': 'bike', 'weight': 5},\n    {'name': 'bus', 'weight': 15},\n    {'name': 'boat', 'weight': 20}\n]\n\nsorted_keys = sorted(things, key=lambda x: x['weight'])\n\nprint(sorted_keys)\n\nOutput:\n['bus', 'car', 'boat']", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import os\nprint(os.path.dirname(os.path.abspath('a_module')))", "print(a_module.__file__)"], ["247770-2", "The answer code is import os\nprint(os.path.dirname(os.path.abspath(__file__))) which prints the path of the current python module", "print(os.getcwd())"], ["247770-13", "importlib.import_module('amodule').__path__", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "The df.sum() function can be used to sum the values in each row of every two adjacent columns in a dataframe", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "import time; print(time.strftime(\"%H:%M:%S\"))", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", "'Hello'", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "ps -ef | grep something | wc -l -> wc -l", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "def find_intersection(s1, s2): \n    # initialize an empty list \n    intersection = [] \n    # iterate over both series \n    for i in range(len(s1)): \n        # check if element is in both series \n        if s1[i] in s2: \n            intersection.append(s1[i]) \n    # return the list of common elements \n    return intersection", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "datetime.datetime.strptime('when', '%d %B %Y').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "The syntax for this is Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", ": \"The action 'always' will enable warnings for all warnings.\"", "warnings.simplefilter('always')"], ["22676-23", "the code snippet urllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", ":\n# os.mkdir('downloads')\n# download(url, file_name)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "urllib.request.urlretrieve('http://www.example.com/', 'file.zip')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", ":\nimport requests\nurl = 'http://example.com/file.zip'\nresponse = requests.get(url)\nwith open('file.zip', 'wb') as f:\n    f.write(response.content)", "r = requests.get(url)"], ["22676-64", "import requests\nimport os\n\ndef download_file(url, destination):\n    r = requests.get(url)\n    with open(destination, 'wb') as f:\n        f.write(r.content)\n\nurl = \"http://example.com/file.zip\"\ndestination = \"10MB\"\ndownload_file(url, destination)", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "import numpy as np\nfrom scipy.linalg import inv\n\ndef multiply(P, T):\n    P_inv = inv(P)\n    return P_inv @ T\n\n# example\nP = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nT = np.array([[10, 11, 12], [13, 14, 15], [16, 17, 18]])\n\nprint(multiply(P, T))\n\nOutput:\n[[28 36 44]\n [52 60 72]\n [78 90 104]]", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "0x470FC614 is equal to 6561.4 in decimal", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "10, 9, 8, 7, 6, 5, 4, 3, 2, 1", "list(reversed(list(range(10))))"], ["20573459-83", "7 days ago", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "'SGVsbG8gV29ybGQh'", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "a set containing the duplicate values in mylist", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "df.to_csv(np.txt, sep='\\t', engine='python')", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "df.to_csv('c:\\\\data\\\\pandas.txt', index=False)", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "The answer code is x.split('-')[-1]", "print(x.rpartition('-')[0])"], ["15851568-9", "to use the split method with a delimiter of '-' and then take the last element of the resulting list", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "a random list of integers", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "'%f.%f' % (time.strftime(\"%m\"), time.microsecond)", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "<nooutput>", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "a function that takes a pandas data frame as an argument and returns a dictionary with the column name as the key and the count of non-zero values as the value", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text.lower().replace('[^a-zA-Z0-9 ]', '').strip()", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", ":\n\ndef remove_non_alphanumeric(text):\n    text = text.lower().replace(\"[^a-zA-Z0-9 ]\", \"\")\n    return text", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "soup = BeautifulSoup(html_string, 'html.parser')\nname = soup.find('tag', attrs={'name': 'name'})\nprint(name)", "print(soup.find('name').string)"], ["2011048-15", "the code snippet:\n\nwith open(filepath, 'r') as f:\n    count = sum(1 for line in f.readlines() if line.strip())", "os.stat(filepath).st_size"], ["2600191-99", "l.count(\"a\")", "l.count('a')"], ["2600191-23", "l.count()", "Counter(l)"], ["2600191-53", "len(l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "len(l)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "3", "l.count('b')"], ["12842997-15", "import shutil\n\nif __name__ == '__main__':\n    srcfile = 'srcfile'\n    dstdir = 'dstdir'\n    shutil.copy(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['b'] + df['a']", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "t = tuple(t)", "tuple(l)"], ["16296643-20", "level1 = level1.split(',')", "level1 = map(list, level1)"], ["3880399-74", "with open('logFile', 'w') as logFile:\n    dataobject.pprint()\n    # write the output of pprint to file\n    logFile.write('The output of pprint is:')\n    logFile.write(dataobject.pprint())", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "the index of the rows in the 'BoolCol' column", "df.loc[df['BoolCol']]"], ["21800169-19", "df.BoolCol.eq(True).index", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "indexes = [i for i, x in enumerate(dataframe.BoolCol) if x == True]", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df.BoolCol.index[df.BoolCol.values]", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(owd)", "os.chdir(owd)"], ["32063985-36", "<div id=\"main-content\">\n  <div>Content</div>\n</div>\n\nbecomes\n\n<div>Content</div>", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "[a[i] for i, t in enumerate(a) for a in b if i == t], where a and b are iterables", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "a 2-d array result containing the elements of a and b zipped together", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "6 (the last occurrence of '}' in the string)", "'abcd}def}'.rfind('}')"], ["20546419-7", "r[:, np.random.shuffle(r.shape[1])].T", "np.random.shuffle(np.transpose(r))"], ["574236-63", "os.listdir(path)", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "For example:\n\ncursor.execute(\"SELECT * FROM table_name\")\nresult = cursor.fetchone()", "cursor.fetchone()[0]"], ["4454298-91", "'import os\nos.rename(\"infile\", \"outfile\")'", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "def check_regex(s):\n    if re.search(r'ba[rzd]', s):\n        return True\n    else:\n        return False", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "list(t).remove(t.duplicates())", "list(set(t))"], ["7961363-86", "The answer code is source_list = list(set(source_list))", "list(set(source_list))"], ["7961363-7", "abracadabra", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "The answer code would be a[0].tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('td', text='Address:').find_next_sibling().text", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "'data to be encoded'", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "the code snippet data.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "def replace_not_in_array(arr, target_arr):\n    return [0 if x not in target_arr else x for x in arr]", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", "def mean_across_dim(a):\n    return np.mean(a, axis=0)", "np.mean(a, axis=1)"], ["15907200-35", "to use the csv.writer object to write a header to the file", "writer.writeheader()"], ["23359886-48", "ndarray[0:, 1] = 0", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = sf.to_frame('email').rename(columns={'email': 'list'}).reset_index(drop=True)", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "the resized image image with a width of x and a height of y and with the ANTIALIAS filter applied", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "For example, if l1 = [1, 2, 3, 4, 5] and l2 = [2, 4, 6, 8, 10], the output would be [(0, 2), (1, 4), (2, 6), (3, 8), (4, 10)]", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"starGryB sp\">\n<span class=\"", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "This sorts the list list5 in ascending order according to the degrees value of its elements, which is the second element in each element of the list", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "For example, if you want to sort a list by size and then by name, you could do sorted_list = sorted(list, key=lambda x: (x.size(), x.name))", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "obj.attr", "getattr(obj, 'attr')"], ["1960516-75", "3.9", "json.dumps(Decimal('3.9'))"], ["29836836-87", "def filter_duplicates(df, column):\n    return df[df[column].isin(df[column].unique())]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "plt.colorbar(mappable(plt.imshow(image)))", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "df['text'].value_counts().most_common(100)", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "16:08:03", "datetime.now(pytz.utc)"], ["9262278-9", "return JsonResponse(data)", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "import subprocess\n\nproc = subprocess.Popen([\"background-process\", \"arguments\"], stdout=subprocess.PIPE)\n\n# Wait for the process to finish\nproc.wait()", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "def find_index(myList, sub):\n    for i in range(len(myList)):\n        if myList[i].find(sub) != -1:\n            return i\n    return -1", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame(ips_data['ips'], columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "the code snippet ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict)", "len(list(yourdict.keys()))"], ["2212433-64", "5", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "the code block that implements this rationale", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "The code to achieve this is\n\nsubprocess.call([\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"])", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.reverse()", "q.put((-n, n))"], ["21887754-31", "ndarray.concatenate(a, b, axis=0)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "ndarray.concatenate(a, b, axis=1)", "print(concatenate((a, b), axis=1))"], ["21887754-21", "This will concatenate the two arrays a and b along the first axis, and return a new array c", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "the numpy array c containing the elements of a and b concatenated along the first axis", "np.array((a, b))"], ["4356842-88", "401 unauthorized", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "df.loc[\u2018bob\u2019]", "df.index.get_loc('bob')"], ["18730044-52", "The answer code is [[1, 4], [2, 5], [3, 6]]", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "def remove_char(s, char):\n    return s.replace(char, \"\")\n\nresult = remove_char(\"it is icy\", \"i\")\n\nprint(result)\n\n# Output: th is icy", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "'it is icy'.replace('i', '') or 'it is icy'.replace('i', '').lower() or 'it is icy'.replace('i', '').capitalize() or 'it is icy'.replace('i', '').swapcase() or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').decode('utf-8') or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').replace(' ', '').encode('utf-8').replace('i', '').decode('utf-8') or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').decode('utf-8') or 'it is icy'.replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i', '').encode('utf-8').replace(' ', '').encode('utf-8').replace('i', '').encode('utf-8').replace('i',", "re.sub('i', '', 'it is icy')"], ["22187233-75", "s = \"it is icy\"\nfor char in s:\n    if char == 'i':\n        s = s.replace(char, \"\")\nprint(s)", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", ":\n\ndef remove_char(s, char):\n    return s.replace(char, \"\")\n\n# Example\ns = \"Hello World!\"\nprint(remove_char(s, 'l'))\n# Output: Hll Wrld!", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(i) for i in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "list(map(int, numbers))", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "\"glob.glob('/mydir/*.txt')\"", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "the code block that implements this rationale", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "import os\nimport glob\n\nfor file in glob.glob('/mydir/*.txt'):\n    print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "import json\ndata = json.loads(request.body)", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by='column_name', ascending=False)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import requests \nurl = 'url' \nresponse = requests.get(url) \ndata = response.json()", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "djangoproject.models.TimeField.objects.filter(hour=hour)", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "list.sort(key=lambda x: (x['points'], x['time'])).", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "42987352096234864", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "json.loads(unescaped.encode('utf-8'))", "json_data = json.loads(unescaped)"], ["18367007-15", "with open('newFile', 'wb') as newFile:\n    newFile.write(bytes(newFileBytes))", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "the code snippet:\n\nfrom django.db.models import Max\n\nMax('added', 'AuthorizedEmail')", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "datetime.now()", "datetime.datetime.now()"], ["17794266-82", "x.max()", "max(x.min(), x.max(), key=abs)"]]}