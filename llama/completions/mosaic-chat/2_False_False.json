{"(2, False, False)": [["11840111-96", "result = {}\nfor key in d1.keys():\n    if key in d2.keys():\n        result[key] = d1[key] / d2[key]", "{k: (float(d2[k]) / d1[k]) for k in d2}"], ["11840111-75", "for key in d1:\n    if key in d2:\n        d1[key] /= d2[key]", "dict((k, float(d2[k]) / d1[k]) for k in d2)"], ["19602931-64", "import requests\nresponse = requests.get(\"http://randomsite.com/file.gz\")\nwith open(\"file.gz\", \"wb\") as f:\n    f.write(response.content)", "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"], ["19602931-43", "import requests\nresponse = requests.get(\"http://randomsite.com/file.gz\")\nwith open(\"file.gz\", \"wb\") as f:\n    f.write(response.content)", "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"], ["23351183-26", "my_model = MyModel.objects.filter(charfield__max_length=255)", "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"], ["432842-3", "a = [1, 2, 3]\nb = [3, 2, 1]\nc = []\nfor i in range(len(a)):\n    for j in range(len(b)):\n        if a[i]!= b[j]:\n            c.append(a[i] ^ b[j])\nprint(c)", "((a and (not b)) or ((not a) and b))"], ["546321-12", "import datetime\nnow = datetime.datetime.now()\none_month_from_now = now + datetime.timedelta(days=30)\none_month_from_now.strftime('%Y-%m-%d')", "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"], ["546321-62", "datetime.datetime.now().replace(month=2) - datetime.timedelta(days=2)", "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"], ["1186789-34", "import subprocess\nsubprocess.check_call(\"python test1.py\")", "subprocess.call('test1.py', shell=True)"], ["843277-70", "If obj.hasattr('attr_name') is False, the output is False", "hasattr(obj, 'attr_name')"], ["2231663-53", "[list(zip([1, 2], [3, 4]))]", "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"], ["2231663-54", "sliced_list = [list(d) for i in range(2)]", "[input[i:i + n] for i in range(0, len(input), n)]"], ["14571103-73", "The answer code would be smilies = re.findall(r'(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"], ["27868020-14", "df[df['X'].groupby('User')['X'].sum() == 0]", "df.loc[df.groupby('User')['X'].transform(sum) == 0]"], ["27868020-52", "df[df['X'] == 0]", "df.groupby('User')['X'].transform(sum) == 0"], ["4302027-39", "The webbrowser is opening the url 'http://example.com'", "webbrowser.open('http://example.com')"], ["4906977-61", "home_dir = os.environ[\"HOME\"]\n\nThis code retrieves the value of the environment variable \"HOME\" and assigns it to the variable home_dir", "os.environ['HOME']"], ["4906977-33", "the code snippet os.environ['HOME']", "os.environ['HOME']"], ["4906977-98", "the output of the command echo $VARIABLES", "print(os.environ)"], ["4906977-9", "os.environ.keys()", "os.environ"], ["4906977-77", "env_var = os.environ.get('KEY_THAT_MIGHT_EXIST', default_value)", "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"], ["674509-17", "sorted(dictionary.items(), key=lambda x: x[1])", "sorted(list(dictionary.items()), key=operator.itemgetter(1))"], ["674509-45", "sorted(my_dict.items(), key=lambda x: x[1])", "sorted(list(dictionary.items()), key=lambda x: x[1])"], ["29370211-80", "df['stats'] = df['stats'].str.split(',', expand=True)", "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"], ["29370211-55", "df['stats'] = df['stats'].str.split(',', expand=True)", "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"], ["3939361-35", "line = line.replace(\"!\", \"\").replace(\"#\", \"\").replace(\"$\", \"\")", "line.translate(None, '!@#$')"], ["3939361-33", "line = line.replace(\"!@#$\", \"\")\n\nAnswer:\n\nline = line.replace(\"!@#$\", \"\")", "line = re.sub('[!@#$]', '', line)"], ["3939361-18", "string", "string.replace('1', '')"], ["3939361-89", "line.replace('!@#$', '')", "line = line.translate(string.maketrans('', ''), '!@#$')"], ["14043934-80", "t -= timedelta(hours=1, minutes=10)\n\nThis subtracts 1 hour and 10 minutes from the time object t using the timedelta() function", "(t - datetime.timedelta(hours=1, minutes=10))"], ["14043934-42", "dt = datetime.datetime.now() - datetime.timedelta(hours=5)", "dt -= datetime.timedelta(hours=5)"], ["13496087-84", "import random\nimport string\nimport math\nimport time\nimport string\nimport random\nimport string\nimport math\nimport time\nrandom_number = ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))\nprint(random_number)", "random.randint(100000000000, 999999999999)"], ["13496087-95", "import random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nrandom_string = ''.join(random.choices(string.ascii_letters + string.digits, k=12))", "'%0.12d' % random.randint(0, 999999999999)"], ["11709079-81", "from bs4 import BeautifulSoup\nimport requests\npage = requests.get('http://www.google.com/')\nsoup = BeautifulSoup(page.content, 'html.parser')", "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"], ["1892339-46", "root.moveTo(0, 0)\nroot.resizable(False, False)\nroot.pack()\nroot.update()", "root.lift()"], ["1823058-26", "print(\"%s\" % value)", "'{:,}'.format(value)"], ["14406214-5", "ax.set_xlabel('X Label')\nax.set_ylabel('Y Label')", "ax.xaxis.set_label_position('top')"], ["14406214-43", "ax.invert_yaxis()", "ax.xaxis.tick_top()"], ["10565598-66", "if set(a) == set(b):\n    print(\"array b contains all elements of array a\")", "numpy.in1d(b, a).all()"], ["13557937-8", "[0, 0, 0, 0, 0, 0, 0, 0]", "list('{0:0b}'.format(8))"], ["13557937-9", "[0b100]", "[int(x) for x in list('{0:0b}'.format(8))]"], ["311627-76", "mport datetime\nnow = datetime.datetime.now()\nprint(\"{} {}\".format(now.year, now.month))", "time.strftime('%Y-%m-%d %H:%M')"], ["3940128-52", "L.reverse()", "L[::(-1)]"], ["3940128-21", "L.reverse()\n\nAnswer:\n\nL.append(x)", "L.reverse()"], ["89228-90", "import subprocess\nresult = subprocess.check_output(\"ls -l\", shell=True)\nprint(result)", "from subprocess import call"], ["89228-91", "import subprocess\nresult = subprocess.run([\"some_command\", *args], capture_output=True, text=True)\noutput = result.stdout.decode()\nprint(output)", "os.system('some_command with args')"], ["89228-25", "import subprocess\nsubprocess.run([\"some_command\", \"<\", \"input_file\", \"|\", \"another_command\", \">\", \"output_file\"])", "os.system('some_command < input_file | another_command > output_file')"], ["89228-76", ":", "stream = os.popen('some_command with args')"], ["89228-97", "$ echo Hello World\nHello World", "return_code = subprocess.call('echo Hello World', shell=True)"], ["89228-44", "the output of the command \"ls -l\"", "call(['ls', '-l'])"], ["5137497-23", "the code snippet os.getcwd()", "os.path.realpath(__file__)"], ["5137497-33", "path.split('/')[-1]", "os.path.dirname(path)"], ["5137497-66", "import os\npath = '/path/to/file'\ncanonical_path = os.path.normpath(path)\nprint(canonical_path)", "os.path.realpath(path)"], ["5137497-91", "import os\nprint(os.getcwd())\n\nThis code prints the current working directory", "dir_path = os.path.dirname(os.path.realpath(__file__))"], ["5137497-76", "import os\ncurrent_dir = os.getcwd()\nprint(current_dir)", "full_path = os.path.realpath(__file__)"], ["14961562-66", "s = \"deadbeef\"\nl = []\nfor i in range(0, len(s), 2):\n    l.append(int(s[i:i+2], 16))\nprint(l)", "struct.unpack('11B', s)"], ["19738169-65", "df['DateStr'] = df['DateObj'].dt.strftime('%Y-%m-%d')", "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"], ["104420-82", "[[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]", "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"], ["104420-100", "There are 6 possible permutations of the list [1, 2, 3]:\n\n- [1, 2, 3]\n- [1, 3, 2]\n- [2, 1, 3]\n- [2, 3, 1]\n- [3, 1, 2]\n- [3, 2, 1]", "itertools.permutations([1, 2, 3])"], ["19781609-19", "df.to_csv(filename, index=False)\n\nAnswer: The above code block", "df.to_csv('filename.csv', header=False)"], ["1406145-57", "root.destroy()", "root.destroy()"], ["2225564-15", "import os\nfiles = []\nfor file in os.listdir('.'):\n    if file.startswith('0') and file.endswith('.jpg'):\n        files.append(file)", "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"], ["30406725-90", "df.pivot_table(index='order', columns='sample', values='value', aggfunc=sum)", "df.pivot(index='order', columns='sample')"], ["18229082-25", "import pickle\nwith open('afile', 'wb') as f:\n    pickle.dump([1, 2, 3], f)\nwith open('afile', 'rb') as f:\n    loaded_list = pickle.load(f)\nprint(loaded_list)", "pickle.load(open('afile', 'rb'))"], ["3329386-17", "substring1 = phrase[:phrase.find('.')]\nsubstring2 = phrase[:phrase.find('?')]\nsubstring3 = phrase[:phrase.find('!')]", "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"], ["22733642-1", "import csv\nwith open('filename.csv', 'wb', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow(['key1', 'key2', 'key3'])\n    writer.writerow(['value1', 'value2', 'value3'])", "self.writer.writerow([str(s).encode('utf-8') for s in row])"], ["13114512-57", "data['diff'] = data.iloc[1:] - data.iloc[:-1]", "data.set_index('Date').diff()"], ["28901311-21", "[i for i, j in enumerate(A) if j in B]", "np.where(np.in1d(A, B))[0]"], ["18102109-63", "cursor.execute(\"SELECT * FROM Task WHERE time_spent > 3600\")", "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"], ["415511-22", ":", "datetime.datetime.now()"], ["415511-29", "datetime.datetime.now()", "datetime.datetime.now().time()"], ["415511-26", "The current time is: Wed Sep 22 14:36:28 2021", "strftime('%Y-%m-%d %H:%M:%S', gmtime())"], ["415511-14", "import datetime\nnow = datetime.datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))", "str(datetime.now())"], ["415511-33", "import time\ncurrent_time = time.strftime(\"%H:%M:%S\")\nprint(\"Current time:\", current_time)", "datetime.datetime.time(datetime.datetime.now())"], ["32283692-10", "result = np.concatenate((np.zeros((6, 9, 20)), arr), axis=0)", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"], ["32283692-46", "myArray = myArray + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"], ["36542169-84", "df.iloc[0]\ndf.iloc[-1]", "pd.concat([df.head(1), df.tail(1)])"], ["2803852-74", "import datetime\ndate_str = '24052010'\ndate_obj = datetime.datetime.strptime(date_str, '%d%m%Y')\nprint(date_obj)", "datetime.datetime.strptime('24052010', '%d%m%Y').date()"], ["39719140-55", "mean(df[df.nonzero()].values)", "np.flatnonzero(x).mean()"], ["5508352-50", "i = np.where(a == b)[0][0]", "a[tuple(b)]"], ["2233917-10", "x, y = map(int, input().split())", "tuple(map(int, input().split(',')))"], ["2233917-8", "t = input(\"Enter a tuple of integers: \")\nt = tuple(map(int, t.split()))\nprint(t)", "tuple(int(x.strip()) for x in input().split(','))"], ["10998621-33", "ax.set_xticks(ax.xticks()[::-1])", "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"], ["40517350-9", "df.groupby(['STNAME', 'COUNTY_POP']).size().reset_index(name='count')", "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"], ["28664103-14", "df.pivot_table(index=df.index.date, columns='index.time', values='Close')", "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"], ["8192379-98", "he answer is a = list(map(int, input().split()))", "a.fromlist([int(val) for val in stdin.read().split()])"], ["13237941-54", "yourdata.reverse()", "sorted(yourdata, reverse=True)"], ["13237941-56", "sorted(yourdata, key=lambda x: x['subkey'], reverse=True)", "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"], ["13237941-14", "sorted(yourdata, key=lambda x: (x['key'], x['subkey']), reverse=True)", "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"], ["15548506-61", "pos = nx.get_node_attributes(G, 'pos')\nnx.draw_networkx_nodes(G, pos=pos, node_color='r', node_size=500, alpha=0.5)\nnx.draw_networkx_labels(G, pos=pos, font_size=12, font_family='sans-serif', font_color='w')", "networkx.draw_networkx_labels(G, pos, labels)"], ["7287996-89", "The common prefix is '/usr/var'", "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"], ["7287996-17", "the code block: os.path.relpath('/usr/var', '/usr/var/log/')", "print(os.path.relpath('/usr/var/log/', '/usr/var'))"], ["14925239-71", "if hasattr(myobject, 'id'):\n    if hasattr(myobject.id, 'number'):\n        number = getattr(myobject.id, 'number')\n    else:\n        number = None\nelse:\n    number = None", "getattr(getattr(myobject, 'id', None), 'number', None)"], ["41469647-32", "X_outer = np.outer(X[:, np.newaxis], X[:, np.newaxis])", "np.einsum('ij,kj->jik', X, X)"], ["32292554-35", "The code snippet to achieve this is:", "itertools.product(list(range(2)), repeat=4)"], ["3166619-87", "import re\nmatch = re.match(r'\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')\nif match:\n    print('Match found!')\nelse:\n    print('No match found.')", "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"], ["13628725-82", "random.sample(range(1, 51), 6)", "random.sample(range(1, 50), 6)"], ["13628725-59", "import random\nnumbers = random.sample(range(1, 50), 6)", "random.sample(range(1, 50), 6)"], ["15940280-74", "datetime.datetime.utcnow()", "datetime.utcnow()"], ["12280143-55", ":", "os.chdir('..')"], ["15457504-91", "ctx.font = 'Purisa'\nctx.fontSize = 12\nctx.fillText(k.textContent, k.offsetLeft, k.offsetTop)", "canvas.create_text(x, y, font=('Purisa', 12), text=k)"], ["41946927-22", "import pandas as pd\ndf = pd.DataFrame(my_list)", "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"], ["8214932-71", "if 'one' in d.values():\n    print('found')\nelse:\n    print('not found')", "'one' in list(d.values())"], ["8214932-94", "if 'one' in d:\n    print('yes')\nelse:\n    print('no')", "'one' in iter(d.values())"], ["7125009-76", "plt.legend(loc='upper left', fontsize='x-small')", "pyplot.legend(loc=2, fontsize='x-small')"], ["7125009-57", "plt.legend(fontsize=6)", "plot.legend(loc=2, prop={'size': 6})"], ["8270092-77", "sentence.replace(' ', '')", "sentence.replace(' ', '')"], ["8270092-68", "sentence.replace(\" \", \"\")", "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"], ["8270092-97", "sentence = sentence.strip()\n\nThis code snippet removes any whitespace characters from the beginning and end of the string sentence", "sentence.strip()"], ["8270092-87", "sentence = sentence.replace(\" \", \"\")", "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"], ["8270092-31", "sentence = sentence.replace(' ', '')", "sentence = ''.join(sentence.split())"], ["14591855-94", "import h5py\nwith h5py.File('/home/.../data.h5', 'r') as f:\n    df = f['firstSet']", "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"], ["8369219-15", ":\n\nstr = open('very_Important.txt', 'r').read()", "str = open('very_Important.txt', 'r').read()"], ["19445682-35", "import imaplib\nimport email\nimport email.utils\ndef handle_urlfetch_errors(url):\n    try:\n        response = imaplib.IMAP4_SSL('imap.gmail.com')\n        response.login('username', 'password')\n        response.select('inbox')\n        response.search(None, 'ALL')\n        raw_message = response.fetch(',(RFC822)')[0].decode('utf-8')\n        message = email.message_from_string(raw_message)\n        if message.get_content_maintype() == 'html':\n            return 'Error: Invalid URL'\n        else:\n            return message.get_payload()\n    except urlfetch_errors.Error as e:\n        return 'Error: {}'.format(e)", "urlfetch.fetch(url, deadline=10 * 60)"], ["6250046-45", "http://www.address.com/something", "urlparse.urldefrag('http://www.address.com/something#something')"], ["9849192-97", "sorted(mydict.items(), key=lambda x: x[1], reverse=True)", "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"], ["13279399-43", "firstname = request.args.get('firstname')", "first_name = request.args.get('firstname')"], ["13279399-5", "if request.method == 'POST':\n    firstname = request.form['firstname']\n    return 'Firstname:'+ firstname", "first_name = request.form.get('firstname')"], ["3278850-59", "with open('file.txt', 'r') as f:\n    txt = f.read()", "txt = open('file.txt').read()"], ["14043080-28", "from datetime import datetime\nnow = datetime.utcnow()\nyear = now.year", "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"], ["687295-63", "from django.db.models import Q\nmodel_class = Entry\nfilter_query = Q(id__ne=3)\nresult = model_class.objects.filter(filter_query)", "Entry.objects.filter(~Q(id=3))"], ["19011613-15", "for div in soup.find_all('div'):\n    print(div.get_text())", "soup.find_all('div', class_='crBlock ')"], ["4296249-87", "rgb = tuple(int(x, 16) for x in rgbstr.split('rgb'))", "struct.unpack('BBB', rgbstr.decode('hex'))"], ["5864271-27", "a = 'hello'\nb = ''\nfor i in range(len(a)-2):\n    b += a[i:i+2] + a[i+2]", "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"], ["73663-61", "exit() or sys.exit() depending on the programming language being used", "sys.exit()"], ["73663-36", "print(\"Goodbye!\")", "quit()"], ["73663-66", "if __name__ == '__main__':\n    print(\"some error message\")\n    sys.exit(1)", "sys.exit('some error message')"], ["21974169-23", "try:\n    cursor.execute(\"COMMIT\")\nexcept:\n    print(\"Transaction failed\")", "con.commit()"], ["11269575-66", "subprocess.run(['espeak', text], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)", "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"], ["1094717-63", "try:\n    i = int(s)\nexcept ValueError:\n    i = 0", "int(Decimal(s))"], ["1094717-69", "number = int(string)", "int(s.split('.')[0])"], ["31957364-53", "A = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\nC = np.outer(A, B)", "np.einsum('ijk,ikl->ijl', A, B)"], ["1196074-89", "he answer is:", "subprocess.Popen(['rm', '-r', 'some.file'])"], ["19100540-33", "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)", "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"], ["59825-84", "s.discard(element)", "e = next(iter(s))"], ["5868374-42", "Otherwise, datestr must be in the format %Y%m%d and the answer is datetime.datetime.strptime(datestr, '%Y%m%d').date()", "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"], ["208894-61", "import base64\nimport PyPDF2\npdf_data = base64.b64encode(open('pdf_reference.pdf', 'rb').read())", "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"], ["20796355-35", "os.chdir('chapter3')", "os.chdir('chapter3')"], ["20796355-88", "os.chdir('/path/to/new/directory')", "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"], ["20796355-81", "os.chdir('/path/to/new/directory')", "os.chdir('.\\\\chapter3')"], ["1299855-22", "import mechanize\nbr = mechanize.Browser()\nbr.open('https://www.example.com/upload')\nbr.select_file('file', '/path/to/file')\nbr.submit()", "br.form.add_file(open(filename), 'text/plain', filename)"], ["2317134-81", "import re\nmatch = re.search(r'[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')\nif match:\n    print(\"Match found!\")\nelse:\n    print(\"No match found.\")", "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"], ["2317134-43", "import re\nmatch = re.search('[a-zA-Z][\\\\w-]*$', '!A_B')\nif match:\n    print('Match found')\nelse:\n    print('No match found')", "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"], ["13794532-6", "for div in soup.find_all('div'):\n    if div.get('class') == 'comment-':\n        print(div)", "soup.find_all('div', class_=re.compile('comment-'))"], ["741877-37", "import matplotlib.pyplot as plt\nplt.cla()", "plt.cla()"], ["13156395-50", "with open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = f.read()", "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"], ["13156395-75", "with open('sample.json', 'rb') as f:", "json.loads(open('sample.json').read().decode('utf-8-sig'))"], ["13022385-76", "to use the sys.exit() function to exit the program gracefully", "sys.exit(0)"], ["8751653-82", "float(bin(int(s2, 2))) or float(bin(int(s2, 2))[2:])", "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"], ["8751653-25", "float('-0b1110')", "float(int('-0b1110', 0))"], ["8751653-54", "float(b8) / 2 ** (1 - b8 % 2)", "struct.unpack('d', b8)[0]"], ["4789021-9", "if user.groups.filter(name='Member').exists():\n    print('User is in group \"Member\"')\nelse:\n    print('User is not in group \"Member\"')", "return user.groups.filter(name='Member').exists()"], ["4789021-88", "if user in ['group1', 'group2']:\n    print('User is in group')\nelse:\n    print('User is not in group')", "return user.groups.filter(name__in=['group1', 'group2']).exists()"], ["25823608-56", "for i in range(len(vals)):\n    if vals[i][0] == 0 and vals[i][1] == 1:\n        print(i)", "np.where((vals == (0, 1)).all(axis=1))"], ["509742-28", "import os\nos.chdir(os.path.dirname(os.path.abspath(__file__)))", "os.chdir(os.path.dirname(__file__))"], ["31385363-83", "df.write.format('csv').save('mycsv.csv')", "df.toPandas().to_csv('mycsv.csv')"], ["31385363-50", "df.to_csv('mycsv.csv', index=False)", "df.write.csv('mycsv.csv')"], ["8092877-26", "zip(*[(1, 4), (2, 5), (3, 6)])", "zip(*[(1, 4), (2, 5), (3, 6)])"], ["8092877-98", "sublists = list(itertools.groupby(data, lambda x: x[0]))", "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"], ["23748995-25", "df['a'].tolist()", "df['a'].values.tolist()"], ["23748995-42", "df['a'].values.tolist()", "df['a'].tolist()"], ["20205455-79", "from bs4 import BeautifulSoup\nresponse.encoding = 'utf-8'\nsoup = BeautifulSoup(response, 'html.parser')", "soup = BeautifulSoup(response.read().decode('utf-8'))"], ["7429118-70", "a[:, np.not_equal(a[:, np.newaxis], 3)]", "a[np.arange(len(a)) != 3]"], ["8217613-41", "import subprocess\noutput = subprocess.check_output(\"echo 'foo'\", shell=True)\nprint(output)\n\nOutput: 'foo'", "subprocess.check_output('echo \"foo\"', shell=True)"], ["14673394-12", "df['Date'] = pd.to_datetime(df['Date'])\ndf['Date'] = df['Date'].dt.normalize()\ndf['Date'] = df['Date'].dt.floor(\"D\")\ndf['Date'] = df['Date'].dt.date\ndf['Date'] = df['Date'].dt.strftime(\"%Y-%m-%d\")\ndf['Date'] = df['Date'].unique()", "df['Date'].map(lambda t: t.date()).unique()"], ["3328012-17", "os.path.join('/the/dir/', filename) in os.listdir('/the/dir/')", "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"], ["3457673-86", "myDict = dict(zip(myListOfTuples[0::2], myListOfTuples[1::2]))", "dict(x[1:] for x in reversed(myListOfTuples))"], ["652291-62", "sorted(my_list, key=lambda x: x['date'], reverse=True)", "list.sort(key=lambda item: item['date'], reverse=True)"], ["11041411-88", "df.to_csv('mydf.tsv', index=False)", "df.to_csv('mydf.tsv', sep='\\t')"], ["33435418-32", "result = list(set(list1) - set(list2))\n\nor\n\nresult = list(set(list1) - set(list2))\nresult = list(set(list1) - set(list2))\n\ndepending on the order of the lists", "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"], ["977491-44", "import difflib\nwith open(file1, 'r') as f1, open(file2, 'r') as f2:\n    differences = difflib.unified_diff(f1, f2)\n    print(differences)", "difflib.SequenceMatcher(None, file1.read(), file2.read())"], ["15148684-45", "import numpy as np\ndef get_min(lst):\n    return min(lst)\nlst = [('apple', 1.5), ('banana', np.nan), ('orange', 2.0)]\nmin_val = get_min(lst)\nprint(min_val)", "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"], ["16127862-90", "str_list = [str(round(float(x[0]), 8)) + 'e' + str(round(float(x[1]), 8)) for x in lst]", "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"], ["16127862-87", "str_list = [lst2str(lst) for lst in lst]\n\nwhere lst2str is a function that takes a list of floats and returns a list of strings in scientific notation with 8 decimal points", "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"], ["2111163-71", "A[0][1]", "A[[0, 1], [0, 1]]"], ["2111163-33", "a[:, 0]\na[0, :]\na[1:, 1]\na[1:3, 0]", "a[np.arange(3), (0, 1, 0)]"], ["24748445-94", "for tag in soup.find_all():\n    if tag.name == 'a' and tag.name == 'div':\n        print(tag)", "soup.find_all(['a', 'div'])"], ["931092-70", "for i in range(len(s)-1):\n    s[i], s[i+1] = s[i+1], s[i]", "'hello world'[::(-1)]"], ["931092-64", "the resulting reversed list", "s[::(-1)]"], ["931092-5", "def reverse_string(s):\n    return s[::-1]", "''.join(reversed('foo'))"], ["931092-74", "def reverse_string(string):\n    return string[::-1]", "''.join(reversed(string))"], ["931092-65", "the code snippet mystring = mystring[::-1]", "'foo'[::(-1)]"], ["931092-99", "def reverse_string(a_string):\n    return a_string[::-1]", "a_string[::(-1)]"], ["931092-20", "a_string[::-1]\n\nor\n\na_string[::-1].reverse()\n\ndepending on the desired output", "def reversed_string(a_string):\n    return a_string[::(-1)]"], ["931092-77", "Finally, it prints the reversed string", "''.join(reversed(s))"], ["163542-7", "import subprocess\nsubprocess.check_call(['grep', 'f', '-'], stdin=subprocess.PIPE,\n                             stdout=subprocess.PIPE)", "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"], ["163542-94", "subprocess.Popen(['grep', 'f'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)", "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"], ["18594469-11", "The answer code is df.apply(lambda x: (x - df.mean()) / df.std(), axis=1)", "df.div(df.sum(axis=1), axis=0)"], ["961632-89", "s = str(i)", "str(i)"], ["961632-44", "a = str(a)", "a.__str__()"], ["961632-33", "", "str(a)"], ["27318022-32", "result = input().read()", "result = sys.stdin.read()"], ["40055835-26", "A.remove(B)\n\nis the answer", "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"], ["41513324-64", "df = df[df.index > start_remove]", "df.query('index < @start_remove or index > @end_remove')"], ["41513324-67", "df.drop(df.index[df.index > start_remove].tolist(), axis=0)", "df.loc[(df.index < start_remove) | (df.index > end_remove)]"], ["8218032-86", "indices = np.where(mask)", "numpy.where(mask)"], ["32533944-71", "import pandas as pd\ndf = pd.read_csv('Result.csv', sep=' ')", "df.to_csv('Result.csv', index=False, sep=' ')"], ["20638006-85", "import pandas as pd\ndf = pd.DataFrame(d)", "pd.DataFrame(d)"], ["1883604-86", "import gzip\nwith open('file.gz', 'rb') as f:\n    data = f.read()\n    if data.startswith(b'<?xml'):\n        import xml.etree.ElementTree as ET\n        root = ET.fromstring(data)\n        print(root)\n    else:\n        print(data.decode('utf-8'))", "gzip.open('file.gz', 'rt', encoding='utf-8')"], ["29983106-25", "The final answer is driver.get('http://www.python.org')", "driver.get('http://www.google.com.br')"], ["3437059-20", "'blah' in somestring", "if ('blah' not in somestring):\n    pass"], ["3437059-17", "if'substring' in'string':\n    print('substring is in string')\nelse:\n    print('substring is not in string')", "string.find('substring')"], ["3437059-83", "s.count('is') > 0", "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"], ["3061-93", "import mymodule\nmyfunction()", "globals()['myfunction']()"], ["3061761-63", "a.shape", "a.shape"], ["3061761-55", "a.shape", "N.shape(a)"], ["3061761-89", "a = [1, 2, 3, 4, 5]\nprint(len(a))\nprint(len(a[0]))", "N.shape(a)"], ["3061761-31", "import numpy as np\na = np.array([1, 2, 3])\nprint(a.shape)\n\nOutput: (3, )", "a.shape"], ["13291539-54", "float(0.00582811585976)", "struct.unpack('f', struct.pack('f', 0.00582811585976))"], ["6280978-9", "list(set([dct for dct in list_of_dicts if dct['key'] == 'value']))", "[dict(y) for y in set(tuple(x.items()) for x in d)]"], ["7745260-45", "open('myfile', 'r').read().split()", "words = open('myfile').read().split()"], ["7717380-65", "a = np.array(a)", "a = np.array(a)"], ["9304908-37", "alues = (1, 4, 7)\nresult = models.Value.objects.filter(value__in=values)", "Blog.objects.filter(pk__in=[1, 4, 7])"], ["319426-66", "if string1.lower() == string2.lower():\n    print(\"strings are equal\")\nelse:\n    print(\"strings are not equal\")", "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"], ["319426-3", "if string1.lower() == string2.lower():\n    print(\"strings are equal\")\nelse:\n    print(\"strings are not equal\")", "if (string1.lower() == string2.lower()):\n    pass"], ["319426-84", "if string1.lower() == string2.lower():\n    print(\"strings are equal\")\nelse:\n    print(\"strings are not equal\")", "(string1.lower() == string2.lower())"], ["319426-70", "if first.lower() == second.lower():\n    print(\"equal\")\nelse:\n    print(\"not equal\")", "(first.lower() == second.lower())"], ["319426-18", "if first.lower() == second.lower():\n    print(\"Strings are equal\")\nelse:\n    print(\"Strings are not equal\")", "(first.upper() == second.upper())"], ["15455388-38", "import pandas as pd\ndf = pd.DataFrame(d.values(), columns=list(d.keys())[1:])", "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"], ["17679089-100", "this code snippet", "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"], ["9396706-78", "your_obj.x", "getattr(your_obj, x)"], ["3743222-35", "from datetime import datetime\ndate_obj = datetime.now().date()", "datetime.datetime.now().date()"], ["3743222-73", "datetime.date(datetime.datetime.now().year, datetime.datetime.now().month, datetime.datetime.now().day)", "datetime.datetime.now().date()"], ["12496531-86", "A = np.array([[1, 2], [3, 4], [5, 6]])\nA = np.sort(A, axis=1)", "A = np.array(sorted(A, key=tuple))"], ["6797984-32", "s = input()\ns = s.lower()\nprint(s)", "s.lower()"], ["6797984-49", "s = s.lower()", "s.decode('utf-8').lower()"], ["2631935-11", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"], ["13627865-82", "something = \"bob\"", "globals()['something'] = 'bob'"], ["14766194-35", "if np.array_contains(a, np.array([1, 2])):\n    print(\"a contains [1, 2]\")\nelse:\n    print(\"a does not contain [1, 2]\")", "any(np.equal(a, [1, 2]).all(1))"], ["18200052-13", "import numpy as np\narray = np.array(np.ndarray(3, 3))", "np.zeros((3, 3)).ravel()"], ["15579649-73", "import numpy as np\nresult_array = np.array(result, dtype=object)", "numpy.array([(key, val) for key, val in result.items()], dtype)"], ["2823472-99", "print(\"Goodbye!\")\nsys.exit()", "sys.exit(0)"], ["36139-44", "", "mylist.sort(key=lambda x: x.lower())"], ["36139-62", "mylist.sort()", "mylist.sort(key=str.lower)"], ["36139-23", "The answer code is sorted(mylist), which sorts the elements of mylist in ascending order", "mylist.sort()"], ["36139-32", "sorted(list)", "list.sort()"], ["5280178-72", "import sys\nsys.path.append('/path/to/file.py')\nexec(open('/path/to/file.py').read())", "exec(compile(open('file.py').read(), 'file.py', 'exec'))"], ["18351951-41", "if 'test.mp3' in ('test.mp3', '.mp3', '.avi'):\n    print('ends with.mp3 or.avi')\nelse:\n    print('does not end with.mp3 or.avi')", "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"], ["826284-77", "int.from_bytes(pS, byteorder='big')", "struct.unpack('h', pS[0:2])"], ["3668964-35", "for word in words:\n    if word.islower():\n        print(\"Error: word is not uppercase\")\n        break", "print(all(word[0].isupper() for word in words))"], ["41154648-81", "import pandas as pd\nfrom scipy.sparse import lil_matrix\ndf.to_sparse()", "df.to_sparse(0)"], ["1514553-90", "variable = []", "variable = []"], ["1514553-71", "array = array([i])", "intarray = array('i')"], ["610883-92", "if hasattr(a, 'property'):\n    print(\"Object a has property 'property'\")\nelse:\n    print(\"Object a does not have property 'property'\")", "if hasattr(a, 'property'):\n    pass"], ["610883-9", "If a has a property named 'property', the answer is True.\nIf a does not have a property named 'property', the answer is False", "if hasattr(a, 'property'):\n    pass"], ["610883-68", "if hasattr(a, 'property'):\n    return a.property\nelse:\n    return 'default value'", "getattr(a, 'property', 'default value')"], ["13902805-83", "['a', 'b', 'c', 'd', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd']", "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"], ["13902805-92", "list(set('aaabcabccd'))", "list(set('aaabcabccd'))"], ["13902805-87", "list(set(string))", "\"\"\"\"\"\".join(set('aaabcabccd'))"], ["674764-8", "if str.startswith('str'):\n    start_index = 16\n    end_index = str.find('s', start_index)\nelse:\n    start_index = str.find('s')\n    end_index = len(str)", "str.find('s', 16)"], ["674764-33", "if 'Aloha' in x:\n    print(x.index('Aloha'))\nelse:\n    print('Aloha not found in x')", "x.find('Aloha')"], ["674764-19", "s.index('cc')", "'sdfasdf'.index('cc')"], ["674764-45", "index = string_to_search.index('df')", "'sdfasdf'.index('df')"], ["674764-64", "index = str.find('a')\nprint(index)\n\nThis code finds the index of the substring 'a' in the string str using the find() method and prints the index", "str.find('a')"], ["674764-91", "if 'g' in str:\n    return str.index('g')\nelse:\n    return -1", "str.find('g')"], ["674764-3", "index = str.find('s', 11)\n\nor\n\nindex = str.index('s', 11)\n\ndepending on the Python version used", "str.find('s', 11)"], ["674764-47", "index = str.find('s', 15)", "str.find('s', 15)"], ["674764-5", "index = str.find('s', 11, 14)", "str.find('s', 11, 14)"], ["10194713-64", "sorted(cityPopulation.items(), key=lambda x: x[1][2], reverse=True)", "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"], ["10194713-38", "sorted(u.items())", "sorted(list(u.items()), key=lambda v: v[1])"], ["10194713-1", "sorted(d.items(), key=lambda x: x[1], reverse=True)", "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"], ["10194713-5", "sorted(d.items(), key=lambda x: x[1])", "sorted(list(d.items()), key=lambda k_v: k_v[1])"], ["179369-97", "if __name__ == '__main__':\n    status = 0\n    exit(status)", "sys.exit(0)"], ["179369-62", "if 'aa!' in message:\n    print('abort execution')", "sys.exit('aa! errors!')"], ["179369-47", "import sys\nsys.exit()", "sys.exit()"], ["19779790-35", "today = datetime.date.today()\nyesterday = today - datetime.timedelta(days=1)\nprint(yesterday)", "datetime.datetime.now() - datetime.timedelta(days=1)"], ["37934969-37", "import pandas as pd\ndf = pd.DataFrame(nvalues.values(), columns=nvalues.keys())\n\nThis code creates a pandas dataframe from the values of the dictionary nvalues, using the keys as column names", "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"], ["11066874-58", "href = input_string.split('href=\"')[1].split('\"')[0]\nif 'follow?page' in href:\n    print('follow?page')\nelse:\n    print('not found')", "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"], ["18461623-27", "import numpy as np\navg_values = np.mean([old_set, new_set], axis=0)", "np.mean(np.array([old_set, new_set]), axis=0)"], ["4523551-62", "bin(ord('P'))", "bin(ord('P'))"], ["11399384-83", "s = set(LoD.keys())", "{k for d in LoD for k in list(d.keys())}"], ["11399384-59", "a set containing all keys from all dictionaries in LoD", "set([i for s in [list(d.keys()) for d in LoD] for i in s])"], ["11399384-52", "for key in LoD:\n    print(key)", "[i for s in [list(d.keys()) for d in LoD] for i in s]"], ["13081090-42", "binary_string = '10101'\ndigits = []\nfor i in range(2):\n    digits.append(int(binary_string[i]))\nprint(digits)", "[int(d) for d in str(bin(x))[2:]]"], ["42012589-82", "df.groupby(['Month', 'Fruit']).agg({'Value': ['mean','sum']})", "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"], ["3355822-45", "import requests; response = requests.get('https://www.mysite.com/', auth=('username', 'pwd'))", "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"], ["6510477-50", "os.listdir(os.path.join('path/to/zip/file', '*.zip')) which returns a list of all folders in the zip file", "[x for x in file.namelist() if x.endswith('/')]"], ["39268928-38", "s = 'a b as df'\nd = {'a': 1, 'b': 'as df'}\ns = ''.join([c for c in s if c.isalpha()])\nprint(s)", "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"], ["39268928-72", "a string formatted object that represents the dictionary dict", "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"], ["23970693-72", "import json\njson_data = json.loads(json_string)", "json_data = json.loads(json_string)"], ["2759067-52", "os.rename(src, dst)", "os.rename(src, dst)"], ["16389188-53", "from gi.repository import PyGObject\nwindow = PyGObject.Window_New(PyGObject.GWindowType.G_WINDOW_TOPLEVEL)\nwindow.set_title(\"My Window\")\nwindow.set_default_size(400, 300)\nwindow.center()\nwindow.show_all()", "window.set_position(Gtk.WindowPosition.CENTER)"], ["1391026-74", "Otherwise, the answer is an error message indicating that the GET request does not contain a parameter named 'var_name'", "self.request.get('var_name')"], ["3296499-25", "the code snippet thedict = dict(sorted(thedict.items(), key=lambda x: x[0].lower())) where thedict is the resulting dictionary", "theset = set(k.lower() for k in thedict)"], ["41463763-99", "df1['revenue'] = df1['revenue'].append(df2['revenue'])\ndf1 = df1.reset_index().rename(columns={'index': 'date'})", "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"], ["30405804-73", "os.environ['PATH'] = os.environ['PATH'] + ';C:/Users/Name/Desktop'", "os.chdir('C:/Users/Name/Desktop')"], ["9647586-2", "if request.args.get('a'):\n    a = request.args.get('a')\nelse:\n    a = None", "{{request.args.get('a')}}"], ["6591931-80", "he answer is the code block that implements this rationale", "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"], ["5607551-13", "import urllib\nimport urllib2\nimport cgi\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = cgi.escape(querystring)\nurllib2.add_handler(urllib2.HTTPHandler(debug=0))\nresponse = urllib2.urlopen('http://www.example.com/search', urllib.urlencode({'q': encoded_querystring}))", "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"], ["439115-86", "import random\nimport decimal\nrandom_decimal = decimal.Decimal(str(random.randint(0, 9)))", "decimal.Decimal(random.randrange(10000)) / 100"], ["3925096-46", "path = '/path/to/file.txt'\nlast_part = path[path.rindex('/')+1:]", "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"], ["14538885-47", "x = {'a': 1, 'b': 2, 'c': 3}\nindex = next((i for i, x in enumerate(x) if x == 'c'), None)", "list(x.keys()).index('c')"], ["10484261-51", "values = [program['name'] for program in programs if program.get('name') is None or program['name'].lower() == 'new york']", "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"], ["8905864-66", "s.replace(\"%xx\", \"special character\")", "urllib.parse.quote(s.encode('utf-8'))"], ["8905864-78", "import urllib.parse\nurl = 'http://example.com/path/to/file'\nencoded_url = urllib.parse.urlencode(url)\nprint(encoded_url)", "urllib.parse.quote_plus('a b')"], ["32751229-20", "df.groupby(['Country', 'Item_code']).sum()['Y1961', 'Y1962', 'Y1963']", "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"], ["10543303-64", "", "sum(((i > 5) for i in j))"], ["10543303-81", "count = sum(1 for x in j if x > 5)", "len([1 for i in j if (i > 5)])"], ["10543303-37", "count = sum(1 for x in j if x > i)", "j = np.array(j)\nsum((j > i))"], ["36190533-1", "this code snippet", "np.any(np.in1d(a1, a2))"], ["9775731-24", "my_value = max(min(my_value, max_value), min_value)", "max(min(my_value, max_value), min_value)"], ["14931769-56", "itertools.combinations(binary_values, n)", "lst = list(itertools.product([0, 1], repeat=n))"], ["14931769-64", "from itertools import combinations\nn = 3\nresult = []\nfor combo in combinations(range(2**n), n):\n    result.append(combo)\nprint(result)", "lst = map(list, itertools.product([0, 1], repeat=n))"], ["14931769-0", "itertools.combinations(range(2), 3)", "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"], ["14931769-1", "itertools.combinations(binary_values, 3) where binary_values is the list of binary values to generate combinations from", "lst = list(itertools.product([0, 1], repeat=3))"], ["6310475-49", "import datetime\nnow = datetime.datetime.now()\nnew_time = now + datetime.timedelta(days=1, hours=3)\nprint(new_time)", "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"], ["38831808-53", "The answer code is float(b'4081637ef7d0424a')", "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"], ["42387471-14", "cax = plt.subplots()\ncax.imshow(im)\ncax.set_axis_off()\nplt.colorbar(cax=cax)", "plt.colorbar(im, ax=ax)"], ["28134319-7", "s.replace('\\n', '').strip()", "s[s.find('\\n') + 1:s.rfind('\\n')]"], ["18470323-13", "data.loc[data.index.get_level_values('one') == 'x', ['a', 'c']]", "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"], ["18470323-91", "df.loc[:, ['a', 'c']]\n\nThis code selects only the columns 'a' and 'c' from the dataframe 'data', which has multiindex columns", "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"], ["10040143-71", "sers = Users.filter(userprofile__gte=0)", "User.objects.filter(userprofile__level__gte=0)"], ["27659153-69", "g = [x for x in test if x.startswith('abc')]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"], ["27659153-76", "the code snippet grouped_items = [items for _, items in groupby(items_list)]", "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"], ["11336548-53", "this code snippet", "request.POST.get('title', '')"], ["20222485-17", "sum([i**2 for i in range(10) if i % 2 == 0])", "list(accumulate(list(range(10))))"], ["16436133-47", "if not request.params.has_key('mydata'):\n    mydata = {}\nelse:\n    mydata = request.params.get('mydata')", "json.loads(request.POST.get('mydata', '{}'))"], ["31950612-15", "The answer code would be import string; last_index = string.lastindex(test_string, '({')", "max(test_string.rfind(i) for i in '([{')"], ["8247792-19", "the code snippet print(foobar[0:4])", "\"\"\"foobar\"\"\"[:4]"], ["8247792-29", "import re\ns = \"apple&banana&orange\"\nnew_s = re.findall('[&]', s)\nprint(new_s)\n\nOutput: ['apple', 'banana', 'orange']", "s.rfind('&')"], ["8247792-90", "string.split('&')[0]", "s[:s.rfind('&')]"], ["35178812-30", "df['A'].unique()", "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"], ["10346336-28", "import numpy as np\narr = np.array([list1, list2, list3])", "numpy.array([[1, 2], [3, 4]])"], ["2054416-71", "t = tuple(s[0])", "t = tuple(x[0] for x in s)"], ["11205386-94", "soup.find('meta', {'name': 'City'}).get('content')", "soup.find('meta', {'name': 'City'})['content']"], ["39353758-58", "df.pivot_table(index=['saleid'], columns=['upc'], values='value')", "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"], ["16249440-75", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"], ["13999850-72", "df.to_csv(filename, date_format='%Y%m%d')", "df.to_csv(filename, date_format='%Y%m%d')"], ["1800187-72", "a[a == np.nan] = 0", "b = np.where(np.isnan(a), 0, a)"], ["39277638-98", "import numpy as np\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nc = np.array([[9, 10], [11, 12]])\nmin_ = np.min(np.minimum(a, b))\nmin_ = np.min(np.minimum(min_, c))\n\nAnswer:\n\nimport numpy as np\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nc = np.array([[9, 10], [11, 12]])\nmin_ = np.min(np.minimum(a, b))\nmin_ = np.min(np.minimum(min_, c))", "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"], ["15509617-37", "import datetime\nnow = datetime.datetime.now()\nday_of_week = now.strftime(\"%A\")", "datetime.datetime.now().strftime('%a')"], ["8519599-86", "my_string = \"key1: value1\\nkey2: value2\\nkey3: value3\"", "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"], ["17071871-46", "df[df['A'] == 'foo']", "print(df.loc[df['A'] == 'foo'])"], ["17071871-76", "df[df['column_name']!= some_value]", "df.loc[df['column_name'] != some_value]"], ["17071871-51", "df[~df['column_name'].isin(some_values)]", "df.loc[~df['column_name'].isin(some_values)]"], ["17071871-83", "df[df['column_name'] == some_value]", "df.loc[df['column_name'] == some_value]"], ["17071871-79", "df[df['B'] == 'one' | df['B'] == 'three']", "print(df.loc[df['B'].isin(['one', 'three'])])"], ["739993-25", "import sys\nimport os\nimport re\n\nmodules = []\nfor dirpath, dirnames, filenames in os.walk(os.path.join(os.getcwd(),'site-packages')):\n    for filename in filenames:\n        if re.match(r'\\w+\\.py$', filename):\n            modules.append(os.path.join(dirpath, filename))\nprint(modules)", "help('modules')"], ["12362542-44", "s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)", "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"], ["4116061-59", "import some.package.*", "globals().update(importlib.import_module('some.package').__dict__)"], ["4588628-92", "indices = np.where(x == 0)\nprint(indices)\n\nThis will return the indices of all elements in the numpy array x that are equal to zero", "numpy.where((x == 0))[0]"], ["2428092-52", "import json\nresponse_data = {\n    \"status\": \"success\",\n    \"message\": \"Data retrieved successfully\",\n    \"data\": {\n        \"name\": \"John Doe\",\n        \"age\": 30,\n        \"email\": \"johndoe@example.com\"\n    }\n}\njson_response = json.dumps(response_data)\nprint(json_response)", "return HttpResponse(json.dumps(response_data), content_type='application/json')"], ["10824319-17", "s = '0xdeadbeef'\nhex_string = hex(s)\nprint(hex_string)", "s.decode('hex')"], ["10824319-49", "It then joins the bytes object into a hex string using the map() function to convert each byte to a string representation", "binascii.a2b_hex(s)"], ["12655007-87", "result = list(zip(a, b, c))", "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"], ["10472907-88", "import json\njson_str = json.dumps(adict)\nprint(json_str)", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"], ["10472907-5", "result = ''.join(f\"{k}: {v}\" for k, v in adict.items())", "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"], ["34155829-56", ":\n\nimport numpy as np\nx = np.array(matlab_engine_array)", "np.array(x._data).reshape(x.size[::-1]).T"], ["17731822-88", "hex(walls)\n\nwill convert the list of booleans into a hex string", "hex(int(''.join([str(int(b)) for b in walls]), 2))"], ["17731822-21", "hex(sum(walls))", "hex(sum(b << i for i, b in enumerate(reversed(walls))))"], ["1810743-81", "import os\nos.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"], ["1810743-84", "os.chdir(path)", "os.chdir(path)"], ["1949318-13", "he answer is the status code of the url \"http://www.stackoverflow.com\"", "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"], ["1949318-62", "import requests\nresponse = requests.get('www.python.org')\nif response.status_code == 200:\n    print(\"The website is up and running.\")\nelse:\n    print(\"The website is down or not responding.\")", "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"], ["1949318-89", "import requests\nresponse = requests.get(url)\nstatus_code = response.status_code", "r = requests.head(url)\nreturn (r.status_code == 200)"], ["1949318-26", "The website is up", "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"], ["19758364-39", "data.rename(columns={'gdp': 'log(gdp)'}).head()", "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"], ["15271907-69", "The code snippet to achieve this is rdata.to_frame().reset_index().dropna().drop_duplicates().commit(), and the answer is the commit status of the changes made to the dataframe rdata", "dbb.commit()"], ["5352546-44", "The resulting list of keys can then be used to access the corresponding values using dictionary indexing", "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"], ["5352546-80", "subset = bigdict.items()\nfor k in ('l','m', 'n'):\n    subset = [x for x in subset if x[0] == k]", "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"], ["5352546-22", "items = [item for item in bigdict.items() if item[0] in ('l','m', 'n')]", "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"], ["5352546-75", "for key in ['l','m', 'n']:\n    if key in bigdict:\n        print(bigdict[key])", "{k: bigdict[k] for k in ('l', 'm', 'n')}"], ["2331943-5", "import json\nd = json.loads(u)\n\nAnswer rationale: This code imports the json module and uses its loads() method to decode the JSON string u into a dictionary", "json.load(u)"], ["4940032-13", "with open('example.txt', 'r') as file:\n    for line in file:\n        if line.find('blabla')!= -1:\n            print('Found it!')\n            break", "if ('blabla' in open('example.txt').read()):\n    pass"], ["4940032-15", "with open('example.txt', 'r') as file:\n    for line in file:\n        if 'blabla' in line:\n            print(line)", "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"], ["4940032-22", "with open('example.txt', 'r') as file:\n    for line in file:\n        if 'blabla' in line:\n            print('found')\n            break", "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"], ["4476373-46", "import requests\nresponse = requests.get(url)\nif response.status_code == 200:\n    print(response.text)\nelse:\n    print('Error:', response.status_code)", "r = requests.get(url)"], ["4476373-22", "import requests\nresponse = requests.post(url, json=payload)", "r = requests.get(url, params=payload)"], ["4476373-71", "import requests\nresponse = requests.post(url, json=payload)", "r = requests.post(url, data=payload)"], ["4476373-99", "import requests\nresponse = requests.post('https://example.com/api/data', data=post_data)\nif response.status_code == 200:\n    print('POST request successful')\nelse:\n    print('POST request failed')", "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"], ["1476-16", "bin(173)", "bin(173)"], ["1476-88", "15", "int('01010101111', 2)"], ["1476-71", "the integer 5", "int('010101', 2)"], ["1476-39", "int(bin(int('0b0010101010', 2)))", "int('0b0010101010', 2)"], ["1476-6", "'0b11011'", "bin(21)"], ["1476-59", "int('11111111', 2)", "int('11111111', 2)"], ["41178532-76", "df['ratio'].apply(lambda x: 1 if x > 0 else 0).sum() / len(df)", "(trace_df['ratio'] > 0).mean()"], ["8249836-41", "the code snippet:", "list(itertools.product(*a))"], ["364519-94", "for key in sorted(d.keys()):\n    print(key)", "it = iter(sorted(d.items()))"], ["364519-100", "sorted_d = sorted(d.items())\nfor k in sorted_d:\n    print(k)", "for (key, value) in sorted(d.items()):\n    pass"], ["364519-2", "for key in sorted(dict.keys()):\n    value = dict[key]\n    print(key, value)", "return sorted(dict.items())"], ["364519-33", "for key in sorted(dict.keys()):\n    print(key)", "return iter(sorted(dict.items()))"], ["364519-52", "The code snippet is for k in sorted(foo.keys()): print(k, foo[k]) and the answer is this code snippet", "for (k, v) in sorted(foo.items()):\n    pass"], ["364519-98", "sorted(foo.items(), key=lambda x: x[0])", "for k in sorted(foo.keys()):\n    pass"], ["39414085-16", "import re\nresult = re.sub(r'\\[(?<=[a-z])([A-Z])\\]', r'-\\\\1', s)\nprint(result)", "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"], ["34097281-53", "import tensorflow as tf\nmy_tensor = tf.constant([1, 2, 3])", "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"], ["39816795-71", "s = pd.Series([['A', 'B', 'A1R', 'B2', 'AABB4']], index=['A', 'B', 'A1R', 'B2', 'AABB4'])", "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"], ["638360-2", "he answer is:", "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"], ["19961490-16", "import pandas as pd\ndf = pd.DataFrame(list_of_tuples)", "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"], ["18837262-55", "import pandas as pd\ndf = pd.DataFrame.from_dict(d, orient='index', columns=['Date', 'DateValue'])", "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"], ["4265988-26", "random.uniform(0.1, 0.7)", "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"], ["35414625-11", "df.pivot_table(index=['year','month'], values='item', aggfunc=pd.Series.nunique)", "df.set_index(['year', 'month', 'item']).unstack(level=-1)"], ["35414625-17", "df.pivot_table(index=['year','month'], values='value', aggfunc=sum)", "df.pivot_table(values='value', index=['year', 'month'], columns='item')"], ["748028-31", "output = p1.communicate()[0].decode().strip()\nprint(output)", "p1.communicate()[0]"], ["748028-100", "output = subprocess.check_output(['python', '-c', 'print(\"Hello, world!\")'], universal_newlines=True)\nprint(output)", "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"], ["10408927-95", "import xml.etree.ElementTree as ET\nroot = ET.fromstring('<root><a><b><c/><d/><e/></b><f/></a></root>')\nfor child in root.iter():\n    if child.tag == 'b':\n        for subchild in child:\n            print(subchild.tag, subchild.text)", "[elem.tag for elem in a.iter()]"], ["10408927-56", "he answer is a.getchildren() - [a]", "[elem.tag for elem in a.iter() if elem is not a]"], ["29471884-33", "next(filter(lambda x: x > 2, num_list))", "min([x for x in num_list if x > 2])"], ["2793324-81", "a.remove('b')", "a.remove('b')"], ["2793324-12", "a.remove(c)", "a.remove(c)"], ["2793324-93", "a.remove(6)", "a.remove(6)"], ["2793324-3", "a.remove(6)", "a.remove(6)"], ["2793324-97", "del a[c]", "if (c in a):\n    a.remove(c)"], ["2793324-5", "a.remove(c)", "try:\n    a.remove(c)\nexcept ValueError:\n    pass"], ["5826427-6", "import subprocess\nresult = subprocess.run(['bash', 'test.sh', 'otherfunc'], capture_output=True, text=True)\nprint(result.stdout)", "subprocess.call('test.sh otherfunc')"], ["5826427-73", ":", "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"], ["30605909-89", "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "df.to_csv('c:\\\\data\\\\t.csv', index=False)"], ["9891814-38", "the match object returned by the regex pattern", "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"], ["4668619-32", "from django.db.models import F\nfrom django.utils import timezone\ndate_range = timezone.now().date() - timedelta(days=31)\nobjects = Sample.objects.filter(date__range=(date_range, date_range))", "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"], ["4668619-26", "from django.db.models import Sum\nfrom django.db.models import F\nfrom django.db.models import Subquery\nfrom django.db.models import F", "Sample.objects.filter(date__year='2011', date__month='01')"], ["16387069-81", "import cv2\nimg = cv2.imread('picture.jpg')", "img = Image.open('picture.jpg')\nimg.show()"], ["16387069-86", "driver.get(\"file:///path/to/picture.jpg\")\n\nor\n\ndriver.find_element_by_css_selector(\"img.picture\").click()\n\ndepending on the implementation of the webdriver", "img = Image.open('picture.jpg')\nImg.show"], ["12426043-1", "with open('f', 'w') as f:\n    f.write(open('xxx.mp4').read())", "f.write(open('xxx.mp4', 'rb').read())"], ["41572822-28", "df.columns = df.columns.map(lambda x: x.str.extract(r'[a-zA-Z]+\\d+'))\ndf = df.sort_index(ascending=False)\ndf.columns = df.columns.map(lambda x: x.str.extract(r'[a-zA-Z]+\\d+'))\ndf = df.reset_index(drop=True)\ndf.columns = df.columns.map(lambda x: x.str.extract(r'[a-zA-Z]+\\d+'))\ndf = df.sort_index(ascending=False)\ndf.columns = df.columns.map(lambda x: x.str.extract(r'[a-zA-Z]+\\d+'))", "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"], ["21558999-5", "df1.drop_duplicates(inplace=True)\ndf1['freq'] = df1.groupby('column_name').size()", "df1.groupby(['key', 'year']).size().reset_index()"], ["40963347-42", "df.mean()", "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"], ["7284952-22", "from django.shortcuts import redirect\nreturn redirect('index')", "redirect('Home.views.index')"], ["42352887-25", "keys = list(things.keys())\nsorted_keys = sorted(keys, key=lambda x: things[x]['weight'])", "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"], ["247770-78", "import os\npath = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'a_module'))", "print(a_module.__file__)"], ["247770-2", "import os\ncurrent_module_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))", "print(os.getcwd())"], ["247770-13", "os.path.join(os.path.dirname(os.path.abspath(__file__)), 'amodule.py')", "path = os.path.abspath(amodule.__file__)"], ["40660956-52", "df.sum(axis=1)", "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"], ["5110352-21", "The current time is (insert time here)", "now = datetime.datetime.now().strftime('%H:%M:%S')"], ["3283984-56", ":", "bytes.fromhex('4a4b4c').decode('utf-8')"], ["14971373-85", "The answer code is ps -ef | grep something | wc -l", "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"], ["18079563-10", "s1 = pd.Series([1, 2, 3, 4, 5])\ns2 = pd.Series([2, 3, 4, 5, 6])\nresult = s1.intersection(s2)", "pd.Series(list(set(s1).intersection(set(s2))))"], ["26153795-98", "date_only = datetime.datetime.strptime(when, '%Y-%m-%d').date()", "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"], ["5123839-3", "entry = Entry.objects.first()", "Entry.objects.filter()[:1].get()"], ["29784889-2", "import warnings\nwarnings.filterwarnings('always')", "warnings.simplefilter('always')"], ["22676-23", "import requests\nresponse = requests.get('http://www.example.com/songs/mp3.mp3')\nwith open('mp3.mp3', 'wb') as f:\n    f.write(response.content)", "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"], ["22676-91", "import requests\nresponse = requests.get(url)\nwith open(file_name, 'wb') as f:\n    f.write(response.content)", "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"], ["22676-14", "import requests\nresponse = requests.get('http://www.example.com/')", "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"], ["22676-1", "import requests\nresponse = requests.get(url)", "r = requests.get(url)"], ["22676-64", "import requests #import the requests library from requests import get #import necessary methods from requests", "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"], ["4490961-76", "P @ T", "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"], ["1592158-5", "float('470FC614')", "struct.unpack('!f', '470FC614'.decode('hex'))[0]"], ["7286365-38", "numbers = list(range(1, 11))\nnumbers.reverse()\nprint(numbers)", "list(reversed(list(range(10))))"], ["20573459-83", "datetime.now().replace(day=datetime.timedelta(days=-7))", "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"], ["23164058-67", "import base64\nencoded_string = base64.b64encode('your string')\nprint(encoded_string)", "base64.b64encode(bytes('your string', 'utf-8'))"], ["11236006-9", "a list of tuples containing the duplicate values in mylist", "[k for k, v in list(Counter(mylist).items()) if v > 1]"], ["31247198-48", "df.to_csv('np.txt', index=False)", "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"], ["31247198-21", "df.to_csv('c:\\\\data\\\\pandas.txt', index=False)", "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"], ["15851568-6", "x.split('-')", "print(x.rpartition('-')[0])"], ["15851568-9", "def last_part(s):\n    return s.split('-')[-1]", "print(x.rsplit('-', 1)[0])"], ["4172131-18", "import random\nmy_list = list(range(1, 11))\nrandom.shuffle(my_list)\nprint(my_list)", "[int(1000 * random.random()) for i in range(10000)]"], ["6677332-3", "time.time() * 10**6 % 100000000 which returns the microseconds since the epoch", "datetime.datetime.now().strftime('%H:%M:%S.%f')"], ["583557-14", "print(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\" \"]*len(tab)))\nprint(\"|\".join([\"*\"]*len(tab)))\nprint(\"|\".join([\"", "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"], ["26053849-22", "df['non_zero_counts'] = df.apply(lambda x: len(x[x.nonzero()]))", "df.astype(bool).sum(axis=1)"], ["30693804-5", "text = re.sub(r'[^a-zA-Z0-9 ]', '', text).lower()", "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"], ["30693804-72", "text = text.replace(r'\\W+', '').lower()", "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"], ["14435268-66", "from bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_content, 'html.parser')\nname = soup.find('tag', attrs={'name': 'name'}).get_text()\nprint(name)", "print(soup.find('name').string)"], ["2011048-15", "with open(filepath, 'r') as f:\n    count = sum(1 for line in f)\nprint(count)", "os.stat(filepath).st_size"], ["2600191-99", "count = l.count(\"a\")", "l.count('a')"], ["2600191-23", "count = 0\nfor item in l:\n    count += l.count(item)", "Counter(l)"], ["2600191-53", "count = sum(1 for x in l if x in l)", "[[x, l.count(x)] for x in set(l)]"], ["2600191-55", "count = 0\nfor item in l:\n    if item in l:\n        count += 1\nprint(count)", "dict(((x, l.count(x)) for x in set(l)))"], ["2600191-98", "count = sum(1 for item in l if item == 'b')\n\nThis code snippet counts the number of times the item \"b\" appears in the list l", "l.count('b')"], ["12842997-15", "import shutil\nshutil.copyfile(srcfile, dstdir)", "shutil.copy(srcfile, dstdir)"], ["38152389-84", "df['c'] = df['a'] + df['b']", "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"], ["16296643-89", "t = (1, 2, 3)", "tuple(l)"], ["16296643-20", "level1 = tuple([1, 2, 3])\nlevel1 = list(level1)", "level1 = map(list, level1)"], ["3880399-74", "with open(logFile, 'w') as f:\n    pprint(dataobject, stream=f)", "pprint.pprint(dataobject, logFile)"], ["21800169-34", "df['BoolCol'].str.contains('True').astype(int).sum()", "df.loc[df['BoolCol']]"], ["21800169-19", "df['BoolCol'].eq(True).nonzero()[0]", "df.iloc[np.flatnonzero(df['BoolCol'])]"], ["21800169-92", "row_index = df['BoolCol'].isin([True]).index\n\nThis code will return a list of the row indices where the value in the 'BoolCol' column is True", "df[df['BoolCol'] == True].index.tolist()"], ["21800169-41", "df['BoolCol'].isin([True]).index", "df[df['BoolCol']].index.tolist()"], ["299446-100", "os.chdir(\"owd\")", "os.chdir(owd)"], ["32063985-36", "from bs4 import BeautifulSoup\nimport requests\nurl = 'https://www.example.com'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\nfor div in soup.find_all('div'):\n    if div.get('id') =='main-content':\n        div.decompose()", "soup.find('div', id='main-content').decompose()"], ["17960441-40", "for i in range(len(a)):\n    a[i], b[i] = b[i], a[i]\n\nThis code block will join each element in array a with the element at the same index in array b as a tuple", "np.array([zip(x, y) for x, y in zip(a, b)])"], ["17960441-39", "import itertools\nresult = list(itertools.zip_longest(a, b))", "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"], ["26443308-74", "last_index = string.find('}', 'abcd}def{})'\nprint(last_index)", "'abcd}def}'.rfind('}')"], ["20546419-7", "import numpy as np\nr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nr = r.reshape(3, 3)\nr = r.T\nr = r.flatten()\nr = r.reshape(9, 1)\nr = r.T\nr = r.flatten()\nr = r.reshape(3, 3)", "np.random.shuffle(np.transpose(r))"], ["574236-63", "import os\nnum_files = len(os.listdir('/path/to/drive'))", "os.statvfs('/').f_files - os.statvfs('/').f_ffree"], ["7011291-98", "result = cursor.fetchone()", "cursor.fetchone()[0]"], ["4454298-91", "with open('infile', 'r') as f:\n    contents = f.read()\nwith open('outfile', 'w') as f:\n    f.write('#test firstline\\n' + contents)", "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"], ["9012008-0", "import re\nif re.search(r'ba[rzd]', 'foobarrrr'):\n    print('True')\nelse:\n    print('False')", "bool(re.search('ba[rzd]', 'foobarrrr'))"], ["7961363-85", "t = list(set(t))", "list(set(t))"], ["7961363-86", "unique_list = list(set(source_list))", "list(set(source_list))"], ["7961363-7", "unique_list = list(set(abracadabra))", "list(OrderedDict.fromkeys('abracadabra'))"], ["5183533-81", "a = [1, 2, 3, 4, 5]\na_list = list(a)", "numpy.array(a).reshape(-1).tolist()"], ["5183533-11", "a[0].tolist()", "numpy.array(a)[0].tolist()"], ["5999747-97", "soup.find('td', {'text': 'Address:'}).get_text()", "print(soup.find(text='Address:').findNext('td').contents[0])"], ["8908287-54", "import base64\nencoded_data = base64.b64encode(data_to_be_encoded.encode())", "encoded = base64.b64encode('data to be encoded')"], ["8908287-40", "data_encoded = data.encode('ascii')", "encoded = 'data to be encoded'.encode('ascii')"], ["9035479-73", "my_object.my_str", "getattr(my_object, my_str)"], ["34945274-35", "A[A!=[1,3,4]] = 0 or A[A!=A[1:3:4]] = 0", "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"], ["15819980-52", ":", "np.mean(a, axis=1)"], ["15907200-35", "import csv\nwith open('file.csv', 'a') as csvfile:\n    writer = csv.writer(csvfile)\n    writer.writerow(['Header'])", "writer.writeheader()"], ["23359886-48", "a = np.array([[0, 1], [1, 0]])\nselected_rows = a[:, 1]", "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"], ["26097916-29", "df = pd.DataFrame({'email': sf['email'], 'list': sf['list']})", "pd.DataFrame({'email': sf.index, 'list': sf.values})"], ["1405602-48", "from PIL import Image\nimage = Image.open('image.jpg')\nimage = image.resize((x, y), Image.ANTIALIAS)\nimage.save('resized_image.jpg')", "image = image.resize((x, y), Image.ANTIALIAS)"], ["9323159-38", "l1 = [1, 2, 3, 4, 5]\nl2 = [2, 4, 6, 8, 10]\ndifferences = sorted([abs(x - y) for x, y in zip(l1, l2)], reverse=True)[:10]", "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"], ["29877663-54", "for span in soup.find_all('span', class_='starGryB sp'):\n    print(span.text)", "soup.find_all('span', {'class': 'starGryB sp'})"], ["16193578-72", "sorted(list5, key=lambda x: x.degrees)", "sorted(list5, lambda x: (degree(x), x))"], ["16193578-58", "the code snippet sorted(my_list, key=my_key)", "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"], ["7373219-3", "attr = obj.get_attr()", "getattr(obj, 'attr')"], ["1960516-75", "import json\njson_str = json.dumps({'decimal': Decimal('3.9')})\nprint(json_str)", "json.dumps(Decimal('3.9'))"], ["29836836-87", "df[df['A'].str.contains('^[^,]+$', case=False)]", "df.groupby('A').filter(lambda x: len(x) > 1)"], ["35420052-72", "cax = plt.colorbar(mappable)", "plt.colorbar(mappable=mappable, cax=ax3)"], ["29903025-37", "df['word'] = df['text'].apply(lambda x: x.split())\ndf['count'] = df['word'].apply(lambda x: len(x))\ndf = df.sort_values(by='count', ascending=False)\ntop_100 = df.head(100)\ntop_100['word'] = top_100.index\ntop_100 = top_100.reset_index(drop=True)", "Counter(' '.join(df['text']).split()).most_common(100)"], ["4530069-65", "import datetime\nnow = datetime.datetime.utcnow()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S %Z\"))", "datetime.now(pytz.utc)"], ["9262278-9", "import json\nfrom django.http import JsonResponse\ndef my_view(request):\n    data = {'key1': 'value1', 'key2': 'value2'}\n    response = JsonResponse(data)\n    return response", "return HttpResponse(data, mimetype='application/json')"], ["3595685-42", "import subprocess\nsubprocess.run(['python', '-c', 'import background_process; background_process.run(\"arguments\")'], shell=True)", "subprocess.Popen(['background-process', 'arguments'])"], ["30729735-74", "myList = ['this is a test', 'how are you?', 'what is going on?', 'this is another test']\nindex = myList.index(myList[myList.find('how')])\nindex = myList.index(myList[myList.find('what')])", "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"], ["22799300-26", "df = pd.DataFrame(tuples, columns=['out-1', 'out-2'])", "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"], ["3464359-19", "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)", "ax.set_xticklabels(labels, rotation=45)"], ["2212433-44", "len(yourdict.keys())", "len(list(yourdict.keys()))"], ["2212433-64", "yourdictfile.keys()", "len(set(open(yourdictfile).read().split()))"], ["40924332-83", "df[['first_column']].explode().reset_index(drop=True)", "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"], ["804995-74", "the output of the subprocess", "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"], ["26441253-42", "q.reverse()\n\nwill reverse the priority queue", "q.put((-n, n))"], ["21887754-31", "a = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.concatenate((a, b), axis=0)", "print(concatenate((a, b), axis=0))"], ["21887754-88", "import numpy as np\nresult = np.concatenate(np.rollaxis(a, 2), np.rollaxis(b, 2))", "print(concatenate((a, b), axis=1))"], ["21887754-21", "import numpy as np\nresult = np.concatenate(np.split(a, 2, axis=0), axis=0)", "c = np.r_[(a[None, :], b[None, :])]"], ["21887754-64", "import numpy as np\nresult = np.concatenate([a, b], axis=0)", "np.array((a, b))"], ["4356842-88", "from django.http import HttpResponseForbidden\nresponse = HttpResponseForbidden(\"Unauthorized\")\nresponse['X-Frame-Options'] = 'DENY'\nreturn response", "return HttpResponse('Unauthorized', status=401)"], ["31793195-78", "df.index.get_loc('bob')", "df.index.get_loc('bob')"], ["18730044-52", "[[1, 4],\n [2, 5],\n [3, 6]]", "np.column_stack(([1, 2, 3], [4, 5, 6]))"], ["22187233-98", "string = 'it is icy'\nstring = string.replace('i', '')\nprint(string)", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["22187233-48", "The code to do this is:", "re.sub('i', '', 'it is icy')"], ["22187233-75", "s = \"it is icy\"\ns = s.replace(\"i\", \"\")\nprint(s)\n\nOutput: \"itisicy\"", "\"\"\"it is icy\"\"\".replace('i', '')"], ["22187233-63", "string = \"hello world\"\nstring = string.replace(\"l\", \"\")\nprint(string)\n\nThis code replaces all instances of the letter 'l' in the string with an empty string, effectively deleting them", "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"], ["10351772-57", "nums = [int(x) for x in intstringlist]", "nums = [int(x) for x in intstringlist]"], ["10351772-10", "a list of integers", "map(int, eval(input('Enter the unfriendly numbers: ')))"], ["3964681-43", "import os\nfiles = os.listdir(\"/mydir\")\nfor file in files:\n    if file.endswith(\".txt\"):\n        print(file)", "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"], ["3964681-18", "import os\nfiles = os.listdir(\"/mydir\")\nfor file in files:\n    if file.endswith(\".txt\"):\n        print(file)", "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"], ["3964681-62", "import os\nfiles = os.listdir(\"/mydir\")\nfor file in files:\n    if file.endswith(\".txt\"):\n        print(file)", "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"], ["18979111-77", "import json\ndata = json.loads(request.body)\n\nand the answer is this code snippet", "json.loads(request.body)"], ["36402748-46", "df.sort_values(by='column_name', ascending=False, key=lambda x: x.value_counts().index)", "df.groupby('prots').sum().sort('scores', ascending=False)"], ["7750557-47", "import requests\nresponse = requests.get(url)\njson_data = response.json()", "json.load(urllib.request.urlopen('url'))"], ["2984751-50", "from datetime import datetime\nfrom django.utils import timezone\ntz = timezone.get_default_timezone()\nnow = datetime.now(tz=tz)\nnow_hour = now.hour", "Entry.objects.filter(pub_date__contains='08:00')"], ["5944630-52", "sorted_list = sorted(list, key=lambda d: (d['points'], d['time']))", "list.sort(key=lambda item: (item['points'], item['time']))"], ["19546911-36", "number = int(input())", "struct.unpack('H', struct.pack('h', number))"], ["20107570-40", "df.to_csv('output.csv', index=False)", "df.to_csv(filename, index=False)"], ["8740353-74", "import json\nunescaped = 'example'\njson_data = json.loads(unescaped)", "json_data = json.loads(unescaped)"], ["18367007-15", "with open(newFile, 'wb') as f:\n    f.write(newFileBytes)", "newFile.write(struct.pack('5B', *newFileBytes))"], ["16125229-76", "last_key = dict.keys()[-1]", "list(dict.keys())[-1]"], ["10668585-75", "from django.db.models import Max\nmax_value = AuthorizedEmail.objects.values_list('added', flat=True).max()", "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"], ["10607688-46", "import datetime\nnow = datetime.datetime.now()\nprint(now)", "datetime.datetime.now()"], ["17794266-82", "import numpy as np\ndef get_highest_element(x):\n    return np.abs(x).max()", "max(x.min(), x.max(), key=abs)"]]}