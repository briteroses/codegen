{
    "(2, True, False)": [
        [
            "11840111-96",
            "d1.values() / d2.values()",
            "{k: (float(d2[k]) / d1[k]) for k in d2}"
        ],
        [
            "11840111-75",
            "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'a': 4, 'b': 5, 'c': 6}\nresult = d1 / d2",
            "dict((k, float(d2[k]) / d1[k]) for k in d2)"
        ],
        [
            "19602931-64",
            "import urllib.request\nimport os\nurl = 'http://randomsite.com/file.gz'\nfilename = 'file.gz'\nurllib.request.urlretrieve(url, filename)\nwith open(filename, 'rb') as f:\n    data = f.read()\nos.remove(filename)",
            "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
        ],
        [
            "19602931-43",
            "he answer is urllib.request.urlretrieve(\"http://randomsite.com/file.gz\", \"file.gz\")",
            "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
        ],
        [
            "23351183-26",
            "from django.db.models import Field\nclass MyModel(models.Model):\n    charfield = models.CharField(max_length=255)\n    \n    def __init__(self, *args, **kwargs):\n        super(MyModel, self).__init__(*args, **kwargs)\n        \n        self.charfield.to_python = lambda v: v",
            "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"
        ],
        [
            "432842-3",
            "a = [1, 0, 1]\nb = [0, 1, 0]\nc = a ^ b\nprint(c)\n\n\nOutput: [1, 1, 0]",
            "((a and (not b)) or ((not a) and b))"
        ],
        [
            "546321-12",
            "import datetime\ntoday = datetime.date.today()\none_month_ago = today - datetime.timedelta(days=30)\none_month_ago_date = one_month_ago.date()",
            "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"
        ],
        [
            "546321-62",
            "from datetime import datetime\ntoday = datetime.date.today()\ntwo_months_from_today = today + datetime.timedelta(days=30*30)\ndate_two_months_from_today = two_months_from_today.date()\nprint(date_two_months_from_today)",
            "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"
        ],
        [
            "1186789-34",
            "code snippet to achieve this is:",
            "subprocess.call('test1.py', shell=True)"
        ],
        [
            "843277-70",
            "def shutdown_and_restart_computer():\n    subprocess.run(['shutdown', '/r', '/t', '0'])",
            "hasattr(obj, 'attr_name')"
        ],
        [
            "2231663-53",
            "from operator import itemgetter\nlst = [1, 2, 3, 4, 5, 6, 7]\neven_lst = [lst[i:i+2] for i in range(0, len(lst), 2)]",
            "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"
        ],
        [
            "2231663-54",
            "lst = [1, 2, 3, 4, 5]\nsub_lst = list(itertools.tee(lst, 2))",
            "[input[i:i + n] for i in range(0, len(input), n)]"
        ],
        [
            "14571103-73",
            "import re\ns = \"hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello",
            "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"
        ],
        [
            "27868020-14",
            "df[df['X'].sum(axis=1) == 0]",
            "df.loc[df.groupby('User')['X'].transform(sum) == 0]"
        ],
        [
            "27868020-52",
            "df[df['X'] == 0]",
            "df.groupby('User')['X'].transform(sum) == 0"
        ],
        [
            "4302027-39",
            "import webbrowser\nwebbrowser.open('http://example.com')",
            "webbrowser.open('http://example.com')"
        ],
        [
            "4906977-61",
            "os.environ['HOME']",
            "os.environ['HOME']"
        ],
        [
            "4906977-33",
            "he answer is the code snippet os.environ['HOME']",
            "os.environ['HOME']"
        ],
        [
            "4906977-98",
            "print(os.environ)\n\nwill print a dictionary of all environment variables",
            "print(os.environ)"
        ],
        [
            "4906977-9",
            "import os\nimport contextvars\nprint(os.environ)\nprint(contextvars.Context.keys())",
            "os.environ"
        ],
        [
            "4906977-77",
            "key, default and the result are str.\"\nanswer = os.getenv(\"KEY_THAT_MIGHT_EXIST\", \"default_value\")",
            "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"
        ],
        [
            "674509-17",
            "sorted_dict = sorted(dictionary.items())",
            "sorted(list(dictionary.items()), key=operator.itemgetter(1))"
        ],
        [
            "674509-45",
            "for key, value in sorted(my_dict.items(), key=operator.itemgetter(1)):\n    print(key, value)",
            "sorted(list(dictionary.items()), key=lambda x: x[1])"
        ],
        [
            "29370211-80",
            "['stats_split'] = df['stats'].str.split(',')",
            "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"
        ],
        [
            "29370211-55",
            "df['stats'] = df['stats'].str.split(',', expand=True)",
            "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"
        ],
        [
            "3939361-35",
            "nswer is re.sub(r'[!@#$]', '', line)",
            "line.translate(None, '!@#$')"
        ],
        [
            "3939361-33",
            "line.replace('!@#$', '').replace('!@#$', '').replace('!@#$', '')",
            "line = re.sub('[!@#$]', '', line)"
        ],
        [
            "3939361-18",
            "def remove_string(string):\n    return string.replace(\"1\", \"\")",
            "string.replace('1', '')"
        ],
        [
            "3939361-89",
            "import re\nline = 'hello world!@#$'\nresult = re.sub('[!@#$]', '', line)\nprint(result)",
            "line = line.translate(string.maketrans('', ''), '!@#$')"
        ],
        [
            "14043934-80",
            "t = time.time()\nt -= 3600 # 1 hour in seconds\nt -= 10 * 60 # 10 minutes in seconds\nnew_time = time.mktime(time.gmtime(t))\nprint(time.strftime(\"%H:%M:%S\", time.gmtime(new_time)))",
            "(t - datetime.timedelta(hours=1, minutes=10))"
        ],
        [
            "14043934-42",
            "from datetime import datetime\ndt = datetime.now()\nnew_dt = dt.replace(hour=dt.hour + 5)\nprint(new_dt)",
            "dt -= datetime.timedelta(hours=5)"
        ],
        [
            "13496087-84",
            "import random\nimport string\nimport uuid\nrandom_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))\nrandom_uuid = uuid.uuid4()\nprint(\"Random number:\", random_string)\nprint(\"Random UUID:\", random_uuid)",
            "random.randint(100000000000, 999999999999)"
        ],
        [
            "13496087-95",
            "he answer is import random; print(random.randint(0, 999999999))",
            "'%0.12d' % random.randint(0, 999999999999)"
        ],
        [
            "11709079-81",
            "import requests\nfrom bs4 import BeautifulSoup\nurl = 'http://www.google.com/'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\nprint(soup.title.string)\nprint(soup.meta['description'].string)\nprint(soup.meta['keywords'].string)",
            "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"
        ],
        [
            "1892339-46",
            "The code snippet for this is:",
            "root.lift()"
        ],
        [
            "1823058-26",
            "print \"{:,}\".format(value)",
            "'{:,}'.format(value)"
        ],
        [
            "14406214-5",
            "ax.set_xticklabels([])\nax.set_yticklabels([])",
            "ax.xaxis.set_label_position('top')"
        ],
        [
            "14406214-43",
            "ax.set_ylim(top=None, bottom=None)",
            "ax.xaxis.tick_top()"
        ],
        [
            "10565598-66",
            "if any(b in a for b in array) == len(array):\n    print(\"array b contains all elements of array a\")\nelse:\n    print(\"array b does not contain all elements of array a\")",
            "numpy.in1d(b, a).all()"
        ],
        [
            "13557937-8",
            "the code snippet struct.unpack('I', binascii.hexlify(struct.pack('I', 8)))",
            "list('{0:0b}'.format(8))"
        ],
        [
            "13557937-9",
            "struct.unpack('I', binascii.hexlify(struct.pack('I', 8)))",
            "[int(x) for x in list('{0:0b}'.format(8))]"
        ],
        [
            "311627-76",
            "import datetime\nnow = datetime.datetime.now()\nprint(\"The current date and time is:\", now)",
            "time.strftime('%Y-%m-%d %H:%M')"
        ],
        [
            "3940128-52",
            "lst = [1, 2, 3, 4, 5]\nreversed_lst = list(reversed(lst))\nprint(reversed_lst)",
            "L[::(-1)]"
        ],
        [
            "3940128-21",
            "nswer is L[::-1]",
            "L.reverse()"
        ],
        [
            "89228-90",
            "import subprocess\noutput = subprocess.check_output(\"ls -l\", shell=True)\nprint(output)",
            "from subprocess import call"
        ],
        [
            "89228-91",
            "to use the subprocess module to execute the external command with arguments, such as by calling subprocess.check_call(\"some_command\", *args)",
            "os.system('some_command with args')"
        ],
        [
            "89228-25",
            "import subprocess\nsubprocess.call(['some_command', 'input_file', '|', 'another_command', '>', 'output_file'])",
            "os.system('some_command < input_file | another_command > output_file')"
        ],
        [
            "89228-76",
            "subprocess.check_call(['some_command', 'arg1', 'arg2'])",
            "stream = os.popen('some_command with args')"
        ],
        [
            "89228-97",
            "the code block:",
            "return_code = subprocess.call('echo Hello World', shell=True)"
        ],
        [
            "89228-44",
            "ubprocess.check_output(\"ls -l\", shell=True)",
            "call(['ls', '-l'])"
        ],
        [
            "5137497-23",
            "the current directory",
            "os.path.realpath(__file__)"
        ],
        [
            "5137497-33",
            "import os\npath = '/path/to/directory'\nfor entry in os.scandir(path):\n    print(entry.name)",
            "os.path.dirname(path)"
        ],
        [
            "5137497-66",
            ": os.path.normpath(path)",
            "os.path.realpath(path)"
        ],
        [
            "5137497-91",
            "os.path.basename(os.getcwd())",
            "dir_path = os.path.dirname(os.path.realpath(__file__))"
        ],
        [
            "5137497-76",
            "the code block that implements this rationale",
            "full_path = os.path.realpath(__file__)"
        ],
        [
            "14961562-66",
            "The resulting list contains the integer value of each byte in the hexadecimal string",
            "struct.unpack('11B', s)"
        ],
        [
            "19738169-65",
            "df['DateStr'] = df['DateObj'].astype(str).strptime('%Y-%m-%d')",
            "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"
        ],
        [
            "104420-82",
            "[('1', '2', '3', '4', '5', '6'), ('1', '2', '3', '4', '6', '5'), ('1', '2', '3', '5', '4', '6'), ('1', '2', '3', '5', '6', '4'), ('1', '2', '4', '3', '5', '6'), ('1', '2', '4', '5', '3', '6'), ('1', '2', '4', '5', '6', '3'), ('1', '3', '2', '4', '5', '6'), ('1', '3', '2', '4', '6', '5'), ('1', '3', '2', '5', '4', '6'), ('1', '3', '2', '5', '6', '4'), ('1', '3', '4', '2', '5', '6'), ('1', '3', '4', '2', '6', '5'), ('1', '3', '4', '5', '2', '6'), ('1', '3', '4', '5', '6', '2'), ('1', '3', '5', '2', '4', '6'), ('1', '3', '5', '2', '6', '4'), ('1', '3', '5', '4', '2', '6'), ('1', '3', '5', '4', '6', '2'), ('1', '4', '2', '3', '5', '6'), ('1', '4', '2', '3', '6', '5'), ('1', '4', '2', '5', '3', '6'), ('1', '4', '2', '5', '6', '3'), ('1', '4', '3', '2', '5', '6'), ('1', '4', '3', '2', '6', '5'), ('1', '4', '3', '5', '2', '6'), ('1', '4', '3', '5', '6', '2'), ('1', '4', '5', '",
            "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"
        ],
        [
            "104420-100",
            "list(itertools.permutations([1, 2, 3]))",
            "itertools.permutations([1, 2, 3])"
        ],
        [
            "19781609-19",
            "df.to_csv(filename='filename.csv', index=False)",
            "df.to_csv('filename.csv', header=False)"
        ],
        [
            "1406145-57",
            "root.destroy()",
            "root.destroy()"
        ],
        [
            "2225564-15",
            "import os\nimport os.path\nfor entry in os.scandir('.'):\n    if entry.startswith('0') and entry.endswith('.jpg'):\n        files.append(entry)",
            "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"
        ],
        [
            "30406725-90",
            "df.pivot_table(index='order', values='sample', columns='value', aggfunc='sum')",
            "df.pivot(index='order', columns='sample')"
        ],
        [
            "18229082-25",
            "import pickle\nwith open('afile', 'wb') as f:\n    pickle.dump([1, 2, 3], f)\nwith open('afile', 'rb') as f:\n    lst = pickle.load(f)\nprint(lst)",
            "pickle.load(open('afile', 'rb'))"
        ],
        [
            "3329386-17",
            "The code to extract first two substrings in string phrase that end in ., ? or ! is re.findall(r'\\b([.?!]\\w*)\\b', phrase)[:2]",
            "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"
        ],
        [
            "22733642-1",
            "wer is:",
            "self.writer.writerow([str(s).encode('utf-8') for s in row])"
        ],
        [
            "13114512-57",
            "import pandas as pd\ndata = pd.DataFrame({'A': [1, 2, 3, 4, 5], 'B': [6, 7, 8, 9, 10]})\nprint(data.diff())\n\nOutput: A  0\n2  1\n3  2\n4  3\n5  4\ndtype: int64\n\nThe output is the resulting DataFrame with the absolute differences between each row and the row previous to it",
            "data.set_index('Date').diff()"
        ],
        [
            "28901311-21",
            "The answer code is:",
            "np.where(np.in1d(A, B))[0]"
        ],
        [
            "18102109-63",
            "from datetime import datetime\nfrom datetime import timedelta\nimport datetime\nimport time\nimport datetime\nimport pandas as pd\nimport re\nimport tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime",
            "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"
        ],
        [
            "415511-22",
            "import datetime\nprint(datetime.datetime.now())",
            "datetime.datetime.now()"
        ],
        [
            "415511-29",
            "import datetime\nimport time\ncurrent_time = datetime.datetime.now()\ncurrent_time_str = current_time.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(\"Current time:\", current_time_str)",
            "datetime.datetime.now().time()"
        ],
        [
            "415511-26",
            "import time\nprint(time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime()))",
            "strftime('%Y-%m-%d %H:%M:%S', gmtime())"
        ],
        [
            "415511-14",
            "import time\nnow = time.time()\nfmt_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(now))\nprint(fmt_str)",
            "str(datetime.now())"
        ],
        [
            "415511-33",
            "the current time in the format of seconds since the epoch",
            "datetime.datetime.time(datetime.datetime.now())"
        ],
        [
            "32283692-10",
            "array([[1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9]])",
            "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"
        ],
        [
            "32283692-46",
            "array([[1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9],\n       [1, 2, 3, 4, 5, 6, 7, 8, 9]])",
            "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"
        ],
        [
            "36542169-84",
            "df.head()",
            "pd.concat([df.head(1), df.tail(1)])"
        ],
        [
            "2803852-74",
            "The strptime() and strftime() methods are not necessary for this task",
            "datetime.datetime.strptime('24052010', '%d%m%Y').date()"
        ],
        [
            "39719140-55",
            "df.groupby(df.nonzero().sum()).mean()\n\nThis code uses the groupby() function to group the nonzero values of df by their indices, and then uses the mean() function to calculate the mean of each group",
            "np.flatnonzero(x).mean()"
        ],
        [
            "5508352-50",
            "the code snippet np.where(a == b)",
            "a[tuple(b)]"
        ],
        [
            "2233917-10",
            "input an integer tuple from user",
            "tuple(map(int, input().split(',')))"
        ],
        [
            "2233917-8",
            "Please enter a tuple of integers.\")\n    return x",
            "tuple(int(x.strip()) for x in input().split(','))"
        ],
        [
            "10998621-33",
            "ax.set_xticklabels(ax.get_xticklabels(), rotation=45)",
            "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"
        ],
        [
            "40517350-9",
            "result = df.groupby(['STNAME', 'COUNTY_POP'])['COUNTY_POP'].max()\nresult = result.reset_index().rename(columns={'index': 'STNAME'})\nresult = result.groupby('STNAME')['COUNTY_POP'].max().reset_index()\nresult = result.rename(columns={'index': 'COUNTY_POP'})",
            "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"
        ],
        [
            "28664103-14",
            "df_pivot = df.pivot_table(index=df.index.date, columns=df.index.time, values='Close')",
            "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"
        ],
        [
            "8192379-98",
            "import torch\na = torch.tensor([int(x) for x in input().split()])",
            "a.fromlist([int(val) for val in stdin.read().split()])"
        ],
        [
            "13237941-54",
            "ourdata.reverse()",
            "sorted(yourdata, reverse=True)"
        ],
        [
            "13237941-56",
            "sorted(yourdata, key=operator.itemgetter('subkey'))",
            "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"
        ],
        [
            "13237941-14",
            "import operator\nyourdata = [\n    {'key': 1,'subkey': 2},\n    {'key': 2,'subkey': 3},\n    {'key': 3,'subkey': 4}\n]\nsorted_data = sorted(yourdata, key=operator.itemgetter('key','subkey'), reverse=True)\nprint(sorted_data)",
            "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"
        ],
        [
            "15548506-61",
            "G.nodes.data['label'] = labels\nplt.scatter(pos[0], pos[1], s=50, c=labels, cmap='tab20')\nplt.axis('off')\nplt.show()",
            "networkx.draw_networkx_labels(G, pos, labels)"
        ],
        [
            "7287996-89",
            "os.path.commonpath('/usr/var', '/usr/var2/log')",
            "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"
        ],
        [
            "7287996-17",
            "import os\npath = '/usr/var'\nstart = '/usr/var/log/'\nrel_path = os.path.relpath(path, start)\nprint(rel_path)\n\nOutput: /usr/var/log",
            "print(os.path.relpath('/usr/var/log/', '/usr/var'))"
        ],
        [
            "14925239-71",
            "if hasattr(myobject, 'id') and hasattr(myobject.id, 'number'):\n    number = myobject.id.number\nelse:\n    number = None",
            "getattr(getattr(myobject, 'id', None), 'number', None)"
        ],
        [
            "41469647-32",
            "reshape(-1, 1, 1) @ np.ones((1, 1, 1))",
            "np.einsum('ij,kj->jik', X, X)"
        ],
        [
            "32292554-35",
            "itertools.product([0,1], repeat=4)",
            "itertools.product(list(range(2)), repeat=4)"
        ],
        [
            "3166619-87",
            "the code snippet re.findall(r'\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')",
            "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"
        ],
        [
            "13628725-82",
            "import random\nprint(random.randint(1, 50))\nprint(random.randint(1, 50))\nprint(random.randint(1, 50))\nprint(random.randint(1, 50))\nprint(random.randint(1, 50))\nprint(random.randint(1, 50))\nprint(random.randint(1, 50))",
            "random.sample(range(1, 50), 6)"
        ],
        [
            "13628725-59",
            "mport random\nimport string\nimport uuid\nimport hashlib\nimport hmac\nimport base64\nimport binascii\nimport struct\nimport hashlib\nimport zlib\nimport gzip\nimport base64\nimport pickle\nimport cPickle\nimport marshal\nimport cPickle\nimport json\nimport cjson\nimport bz2\nimport base64\nimport gzip\nimport lzma\nimport zlib\nimport pickle\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport pickle\nimport cPickle\nimport xml.etree.ElementTree as ET\nimport xml.etree.cElementTree as ET\nimport json\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport base64\nimport lzma\nimport gzip\nimport zlib\nimport binascii\nimport struct\nimport hashlib\nimport hmac\nimport base64\nimport pickle\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport base64\nimport gzip\nimport lzma\nimport zlib\nimport binascii\nimport struct\nimport hashlib\nimport hmac\nimport base64\nimport pickle\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport base64\nimport gzip\nimport lzma\nimport zlib\nimport binascii\nimport struct\nimport hashlib\nimport hmac\nimport base64\nimport pickle\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport base64\nimport gzip\nimport lzma\nimport zlib\nimport binascii\nimport struct\nimport hashlib\nimport hmac\nimport base64\nimport pickle\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport base64\nimport gzip\nimport lzma\nimport zlib\nimport binascii\nimport struct\nimport hashlib\nimport hmac\nimport base64\nimport pickle\nimport cPickle\nimport dill\nimport msgpack\nimport bson\nimport base64\nimport gzip\nimport lzma\nimport zlib\nimport binascii\nimport struct\nimport hashlib\nimport hmac\nimport base64\nimport pickle\nimport cPickle\nimport d",
            "random.sample(range(1, 50), 6)"
        ],
        [
            "15940280-74",
            "import datetime\nimport time\n\nnow = datetime.datetime.now()\nutc_time = datetime.datetime.utcnow()\n\nprint(\"Current UTC time:\", utc_time)\nprint(\"Current local time:\", now)",
            "datetime.utcnow()"
        ],
        [
            "12280143-55",
            "import os\nos.chdir(os.path.join(os.getcwd(), os.pardir))\n\nThis code block changes the current working directory to the parent directory of the current working directory",
            "os.chdir('..')"
        ],
        [
            "15457504-91",
            "k.set_text('Hello World!', fontdict={'family': 'Purisa','size': 12})",
            "canvas.create_text(x, y, font=('Purisa', 12), text=k)"
        ],
        [
            "41946927-22",
            "import pandas as pd\nmy_list = [\n    {'name': 'Alice', 'age': 25},\n    {'name': 'Bob', 'age': 30},\n    {'name': 'Charlie', 'age': 35}\n]\ndf = pd.DataFrame.from_dict(my_list)\nprint(df)\n\nOutput:\n\n   name  age\n0  Alice   25\n1    Bob   30\n2  Charlie   35",
            "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"
        ],
        [
            "8214932-71",
            "if any(d.values() if isinstance(d, dict) else d.items() if isinstance(d, dict) else [d] for d in relevant_dicts):\n    # do something",
            "'one' in list(d.values())"
        ],
        [
            "8214932-94",
            "if 'one' in d:\n    print('one is in d')\nelse:\n    print('one is not in d')",
            "'one' in iter(d.values())"
        ],
        [
            "7125009-76",
            "plt.legend(loc='upper left', title='Legend', fontsize='x-small')",
            "pyplot.legend(loc=2, fontsize='x-small')"
        ],
        [
            "7125009-57",
            "plt.legend(loc='upper left', title='Legend Title', fontsize=6)",
            "plot.legend(loc=2, prop={'size': 6})"
        ],
        [
            "8270092-77",
            "sentence = \"This is a sentence with some extra whitespace.\"\nnew_sentence = sentence.strip()\nprint(new_sentence)\n\nThis code will remove all whitespace from the string sentence and store the result in the variable new_sentence",
            "sentence.replace(' ', '')"
        ],
        [
            "8270092-68",
            "import re\ndef remove_whitespace(sentence):\n    return re.sub(r'\\s+', '', sentence)",
            "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"
        ],
        [
            "8270092-97",
            "import re\nsentence = \"This is a sentence with some extra whitespace at the end.\"\nclean_sentence = re.sub(r\"^\\s+|\\s+$\", \"\", sentence)\nprint(clean_sentence)",
            "sentence.strip()"
        ],
        [
            "8270092-87",
            "sentence = \"This is a sentence with spaces.\"\nnew_sentence = re.sub(r\"[\\s]\", \"\", sentence)\nprint(new_sentence)",
            "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"
        ],
        [
            "8270092-31",
            "sentence = \"This is a sentence with spaces.\"\nnew_sentence = sentence.strip()\nprint(new_sentence)",
            "sentence = ''.join(sentence.split())"
        ],
        [
            "14591855-94",
            "import pandas as pd\ndf = pd.read_hdf('/home/.../data.h5', key='firstSet')",
            "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"
        ],
        [
            "8369219-15",
            "the code snippet:",
            "str = open('very_Important.txt', 'r').read()"
        ],
        [
            "19445682-35",
            ":",
            "urlfetch.fetch(url, deadline=10 * 60)"
        ],
        [
            "6250046-45",
            "import urllib.parse\nurl = 'http://www.address.com/something#something'\nparsed_url = urllib.parse.urlparse(url)\nnew_url = parsed_url.scheme + '://' + parsed_url.netloc + parsed_url.path\nnew_url = urllib.parse.urlencode(parsed_url.params)\nnew_url = new_url.replace('#', '')\nnew_url = urllib.parse.urlencode(parsed_url.query)\nnew_url = new_url.replace('#', '')\nnew_url = urllib.parse.urlencode(parsed_url.fragment)\nnew_url = new_url.replace('#', '')\nprint(new_url)\n\nOutput: http://www.address.com/something",
            "urlparse.urldefrag('http://www.address.com/something#something')"
        ],
        [
            "9849192-97",
            "sorted(mydict.items(), key=operator.itemgetter(1))",
            "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"
        ],
        [
            "13279399-43",
            "from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return 'Hello, %s!' % request.args.get('firstname', 'World')\nif __name__ == '__main__':\n    app.run(debug=True)",
            "first_name = request.args.get('firstname')"
        ],
        [
            "13279399-5",
            "The final code snippet is request.form['firstname'] and the answer is this code snippet",
            "first_name = request.form.get('firstname')"
        ],
        [
            "3278850-59",
            "with open('file.txt', 'r') as f:\n    txt = f.read()",
            "txt = open('file.txt').read()"
        ],
        [
            "14043080-28",
            "datetime.date.toordinal(datetime.date.today())",
            "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"
        ],
        [
            "687295-63",
            "from django.db.models import Q\nmodel_objects = Entry.objects.filter(id__ne=3, status=1)",
            "Entry.objects.filter(~Q(id=3))"
        ],
        [
            "19011613-15",
            "xml.etree.ElementTree.Element.findall(path)",
            "soup.find_all('div', class_='crBlock ')"
        ],
        [
            "4296249-87",
            "d = dict(iterable[i:i+2] for i in range(0, len(iterable), 2))\nlist(zip([1, 2], [3, 4], [5, 6]))\nlist(itertools.zip_longest([1, 2], [3, 4], [5, 6]))\nbytearray.fromhex(rgbstr)\nhex(int('0x' + rgbstr, 16))",
            "struct.unpack('BBB', rgbstr.decode('hex'))"
        ],
        [
            "5864271-27",
            "def reverse_by_two(a):\n    return a[::-2]",
            "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"
        ],
        [
            "73663-61",
            "import subprocess\nsubprocess.Popen.kill()",
            "sys.exit()"
        ],
        [
            "73663-36",
            "import subprocess\np = subprocess.Popen(['python','my_script.py'], stdout=subprocess.PIPE)\np.communicate()",
            "quit()"
        ],
        [
            "73663-66",
            "Therefore, the answer code is os.abort() or os.strerror(errno)",
            "sys.exit('some error message')"
        ],
        [
            "21974169-23",
            "conn.rollback()",
            "con.commit()"
        ],
        [
            "11269575-66",
            "p = subprocess.Popen(['espeak', text], stdout=subprocess.PIPE)\noutput = p.communicate()",
            "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"
        ],
        [
            "1094717-63",
            "import re\nimport string\nimport locale\ndef validate_ip_address(s):\n    pattern = r'[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}'\n    return re.match(pattern, s)\ndef remove_first_word(s):\n    return''.join(s.split()[1:])\ndef convert_string_to_int(s):\n    return int(s)",
            "int(Decimal(s))"
        ],
        [
            "1094717-69",
            "int(decimal.Decimal(str))",
            "int(s.split('.')[0])"
        ],
        [
            "31957364-53",
            "A.shape == (3, 3, 3) and B.shape == (3, 3, 3) and A.dtype == B.dtype and A.size == B.size and A.flatten() == B.flatten()\n\nor\n\nA.shape == (3, 3) and B.shape == (3, 3) and A.dtype == B.dtype and A.size == B.size and A.flatten() == B.flatten()\n\nNote: The answer depends on the dimensions and data types of the arrays",
            "np.einsum('ijk,ikl->ijl', A, B)"
        ],
        [
            "1196074-89",
            "import subprocess\nsubprocess.check_call(['rm', '-r','some.file'], shell=True,",
            "subprocess.Popen(['rm', '-r', 'some.file'])"
        ],
        [
            "19100540-33",
            "df['Alabama_exp'] = df['Alabama_exp'].round(2)\ndf['Credit_exp'] = df['Credit_exp'].round(3)",
            "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"
        ],
        [
            "59825-84",
            "s = set([1, 2, 3, 4, 5])\nresult = s.pop(2)\nprint(result) # Output: 3",
            "e = next(iter(s))"
        ],
        [
            "5868374-42",
            "import datetime\ndatestr = '2021-01-01'\ndate = datetime.datetime.strptime(datestr, '%Y-%m-%d')\nprint(date)",
            "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"
        ],
        [
            "208894-61",
            "import base64\nwith open('pdf_reference.pdf', 'rb') as f:\n    encoded_data = base64.b64encode(f.read())\nprint(encoded_data)",
            "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"
        ],
        [
            "20796355-35",
            "os.chdir('chapter3')",
            "os.chdir('chapter3')"
        ],
        [
            "20796355-88",
            "import os\nos.chdir('/path/to/new/directory')\n\nThis will change the current working directory to the specified path",
            "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"
        ],
        [
            "20796355-81",
            "import os\nos.chdir('/path/to/new/directory')",
            "os.chdir('.\\\\chapter3')"
        ],
        [
            "1299855-22",
            "The code to achieve this is import mechanize and mechanize.urlretrieve('http://example.com/upload', 'uploaded_file.txt')",
            "br.form.add_file(open(filename), 'text/plain', filename)"
        ],
        [
            "2317134-81",
            "import re\nmatch = re.search(r'[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')\nif match:\nprint(match.group())\nelse:\nprint(\"No match found.\")",
            "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"
        ],
        [
            "2317134-43",
            "import re\nmatch = re.search('[a-zA-Z][\\\\w-]*$', '!A_B')\nif match:\n    print('Match found!')\nelse:\n    print('No match found.')",
            "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"
        ],
        [
            "13794532-6",
            "from bs4 import BeautifulSoup\nsoup = BeautifulSoup(html_doc, 'html.parser')\nfor div in soup.find_all('div', class_='comment-'):\n    print(div.prettify())",
            "soup.find_all('div', class_=re.compile('comment-'))"
        ],
        [
            "741877-37",
            "import matplotlib.pyplot as plt\nplt.clf()",
            "plt.cla()"
        ],
        [
            "13156395-50",
            "with open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = f.read()\nprint(data)",
            "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"
        ],
        [
            "13156395-75",
            "he answer is json.loads('''\n{\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n''', cls=json.JSONDecoder)",
            "json.loads(open('sample.json').read().decode('utf-8-sig'))"
        ],
        [
            "13022385-76",
            "If no exit status is provided, the default status is 0",
            "sys.exit(0)"
        ],
        [
            "8751653-82",
            "int.from_bytes(struct.pack('<I', float_rep), 'big')",
            "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"
        ],
        [
            "8751653-25",
            "import struct\npacked_binary = '-0b1110'\nunpacked_binary = struct.unpack('B', packed_binary)[0]\nfloat_number = float(unpacked_binary)\nprint(float_number)",
            "float(int('-0b1110', 0))"
        ],
        [
            "8751653-54",
            "float(struct.unpack('B', bin(0b8)[2:]))",
            "struct.unpack('d', b8)[0]"
        ],
        [
            "4789021-9",
            "The code would look something like this:",
            "return user.groups.filter(name='Member').exists()"
        ],
        [
            "4789021-88",
            "if user.is_authenticated():\n    print(\"User is authenticated\")\nelse:\n    print(\"User is not authenticated\")",
            "return user.groups.filter(name__in=['group1', 'group2']).exists()"
        ],
        [
            "25823608-56",
            "import numpy as np\nvals = np.array([[0,1,2], [3,4,5], [6,7,8]])\nrows = np.argwhere(vals == (0,1))",
            "np.where((vals == (0, 1)).all(axis=1))"
        ],
        [
            "509742-28",
            "import os\nimport os.path\nscript_dir = os.path.dirname(os.path.abspath(__file__))\nprint(script_dir)\n\nThis code block uses the os.path module to get the absolute path of the current script, and then uses the os.chdir function to change the current working directory to the directory of the script",
            "os.chdir(os.path.dirname(__file__))"
        ],
        [
            "31385363-83",
            "df.to_csv('mycsv.csv', index=False)",
            "df.toPandas().to_csv('mycsv.csv')"
        ],
        [
            "31385363-50",
            "df.to_csv('mycsv.csv', index=False)",
            "df.write.csv('mycsv.csv')"
        ],
        [
            "8092877-26",
            "itertools.zip_longest((1, 4), (2, 5), (3, 6))",
            "zip(*[(1, 4), (2, 5), (3, 6)])"
        ],
        [
            "8092877-98",
            "from itertools import chain\ndata = [(1, 2), (3, 4), (5, 6)]\nresult = list(chain.from_iterable(data))\nprint(result)",
            "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"
        ],
        [
            "23748995-25",
            "df['a'] = df['a'].tolist()",
            "df['a'].values.tolist()"
        ],
        [
            "23748995-42",
            "df['a'].values",
            "df['a'].tolist()"
        ],
        [
            "20205455-79",
            "import json\nfrom bs4 import BeautifulSoup\nresponse = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'\nsoup = BeautifulSoup(response, 'xml')\nprint(soup.prettify())",
            "soup = BeautifulSoup(response.read().decode('utf-8'))"
        ],
        [
            "7429118-70",
            "a = numpy.array([1, 2, 3, 4, 5])\nresult = a[a!= 3]",
            "a[np.arange(len(a)) != 3]"
        ],
        [
            "8217613-41",
            "echo \"foo\"",
            "subprocess.check_output('echo \"foo\"', shell=True)"
        ],
        [
            "14673394-12",
            "df['Date'].unique()",
            "df['Date'].map(lambda t: t.date()).unique()"
        ],
        [
            "3328012-17",
            ":",
            "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"
        ],
        [
            "3457673-86",
            "myDict = dict(zip(myListOfTuples[0], myListOfTuples[1]))",
            "dict(x[1:] for x in reversed(myListOfTuples))"
        ],
        [
            "652291-62",
            "sorted(l, key=lambda x: x['date'], reverse=True)",
            "list.sort(key=lambda item: item['date'], reverse=True)"
        ],
        [
            "11041411-88",
            "df.to_csv('mydf.tsv', index=True)",
            "df.to_csv('mydf.tsv', sep='\\t')"
        ],
        [
            "33435418-32",
            "nswer is list(set([1, 2, 2, 2, 3])) - set([1, 2])",
            "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"
        ],
        [
            "977491-44",
            "nswer code is difflib.Differ().compare(open(file1).read(), open(file2).read())",
            "difflib.SequenceMatcher(None, file1.read(), file2.read())"
        ],
        [
            "15148684-45",
            "import operator\nlist = [('apple', 1.5), ('banana', 2.0), ('orange', nan), ('grape', 3.0)]\nlookup = operator.itemgetter(1)\nresult = lookup(list)\nprint(result)\n\nOutput: [2.0]",
            "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"
        ],
        [
            "16127862-90",
            ":",
            "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"
        ],
        [
            "16127862-87",
            "lst = [1.0, 2.0, 3.0, 4.0, 5.0]\nlst = [lst[i] for i in range(len(lst))]\nlst = [int(round(lst[i], 8)) for i in range(len(lst))]\nstr_list = [str(lst[i]) + 'e' + str(int(round(lst[i], 8))) for i in range(len(lst))]",
            "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"
        ],
        [
            "2111163-71",
            "A[0][1]",
            "A[[0, 1], [0, 1]]"
        ],
        [
            "2111163-33",
            "a = numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nresult = a[:, 0] + a[:, 1]",
            "a[np.arange(3), (0, 1, 0)]"
        ],
        [
            "24748445-94",
            "import re\nsoup = BeautifulSoup(html, 'html.parser')\ntags = soup.find_all(re.compile('a|div'))\nprint(tags)",
            "soup.find_all(['a', 'div'])"
        ],
        [
            "931092-70",
            "def reverse_string(s):\n    return s[::-1]",
            "'hello world'[::(-1)]"
        ],
        [
            "931092-64",
            "s = ['a', 'b', 'c']\ns.reverse()\nprint(s)\n\nOutput: ['c', 'b', 'a']",
            "s[::(-1)]"
        ],
        [
            "931092-5",
            "s = 'foo'\ns = s[::-1]\nprint(s)",
            "''.join(reversed('foo'))"
        ],
        [
            "931092-74",
            "string = \"hello\"\nreversed_string = string[::-1]",
            "''.join(reversed(string))"
        ],
        [
            "931092-65",
            "def reverse_string(s):\n    return s[::-1]",
            "'foo'[::(-1)]"
        ],
        [
            "931092-99",
            "a_string = \"Hello, world!\"\na_string = a_string[::-1]\nprint(a_string)\n\n\nOutput: \"dlrow,olleH\"",
            "a_string[::(-1)]"
        ],
        [
            "931092-20",
            "a_string = 'hello'\na_string_reversed = a_string[::-1]\na_string_reversed_list = list(a_string_reversed)\na_string_reversed_list[0] = 'h'\na_string_reversed_list[1] = 'e'\na_string_reversed_list[2] = 'l'\na_string_reversed_list[3] = 'o'\na_string_reversed = ''.join(a_string_reversed_list)",
            "def reversed_string(a_string):\n    return a_string[::(-1)]"
        ],
        [
            "931092-77",
            "s[::-1]",
            "''.join(reversed(s))"
        ],
        [
            "163542-7",
            "import subprocess\nsubprocess.check_call(['grep', 'f', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)",
            "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"
        ],
        [
            "163542-94",
            "import os\nimport subprocess\nimport shlex\nimport string\n# Set stdin of process 'grep f' to be 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'\nprocess = subprocess.Popen(['grep', 'f'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)\ninput_data = 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'\nprocess.stdin.write(shlex.split(input_data))\n# Get modification time of file 'path'\nos.path.getmtime('path')\n# Get modification time of file 'path'\nos.path.getatime('path')\n# Get modification time of file 'path'\nos.path.getctime('path')",
            "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"
        ],
        [
            "18594469-11",
            "df.apply(lambda x: x.str.upper())\n\nThis code snippet applies a lambda function to each row of the dataframe, converting the string value of each column to uppercase",
            "df.div(df.sum(axis=1), axis=0)"
        ],
        [
            "961632-89",
            "the code snippet s = 'i'",
            "str(i)"
        ],
        [
            "961632-44",
            "s = 'a'\nprint(s)\n\n\nOutput: a",
            "a.__str__()"
        ],
        [
            "961632-33",
            "Therefore, the answer code is str(a)",
            "str(a)"
        ],
        [
            "27318022-32",
            "import sys\nimport io\nimport urllib.request\nurl = input(\"Enter a URL: \")\nresponse = urllib.request.urlopen(url)\nresult = io.StringIO()\nwhile True:\n    line = response.readline()\n    if not line:\n        break\n    result.write(line)\nprint(result.getvalue())",
            "result = sys.stdin.read()"
        ],
        [
            "40055835-26",
            "A = [1, 2, 3, 4, 5]\nB = [1, 2, 3]\nA.remove(3)",
            "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"
        ],
        [
            "41513324-64",
            "df = df[df.index.isin([start_remove, end_remove])]",
            "df.query('index < @start_remove or index > @end_remove')"
        ],
        [
            "41513324-67",
            "df.drop(df.index[df.index.get_loc('start_remove')], df.index[df.index.get_loc('end_remove')], inplace=True)",
            "df.loc[(df.index < start_remove) | (df.index > end_remove)]"
        ],
        [
            "8218032-86",
            "import numpy as np\nidx = np.argwhere(mask)",
            "numpy.where(mask)"
        ],
        [
            "32533944-71",
            "import pandas as pd\ndf = pd.read_csv('Result.csv', sep=' ')\ndf.to_csv('Result.csv', sep=' ', index=False)",
            "df.to_csv('Result.csv', index=False, sep=' ')"
        ],
        [
            "20638006-85",
            "import pandas as pd\ndf = pd.DataFrame.from_dict(d)\ndf.applymap(lambda x: x['value'])\ndf.index.tolist()",
            "pd.DataFrame(d)"
        ],
        [
            "1883604-86",
            "ith open('file.gz', 'rb') as f:\n    data = f.read()\n    utf8_hex = hexlify(data).decode('utf-8')\n    print(utf8_hex)\n\nThis will print the utf8 hex representation of the gzip-compressed file encoded as utf-8",
            "gzip.open('file.gz', 'rt', encoding='utf-8')"
        ],
        [
            "29983106-25",
            "from selenium import webdriver\nurl = 'http://www.python.org'\ndriver = webdriver.Chrome()\ndriver.get(url)",
            "driver.get('http://www.google.com.br')"
        ],
        [
            "3437059-20",
            "if \"blah\" in somestring:\n    print(\"blah is in somestring\")\nelse:\n    print(\"blah is not in somestring\")",
            "if ('blah' not in somestring):\n    pass"
        ],
        [
            "3437059-17",
            "re.search(substring, string).group(0)",
            "string.find('substring')"
        ],
        [
            "3437059-83",
            "if 'is' in s:\n    print('found')\nelse:\n    print('not found')",
            "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"
        ],
        [
            "3061-93",
            "the code snippet symtable = globals(), symtable.Function('myfunction', symtable)",
            "globals()['myfunction']()"
        ],
        [
            "3061761-63",
            "a = numpy.array([1, 2, 3])\nprint(a.shape)\n\nOutput: (3,)",
            "a.shape"
        ],
        [
            "3061761-55",
            "a = np.array([[1, 2], [3, 4]])\nprint(a.shape)\n\nOutput: (2, 2)",
            "N.shape(a)"
        ],
        [
            "3061761-89",
            "a = np.array([1, 2, 3])\nprint(len(a))",
            "N.shape(a)"
        ],
        [
            "3061761-31",
            "a = numpy.array([[1, 2], [3, 4]])\nprint(len(a))\n\nOutput: 2",
            "a.shape"
        ],
        [
            "13291539-54",
            "import decimal\nresult = decimal.Decimal('0.00582811585976')",
            "struct.unpack('f', struct.pack('f', 0.00582811585976))"
        ],
        [
            "6280978-9",
            "items = list(set([dct for dct in items if dct.items() == items[0].items()]))",
            "[dict(y) for y in set(tuple(x.items()) for x in d)]"
        ],
        [
            "7745260-45",
            "with open('myfile', 'r') as f:\n    words = f.readlines()",
            "words = open('myfile').read().split()"
        ],
        [
            "7717380-65",
            "import numpy as np\na = [1, 2, 3]\narr = np.array(a)",
            "a = np.array(a)"
        ],
        [
            "9304908-37",
            "from django.db.models import QuerySet\nvalues = [1, 4, 7]\nquery = QuerySet(models.Value.objects.filter(value__in=values))",
            "Blog.objects.filter(pk__in=[1, 4, 7])"
        ],
        [
            "319426-66",
            "string1.lower() == string2.lower()",
            "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"
        ],
        [
            "319426-3",
            "if string1.lower() == string2.lower():\n    print(\"Strings are equal\")\nelse:\n    print(\"Strings are not equal\")",
            "if (string1.lower() == string2.lower()):\n    pass"
        ],
        [
            "319426-84",
            "The answer code is string1.lower() == string2.lower()",
            "(string1.lower() == string2.lower())"
        ],
        [
            "319426-70",
            "if first.lower() == second.lower():\n    print(\"Strings are equal\")\nelse:\n    print(\"Strings are not equal\")",
            "(first.lower() == second.lower())"
        ],
        [
            "319426-18",
            "answer is first.lower() == second.lower()",
            "(first.upper() == second.upper())"
        ],
        [
            "15455388-38",
            "import pandas as pd\nd = {'a': {'b': {'c': 1, 'd': 2}, 'e': 3}\n     'f': {'g': {'h': 1, 'i': 2}, 'j': 3}}\ndf = pd.DataFrame.from_dict(d)\ndf.applymap(lambda x: x['c'])",
            "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"
        ],
        [
            "17679089-100",
            "df.groupby(['col5', 'col2']).agg({'col3': 'count'}).reset_index()",
            "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"
        ],
        [
            "9396706-78",
            "the value of the attribute x from the object your_obj",
            "getattr(your_obj, x)"
        ],
        [
            "3743222-35",
            "import datetime\ndate_object = datetime.datetime.strptime('2021-01-01', '%Y-%m-%d').date()\nprint(date_object)",
            "datetime.datetime.now().date()"
        ],
        [
            "3743222-73",
            "The answer code is:",
            "datetime.datetime.now().date()"
        ],
        [
            "12496531-86",
            "import numpy as np\nA = np.array([[1, 2], [3, 4], [5, 6]])\nA = np.column_stack((A, A))\nsorted_A = np.sort(A, axis=1)",
            "A = np.array(sorted(A, key=tuple))"
        ],
        [
            "6797984-32",
            "s.lower() or s.upper()",
            "s.lower()"
        ],
        [
            "6797984-49",
            "s = 'Hello, world!'\ns = s.translate(str.maketrans('', '', string.ascii_lowercase))\nprint(s)\n\nThe final code snippet is s = s.translate(str.maketrans('', '', string.ascii_lowercase)) and the answer is 'hello, world!'",
            "s.decode('utf-8').lower()"
        ],
        [
            "2631935-11",
            "the resulting data frame with the rank of rows from highest to lowest, grouped by value in column group, according to value in column value",
            "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"
        ],
        [
            "13627865-82",
            "def something(bob):\n    global something\n    setattr(globals(),'something', bob)",
            "globals()['something'] = 'bob'"
        ],
        [
            "14766194-35",
            "f numpy.any(a == [1, 2]):\n    print(\"The array contains the row [1, 2].\")\nelse:\n    print(\"The array does not contain the row [1, 2].\")",
            "any(np.equal(a, [1, 2]).all(1))"
        ],
        [
            "18200052-13",
            "import numpy as np\ntestarray = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ntestarray = testarray.reshape(3, 3)",
            "np.zeros((3, 3)).ravel()"
        ],
        [
            "15579649-73",
            "import numpy as np\nresult = {'a': 1, 'b': 2, 'c': 3}\narr = np.array([(k, v) for k, v in result.items()])",
            "numpy.array([(key, val) for key, val in result.items()], dtype)"
        ],
        [
            "2823472-99",
            "import datetime\nimport time\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport pygame\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime",
            "sys.exit(0)"
        ],
        [
            "36139-44",
            "sorted(mylist)",
            "mylist.sort(key=lambda x: x.lower())"
        ],
        [
            "36139-62",
            "mylist = [3, 1, 4, 1, 5, 9, 2, 6]\nsorted_list = sorted(mylist)\nprint(sorted_list)\n\nOutput: [1, 1, 2, 3, 4, 5, 6, 9]",
            "mylist.sort(key=str.lower)"
        ],
        [
            "36139-23",
            "sorted(mylist)",
            "mylist.sort()"
        ],
        [
            "36139-32",
            "sorted_list = sorted(list)",
            "list.sort()"
        ],
        [
            "5280178-72",
            "Therefore, the answer is exec(compile(open(\"file.py\").read()))",
            "exec(compile(open('file.py').read(), 'file.py', 'exec'))"
        ],
        [
            "18351951-41",
            "if test.endswith('.mp3') or test.endswith('.avi'):\n    print('ends with.mp3 or.avi')\nelse:\n    print('does not end with.mp3 or.avi')",
            "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"
        ],
        [
            "826284-77",
            "the unpack function",
            "struct.unpack('h', pS[0:2])"
        ],
        [
            "3668964-35",
            "if all(word.isupper() for word in words):\n    print(\"All words are uppercase.\")\nelse:\n    print(\"Not all words are uppercase.\")",
            "print(all(word[0].isupper() for word in words))"
        ],
        [
            "41154648-81",
            "df.astype('int').to_dense().index.astype('int')",
            "df.to_sparse(0)"
        ],
        [
            "1514553-90",
            "ariable = numpy.array([1, 2, 3]).repeat(3)",
            "variable = []"
        ],
        [
            "1514553-71",
            "a code snippet using NumPy's array methods",
            "intarray = array('i')"
        ],
        [
            "610883-92",
            "hasattr(a, 'property')",
            "if hasattr(a, 'property'):\n    pass"
        ],
        [
            "610883-9",
            "nswer is the code block that implements this rationale",
            "if hasattr(a, 'property'):\n    pass"
        ],
        [
            "610883-68",
            "a = object()\na.property = 'value'\nprint(getattr(a, 'property'))",
            "getattr(a, 'property', 'default value')"
        ],
        [
            "13902805-83",
            "set(bytearray(text).hexdigest())",
            "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"
        ],
        [
            "13902805-92",
            "lst = ['aaabcabccd']\nunique_chars = set(lst)\nprint(unique_chars)",
            "list(set('aaabcabccd'))"
        ],
        [
            "13902805-87",
            "torch.unique(torch.tensor(a)) for a string a",
            "\"\"\"\"\"\".join(set('aaabcabccd'))"
        ],
        [
            "674764-8",
            "import random\nimport os\nimport string\nimport re\nfilename = 'example.txt'\nchoices = ['apple', 'banana', 'cherry']\nfilename_no_ext = os.path.basename(filename)\nfilename_no_ext_no_ext = os.path.splitext(filename_no_ext)[0]\nrandom_choice = random.choice(choices)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_choice)\nprint(\"Random choice:\", random_",
            "str.find('s', 16)"
        ],
        [
            "674764-33",
            "the index of sub string 'Aloha' in x",
            "x.find('Aloha')"
        ],
        [
            "674764-19",
            "sdfasdf.rfind('cc')",
            "'sdfasdf'.index('cc')"
        ],
        [
            "674764-45",
            "='sdfasdf'\ni = s.rfind('df')\nprint(i)",
            "'sdfasdf'.index('df')"
        ],
        [
            "674764-64",
            "import re\nmatch = re.search('a', 'abracadabra')\nprint(match.start()) # 0",
            "str.find('a')"
        ],
        [
            "674764-91",
            "m = re.search('g', str)\nif m:\n    start = m.start()\n    end = m.end()\n    print(start)\n    print(end)\nelse:\n    print('Sub string not found')",
            "str.find('g')"
        ],
        [
            "674764-3",
            "df = pd.DataFrame({'foo': [1, 2, 3], 'bar': [4, 5, 6]})\ndf['new_column'] = df.apply(lambda x: x['foo'] + x['bar'], axis=1)\nprint(df)",
            "str.find('s', 11)"
        ],
        [
            "674764-47",
            "the code snippet m = re.search(r's', str[15:]) and print(m.start()) to find the index of the sub string's' in string str starting from index 15",
            "str.find('s', 15)"
        ],
        [
            "674764-5",
            "The answer code would be str.rfind(s, start=11, end=14)",
            "str.find('s', 11, 14)"
        ],
        [
            "10194713-64",
            "sorted(items(cityPopulation, key=lambda x: x[2]))",
            "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"
        ],
        [
            "10194713-38",
            "sorted(u.items(), key=operator.itemgetter(1))",
            "sorted(list(u.items()), key=lambda v: v[1])"
        ],
        [
            "10194713-1",
            ":",
            "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"
        ],
        [
            "10194713-5",
            "sorted(d.items())",
            "sorted(list(d.items()), key=lambda k_v: k_v[1])"
        ],
        [
            "179369-97",
            "result = subprocess.check_call(['/path/to/my/script', '--status', '0'])",
            "sys.exit(0)"
        ],
        [
            "179369-62",
            "nswer is:\n\nflask.abort(status_code=500, message='aa! errors!')",
            "sys.exit('aa! errors!')"
        ],
        [
            "179369-47",
            "import os\nos.abort()",
            "sys.exit()"
        ],
        [
            "19779790-35",
            "import datetime\nyesterday = datetime.date.today() - datetime.timedelta(days=1)\nprint(yesterday)",
            "datetime.datetime.now() - datetime.timedelta(days=1)"
        ],
        [
            "37934969-37",
            "df = pd.DataFrame(nvalues)",
            "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"
        ],
        [
            "11066874-58",
            "urllib.parse.urlparse('https://www.example.com/path/to/resource?param1=value1&param2=value2#fragment').path",
            "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"
        ],
        [
            "18461623-27",
            "import numpy as np\nold_set = np.array([1, 2, 3, 4, 5])\nnew_set = np.array([2, 4, 6, 8, 10])\navg = np.average(old_set, new_set)\nprint(avg)\n\nOutput: 5.5",
            "np.mean(np.array([old_set, new_set]), axis=0)"
        ],
        [
            "4523551-62",
            "0b101010",
            "bin(ord('P'))"
        ],
        [
            "11399384-83",
            "LoD = {'apple': 1, 'banana': 2, 'orange': 3}\nset_keys = set(LoD.keys())",
            "{k for d in LoD for k in list(d.keys())}"
        ],
        [
            "11399384-59",
            "set(LoD) to create a set containing all keys names from list of dictionaries LoD",
            "set([i for s in [list(d.keys()) for d in LoD] for i in s])"
        ],
        [
            "11399384-52",
            "def extract_keys(LoD):\n    return [key for d in LoD for key in d.keys()]",
            "[i for s in [list(d.keys()) for d in LoD] for i in s]"
        ],
        [
            "13081090-42",
            "Therefore, the answer code is bytearray('0b'.join(bin(digit)))",
            "[int(d) for d in str(bin(x))[2:]]"
        ],
        [
            "42012589-82",
            "df.groupby(['Month', 'Fruit']).size().reset_index(name='count')",
            "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"
        ],
        [
            "3355822-45",
            "import requests\nimport json\nimport hashlib\nimport base64\nimport hmac\nimport time\nimport datetime\nimport os\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hashlib\nimport base64\nimport hash",
            "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"
        ],
        [
            "6510477-50",
            "['hel', 'lo', 'bye']",
            "[x for x in file.namelist() if x.endswith('/')]"
        ],
        [
            "39268928-38",
            "the code snippet result =''.join(str(item) for item in my_dict.items())",
            "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"
        ],
        [
            "39268928-72",
            "import pprint\ndict_str = pprint.pformat(dict)",
            "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"
        ],
        [
            "23970693-72",
            "import json\njson_data = json.load(open('data.json'))",
            "json_data = json.loads(json_string)"
        ],
        [
            "2759067-52",
            "The code snippet to achieve this is:",
            "os.rename(src, dst)"
        ],
        [
            "16389188-53",
            "the gl_set_attribute function",
            "window.set_position(Gtk.WindowPosition.CENTER)"
        ],
        [
            "1391026-74",
            "urllib.parse.parse_qs('var1=val1&var2=val2')['var1']",
            "self.request.get('var_name')"
        ],
        [
            "3296499-25",
            "thedict = {\n    \"item1\": \"value1\",\n    \"item2\": \"value2\",\n    \"item3\": \"value3\"\n}\nthedict = {k.lower(): v for k, v in thedict.items()}",
            "theset = set(k.lower() for k in thedict)"
        ],
        [
            "41463763-99",
            "df1.set_index('date').merge(df2, on='revenue', how='inner')",
            "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"
        ],
        [
            "30405804-73",
            "s.chdir('C:/Users/Name/Desktop')",
            "os.chdir('C:/Users/Name/Desktop')"
        ],
        [
            "9647586-2",
            "he answer is request.GET.get('a')",
            "{{request.args.get('a')}}"
        ],
        [
            "6591931-80",
            "os.path.getsize('C:\\\\Python27\\\\Lib\\\\genericpath.py')",
            "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"
        ],
        [
            "5607551-13",
            "e answer code is:",
            "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"
        ],
        [
            "439115-86",
            "import random\ndecimal_num = random.randint(0, 9)\nprint(decimal_num)\n\nThis code generates a random integer between 0 and 9 and prints it to the console",
            "decimal.Decimal(random.randrange(10000)) / 100"
        ],
        [
            "3925096-46",
            "os.path.split(path)[1]",
            "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"
        ],
        [
            "14538885-47",
            "x = {'a': 1, 'b': 2, 'c': 3}\nindex = next((i for i, v in enumerate(x) if v == 3), None)\nprint(index)\n\n\nOutput: 3",
            "list(x.keys()).index('c')"
        ],
        [
            "10484261-51",
            "values = [program for program in programs.items() if str(program[0]).lower() == 'new york']",
            "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"
        ],
        [
            "8905864-66",
            "mport django.db.models.fields\nfrom django.db.models import Manager\nfrom django.db.models import fields\nfrom django.db.models import related\nfrom django.db.models import models\nfrom django.db.models.fields import related\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom django.db.models.fields import Manager\nfrom django.db.models.fields import fields\nfrom django.db.models.fields import related\nfrom",
            "urllib.parse.quote(s.encode('utf-8'))"
        ],
        [
            "8905864-78",
            "the encoded string 'a%20b'",
            "urllib.parse.quote_plus('a b')"
        ],
        [
            "32751229-20",
            "The answer code is:",
            "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"
        ],
        [
            "10543303-64",
            "lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncount = sum(1 for i in lst if i > 5)\nprint(count)",
            "sum(((i > 5) for i in j))"
        ],
        [
            "10543303-81",
            "len(j[j > 5])",
            "len([1 for i in j if (i > 5)])"
        ],
        [
            "10543303-37",
            "j.count(i)",
            "j = np.array(j)\nsum((j > i))"
        ],
        [
            "36190533-1",
            "import numpy as np\na1 = np.array([1, 2, 3, 4, 5])\na2 = np.array([1, 2, 3, 4, 5])\nprint(np.any(a1 == a2))\n\nThe output will be True, indicating that a1 contains at least one element of a2",
            "np.any(np.in1d(a1, a2))"
        ],
        [
            "9775731-24",
            "import torch\nmy_value = torch.tensor([1.5])\nmin_value = torch.tensor([0])\nmax_value = torch.tensor([2])\nclamped_value = torch.clamp(my_value, min_value, max_value)\nprint(clamped_value)",
            "max(min(my_value, max_value), min_value)"
        ],
        [
            "14931769-56",
            "itertools.product(range(1, 4), repeat=3)",
            "lst = list(itertools.product([0, 1], repeat=n))"
        ],
        [
            "14931769-64",
            "itertools.product(binary_values, repeat=n)",
            "lst = map(list, itertools.product([0, 1], repeat=n))"
        ],
        [
            "14931769-0",
            "itertools.product([0, 1, 0], [0, 1, 1], [0, 1, 0])",
            "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"
        ],
        [
            "14931769-1",
            "itertools.product([0,1,0], [0,1,1], [0,1])",
            "lst = list(itertools.product([0, 1], repeat=3))"
        ],
        [
            "6310475-49",
            "import datetime\nnow = datetime.datetime.now()\nnew_time = now + datetime.timedelta(days=1, hours=3)\nprint(new_time)",
            "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
        ],
        [
            "38831808-53",
            "struct.unpack('I', bytearray.fromhex('4081637ef7d0424a'))[0]",
            "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"
        ],
        [
            "42387471-14",
            "plt.colorbar(im)",
            "plt.colorbar(im, ax=ax)"
        ],
        [
            "28134319-7",
            "And some more spaces.\"\ns = s.strip()\ns = s.rstrip()\ns = s.rsplit(' ', maxsplit=1)\ns = s[1]",
            "s[s.find('\\n') + 1:s.rfind('\\n')]"
        ],
        [
            "18470323-13",
            "data.loc[data.index.isin([data['one'].isin([1, 2]), data['two'].isin([3, 4])), ['a', 'c']]",
            "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"
        ],
        [
            "18470323-91",
            "data.loc[:, ['a', 'c']]",
            "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"
        ],
        [
            "10040143-71",
            "result = Users.objects.filter(userprofile__level__gte=0)",
            "User.objects.filter(userprofile__level__gte=0)"
        ],
        [
            "27659153-69",
            "new_list = [g for g in test if g == test[0]]",
            "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"
        ],
        [
            "27659153-76",
            "ovided code documentation is relevant and provides information about the groupby method and the itemgetter function",
            "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"
        ],
        [
            "11336548-53",
            "if 'title' in request.POST:\n    return request.POST['title']\nelse:\n    return ''",
            "request.POST.get('title', '')"
        ],
        [
            "20222485-17",
            "from itertools import repeat\nresult = [x for x in range(10) if x % 2 == 0]",
            "list(accumulate(list(range(10))))"
        ],
        [
            "16436133-47",
            "import json\nif'mydata' in request.params:\n    mydata = json.loads(request.params['mydata'])\nelse:\n    mydata = {}",
            "json.loads(request.POST.get('mydata', '{}'))"
        ],
        [
            "31950612-15",
            "the index of the last occurrence of characters '([{' in test_string",
            "max(test_string.rfind(i) for i in '([{')"
        ],
        [
            "8247792-19",
            "re.finditer('foobar', '.*').__next__()",
            "\"\"\"foobar\"\"\"[:4]"
        ],
        [
            "8247792-29",
            "import urllib.parse\ndef cut_string(s, delimiter='&'):\n    return urllib.parse.quote(s.rsplit(delimiter, 1)[0])",
            "s.rfind('&')"
        ],
        [
            "8247792-90",
            "The answer code would be urllib.parse.quote('string&string')",
            "s[:s.rfind('&')]"
        ],
        [
            "35178812-30",
            "df['A'].unique()",
            "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"
        ],
        [
            "10346336-28",
            "import numpy as np\nrows = [[1, 2], [3, 4], [5, 6]]\nresult = np.array(rows).tolist()\nprint(result)\n\nOutput: [1 2 3 4 5 6]",
            "numpy.array([[1, 2], [3, 4]])"
        ],
        [
            "2054416-71",
            "t = tuple(map(itemgetter(0), s))",
            "t = tuple(x[0] for x in s)"
        ],
        [
            "11205386-94",
            "soup.find('meta', {'name': 'City'}).get('content')",
            "soup.find('meta', {'name': 'City'})['content']"
        ],
        [
            "39353758-58",
            "df = df.pivot_table(index='saleid', columns='upc', values='quantity')",
            "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"
        ],
        [
            "16249440-75",
            "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)",
            "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"
        ],
        [
            "13999850-72",
            "import pandas as pd\nimport datetime\ndf = pd.DataFrame({'name': ['John', 'Jane', 'Bob'], 'age': [25, 30, 20]})\ndf.to_csv('people.csv', index=False, date_format='%Y%m%d')",
            "df.to_csv(filename, date_format='%Y%m%d')"
        ],
        [
            "1800187-72",
            "import numpy as np\nresult = np.nan_to_num(a)",
            "b = np.where(np.isnan(a), 0, a)"
        ],
        [
            "39277638-98",
            "import numpy as np\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nc = np.array([[9, 10], [11, 12]])\nresult = np.minimum(a, b, c)\n\nThe final answer is the resulting numpy array",
            "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"
        ],
        [
            "15509617-37",
            "The final answer is the code snippet:\n\nimport datetime\nfrom datetime import datetime\n# obtain the current day of the week in a 3 letter format from a datetime object\ndate = datetime.now()\nday = date.strftime(\"%A\")\nprint(day)",
            "datetime.datetime.now().strftime('%a')"
        ],
        [
            "8519599-86",
            "s = 'key1: value1, key2: value2, key3: value3'",
            "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"
        ],
        [
            "17071871-46",
            "df[df['A'] == 'foo']\n\nor\n\ndf[df['A'].isin(['foo'])]",
            "print(df.loc[df['A'] == 'foo'])"
        ],
        [
            "17071871-76",
            "ort pandas as pd\ndf = pd.DataFrame({'column_name': ['value1', 'value2', 'value3']})\nresult = df[df['column_name']!='some_value']\nprint(result)",
            "df.loc[df['column_name'] != some_value]"
        ],
        [
            "17071871-51",
            "df[df['column_name'] not in some_values]",
            "df.loc[~df['column_name'].isin(some_values)]"
        ],
        [
            "17071871-83",
            "df[df['column_name'].isin([some_value])]",
            "df.loc[df['column_name'] == some_value]"
        ],
        [
            "17071871-79",
            "df[df['B'] == 'one' | df['B'] == 'three']",
            "print(df.loc[df['B'].isin(['one', 'three'])])"
        ],
        [
            "739993-25",
            "a dictionary mapping module names to modules",
            "help('modules')"
        ],
        [
            "12362542-44",
            ":",
            "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"
        ],
        [
            "4116061-59",
            "import some.package",
            "globals().update(importlib.import_module('some.package').__dict__)"
        ],
        [
            "4588628-92",
            "x[np.argwhere(x == 0)]\n\nor\n\nnp.flatnonzero(x == 0)",
            "numpy.where((x == 0))[0]"
        ],
        [
            "2428092-52",
            "import json\nfrom django.http import JsonResponse\nresponse_data = json.dumps({'key1': 'value1', 'key2': 'value2'})\nreturn JsonResponse(response_data)",
            "return HttpResponse(json.dumps(response_data), content_type='application/json')"
        ],
        [
            "10824319-17",
            "The code snippet to achieve this is:\n\n\nhex_string = '0x1234'\nhex_bytes = bytearray.fromhex(hex_string)\nhex_string_bytes = hex_bytes.tohex()\nprint(hex_string_bytes)",
            "s.decode('hex')"
        ],
        [
            "10824319-49",
            "The code to do this is:",
            "binascii.a2b_hex(s)"
        ],
        [
            "12655007-87",
            "def get_answer(query, relevant_doc):\n    if query == 'get rows of dataframe df that match regex (Hel|Just)':\n        return df[df.str.contains('(Hel|Just)')]\n    elif query == 'get the last 10 elements from a list my_list':\n        return my_list[-10:]\n    elif query == 'zip list a, list b, list c into a list of tuples':\n        return list(zip(a, b, c))\n    else:\n        return None",
            "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"
        ],
        [
            "10472907-88",
            "adict.items()",
            "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"
        ],
        [
            "10472907-5",
            "a function that takes in adict and returns the string representation of the dictionary",
            "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"
        ],
        [
            "34155829-56",
            "import numpy as np\nx = np.array([1, 2, 3])",
            "np.array(x._data).reshape(x.size[::-1]).T"
        ],
        [
            "17731822-88",
            "walls = [True, False, True, False]\nhex_string = binascii.hexlify(bytearray(walls)).decode()\nprint(hex_string)\n\nOutput: 0b10000010",
            "hex(int(''.join([str(int(b)) for b in walls]), 2))"
        ],
        [
            "17731822-21",
            "walls = [1, 2, 3, 4, 5]\nhex_walls = binascii.hexlify(sum(walls)).decode()\nprint(hex_walls)\n\nOutput: 0x2a",
            "hex(sum(b << i for i, b in enumerate(reversed(walls))))"
        ],
        [
            "1810743-81",
            "import os\nos.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')",
            "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"
        ],
        [
            "1810743-84",
            "import os\nos.chdir(path)",
            "os.chdir(path)"
        ],
        [
            "1949318-13",
            "import urllib.parse\nurl = \"http://www.stackoverflow.com\"\nparsed_url = urllib.parse.urlparse(url)\nstatus_code = parsed_url.status\nprint(status_code)",
            "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"
        ],
        [
            "1949318-62",
            "The answer code is:",
            "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"
        ],
        [
            "1949318-89",
            "import urllib.parse\nimport urllib.request\nurl = \"http://example.com/path/to/file\"\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse.urlencode({'path': url})\npath = urllib.parse",
            "r = requests.head(url)\nreturn (r.status_code == 200)"
        ],
        [
            "1949318-26",
            "import urllib.request\nurl = \"http://www.stackoverflow.com\"\nresponse = urllib.request.urlopen(url)\nif response.getcode() == 200:\n    print(\"The website is up.\")\nelse:\n    print(\"The website is down.\")",
            "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"
        ],
        [
            "19758364-39",
            "data.rename(columns={'gdp': 'log(gdp)'}).index",
            "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"
        ],
        [
            "15271907-69",
            "conn.rollback() and conn.execute('commit;')",
            "dbb.commit()"
        ],
        [
            "5352546-44",
            "list(filter(lambda x: x[0] in ['l','m', 'n'], dict.items()))",
            "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"
        ],
        [
            "5352546-80",
            "subset = [(k, bigdict[k]) for k in ('l','m', 'n') if k in bigdict]",
            "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"
        ],
        [
            "5352546-22",
            "items = bigdict.items()\nfor item in items:\n    if item[0] in ('l','m', 'n'):\n        # code to execute for each item in the dictionary",
            "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"
        ],
        [
            "5352546-75",
            "the code snippet list(bigdict.items())[:3], which returns a new list with the first three key-value pairs from the dictionary bigdict",
            "{k: bigdict[k] for k in ('l', 'm', 'n')}"
        ],
        [
            "2331943-5",
            "import json\njson_str = '{\"name\": \"John\", \"age\": 30}'\njson_dict = json.loads(json_str)\nprint(json_dict)\n\n\nOutput:\n\n{\"name\": \"John\", \"age\": 30}",
            "json.load(u)"
        ],
        [
            "4940032-13",
            "with open('example.txt', 'r') as f:\n    txt = f.read()\n    if 'blabla' in txt:\n        print('blabla found')\n    else:\n        print('blabla not found')",
            "if ('blabla' in open('example.txt').read()):\n    pass"
        ],
        [
            "4940032-15",
            "with open('example.txt', 'r') as f:\n    for line in f:\n        if line.startswith('blabla'):\n            print('blabla found at line {}'.format(f.tell()))\n            break",
            "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"
        ],
        [
            "4940032-22",
            "re.findall(r'blabla', open('example.txt').read())",
            "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"
        ],
        [
            "4476373-46",
            "answer is the output of the http request to the specified url",
            "r = requests.get(url)"
        ],
        [
            "4476373-22",
            "nswer is the code snippet:\n\nimport urllib.parse\nimport urllib.request\nurl = 'https://example.com'\npayload = {'key': 'value'}\ndata = urllib.parse.urlencode(payload)\nresponse = urllib.request.urlopen(url, data=data)",
            "r = requests.get(url, params=payload)"
        ],
        [
            "4476373-71",
            "import requests\nimport urllib.parse\nimport nntplib\nimport ossaudiodev\n# Example usage\nurl = 'https://example.com/api/data'\npayload = {'param1': 'value1', 'param2': 'value2'}\nresponse = requests.post(url, data=urllib.parse.urlencode(payload))\n# Check if the request was successful\nif response.status_code == 200:\n    print('Request successful')\nelse:\n    print('Request failed')\n# Check if the response contains the expected data\nif 'data' in response.json():\n    print('Response contains data')\nelse:\n    print('Response does not contain data')",
            "r = requests.post(url, data=payload)"
        ],
        [
            "4476373-99",
            "the code block above",
            "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"
        ],
        [
            "1476-16",
            "{{ bin(173) }}",
            "bin(173)"
        ],
        [
            "1476-88",
            "int('01010101111', 2)",
            "int('01010101111', 2)"
        ],
        [
            "1476-71",
            "int('010101', 2)",
            "int('010101', 2)"
        ],
        [
            "1476-39",
            "int.from_bytes(bytes.fromhex('0b0010101010'), byteorder='big')",
            "int('0b0010101010', 2)"
        ],
        [
            "1476-6",
            "python.library.binascii#binascii.hexlify(bin(21))",
            "bin(21)"
        ],
        [
            "1476-59",
            "df.sort_values(by=[c1, c2], ascending=True)",
            "int('11111111', 2)"
        ],
        [
            "41178532-76",
            "The answer code would be:\n\ntrace_df[trace_df['ratio'] > 0]\n\nwhich returns a new DataFrame containing only the rows where the value in the 'ratio' column is greater than 0",
            "(trace_df['ratio'] > 0).mean()"
        ],
        [
            "8249836-41",
            "from itertools import combinations\nfor i in range(len(a)):\n    for j in range(len(a)):\n        if i!= j:\n            print(combinations(a, 2))",
            "list(itertools.product(*a))"
        ],
        [
            "364519-94",
            "for key, value in sorted(d.items()):\n    # do something with key and value",
            "it = iter(sorted(d.items()))"
        ],
        [
            "364519-100",
            "or key in sorted(d.items()):\n    print(key)",
            "for (key, value) in sorted(d.items()):\n    pass"
        ],
        [
            "364519-2",
            "for key in sorted(dict.items()):\n    print(key)",
            "return sorted(dict.items())"
        ],
        [
            "364519-33",
            "for k, v in sorted(dict.items()):\n    print(k, v)",
            "return iter(sorted(dict.items()))"
        ],
        [
            "364519-52",
            "he answer is sorted(foo.items())",
            "for (k, v) in sorted(foo.items()):\n    pass"
        ],
        [
            "364519-98",
            "for key in sorted(foo.items()):\n    print(key)",
            "for k in sorted(foo.keys()):\n    pass"
        ],
        [
            "39414085-16",
            "he code to lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string s with eplacement '-\\\\1' is re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).",
            "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"
        ],
        [
            "34097281-53",
            "mport tensorflow as tf\ntensor = tf.constant([1, 2, 3])\narray = tf.cast(tensor, tf.float32)",
            "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"
        ],
        [
            "39816795-71",
            "import pandas as pd\ndf = pd.DataFrame({'A': ['A1', 'A2'], 'B': ['B1', 'B2']})\ndf.set_index('A', inplace=True)\ndf.index = df.index.map(str)\ndf.columns = df.columns.map(str)",
            "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"
        ],
        [
            "638360-2",
            "d1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 2, 'c': 3, 'd': 4}\nprint(frozenset(d1).intersection(frozenset(d2)))\n\nOutput: {'b'}",
            "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"
        ],
        [
            "19961490-16",
            "import pandas as pd\ndf = pd.DataFrame.from_dict(list_of_tuples)",
            "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
        ],
        [
            "18837262-55",
            "import pandas as pd\nd = {'Date': ['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04', '2021-01-05'], 'DateValue': [10, 20, 30, 40, 50]}\npd = pd.DataFrame(data=d)\npd.set_index('Date', inplace=True)\npd.apply(lambda x: x['DateValue'], axis=1, result_type='expanding')",
            "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"
        ],
        [
            "4265988-26",
            "import random\na = random.uniform(0.1, 0.05)\nb = random.uniform(0.05, 0.05)\nc = random.uniform(0.2, 0.4)\nd = random.uniform(0.4, 0.2)\ne = random.randint(1, 7)\nprint(a, b, c, d, e)",
            "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
        ],
        [
            "35414625-11",
            "The resulting pivot table is a new dataframe with the same columns as the original df dataframe, but with the 'year','month', and 'item' columns as the index and the'sales' column as the values",
            "df.set_index(['year', 'month', 'item']).unstack(level=-1)"
        ],
        [
            "35414625-17",
            "import pandas as pd\ndf = pd.DataFrame({'year': [1, 2, 3],'month': [1, 2, 3], 'value': [10, 20, 30]})\ndf.pivot_table(index=['year','month'], values='value', aggfunc=pd.Series.sum)\n\nThis code will create a pivot table with the years and months as the index and the value as the columns, and sum the values",
            "df.pivot_table(values='value', index=['year', 'month'], columns='item')"
        ],
        [
            "748028-31",
            "The code to do this is:",
            "p1.communicate()[0]"
        ],
        [
            "748028-100",
            "import subprocess\noutput = subprocess.check_output(['executable', 'input_file'])\nprint(output)",
            "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"
        ],
        [
            "10408927-95",
            "import xml.etree.ElementTree as ET\ntree = ET.parse('file.xml')\nroot = tree.getroot()\nfor sub in root.findall('sub'):\n    print(sub.tag, sub.text)",
            "[elem.tag for elem in a.iter()]"
        ],
        [
            "10408927-56",
            "root.findall('a:subelement', namespaces={'a': 'http://example.com/namespace'})",
            "[elem.tag for elem in a.iter() if elem is not a]"
        ],
        [
            "29471884-33",
            "next(enumerate(num_list), None)",
            "min([x for x in num_list if x > 2])"
        ],
        [
            "2793324-81",
            "a.remove('b')",
            "a.remove('b')"
        ],
        [
            "2793324-12",
            "def remove_item(a, c):\n    a.remove(c)\n    return a",
            "a.remove(c)"
        ],
        [
            "2793324-93",
            "a.remove(6)",
            "a.remove(6)"
        ],
        [
            "2793324-3",
            "a = [1, 2, 3, 4, 5, 6]\na.pop(6)\nprint(a)\n\nOutput: [1, 2, 3, 4, 5]",
            "a.remove(6)"
        ],
        [
            "2793324-97",
            "a.remove(c)",
            "if (c in a):\n    a.remove(c)"
        ],
        [
            "2793324-5",
            "a.remove(c)",
            "try:\n    a.remove(c)\nexcept ValueError:\n    pass"
        ],
        [
            "5826427-6",
            "import subprocess\noutput = subprocess.check_output('bash test.sh', shell=True)\nprint(output)",
            "subprocess.call('test.sh otherfunc')"
        ],
        [
            "5826427-73",
            ": os.execv(python_script, [python_argc, python_argv]) and os.execl(python_script, python_argv, python_env)",
            "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"
        ],
        [
            "30605909-89",
            "df.to_csv('c:\\\\data\\\\t.csv', index=False)\n\nThis code will write the dataframe to a file named 't.csv' in the directory 'c:\\\\data' without including the row names",
            "df.to_csv('c:\\\\data\\\\t.csv', index=False)"
        ],
        [
            "9891814-38",
            "Therefore, the answer is re.findall('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353')",
            "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"
        ],
        [
            "4668619-32",
            "from datetime import datetime\nfrom django.db.models import Q\nlst = Sample.objects.filter(Q(date__range=(datetime(2011, 1, 1), datetime(2011, 1, 31)))",
            "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"
        ],
        [
            "4668619-26",
            "Sample.objects.filter(month__year=2011), which returns a queryset of all objects in the Sample model that have a month attribute with a value of 2011",
            "Sample.objects.filter(date__year='2011', date__month='01')"
        ],
        [
            "16387069-81",
            "import urllib.request\nresponse = urllib.request.urlopen('http://www.example.com/picture.jpg')\nwith open('picture.jpg', 'wb') as f:\n    f.write(response.read())",
            "img = Image.open('picture.jpg')\nimg.show()"
        ],
        [
            "16387069-86",
            "from django.core.files.file import File\nfile = File('picture.jpg')\nfile.open('r')",
            "img = Image.open('picture.jpg')\nImg.show"
        ],
        [
            "12426043-1",
            "with open('xxx.mp4', 'rb') as f:\n    with open('f', 'wb') as w:\n        w.write(f.read())",
            "f.write(open('xxx.mp4', 'rb').read())"
        ],
        [
            "41572822-28",
            "df = df.sort_values(by=['column1', 'column2'], ascending=False)\ndf.index = df.index.argsort()",
            "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"
        ],
        [
            "21558999-5",
            "df1 = df1.drop_duplicates(subset=['column1', 'column2'])\ndf1['frequency'] = df1.groupby('column1')['column2'].transform('count')",
            "df1.groupby(['key', 'year']).size().reset_index()"
        ],
        [
            "40963347-42",
            "df.mean(axis=0)",
            "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
        ],
        [
            "7284952-22",
            "from django.http import HttpResponseRedirect\npath = '/accounts/login/'\nreturn HttpResponseRedirect(path)",
            "redirect('Home.views.index')"
        ],
        [
            "42352887-25",
            "sorted(list(things.items()), key=operator.itemgetter('weight'))",
            "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"
        ],
        [
            "247770-78",
            "import os\nimport inspect\npath = os.path.abspath(os.path.join(os.getcwd(), 'a_module'))\npath = os.path.join(os.getcwd(), 'a_module')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.pyc')\npath = os.path.join(os.getcwd(), 'a_module.pyc')\npath = os.path.join(os.getcwd(), 'a_module.pyc')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')\npath = os.path.join(os.getcwd(), 'a_module.py')",
            "print(a_module.__file__)"
        ],
        [
            "247770-2",
            "answer code would be import os; importlib.resources.path('module_name').dir_path",
            "print(os.getcwd())"
        ],
        [
            "247770-13",
            "The final code snippet is os.path.abspath(os.path.join(os.getcwd(), 'amodule')) and the answer is /Users/username/projects/amodule",
            "path = os.path.abspath(amodule.__file__)"
        ],
        [
            "40660956-52",
            "df.sum(axis=1)",
            "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"
        ],
        [
            "5110352-21",
            "import time\nprint(time.strftime('%H:%M:%S', time.localtime()))",
            "now = datetime.datetime.now().strftime('%H:%M:%S')"
        ],
        [
            "3283984-56",
            "answer code would be import codecs; bytes_string = '4a4b4c'; decoded_string = codecs.decode(bytes_string, 'utf-8')",
            "bytes.fromhex('4a4b4c').decode('utf-8')"
        ],
        [
            "14971373-85",
            "subprocess.check_output(['ps', '-ef', '|', 'grep','something', '|', 'wc', '-l'])",
            "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"
        ],
        [
            "18079563-10",
            "s1 = [1, 2, 3, 4, 5]\ns2 = [2, 3, 4, 5, 6]\nresult = numpy.isin(s1, s2)\nprint(result)\n\n\nOutput: [True False False False True]",
            "pd.Series(list(set(s1).intersection(set(s2))))"
        ],
        [
            "26153795-98",
            "import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime",
            "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"
        ],
        [
            "5123839-3",
            "from django.shortcuts import get_object_or_404\nentry = get_object_or_404(Entry, pk=1)",
            "Entry.objects.filter()[:1].get()"
        ],
        [
            "29784889-2",
            "import warnings\nwith warnings.catch_warnings():\n    warnings.filterwarnings('always')\n    # code block",
            "warnings.simplefilter('always')"
        ],
        [
            "22676-23",
            "import urllib.request\nurllib.request.urlretrieve(\"http://www.example.com/songs/mp3.mp3\", \"mp3.mp3\")",
            "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"
        ],
        [
            "22676-91",
            "import urllib.request\nurl = \"https://www.example.com/file.txt\"\nfile_name = \"file.txt\"\nurllib.request.urlretrieve(url, file_name)",
            "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"
        ],
        [
            "22676-14",
            ":",
            "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"
        ],
        [
            "22676-1",
            "import urllib.request\nurl = 'https://example.com/file.txt'\nurllib.request.urlretrieve(url, 'file.txt')",
            "r = requests.get(url)"
        ],
        [
            "22676-64",
            "The answer code is urllib.request.urlretrieve(url, '10MB')",
            "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"
        ],
        [
            "4490961-76",
            "P @ T",
            "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"
        ],
        [
            "1592158-5",
            "import math\nresult = float(hex_string)\nprint(result)",
            "struct.unpack('!f', '470FC614'.decode('hex'))[0]"
        ],
        [
            "7286365-38",
            "itertools.chain.from_iterable([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
            "list(reversed(list(range(10))))"
        ],
        [
            "20573459-83",
            "import datetime\ncurrent_date = datetime.date.today()\nseven_days_ago = current_date - datetime.timedelta(days=7)\nprint(seven_days_ago)",
            "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"
        ],
        [
            "23164058-67",
            "import base64\nencoded_string = base64.b64encode(binary_string.encode())",
            "base64.b64encode(bytes('your string', 'utf-8'))"
        ],
        [
            "11236006-9",
            "def find_duplicates(mylist):\n    return list(set(mylist))",
            "[k for k, v in list(Counter(mylist).items()) if v > 1]"
        ],
        [
            "31247198-48",
            "import pandas as pd\nwith open('np.txt', 'w') as f:\n    df.to_csv(f)",
            "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"
        ],
        [
            "31247198-21",
            "import pandas as pd\nimport os\n\ndf = pd.read_csv('data.csv')\ndf.to_csv('c:\\\\data\\\\pandas.txt', index=False)",
            "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"
        ],
        [
            "15851568-6",
            "x.rsplit('-', maxsplit=1)",
            "print(x.rpartition('-')[0])"
        ],
        [
            "15851568-9",
            "nswer is df.fillna(method='ffill')",
            "print(x.rsplit('-', 1)[0])"
        ],
        [
            "4172131-18",
            "import random\nmy_list = random.sample([1, 2, 3, 4, 5], 5)",
            "[int(1000 * random.random()) for i in range(10000)]"
        ],
        [
            "6677332-3",
            "time.strptime(\"%f\", \"%Y-%m-%d %H:%M:%S.%f\")",
            "datetime.datetime.now().strftime('%H:%M:%S.%f')"
        ],
        [
            "583557-14",
            "print('+'.join(tab))\n\nor\n\nprint(' '.join(tab))\n\ndepending on the desired delimiter",
            "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"
        ],
        [
            "26053849-22",
            "df.apply(lambda x: np.count_nonzero(x.values))",
            "df.astype(bool).sum(axis=1)"
        ],
        [
            "30693804-5",
            "answer is the code snippet text = text.translate(str.maketrans('', '', string.punctuation)) +'' + text.lower()",
            "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"
        ],
        [
            "30693804-72",
            "text = 'This is a test string'\ntext = text.translate(str.maketrans('', '', string.punctuation))\ntext = text.lower()\ntext = text.replace(' ', '')\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]', '', text)\ntext = re.sub(r'[^\\w\\s]",
            "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"
        ],
        [
            "14435268-66",
            "soup.find('tag', id='name')",
            "print(soup.find('name').string)"
        ],
        [
            "2011048-15",
            "The answer code is with open(filepath, 'r') as f: count = len(f.readlines())",
            "os.stat(filepath).st_size"
        ],
        [
            "2600191-99",
            "a = ['apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'apple', 'banana']\ncount = sum(1 for x in a if x == 'apple')\nprint(count)",
            "l.count('a')"
        ],
        [
            "2600191-23",
            "l = ['apple', 'banana', 'apple', 'banana', 'cherry', 'banana']\ncount = collections.Counter(l)\nprint(count)\n\n\nOutput: {'banana': 2, 'apple': 2, 'cherry': 1}",
            "Counter(l)"
        ],
        [
            "2600191-53",
            "l = [1, 2, 2, 3, 4, 5, 5, 6, 6, 6]\ncount = sum(1 for x in l if x == 2)\nprint(count)",
            "[[x, l.count(x)] for x in set(l)]"
        ],
        [
            "2600191-55",
            "The final count is returned by the sum() function",
            "dict(((x, l.count(x)) for x in set(l)))"
        ],
        [
            "2600191-98",
            "l = ['a', 'b', 'c', 'b', 'd', 'b']\ncount = l.count('b')\nprint(count)",
            "l.count('b')"
        ],
        [
            "12842997-15",
            "shutil.copyfile(srcfile, dstdir)",
            "shutil.copy(srcfile, dstdir)"
        ],
        [
            "38152389-84",
            "df['c'] = df['b'].combine_first(df['a'])",
            "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"
        ],
        [
            "16296643-89",
            "t = [1, 2, 3, 4, 5]\nt = list(zip(range(1, 6), t))\nt = tuple(t)",
            "tuple(l)"
        ],
        [
            "16296643-20",
            "list(zip(level1))",
            "level1 = map(list, level1)"
        ],
        [
            "3880399-74",
            "import pprint\nlogFile = open('logfile.txt', 'w')\nlogFile.write(pprint.pformat(dataobject))\nlogFile.close()",
            "pprint.pprint(dataobject, logFile)"
        ],
        [
            "21800169-34",
            "df.loc[df['BoolCol'].isin(['True', 'False'])]",
            "df.loc[df['BoolCol']]"
        ],
        [
            "21800169-19",
            "df[df['BoolCol'].isin([True])]",
            "df.iloc[np.flatnonzero(df['BoolCol'])]"
        ],
        [
            "21800169-92",
            "You can then use the any function to find the index of the first row where the condition is true",
            "df[df['BoolCol'] == True].index.tolist()"
        ],
        [
            "21800169-41",
            "df.index.isin([True]).values",
            "df[df['BoolCol']].index.tolist()"
        ],
        [
            "299446-100",
            "import os\nos.chdir('owd')",
            "os.chdir(owd)"
        ],
        [
            "32063985-36",
            "import beautifulsoup4 as bs\nfrom bs4 import BeautifulSoup\n# parse the HTML\nsoup = bs.BeautifulSoup(html_doc, 'html.parser')\n# find the div with id'main-content'\nmain_content_div = soup.find('div', {'id':'main-content'})\n# remove the div\nmain_content_div.remove()",
            "soup.find('div', id='main-content').decompose()"
        ],
        [
            "17960441-40",
            "itertools.chain.from_iterable(zip(a, b))",
            "np.array([zip(x, y) for x, y in zip(a, b)])"
        ],
        [
            "17960441-39",
            "The code to zip two 2-d arrays a and b is list(itertools.zip_longest([a], [b]))",
            "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"
        ],
        [
            "26443308-74",
            "import pandas as pd\nimport numpy as np\nimport re\n# Example data\nmylist = [\n    {\"name\": \"Alice\", \"age\": 25, \"weight\": 70, \"factor\": 0.5},\n    {\"name\": \"Bob\", \"age\": 30, \"weight\": 80, \"factor\": 0.6},\n    {\"name\": \"Charlie\", \"age\": 35, \"weight\": 90, \"factor\": 0.7},\n]\n# Sort mylist by weight and factor\nsorted_mylist = sorted(mylist, key=lambda x: (x[\"weight\"], x[\"factor\"]))\n# Print sorted_mylist\nprint(sorted_mylist)\n\nOutput:\n\n[{'name': 'Alice', 'age': 25, 'weight': 70, 'factor': 0.5},\n {'name': 'Bob', 'age': 30, 'weight': 80, 'factor': 0.6},\n {'name': 'Charlie', 'age': 35, 'weight': 90, 'factor': 0.7}]",
            "'abcd}def}'.rfind('}')"
        ],
        [
            "20546419-7",
            "import numpy as np\nimport random\n#...\nr = np.random.shuffle(r)",
            "np.random.shuffle(np.transpose(r))"
        ],
        [
            "574236-63",
            "import os\npath = '/path/to/drive'\nfiles = os.listdir(path)\nnum_files = len(files)\nprint(num_files)",
            "os.statvfs('/').f_files - os.statvfs('/').f_ffree"
        ],
        [
            "7011291-98",
            "cursor = conn.execute(\"SELECT * FROM table_name WHERE column_name = 'value'\")\nresult = cursor.fetchone()\nprint(result)",
            "cursor.fetchone()[0]"
        ],
        [
            "4454298-91",
            "with open('infile', 'r') as f:\n    with open('outfile', 'w') as out:\n        out.write(f.read() + '#test firstline\\n')",
            "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"
        ],
        [
            "9012008-0",
            "import re\nif re.search(r'ba[rzd]', 'foobarrrr'):\n    print('True')\nelse:\n    print('False')",
            "bool(re.search('ba[rzd]', 'foobarrrr'))"
        ],
        [
            "7961363-85",
            "def remove_duplicates(t):\n    return list(set(t))",
            "list(set(t))"
        ],
        [
            "7961363-86",
            "answer is the code block set(source_list)",
            "list(set(source_list))"
        ],
        [
            "7961363-7",
            "abracadabra = ['apple', 'banana', 'cherry', 'apple', 'banana', 'cherry', 'orange', 'banana']\nresult = list(set(abracadabra))\nprint(result)\n\n\nOutput: ['apple', 'banana', 'cherry', 'orange']",
            "list(OrderedDict.fromkeys('abracadabra'))"
        ],
        [
            "5183533-81",
            "a = [1, 2, 3, 4, 5]\na = list(itertools.chain([1], a))",
            "numpy.array(a).reshape(-1).tolist()"
        ],
        [
            "5183533-11",
            "import numpy as np\na = np.array([[1, 2], [3, 4]])\nb = a[0].tolist()\nprint(b)\n\n\nOutput: [1, 2]",
            "numpy.array(a)[0].tolist()"
        ],
        [
            "5999747-97",
            "soup.find('td', {'class': 'address'}).findtext()",
            "print(soup.find(text='Address:').findNext('td').contents[0])"
        ],
        [
            "8908287-54",
            "answer is encode string 'data to be encoded'",
            "encoded = base64.b64encode('data to be encoded')"
        ],
        [
            "8908287-40",
            "nswer is:",
            "encoded = 'data to be encoded'.encode('ascii')"
        ],
        [
            "9035479-73",
            "Therefore, the answer is getattr(my_object,'my_str')",
            "getattr(my_object, my_str)"
        ],
        [
            "34945274-35",
            "A[numpy.in1d(A, [1, 3, 4])] = 0",
            "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"
        ],
        [
            "15819980-52",
            "a.mean(axis=0) or a.mean() if a is a 1d array",
            "np.mean(a, axis=1)"
        ],
        [
            "15907200-35",
            "the code snippet csv_writer.writerow(header)",
            "writer.writeheader()"
        ],
        [
            "23359886-48",
            "refore, the answer is a[a[:,0]==0&a[:,1]==1]",
            "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"
        ],
        [
            "26097916-29",
            "import pandas as pd\ndf = pd.DataFrame({'email': ['john@example.com', 'jane@example.com'], 'list': ['1', '2']})",
            "pd.DataFrame({'email': sf.index, 'list': sf.values})"
        ],
        [
            "1405602-48",
            "from PIL import Image\nfrom skimage import io\nfrom matplotlib.image import imread\n# Load image\nimage = Image.open('image.jpg')\n# Resize image\nimage = image.resize((x, y), Image.ANTIALIAS)\n# Display image\nimshow(image)",
            "image = image.resize((x, y), Image.ANTIALIAS)"
        ],
        [
            "9323159-38",
            "It then uses the built-in abs function to calculate the differences between each respective elements of l1 and l2",
            "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"
        ],
        [
            "29877663-54",
            "wer is the code snippet soup.find_all('span', {'class':'starGryB sp'})",
            "soup.find_all('span', {'class': 'starGryB sp'})"
        ],
        [
            "16193578-72",
            "sorted(list5, key=lambda x: x.degrees)",
            "sorted(list5, lambda x: (degree(x), x))"
        ],
        [
            "16193578-58",
            "torch.argsort(tensor)",
            "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"
        ],
        [
            "7373219-3",
            ":",
            "getattr(obj, 'attr')"
        ],
        [
            "1960516-75",
            "import json\njson_str = json.dumps(Decimal('3.9'), indent=4)\nprint(json_str)",
            "json.dumps(Decimal('3.9'))"
        ],
        [
            "29836836-87",
            "df[df['A'].isin([df['A'].value_counts().index[0], df['A'].value_counts().index[1]])]",
            "df.groupby('A').filter(lambda x: len(x) > 1)"
        ],
        [
            "35420052-72",
            "plt.colorbar(mappable=mappable)\nplt.savefig('output.png')",
            "plt.colorbar(mappable=mappable, cax=ax3)"
        ],
        [
            "29903025-37",
            "df['text'].str.extractall(r'\\b\\w+\\b', expand=True).explode().value_counts(100).reset_index(name='word')",
            "Counter(' '.join(df['text']).split()).most_common(100)"
        ],
        [
            "4530069-65",
            "import datetime\nprint(datetime.datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:%S %Z\"))\n\nThis code uses the strftime() method of the datetime.datetime object to format the current UTC time in the format YYYY-MM-DD HH:MM:SS Z, where Z stands for the UTC time zone",
            "datetime.now(pytz.utc)"
        ],
        [
            "9262278-9",
            "import json\nfrom django.http import JsonResponse\ndef my_view(request):\n    data = {\"name\": \"John Doe\", \"age\": 30}\n    return JsonResponse(data)",
            "return HttpResponse(data, mimetype='application/json')"
        ],
        [
            "3595685-42",
            "import subprocess\nbackground_process = subprocess.Popen(['python', 'background.py', 'arguments'], creationflags=subprocess.CREATE_NEW_PROCESS_GROUP)",
            "subprocess.Popen(['background-process', 'arguments'])"
        ],
        [
            "30729735-74",
            "myList[operator.indexOf(element, myList)] for the third query",
            "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"
        ],
        [
            "22799300-26",
            "import pandas as pd\ndf = pd.DataFrame([(1, 2), (3, 4)], columns=['out-1', 'out-2'])",
            "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"
        ],
        [
            "3464359-19",
            "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.ticker as mticker\n# Generate some random data\nx = np.random.normal(0, 1, 1000)\ny = np.random.normal(0, 1, 1000)\n# Create a figure and axis\nfig, ax = plt.subplots()\n# Rotate the xtick labels by 45 degrees\nax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n# Show the plot\nplt.show()",
            "ax.set_xticklabels(labels, rotation=45)"
        ],
        [
            "2212433-44",
            "len(yourdict.items())",
            "len(list(yourdict.keys()))"
        ],
        [
            "2212433-64",
            "python.library.collections.Counter(yourdictfile.keys())",
            "len(set(open(yourdictfile).read().split()))"
        ],
        [
            "40924332-83",
            "The answer code is df[['column1', 'column2']].explode()",
            "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"
        ],
        [
            "804995-74",
            "subprocess.check_call('\"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat\"', shell=True)",
            "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"
        ],
        [
            "26441253-42",
            "q = heapq.PriorityQueue()\nq.heappush(q, (3, 1))\nq.heappush(q, (1, 2))\nq.heappush(q, (2, 3))\nprint(q.heappop(0))\n\nThis code creates a priority queue with three items, and then pops the first item off the queue, which is (1, 2)",
            "q.put((-n, n))"
        ],
        [
            "21887754-31",
            "import numpy as np\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.concatenate((a, b))\nprint(c)\n\nOutput: array([[1, 2, 3],\n           [4, 5, 6]])",
            "print(concatenate((a, b), axis=0))"
        ],
        [
            "21887754-88",
            "a = [[1, 2], [3, 4]]\nb = [[5, 6], [7, 8]]\nc = np.concatenate((a, b), axis=1)\nprint(c)\n\n\nOutput: [[ 1  2  5  6]\n [ 3  4  7  8]]",
            "print(concatenate((a, b), axis=1))"
        ],
        [
            "21887754-21",
            "import numpy as np\na = np.array([1, 2, 3])\nb = np.array([[4, 5], [6, 7], [8, 9]])\nc = np.concatenate((a, b), axis=0)\nprint(c)",
            "c = np.r_[(a[None, :], b[None, :])]"
        ],
        [
            "21887754-64",
            "import numpy as np\na = np.array([[1, 2], [3, 4]])\nb = np.array([[5, 6], [7, 8]])\nc = np.concatenate((a, b), axis=0)\nprint(c)\n\nOutput: array([[ 1,  2],\n       [ 3,  4],\n       [ 5,  6],\n       [ 7,  8]])",
            "np.array((a, b))"
        ],
        [
            "4356842-88",
            "return HttpResponseRedirect('/login/') or return HttpResponse('Unauthorized') depending on the desired status code",
            "return HttpResponse('Unauthorized', status=401)"
        ],
        [
            "31793195-78",
            "df.index.get_loc(df['bob'])",
            "df.index.get_loc('bob')"
        ],
        [
            "18730044-52",
            "The answer code is [[x, y] for x, y in zip_longest([1, 2, 3], [4, 5, 6])]",
            "np.column_stack(([1, 2, 3], [4, 5, 6]))"
        ],
        [
            "22187233-98",
            "import re\nstring = 'it is icy'\npattern = re.compile('i')\nresult = re.sub(pattern, '', string)\nprint(result)\n\nThis code will output 'it is icy', since the 'i' character has been deleted from the string",
            "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"
        ],
        [
            "22187233-48",
            "import re\nstring = 'it is icy'\npattern = re.compile('i')\nmatch = pattern.search(string)\nif match:\n    print('Found the letter \"i\"')\nelse:\n    print('No letter \"i\" found')",
            "re.sub('i', '', 'it is icy')"
        ],
        [
            "22187233-75",
            "new_string = old_string.translate(str.maketrans('', '', string.ascii_lowercase))",
            "\"\"\"it is icy\"\"\".replace('i', '')"
        ],
        [
            "22187233-63",
            "re.search(pattern, string).group()",
            "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"
        ],
        [
            "10351772-57",
            "answer is the successful conversion of the list of strings to a list of integers",
            "nums = [int(x) for x in intstringlist]"
        ],
        [
            "10351772-10",
            "def convert_list_to_int(lst):\n    return list(map(int, lst))\n# Example usage:\nlst = ['1', '2', '3', '4', '5']\nint_lst = convert_list_to_int(lst)\nprint(int_lst) # Output: [1, 2, 3, 4, 5]",
            "map(int, eval(input('Enter the unfriendly numbers: ')))"
        ],
        [
            "3964681-43",
            "os.path.join('/mydir', '*.txt')",
            "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"
        ],
        [
            "3964681-18",
            "the code snippet:",
            "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"
        ],
        [
            "3964681-62",
            "The answer code is os.path.join('/mydir', '*.txt')",
            "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"
        ],
        [
            "18979111-77",
            "import json\njson_str = '{\"name\": \"John Doe\", \"age\": 30}'\njson_dict = json.loads(json_str)\nprint(json_dict)\n# Output: {\"name\": \"John Doe\", \"age\": 30}\njson_str = '{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}'\njson_dict = json.loads(json_str)\nprint(json_dict)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}\njson_str = '{\"name\": \"John Doe\", \"age\": 30}'\njson_dict = json.loads(json_str, cls=json.JSONDecoder)\nprint(json_dict)\n# Output: {\"name\": \"John Doe\", \"age\": 30}\njson_str = '{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}'\njson_dict = json.loads(json_str, cls=json.JSONDecoder)\nprint(json_dict)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}\njson_str = '{\"name\": \"John Doe\", \"age\": 30}'\njson_dict = json.loads(json_str, cls=json.JSONDecoder, object_pairs_hook=collections.OrderedDict)\nprint(json_dict)\n# Output: {\"name\": \"John Doe\", \"age\": 30}\njson_str = '{\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}'\njson_dict = json.loads(json_str, cls=json.JSONDecoder, object_pairs_hook=collections.OrderedDict)\nprint(json_dict)\n# Output: {\"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\"}\njson_str = '{\"name\": \"John Doe\", \"age\": 30}'\njson_dict = json.loads(json_str, cls=json.JSONDecoder, object_pairs_hook=collections.OrderedDict)\nprint(json_dict",
            "json.loads(request.body)"
        ],
        [
            "36402748-46",
            "df = pd.DataFrame({'a': [1, 2, 3, 2, 1], 'b': [3, 1, 2, 4, 5]})\ndf.sort_index(ascending=False, key='b')\n\nThis code sorts the Dataframe df by the column b in descending order, and returns the sorted Dataframe",
            "df.groupby('prots').sum().sort('scores', ascending=False)"
        ],
        [
            "7750557-47",
            "import json\nimport requests\nurl = 'https://example.com/api/data'\nresponse = requests.get(url)\ndata = json.loads(response.text)\nprint(data)",
            "json.load(urllib.request.urlopen('url'))"
        ],
        [
            "2984751-50",
            "The filter function can be used in conjunction with the Django ORM to filter data based on the current time",
            "Entry.objects.filter(pub_date__contains='08:00')"
        ],
        [
            "5944630-52",
            "list = [\n    {'points': 10, 'time': 5},\n    {'points': 20, 'time': 3},\n    {'points': 15, 'time': 7}\n]\nsorted_list = sorted(list, key=operator.itemgetter('points'), key=operator.itemgetter('time'))\nprint(sorted_list)",
            "list.sort(key=lambda item: (item['points'], item['time']))"
        ],
        [
            "19546911-36",
            "The code to achieve this is",
            "struct.unpack('H', struct.pack('h', number))"
        ],
        [
            "20107570-40",
            "df.to_csv('output.csv', index=False)",
            "df.to_csv(filename, index=False)"
        ],
        [
            "8740353-74",
            "import json\nunescaped = 'key1=value1&key2=value2'\njson_data = json.loads(urllib.parse.urlencode({'unescaped': unescaped}))\njson_data = json.loads(json.dumps(json_data))\njson_data = json.loads(json_data.replace('\\\\', '\\\\\\\\'))\njson_data = json.loads(json_data.replace('&', '&amp;'))\njson_data = json.loads(json_data.replace('=', '=amp;'))\njson_data = json.loads(json_data.replace(' ', '&amp;'))\njson_data = json.loads(json_data.replace('{', '&lt;').replace('}', '&gt;'))\njson_data = json.loads(json_data.replace('[', '&lt;').replace(']', '&gt;'))\njson_data = json.loads(json_data.replace('(', '&lt;').replace(')', '&gt;'))\njson_data = json.loads(json_data.replace(';', '&amp;').replace(':', '&amp;'))\njson_data = json.loads(json_data.replace('\"', '&quot;').replace('\\'', '&apos;'))\njson_data = json.loads(json_data.replace('\\\\', '\\\\\\\\').replace('\\n', '&lt;br&gt;').replace('\\r', '&gt;').replace('\\t', '&amp;nbsp;'))\njson_data = json.loads(json_data.replace(' ', '&amp;nbsp;').replace(':', '&amp;amp;').replace(';', '&amp;amp;'))\njson_data = json.loads(json_data.replace('\"', '&quot;').replace('\\'', '&apos;'))\njson_data = json.loads(json_data.replace('\\\\', '\\\\\\\\').replace('\\n', '&lt;br&gt;').replace('\\r', '&gt;')",
            "json_data = json.loads(unescaped)"
        ],
        [
            "18367007-15",
            "with open('newFile', 'wb') as newFile:\n    newFile.write(newFileBytes)",
            "newFile.write(struct.pack('5B', *newFileBytes))"
        ],
        [
            "16125229-76",
            "the last key of the dictionary",
            "list(dict.keys())[-1]"
        ],
        [
            "10668585-75",
            "rom django.contrib.admin.models import InlineModelAdmin\nclass AuthorizedEmailAdmin(InlineModelAdmin):\n    max_num = 1\n    list_display = ('email',)",
            "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"
        ],
        [
            "10607688-46",
            "import datetime\nnow = datetime.datetime.now()\nprint(now)",
            "datetime.datetime.now()"
        ],
        [
            "17794266-82",
            "x = numpy.array([[1, 2], [3, 4]])\ny = numpy.abs(x).argmax()",
            "max(x.min(), x.max(), key=abs)"
        ]
    ]
}