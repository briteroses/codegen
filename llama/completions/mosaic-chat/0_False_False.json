{
    "(0, False, False)": [
        [
            "11840111-96",
            "If a key exists in both dictionaries, it prints the key",
            "{k: (float(d2[k]) / d1[k]) for k in d2}"
        ],
        [
            "11840111-75",
            ":\n\nfor key in d1:\n    if key in d2:\n        d1[key] /= d2[key]",
            "dict((k, float(d2[k]) / d1[k]) for k in d2)"
        ],
        [
            "19602931-64",
            ":\n\nimport requests\nresponse = requests.get(\"http://randomsite.com/file.gz\")\nwith open(\"file.gz\", \"wb\") as f:\n    f.write(response.content)\n\nThis code snippet downloads the file from the specified URL using the requests library, and saves it to the local file system as \"file.gz\"",
            "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
        ],
        [
            "19602931-43",
            ":\n\nimport requests\nresponse = requests.get(\"http://randomsite.com/file.gz\")\nwith open(\"file.gz\", \"wb\") as f:\n    f.write(response.content)\n\nThis code snippet downloads the file from the specified URL and saves it as \"file.gz\" in the current working directory",
            "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
        ],
        [
            "23351183-26",
            "my_model = MyModel.objects.filter(charfield__max_length=255)",
            "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"
        ],
        [
            "432842-3",
            "8.\n\n\nThe code snippet above will output the logical xor of 5 and 3, which is 8",
            "((a and (not b)) or ((not a) and b))"
        ],
        [
            "546321-12",
            "Finally, we print the result using the print() function",
            "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"
        ],
        [
            "546321-62",
            ":\n\ntoday = datetime.date.today()\ntwo_months_from_today = today + relativedelta(months=2)\nprint(two_months_from_today)",
            "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"
        ],
        [
            "1186789-34",
            ":\n\nimport subprocess\nsubprocess.call(['python', 'test1.py'])",
            "subprocess.call('test1.py', shell=True)"
        ],
        [
            "843277-70",
            "if hasattr(obj, 'attr_name'):\n    # do something\nelse:\n    # do something else",
            "hasattr(obj, 'attr_name')"
        ],
        [
            "2231663-53",
            "Finally, we return the four lists that we created.",
            "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"
        ],
        [
            "2231663-54",
            ":\n\n\n\nresult = []\nfor sublist in list:\n    result.append([sublist[i",
            "[input[i:i + n] for i in range(0, len(input), n)]"
        ],
        [
            "14571103-73",
            ": ['D', 'P']\n\n\nThe answer",
            "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"
        ],
        [
            "27868020-14",
            "The resulting dataframe contains only the rows where the sum of 'X' is equal to 0",
            "df.loc[df.groupby('User')['X'].transform(sum) == 0]"
        ],
        [
            "27868020-52",
            "df[df['X'] == 0]",
            "df.groupby('User')['X'].transform(sum) == 0"
        ],
        [
            "4302027-39",
            ": \n\nwebbrowser.open_new(url)",
            "webbrowser.open('http://example.com')"
        ],
        [
            "4906977-61",
            "The $HOME syntax is used to access the value of the HOME environment variable",
            "os.environ['HOME']"
        ],
        [
            "4906977-33",
            ": \n\necho $HOME",
            "os.environ['HOME']"
        ],
        [
            "4906977-98",
            ":\n\nprint(os.environ)",
            "print(os.environ)"
        ],
        [
            "4906977-9",
            "This variable contains a string of all environment variables in the current process",
            "os.environ"
        ],
        [
            "4906977-77",
            "The code then prints the retrieved value",
            "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"
        ],
        [
            "674509-17",
            ":\n\nsorted(dictionary.values())\n\nThis code snippet will sort the values of the dictionary in ascending order",
            "sorted(list(dictionary.items()), key=operator.itemgetter(1))"
        ],
        [
            "674509-45",
            "It will then print out the key and its corresponding value for each iteration",
            "sorted(list(dictionary.items()), key=lambda x: x[1])"
        ],
        [
            "29370211-80",
            "This new column contains the original strings split into separate elements",
            "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"
        ],
        [
            "29370211-55",
            ":\n\ndf['stats_split'] = df['stats'].str.split(',').explode()\n\nThis code snippet splits the string in the'stats' column by the comma separator and then explodes the resulting series to separate the values into separate columns in the dataframe",
            "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"
        ],
        [
            "3939361-35",
            ":\n\nline = line.replace(\"!@#$\", \"\")\n\nThis code snippet replaces all occurrences of the characters \"!@#$\" with an empty string, effectively removing them from the string line",
            "line.translate(None, '!@#$')"
        ],
        [
            "3939361-33",
            ":\n\nline = line.replace(\"!@#$\", \"\")\n\nThis code snippet replaces all occurrences of the characters \"!@#$\" with an empty string in the string variable line",
            "line = re.sub('[!@#$]', '', line)"
        ],
        [
            "3939361-18",
            "string = string.replace(\"1\", \"\")",
            "string.replace('1', '')"
        ],
        [
            "3939361-89",
            ":\n\nline = line.replace('!', '').replace('#', '').replace('$', '')\n\nThis code snippet replaces all occurrences of the characters '!', '#', and '$' in the string line with an empty string",
            "line = line.translate(string.maketrans('', ''), '!@#$')"
        ],
        [
            "14043934-80",
            "The resulting time object is then printed using the print() function",
            "(t - datetime.timedelta(hours=1, minutes=10))"
        ],
        [
            "14043934-42",
            ":\n\ndt = datetime.datetime.now()\ndt -= datetime.timedelta(hours=5)\nprint(dt)\n\nThis code snippet subtracts 5 hours from the current time object dt and prints the new time object",
            "dt -= datetime.timedelta(hours=5)"
        ],
        [
            "13496087-84",
            ": \n\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time",
            "random.randint(100000000000, 999999999999)"
        ],
        [
            "13496087-95",
            ": \n\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time\nimport random\nimport string\nimport math\nimport time",
            "'%0.12d' % random.randint(0, 999999999999)"
        ],
        [
            "11709079-81",
            "If not, they can be installed using pip, the Python package manager",
            "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"
        ],
        [
            "1892339-46",
            "The jump_to_front() method is a method that is defined in the root object and will execute the necessary code to make the window jump to the front",
            "root.lift()"
        ],
        [
            "1823058-26",
            ":\n\nprint(\"{:,}\".format(value))",
            "'{:,}'.format(value)"
        ],
        [
            "14406214-5",
            ":\n\nax.set_xlabel('x-axis label')\nax.invert_yaxis()\n\nThis code snippet will move the x-axis label to the top of a plot ax in matplotlib",
            "ax.xaxis.set_label_position('top')"
        ],
        [
            "14406214-43",
            "ax.invert_yaxis()",
            "ax.xaxis.tick_top()"
        ],
        [
            "10565598-66",
            "if (set(a).issubset(set(b)):\n    print(\"array b contains all elements of array a\")\nelse:\n    print(\"array b does not contain all elements of array a\")",
            "numpy.in1d(b, a).all()"
        ],
        [
            "13557937-8",
            "The resulting binary values are added to the binary_list",
            "list('{0:0b}'.format(8))"
        ],
        [
            "13557937-9",
            "Finally, we use the zfill() method to pad each string with leading zeros to ensure that it has a length of 8 digits.",
            "[int(x) for x in list('{0:0b}'.format(8))]"
        ],
        [
            "311627-76",
            "The %Y, %m, %d, %H, %M, and %S placeholders are used to specify the year, month, day, hour, minute, and second, respectively",
            "time.strftime('%Y-%m-%d %H:%M')"
        ],
        [
            "3940128-52",
            ":\nL = [1, 2, 3, 4, 5]\nL.reverse()\nprint(L)",
            "L[::(-1)]"
        ],
        [
            "3940128-21",
            ":\n\nL = [1, 2, 3, 4, 5]\nL.reverse()\nprint(L)",
            "L.reverse()"
        ],
        [
            "89228-90",
            "Finally, the \"print\" method is used to output the result to the console",
            "from subprocess import call"
        ],
        [
            "89228-91",
            "Finally, the result.stdout property is printed to the console.",
            "os.system('some_command with args')"
        ],
        [
            "89228-25",
            "The solution provided is the correct syntax for this task",
            "os.system('some_command < input_file | another_command > output_file')"
        ],
        [
            "89228-76",
            ":\n\nsome_command arg1 arg2",
            "stream = os.popen('some_command with args')"
        ],
        [
            "89228-97",
            ": \n\necho Hello World",
            "return_code = subprocess.call('echo Hello World', shell=True)"
        ],
        [
            "89228-44",
            "Finally, the \"print\" method is used to display the contents of the \"result\" variable",
            "call(['ls', '-l'])"
        ],
        [
            "5137497-23",
            ": \n\npwd",
            "os.path.realpath(__file__)"
        ],
        [
            "5137497-33",
            "If the directory does not exist, it prints a message indicating that the directory does not exist",
            "os.path.dirname(path)"
        ],
        [
            "5137497-66",
            ":\n\n\nimport os\ndef get_canonical_path(path):\n    \"\"\"\n    Returns the canonical path of the given file.\n    \"\"\"\n    if os.path",
            "os.path.realpath(path)"
        ],
        [
            "5137497-91",
            ": \n\nimport os\nprint(os.getcwd())",
            "dir_path = os.path.dirname(os.path.realpath(__file__))"
        ],
        [
            "5137497-76",
            ": \n\nimport os\nprint(os.getcwd())",
            "full_path = os.path.realpath(__file__)"
        ],
        [
            "14961562-66",
            "The resulting integers are then appended to a list and returned by the function",
            "struct.unpack('11B', s)"
        ],
        [
            "19738169-65",
            "The format string '%Y-%m-%d' is used to specify the desired format of the strings",
            "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"
        ],
        [
            "104420-82",
            "The function uses nested loops to iterate over all possible combinations of elements from",
            "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"
        ],
        [
            "104420-100",
            ":\n\n[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
            "itertools.permutations([1, 2, 3])"
        ],
        [
            "19781609-19",
            "The index=False argument will exclude the row index from the output, while the header=False argument will exclude the header row from the output",
            "df.to_csv('filename.csv', header=False)"
        ],
        [
            "1406145-57",
            "This will remove the root window from the display and free up system resources",
            "root.destroy()"
        ],
        [
            "2225564-15",
            "The resulting list of files is then printed to the console",
            "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"
        ],
        [
            "30406725-90",
            "The resulting pivot table is printed to the console using the print() function",
            "df.pivot(index='order', columns='sample')"
        ],
        [
            "18229082-25",
            "Finally, it prints the contents of the list to the console",
            "pickle.load(open('afile', 'rb'))"
        ],
        [
            "3329386-17",
            "Finally, the function returns the endings list",
            "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"
        ],
        [
            "22733642-1",
            "Finally, the 'writerow' method is used to write each row of data to the file.",
            "self.writer.writerow([str(s).encode('utf-8') for s in row])"
        ],
        [
            "13114512-57",
            "The resulting array is then subtracted from the original dataframe to get the differences",
            "data.set_index('Date').diff()"
        ],
        [
            "28901311-21",
            "If it does not find a match, it returns -1",
            "np.where(np.in1d(A, B))[0]"
        ],
        [
            "18102109-63",
            ":\n\nSELECT * FROM Task WHERE time_spent > 3",
            "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"
        ],
        [
            "415511-22",
            ":\n\nimport datetime\nnow = datetime.datetime.now()\nprint(now)",
            "datetime.datetime.now()"
        ],
        [
            "415511-29",
            ": \n\nimport datetime\nnow = datetime.datetime.now()\nprint(now)",
            "datetime.datetime.now().time()"
        ],
        [
            "415511-26",
            "The resulting string is then printed to the console",
            "strftime('%Y-%m-%d %H:%M:%S', gmtime())"
        ],
        [
            "415511-14",
            ": \n\nimport datetime\nnow = datetime.datetime.now()\ncurrent_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\nprint(current_time)",
            "str(datetime.now())"
        ],
        [
            "415511-33",
            ": \n\nimport datetime\nnow = datetime.datetime.now()\nprint(now)",
            "datetime.datetime.time(datetime.datetime.now())"
        ],
        [
            "32283692-10",
            "The resulting array is then concatenated along the third axis to create a 4-d array",
            "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"
        ],
        [
            "32283692-46",
            "import numpy as np\nresult = np.append(np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]), np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0",
            "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"
        ],
        [
            "36542169-84",
            ": df.iloc[0]\ndf.iloc[-1]",
            "pd.concat([df.head(1), df.tail(1)])"
        ],
        [
            "2803852-74",
            ": \n\n\n\nimport datetime\ndate_str = '24052010'\ndate_obj = datetime.datetime.strptime(date_str, '%d%m%Y')\nprint(date_obj)",
            "datetime.datetime.strptime('24052010', '%d%m%Y').date()"
        ],
        [
            "39719140-55",
            "Finally, the mean of these indices is calculated using the mean() method",
            "np.flatnonzero(x).mean()"
        ],
        [
            "5508352-50",
            "The result is stored in the variable c, and then printed to the console",
            "a[tuple(b)]"
        ],
        [
            "2233917-10",
            "The split() method is used to split the input string into a list of integers, and the tuple() function is used to convert the list into a tuple data type",
            "tuple(map(int, input().split(',')))"
        ],
        [
            "2233917-8",
            "It then stores these integers in the variables x and y",
            "tuple(int(x.strip()) for x in input().split(','))"
        ],
        [
            "10998621-33",
            "The step parameter is set to \u03c0/6 to space the ticks evenly at 45-degree intervals",
            "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"
        ],
        [
            "40517350-9",
            "The result is a DataFrame with the state and county name and the count of rows in that group",
            "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"
        ],
        [
            "28664103-14",
            ":\n\ndf.pivot_table(index=df.index.date, columns=df.index.time, values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf.pivot_table(index=df.index.date, columns=df.index.time, values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')\n\n\nimport pandas as pd\ndf = pd.read_csv('data.csv')\ndf = df.pivot(index='date', columns='time', values='Close')",
            "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"
        ],
        [
            "8192379-98",
            ":\n\na = []\nwhile True:\n    x = input()\n    if x == '':\n        break\n    a.append(int(x))\nprint(a)",
            "a.fromlist([int(val) for val in stdin.read().split()])"
        ],
        [
            "13237941-54",
            ":\n\nyourdata.reverse()",
            "sorted(yourdata, reverse=True)"
        ],
        [
            "13237941-56",
            "The reverse argument is set to True to sort the list in reverse order",
            "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"
        ],
        [
            "13237941-14",
            ":\n\nsorted(yourdata, key=lambda x: (x['key'], x['subkey']))\n\nThis code snippet will sort a list of nested dictionaries in reverse order of the 'key' and'subkey' values",
            "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"
        ],
        [
            "15548506-61",
            ":\n\nimport networkx as nx\nG = nx.Graph()\npos = nx.get_node_attributes(G, 'position')\nnx.draw_networkx_nodes(G, pos=pos)\n\nThis code snippet will draw node labels on the networkx graph at the specified position",
            "networkx.draw_networkx_labels(G, pos, labels)"
        ],
        [
            "7287996-89",
            "\"/usr/\"",
            "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"
        ],
        [
            "7287996-17",
            ": '/usr/var/log/'\n\nimport os\npath1 = '/usr/var'\npath2 = '/usr/var/log/'\nprint(os.path.relpath(path1, path2))\n\nOutput: '/usr/var/log/'",
            "print(os.path.relpath('/usr/var/log/', '/usr/var'))"
        ],
        [
            "14925239-71",
            "If myobject is not present or myobject.id is not a dictionary or myobject.id.number is not a key in myobject.id, then number is assigned a value of None",
            "getattr(getattr(myobject, 'id', None), 'number', None)"
        ],
        [
            "41469647-32",
            "The resulting 3d array X_outer has dimensions (M, N, K), where M is the number of rows in X, N is the number of columns in X, and K is the number of columns in the resulting 3d array",
            "np.einsum('ij,kj->jik', X, X)"
        ],
        [
            "32292554-35",
            ":\n\ndef create_list_of_tuples(n):\n    permutations = []\n    for i in range(2**n):\n        permutation = [0] * n\n        permutation[i % n] = 1\n        permutations.append(permutation)\n    return permutations",
            "itertools.product(list(range(2)), repeat=4)"
        ],
        [
            "3166619-87",
            "If it was, the code prints \"The match was found.\" Otherwise, it prints \"The match was not found.\"",
            "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"
        ],
        [
            "13628725-82",
            "Finally, it prints the list of random numbers",
            "random.sample(range(1, 50), 6)"
        ],
        [
            "13628725-59",
            "Finally, it prints the list of numbers",
            "random.sample(range(1, 50), 6)"
        ],
        [
            "15940280-74",
            ":\n\nimport datetime\nnow = datetime.datetime.utcnow()\nprint(now)",
            "datetime.utcnow()"
        ],
        [
            "12280143-55",
            "In other words, it changes the current directory to the parent directory of the current one",
            "os.chdir('..')"
        ],
        [
            "15457504-91",
            ":\n\nself.canvas.text_item(k).font = 'Purisa'\nself.canvas.text_item(k).font_size = 12\n\n\n\nOutput:",
            "canvas.create_text(x, y, font=('Purisa', 12), text=k)"
        ],
        [
            "41946927-22",
            "The resulting data frame will have columns for \"name\", \"age\", and \"city\", and rows for each dictionary in the list",
            "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"
        ],
        [
            "8214932-71",
            "if 'one' in d.values():\n    print('found')\nelse:\n    print('not found')",
            "'one' in list(d.values())"
        ],
        [
            "8214932-94",
            "if 'one' in d:\n    print('The value is in the dictionary.')\nelse:\n    print('The value is not in the dictionary.')",
            "'one' in iter(d.values())"
        ],
        [
            "7125009-76",
            "plt.legend(loc='upper left', fontsize='x-small')",
            "pyplot.legend(loc=2, fontsize='x-small')"
        ],
        [
            "7125009-57",
            ":\n\nimport matplotlib.pyplot as plt\nplt.legend(fontsize=6)",
            "plot.legend(loc=2, prop={'size': 6})"
        ],
        [
            "8270092-77",
            ":\n\nsentence = \"This is a sentence with spaces.\"\nsentence = sentence.strip()\nprint(sentence)",
            "sentence.replace(' ', '')"
        ],
        [
            "8270092-68",
            ":\n\nsentence = \"This is a sentence with spaces.\"\nsentence = sentence.strip()\nprint(sentence)",
            "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"
        ],
        [
            "8270092-97",
            ":\n\nsentence = \"This is a sentence with spaces at the beginning and end.\"\nsentence = sentence.strip()\nprint(sentence)",
            "sentence.strip()"
        ],
        [
            "8270092-87",
            ":\n\nsentence = \"This is a sentence with spaces.\"\nsentence = sentence.strip()\nprint(sentence)",
            "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"
        ],
        [
            "8270092-31",
            ":\n\nsentence = \"This is a test string.\"\nsentence = sentence.replace(\" \", \"\")\nprint(sentence)",
            "sentence = ''.join(sentence.split())"
        ],
        [
            "14591855-94",
            "import pandas as pd\ndf = pd.read_hdf('/home/.../data.h5', key='firstSet')",
            "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"
        ],
        [
            "8369219-15",
            "The with statement is used to ensure that the file is properly closed after it is read",
            "str = open('very_Important.txt', 'r').read()"
        ],
        [
            "19445682-35",
            ":\n\nimport imaplib\nimport email\nimport urllib.request\ndef handle_urlfetch_errors(url):\n    try:\n        response = urllib.request.urlfetch(url)\n        return response\n    except urllib.error.HTTPError as error:\n        print(\"HTTP Error:\", error)\n        return None\n    except urllib.error.URLError as error:\n        print(\"URL Error:\", error)\n        return None\n    except Exception as error:\n        print(\"Unknown Error:\", error)\n        return None\n\nThe correct code snippet is:\n\nimport imaplib\nimport email\nimport urllib.request\ndef handle_urlfetch_errors(url):\n    try:\n        response = urllib.request.urlfetch(url)\n        return response\n    except urllib.error.HTTPError as error:\n        print(\"HTTP Error:\", error)\n        return None\n    except urllib.error.URLError as error:\n        print(\"URL Error:\", error)\n        return None\n    except Exception as error:\n        print(\"Unknown Error:\", error)\n        return None\n\nThis code snippet correctly handles the urlfetch_errors exception for imaplib request to url url",
            "urlfetch.fetch(url, deadline=10 * 60)"
        ],
        [
            "6250046-45",
            "http://www.address.com/something",
            "urlparse.urldefrag('http://www.address.com/something#something')"
        ],
        [
            "9849192-97",
            ":\n\nmydict = {'apple': 1, 'banana': 2, 'orange': 3}\nsorted_dict = sorted(mydict.items(), key=lambda x: x[1], reverse=True)\nprint(sorted_dict)\n\nThis code snippet will sort the items in the dictionary mydict by value in reverse order",
            "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"
        ],
        [
            "13279399-43",
            "If the 'firstname' variable is not present in the request data, the method will return None",
            "first_name = request.args.get('firstname')"
        ],
        [
            "13279399-5",
            "The Flask application is then run using the app.run() method",
            "first_name = request.form.get('firstname')"
        ],
        [
            "3278850-59",
            ":\n\nwith open('file.txt', 'r') as f:\n    txt = f.read()\nprint(txt)",
            "txt = open('file.txt').read()"
        ],
        [
            "14043080-28",
            ":\n\nimport datetime\nnow = datetime.datetime.utcnow()\nutc_11 = datetime.datetime(1970, 1, 1) + datetime.timedelta(hours=11)\nif now.utcoffset() == utc_11.utcoffset():\n    year = now.year\nelse:\n    year = now.year - 1\nprint(year)",
            "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"
        ],
        [
            "687295-63",
            "The id__ne=3 filter condition means that only the entries where the 'id' field is not equal to 3 are returned",
            "Entry.objects.filter(~Q(id=3))"
        ],
        [
            "19011613-15",
            "The 'prettify()' method is used to format the output of each div block in a readable format",
            "soup.find_all('div', class_='crBlock ')"
        ],
        [
            "4296249-87",
            "The resulting rgb tuple is then printed to the console",
            "struct.unpack('BBB', rgbstr.decode('hex'))"
        ],
        [
            "5864271-27",
            "The function returns the reversed string",
            "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"
        ],
        [
            "73663-61",
            ":\n\nprint(\"The program is terminating...\")",
            "sys.exit()"
        ],
        [
            "73663-36",
            ":\n\nprint(\"The program is terminating...\")",
            "quit()"
        ],
        [
            "73663-66",
            ":\n\ntry:\n    # code to execute\nexcept Exception as e:\n    print(\"some error message\")",
            "sys.exit('some error message')"
        ],
        [
            "21974169-23",
            "This will save any changes made to the database since the last commit",
            "con.commit()"
        ],
        [
            "11269575-66",
            "The output of the command will then be redirected to the console",
            "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"
        ],
        [
            "1094717-63",
            "It then converts the resulting string to an integer using the int() function",
            "int(Decimal(s))"
        ],
        [
            "1094717-69",
            ":\n\nx = int(input(\"Enter a number: \"))\n\nThis code snippet takes user input and converts it to an integer in Python",
            "int(s.split('.')[0])"
        ],
        [
            "31957364-53",
            ":\n\nA[i,j,k] * B[i,j,k]",
            "np.einsum('ijk,ikl->ijl', A, B)"
        ],
        [
            "1196074-89",
            "The & symbol at the end of the second line runs the command in the background, so the terminal doesn't wait for the command to finish before displaying the next prompt",
            "subprocess.Popen(['rm', '-r', 'some.file'])"
        ],
        [
            "19100540-33",
            ":\n\ndf['Alabama_exp'] = round(df",
            "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"
        ],
        [
            "59825-84",
            "This means that the next time x is accessed, it will still be present in the set",
            "e = next(iter(s))"
        ],
        [
            "5868374-42",
            ":\n\nfrom datetime import datetime\ndatestr = '2021-09-10'\ndate_obj = datetime.strptime(datestr, '%Y-%m-%d')\nprint(date_obj)\n\nOutput:\n\n2021-09-10 00:00:00",
            "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"
        ],
        [
            "208894-61",
            "If the PDF file contains images or other types of files, the code may need to be modified to handle those cases",
            "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"
        ],
        [
            "20796355-35",
            ": \n\nos.chdir('/path/to/chapter3')",
            "os.chdir('chapter3')"
        ],
        [
            "20796355-88",
            ": \n\nos.chdir('/path/to/new/directory')",
            "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"
        ],
        [
            "20796355-81",
            ": \n\nos.chdir('/path/to/new/directory')",
            "os.chdir('.\\\\chapter3')"
        ],
        [
            "1299855-22",
            "The code snippet above demonstrates this approach",
            "br.form.add_file(open(filename), 'text/plain', filename)"
        ],
        [
            "2317134-81",
            ": \n\nimport re\nstring = 'A\\n'\nmatch = re.match(r'[a-zA-Z][\\\\w-]*\\\\Z', string)",
            "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"
        ],
        [
            "2317134-43",
            ": \n\nimport re\nstring = '!A_B'\nmatch = re.match(r'[a-zA-Z][\\\\w-]*$', string)\nif match:\n    print('Match found')\nelse:\n    print('No match found')\n\n\n\nThis code snippet uses the re module in Python to match the regular expression",
            "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"
        ],
        [
            "13794532-6",
            ":\n\n\n\nfor div in soup.find_all('div'):\n    if div.get('class",
            "soup.find_all('div', class_=re.compile('comment-'))"
        ],
        [
            "741877-37",
            ":\n\nimport matplotlib.pyplot as plt\nplt.cla()",
            "plt.cla()"
        ],
        [
            "13156395-50",
            ":\nwith open('sample.json', 'r', encoding='utf-8-sig') as f:\n    data = json.load(f)\n    print(data)\n\nOutput:",
            "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"
        ],
        [
            "13156395-75",
            "The json_data variable is assigned the loaded JSON data",
            "json.loads(open('sample.json').read().decode('utf-8-sig'))"
        ],
        [
            "13022385-76",
            ":\n\nimport sys\ndef quit_program():\n    sys.exit()\nquit_program()",
            "sys.exit(0)"
        ],
        [
            "8751653-82",
            "This ensures that the result is a floating point number",
            "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"
        ],
        [
            "8751653-25",
            ": 0.01111111111\n\n#!/usr/bin/python\n# convert a binary '-0b1110' to a float number\nbinary = '-0b1110'\nfloat_num = float(binary)\nprint(float_num)\n\nOutput: 0.01111111111",
            "float(int('-0b1110', 0))"
        ],
        [
            "8751653-54",
            "Then, the integer is converted to a float using the float() function",
            "struct.unpack('d', b8)[0]"
        ],
        [
            "4789021-9",
            "Otherwise, the code prints \"User is not in group \" followed by the group name",
            "return user.groups.filter(name='Member').exists()"
        ],
        [
            "4789021-88",
            ": if user in ['group1', 'group2']: print(\"User is in group1 or group2\") else: print(\"User is not in group1 or group2\")",
            "return user.groups.filter(name__in=['group1', 'group2']).exists()"
        ],
        [
            "25823608-56",
            ":\n\nfor i in range(len(vals)):\n    if vals[i][0] == 0 and vals[i][1] == 1:\n        print(i)",
            "np.where((vals == (0, 1)).all(axis=1))"
        ],
        [
            "509742-28",
            "We can then use this path as the argument to os.chdir() to change the current working directory to the directory of the Python script",
            "os.chdir(os.path.dirname(__file__))"
        ],
        [
            "31385363-83",
            ":\n\ndf.write.format('csv').save('mycsv.csv')",
            "df.toPandas().to_csv('mycsv.csv')"
        ],
        [
            "31385363-50",
            "df.to_csv('mycsv.csv')",
            "df.write.csv('mycsv.csv')"
        ],
        [
            "8092877-26",
            ":",
            "zip(*[(1, 4), (2, 5), (3, 6)])"
        ],
        [
            "8092877-98",
            "The resulting list is then printed to the console",
            "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"
        ],
        [
            "23748995-25",
            "Therefore, we use the tolist() method on the column object df['a']",
            "df['a'].values.tolist()"
        ],
        [
            "23748995-42",
            ":\n\ndf['a'].unique()",
            "df['a'].tolist()"
        ],
        [
            "20205455-79",
            "The response is first retrieved using the requests library, and then passed to the BeautifulSoup constructor along with the 'utf-8' encoding parameter to create a BeautifulSoup object",
            "soup = BeautifulSoup(response.read().decode('utf-8'))"
        ],
        [
            "7429118-70",
            ": a[a!='3']",
            "a[np.arange(len(a)) != 3]"
        ],
        [
            "8217613-41",
            ": \n\necho \"foo\"",
            "subprocess.check_output('echo \"foo\"', shell=True)"
        ],
        [
            "14673394-12",
            ":\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf = df.drop_duplicates(subset=['Date'])\ndf['Date'] = df['Date'].dt.date\ndf = df.dropna(subset=['Date'])\ndf['Date'] = df['Date'].dt.normalize()\ndf = df.drop_duplicates(subset=['Date'])\ndf['Date'] = df['Date'].dt.date",
            "df['Date'].map(lambda t: t.date()).unique()"
        ],
        [
            "3328012-17",
            "If it does exist in the list, it prints \"File is descendant of directory.\" Otherwise, it prints \"File is not descendant of directory.\"",
            "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"
        ],
        [
            "3457673-86",
            "If it is not, it creates a new key-value pair in the dictionary with the first element of the tuple as the key and the second element of the tuple as the value",
            "dict(x[1:] for x in reversed(myListOfTuples))"
        ],
        [
            "652291-62",
            "The reverse argument is set to True to sort the list in reverse order",
            "list.sort(key=lambda item: item['date'], reverse=True)"
        ],
        [
            "11041411-88",
            ":\n\ndf.to_csv('mydf.tsv', index=True)",
            "df.to_csv('mydf.tsv', sep='\\t')"
        ],
        [
            "33435418-32",
            "The output is [2, 3], which is the difference between the two input lists",
            "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"
        ],
        [
            "977491-44",
            "It then prints out any lines that are different between the two files",
            "difflib.SequenceMatcher(None, file1.read(), file2.read())"
        ],
        [
            "15148684-45",
            "The result is a float value that represents the minimum value in the list of tuples",
            "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"
        ],
        [
            "16127862-90",
            ":\n[('1.23456789', '1.23456789'), ('3.456', '3.456'), ('0.123456789', '0.123456789')]",
            "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"
        ],
        [
            "16127862-87",
            "The output is also correct",
            "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"
        ],
        [
            "2111163-71",
            "A[0][1]",
            "A[[0, 1], [0, 1]]"
        ],
        [
            "2111163-33",
            "a[0, 0] + a[0, 1] + a[1, 0] + a[1, 1]\n\nExplanation: This code snippet returns the sum of the values in the first row, first column and the second row, second column of the numpy array a",
            "a[np.arange(3), (0, 1, 0)]"
        ],
        [
            "24748445-94",
            "It then prints the href attribute of the a tags and the class attribute of the div tags.",
            "soup.find_all(['a', 'div'])"
        ],
        [
            "931092-70",
            ": \n\ndef reverse_string(s):\n    return s[::-1]\nprint(reverse_string('hello world'))\n\n\n\nOutput",
            "'hello world'[::(-1)]"
        ],
        [
            "931092-64",
            "def reverse_list(s):\n    return s[::-1]",
            "s[::(-1)]"
        ],
        [
            "931092-5",
            ": \n\ndef reverse_string(s):\n    return s[::-1]\nprint(reverse_string('foo'))",
            "''.join(reversed('foo'))"
        ],
        [
            "931092-74",
            "def reverse_string(string): return string[::-1]",
            "''.join(reversed(string))"
        ],
        [
            "931092-65",
            ":\n\ndef reverse_string(s):\n    return s[::-1]\nprint(\"foo\".reverse())",
            "'foo'[::(-1)]"
        ],
        [
            "931092-99",
            "a_string = input(\"Enter a string: \")\na_string = a_string[::-1]\nprint(\"The reversed string is:\", a_string)\n\n\nOutput:\n\nEnter a string: Hello World\nThe reversed string is:!dlroW olleH",
            "a_string[::(-1)]"
        ],
        [
            "931092-20",
            "a_string = input(\"Enter a string: \")\na_string = a_string[::-1]\nprint(\"The reversed string is:\", a_string)\n\n\nOutput: \n\nEnter a string: Hello World\nThe reversed string is:!dlroW olleH",
            "def reversed_string(a_string):\n    return a_string[::(-1)]"
        ],
        [
            "931092-77",
            ":\n\ns = input(\"Enter a string: \")\ns = s[::-1]\nprint(\"The reversed string is:\", s)",
            "''.join(reversed(s))"
        ],
        [
            "163542-7",
            "The subprocess.check_call() function runs the command and captures its output",
            "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"
        ],
        [
            "163542-94",
            "Python, Java, etc.).",
            "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"
        ],
        [
            "18594469-11",
            "This will return a new dataframe with all unique rows based on the specified column",
            "df.div(df.sum(axis=1), axis=0)"
        ],
        [
            "961632-89",
            "str(i)",
            "str(i)"
        ],
        [
            "961632-44",
            ":\n\na = \"hello\"\nprint(a)",
            "a.__str__()"
        ],
        [
            "961632-33",
            ":\n\na = \"hello\"\nprint(a)",
            "str(a)"
        ],
        [
            "27318022-32",
            "The $(...) syntax is used to execute the command and assign the output to the variable result",
            "result = sys.stdin.read()"
        ],
        [
            "40055835-26",
            "If the element is present in B, it is removed from the array",
            "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"
        ],
        [
            "41513324-64",
            "The inplace=True parameter specifies that the changes should be made directly to the dataframe object",
            "df.query('index < @start_remove or index > @end_remove')"
        ],
        [
            "41513324-67",
            "The inplace=True argument modifies the original dataframe instead of returning a new one",
            "df.loc[(df.index < start_remove) | (df.index > end_remove)]"
        ],
        [
            "8218032-86",
            "It returns a list of all the indexes in the numpy array where the boolean value of the mask is True",
            "numpy.where(mask)"
        ],
        [
            "32533944-71",
            "The sep parameter specifies the delimiter used in the CSV file, which in this case is a space",
            "df.to_csv('Result.csv', index=False, sep=' ')"
        ],
        [
            "20638006-85",
            ":\n\nimport pandas as pd\ndf = pd.DataFrame(d)",
            "pd.DataFrame(d)"
        ],
        [
            "1883604-86",
            "This code should work for any gzip-compressed file encoded as utf-8",
            "gzip.open('file.gz', 'rt', encoding='utf-8')"
        ],
        [
            "29983106-25",
            "The webdriver.Firefox() constructor is used to create a new Firefox browser instance, and the driver.get() method is used to navigate to the specified URL",
            "driver.get('http://www.google.com.br')"
        ],
        [
            "3437059-20",
            "if \"blah\" in somestring:\n    print(\"blah is in somestring\")\nelse:\n    print(\"blah is not in somestring\")",
            "if ('blah' not in somestring):\n    pass"
        ],
        [
            "3437059-17",
            "if substring in string:\n    print(\"substring is in string\")\nelse:\n    print(\"substring is not in string\")",
            "string.find('substring')"
        ],
        [
            "3437059-83",
            ":\nif s.find(\"is\")!= -1:\n    print(\"True\")\nelse:\n    print(\"False\")",
            "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"
        ],
        [
            "3061-93",
            "myfunction()",
            "globals()['myfunction']()"
        ],
        [
            "3061761-63",
            ":\n\na.shape",
            "a.shape"
        ],
        [
            "3061761-55",
            ":\n\na.shape",
            "N.shape(a)"
        ],
        [
            "3061761-89",
            "a.dimensions()",
            "N.shape(a)"
        ],
        [
            "3061761-31",
            "a.shape",
            "a.shape"
        ],
        [
            "13291539-54",
            ": float(0.00582811585976)",
            "struct.unpack('f', struct.pack('f', 0.00582811585976))"
        ],
        [
            "6280978-9",
            "It uses the built-in set and list data types to remove duplicates and convert the list to a unique list",
            "[dict(y) for y in set(tuple(x.items()) for x in d)]"
        ],
        [
            "7745260-45",
            "It then prints the list of words",
            "words = open('myfile').read().split()"
        ],
        [
            "7717380-65",
            "import numpy as np\na = np.array(array)",
            "a = np.array(a)"
        ],
        [
            "9304908-37",
            "The __in operator is used to specify that the id field should be equal to one of the values in the values list",
            "Blog.objects.filter(pk__in=[1, 4, 7])"
        ],
        [
            "319426-66",
            ":\n\nif string1.lower() == string2.lower():\n    print(\"The strings are equal.\")\nelse:\n    print(\"The strings are not equal.\")",
            "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"
        ],
        [
            "319426-3",
            ":\n\nif (string1.toLowerCase() == string2.toLowerCase()) {\n  // do something\n}",
            "if (string1.lower() == string2.lower()):\n    pass"
        ],
        [
            "319426-84",
            "if (string1.toLowerCase() == string2.toLowerCase()) {\n  // do something\n}",
            "(string1.lower() == string2.lower())"
        ],
        [
            "319426-70",
            ":\n\nif (first.toLowerCase() == second.toLowerCase()) {\n  // code to execute if the strings are equal\n} else {\n  // code to execute if the strings are not equal\n}",
            "(first.lower() == second.lower())"
        ],
        [
            "319426-18",
            ":\n\nif (first.toLowerCase() == second.toLowerCase()) {\n  // code to execute if the strings are equal\n} else {\n  // code to execute if the strings are not equal\n}",
            "(first.upper() == second.upper())"
        ],
        [
            "15455388-38",
            "The resulting dataframe df can then be manipulated using pandas functions",
            "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"
        ],
        [
            "17679089-100",
            ":\n\ndf.groupby(['col5', 'col2']).size().reset_index(name='count')",
            "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"
        ],
        [
            "9396706-78",
            "your_obj.x",
            "getattr(your_obj, x)"
        ],
        [
            "3743222-35",
            "This will return a datetime.date object that represents the date portion of the datetime object",
            "datetime.datetime.now().date()"
        ],
        [
            "3743222-73",
            ":\n\nfrom datetime import datetime\ndate_time = datetime.now()\ndate_time_str = date_time.str",
            "datetime.datetime.now().date()"
        ],
        [
            "12496531-86",
            "The sorted array is then printed to the console using the print() function",
            "A = np.array(sorted(A, key=tuple))"
        ],
        [
            "6797984-32",
            "s = s.lower()",
            "s.lower()"
        ],
        [
            "6797984-49",
            "s = s.lower()",
            "s.decode('utf-8').lower()"
        ],
        [
            "2631935-11",
            "Finally, the commit method is called to save the changes to the database",
            "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"
        ],
        [
            "13627865-82",
            ":\n\ndef define_global_variable(name, value):\n    global something\n    something = value\n    return name",
            "globals()['something'] = 'bob'"
        ],
        [
            "14766194-35",
            "If it is, it prints \"The array contains the row.\" Otherwise, it prints \"The array does not contain the row.\"",
            "any(np.equal(a, [1, 2]).all(1))"
        ],
        [
            "18200052-13",
            ":\n\nimport numpy as np\narr = np.ndarray(shape=(3,3))\nprint(arr.tolist())\n\nThis code snippet converts the given numpy array to a list, which can then be printed",
            "np.zeros((3, 3)).ravel()"
        ],
        [
            "15579649-73",
            "The resulting array can then be used in further operations as needed",
            "numpy.array([(key, val) for key, val in result.items()], dtype)"
        ],
        [
            "2823472-99",
            ":\n\nprint(\"Goodbye!\")",
            "sys.exit(0)"
        ],
        [
            "36139-44",
            ":\n\nmylist.sort()",
            "mylist.sort(key=lambda x: x.lower())"
        ],
        [
            "36139-62",
            ":\n\nmylist.sort()",
            "mylist.sort(key=str.lower)"
        ],
        [
            "36139-23",
            ":\n\nmylist.sort()",
            "mylist.sort()"
        ],
        [
            "36139-32",
            ":\n\nlist.sort()",
            "list.sort()"
        ],
        [
            "5280178-72",
            ":\n\nimport file",
            "exec(compile(open('file.py').read(), 'file.py', 'exec'))"
        ],
        [
            "18351951-41",
            ":\n\nif test.endswith(('.mp3', '.avi')):\n    print(\"The file is a valid format.\")\nelse:\n    print(\"The file is not a valid format.\")",
            "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"
        ],
        [
            "826284-77",
            "Since we want to shift the least significant byte to the right, we use the left shift operator",
            "struct.unpack('h', pS[0:2])"
        ],
        [
            "3668964-35",
            "if all(word.isupper() for word in words):\n    print(\"All words are uppercase.\")\nelse:\n    print(\"Not all words are uppercase.\")",
            "print(all(word[0].isupper() for word in words))"
        ],
        [
            "41154648-81",
            "import pandas as pd\nfrom scipy.sparse import IntTensor\n# create a dictionary of integer values\nd = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\n# create a dictionary of boolean values\nbool_d = {'A': [True, False, True], 'B': [False, True, False], 'C': [True, False, True]}\n# create a dictionary of integer indices\nidx_d = {'A': [0, 1, 2], 'B': [0, 1, 2], 'C': [0, 1, 2]}\n# create a dictionary of integer values\nval_d = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\n# create a dictionary of integer values\nmask_d = {'A': [True, False, True], 'B': [False, True, False], 'C': [True, False, True]}\n# create a dictionary of integer values\ndata = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]}\n# create a dictionary of integer values\nindices = {'A': [0, 1, 2], 'B': [0, 1, 2], 'C': [0, 1, 2]}\n# create a dictionary of integer values\nshape = {'A': [3, 1], 'B': [3, 1], 'C': [3, 1]}\n# create a dictionary of integer values\ndtype = {'A': np.int32, 'B': np.int32, 'C': np.int32}\n# create a dictionary of integer values\nshape_d = {'A': [3, 1], 'B': [3, 1], 'C': [3, 1]}\n# create a dictionary of integer values\nmask_d = {'A': [True, False, True], 'B': [False, True, False], 'C': [True, False, True]}\n# create a dictionary of integer values\ndata = {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7",
            "df.to_sparse(0)"
        ],
        [
            "1514553-90",
            ":\n\nlet variable = [];",
            "variable = []"
        ],
        [
            "1514553-71",
            ":\n\nlet arr = [];\narr.push(\"i\");",
            "intarray = array('i')"
        ],
        [
            "610883-92",
            "if (a.hasOwnProperty('property')) {\n  // do something\n}",
            "if hasattr(a, 'property'):\n    pass"
        ],
        [
            "610883-9",
            "if (a.hasOwnProperty('property')) {\n  // do something\n}",
            "if hasattr(a, 'property'):\n    pass"
        ],
        [
            "610883-68",
            "a = {'property': 'default value'}\nvalue = a['property']\nprint(value)",
            "getattr(a, 'property', 'default value')"
        ],
        [
            "13902805-83",
            "The resulting set contains all the unique characters in the string",
            "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"
        ],
        [
            "13902805-92",
            ":\ndef get_unique_chars(s):\n    chars = set(s)\n    return list(chars)\n\nOutput:\nget list of all unique characters in a string 'aaabcabccd'\n\nNote: The code snippet above is just an example and may not be the correct solution for the given problem",
            "list(set('aaabcabccd'))"
        ],
        [
            "13902805-87",
            ":\n\ndef unique_chars(s):\n    return set(s)\ndef main():\n    s = \"hello\"\n    print(unique_chars(s))\nmain()",
            "\"\"\"\"\"\".join(set('aaabcabccd'))"
        ],
        [
            "674764-8",
            ": 17",
            "str.find('s', 16)"
        ],
        [
            "674764-33",
            "if (x.indexOf('Aloha')!= -1) {\n  console.log(x.indexOf('Aloha'));\n} else {\n  console.log(\"The sub string 'Aloha' was not found in the string.\");\n}",
            "x.find('Aloha')"
        ],
        [
            "674764-19",
            ":\n\ndef find_index(s, sub):\n    return s.index(sub)\nsdfasdf ='sdfasdf'\nindex = find_index(sdfasdf, 'cc')\nprint(index)",
            "'sdfasdf'.index('cc')"
        ],
        [
            "674764-45",
            ": \n\ns ='sdfasdf'\ni = 0\nwhile i < len(s):\n    if s[i] == 'd' and s[i+1] == 'f':\n        return i\n    i += 1",
            "'sdfasdf'.index('df')"
        ],
        [
            "674764-64",
            "str.index('a')",
            "str.find('a')"
        ],
        [
            "674764-91",
            ":\n\nstr.index('g')",
            "str.find('g')"
        ],
        [
            "674764-3",
            ": 12",
            "str.find('s', 11)"
        ],
        [
            "674764-47",
            ": 16",
            "str.find('s', 15)"
        ],
        [
            "674764-5",
            "In this case, the index is 4, so the output is 4",
            "str.find('s', 11, 14)"
        ],
        [
            "10194713-64",
            "It will then update the dictionary with the sorted values",
            "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"
        ],
        [
            "10194713-38",
            ":\n\nu = {'a': 2, 'b': 3, 'c': 1}\nsorted_u = sorted(u.items(), key=lambda x: x[1])\nprint(sorted_u)",
            "sorted(list(u.items()), key=lambda v: v[1])"
        ],
        [
            "10194713-1",
            "The sorted dictionary is then printed to the console",
            "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"
        ],
        [
            "10194713-5",
            ":\n\nsorted(d.items(), key=lambda x: x[1])\n\nThis code snippet will sort the defaultdict d by value in ascending order",
            "sorted(list(d.items()), key=lambda k_v: k_v[1])"
        ],
        [
            "179369-97",
            ":\n\nos.exit(0)",
            "sys.exit(0)"
        ],
        [
            "179369-62",
            ": \n\ntry:\n    # code to execute\nexcept Exception as e:\n    print(\"aa! errors!\")",
            "sys.exit('aa! errors!')"
        ],
        [
            "179369-47",
            "The try-except block is used to handle this exception and gracefully terminate the execution of the script",
            "sys.exit()"
        ],
        [
            "19779790-35",
            ":\n\nimport datetime\nyesterday = datetime.date.today() - datetime.timedelta(days=1)\nprint(yesterday)",
            "datetime.datetime.now() - datetime.timedelta(days=1)"
        ],
        [
            "37934969-37",
            "The resulting dataframe is stored in the variable df",
            "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"
        ],
        [
            "11066874-58",
            ": \n\nimport re\nhrefs = ['https://www.example.com/page1', 'https://www.example.com/page2', 'https://www.example.com/page3']\nfor href in hrefs:\n    if 'follow?page' in href:\n        print(href)",
            "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"
        ],
        [
            "18461623-27",
            ":\n\nThe average values are: 0.5 0.5",
            "np.mean(np.array([old_set, new_set]), axis=0)"
        ],
        [
            "4523551-62",
            "\"01011\"",
            "bin(ord('P'))"
        ],
        [
            "11399384-83",
            ": set(LoD.keys())",
            "{k for d in LoD for k in list(d.keys())}"
        ],
        [
            "11399384-59",
            "Finally, we use the set() function to convert the list of keys into a set containing all unique keys",
            "set([i for s in [list(d.keys()) for d in LoD] for i in s])"
        ],
        [
            "11399384-52",
            ":\nfor key in LoD:\n    print(key)",
            "[i for s in [list(d.keys()) for d in LoD] for i in s]"
        ],
        [
            "13081090-42",
            "The code snippet then calls the binary_to_list function with the binary string '10101' and prints the resulting list.\n\n\nThe output of the code snippet above is [1, 2, 4, 8, 16, 32, 64, 128], which is the expected output for the given binary string",
            "[int(d) for d in str(bin(x))[2:]]"
        ],
        [
            "42012589-82",
            "The resulting dataframe contains the grouped data with the 'Month' and 'Fruit' columns as the index",
            "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"
        ],
        [
            "3355822-45",
            ":\n\nimport requests\nurl = 'https://www.mysite.com/'\nusername = 'username'\npassword = 'pwd'\nresponse = requests.post(url, auth=(username, password))\nprint(response.text)",
            "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"
        ],
        [
            "6510477-50",
            ":\n\nimport os\nimport zipfile\nfor folder in os.listdir('file'):\n    if folder.endswith('/'):\n        for file in zipfile.ZipFile('file', 'r').namelist():\n            if file.endswith('/'):\n                print(file)",
            "[x for x in file.namelist() if x.endswith('/')]"
        ],
        [
            "39268928-38",
            ":\n\nmy_string = 'a b as df'\nmy_string = my_string.replace(' ', '')\nprint(my_string)",
            "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"
        ],
        [
            "39268928-72",
            ":\n\nmy_string = \"key1: value1\\nkey2: value2\\nkey3: value3\"",
            "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"
        ],
        [
            "23970693-72",
            ":\n\nimport json\njson_data = json.loads(json_string)",
            "json_data = json.loads(json_string)"
        ],
        [
            "2759067-52",
            "os.rename(src, dst)",
            "os.rename(src, dst)"
        ],
        [
            "16389188-53",
            "The set_position method is then called on the window object, passing in the constant gtk.WIN_POS_CENTER to center the window",
            "window.set_position(Gtk.WindowPosition.CENTER)"
        ],
        [
            "1391026-74",
            "If it doesn't exist, it assigns the value of 'default_value' to the variable 'var_name'",
            "self.request.get('var_name')"
        ],
        [
            "3296499-25",
            ": \n\n\n\n{'apple':'red', 'banana': 'yellow', 'orange': '",
            "theset = set(k.lower() for k in thedict)"
        ],
        [
            "41463763-99",
            "It will also drop any rows that have missing values in either dataframe",
            "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"
        ],
        [
            "30405804-73",
            "You can replace /path/to/your/project with the actual path to your project's directory",
            "os.chdir('C:/Users/Name/Desktop')"
        ],
        [
            "9647586-2",
            "a = request.get('a')\nif a:\n    return a\nelse:\n    return \"No request parameter found for a\"",
            "{{request.args.get('a')}}"
        ],
        [
            "6591931-80",
            ":\n\nimport os\nprint(os.path.getsize('C:\\\\Python27\\\\Lib\\\\genericpath.py'))",
            "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"
        ],
        [
            "5607551-13",
            ":\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib\nimport re\nquerystring ='string_of_characters_like_these:$#@=?%^Q^$'\nencoded_querystring = urllib.quote(querystring)\nprint(encoded_querystring)\n\n\nimport urllib",
            "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"
        ],
        [
            "439115-86",
            ":\n\nimport random\nimport decimal\nrandom_decimal = decimal.Decimal(str(random.randint(-100, 100)))",
            "decimal.Decimal(random.randrange(10000)) / 100"
        ],
        [
            "3925096-46",
            ":\n\n/project",
            "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"
        ],
        [
            "14538885-47",
            ":\n\nif 'c' in x:\n    return x['c']\nelse:\n    return -1",
            "list(x.keys()).index('c')"
        ],
        [
            "10484261-51",
            ":\n\nfor program in programs:\n    if program['city'] == 'new york':\n        print(program['value'])",
            "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"
        ],
        [
            "8905864-66",
            "The re.sub function is used to replace these characters with the %xx escape",
            "urllib.parse.quote(s.encode('utf-8'))"
        ],
        [
            "8905864-78",
            "The encoded query will be added to the end of the original URL",
            "urllib.parse.quote_plus('a b')"
        ],
        [
            "32751229-20",
            "The resulting dataframe is then printed to the console",
            "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"
        ],
        [
            "10543303-64",
            ":\n\n\n\nn = len(j)\ncount = 0\nfor i in range(n):\n    if j[i] > 5:\n        count += 1\nprint(count)\n\nThis code snippet will output the number of values in list j that is greater than 5",
            "sum(((i > 5) for i in j))"
        ],
        [
            "10543303-81",
            ":\n\n\n\nn = len(j)\ncount = 0\nfor i in range(n):\n    if j[i] > 5:\n        count += 1\nprint(count)\n\nThis code snippet will print the number of values in list j that is greater than 5",
            "len([1 for i in j if (i > 5)])"
        ],
        [
            "10543303-37",
            ":",
            "j = np.array(j)\nsum((j > i))"
        ],
        [
            "36190533-1",
            "Otherwise, the code prints \"a1 does not contain elements of a2\"",
            "np.any(np.in1d(a1, a2))"
        ],
        [
            "9775731-24",
            "If my_value is greater than max_value, it will be set to max_value",
            "max(min(my_value, max_value), min_value)"
        ],
        [
            "14931769-56",
            "If the sum is equal to n, the code prints the combination of values",
            "lst = list(itertools.product([0, 1], repeat=n))"
        ],
        [
            "14931769-64",
            "If the sum is equal to n, the code prints the combination of values",
            "lst = map(list, itertools.product([0, 1], repeat=n))"
        ],
        [
            "14931769-0",
            "Finally, the list of combinations is printed to the console.",
            "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"
        ],
        [
            "14931769-1",
            ":\nfor i in range(2**3):\n    for j in range(2**3):\n        for k in range(2**3):\n            if (i & j & k) == 0:\n                print(i, j, k)\n\nThe code snippet above will print all possible combinations of 3 binary values from 0 to 7",
            "lst = list(itertools.product([0, 1], repeat=3))"
        ],
        [
            "6310475-49",
            ":\n\n\n\nnow =",
            "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
        ],
        [
            "38831808-53",
            ":\n\n0.4081637e+07",
            "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"
        ],
        [
            "42387471-14",
            ":\n\nplt.colorbar(im)",
            "plt.colorbar(im, ax=ax)"
        ],
        [
            "28134319-7",
            ":\n\ns = \"hello world\"\ns = s[1:-1]",
            "s[s.find('\\n') + 1:s.rfind('\\n')]"
        ],
        [
            "18470323-13",
            ":\n\nimport pandas as pd\ndata = pd.DataFrame({'one': [1, 2, 3, 4], 'two': [5, 6, 7, 8], 'a': [10, 20, 30, 40], 'c': [50, 60, 70, 80]})\nresult = data.loc[data['one'].isin([1, 2]), ['a', 'c']]\nprint(result)",
            "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"
        ],
        [
            "18470323-91",
            "The :, ['a', 'c'] syntax selects only the columns 'a' and 'c'",
            "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"
        ],
        [
            "10040143-71",
            "users = Users.filter(userprofile__level >= 0)",
            "User.objects.filter(userprofile__level__gte=0)"
        ],
        [
            "27659153-69",
            "The output will be a list of lists where each sublist is a list of elements from the original list test that have the same characters up to the first _ character",
            "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"
        ],
        [
            "27659153-76",
            "The output will be a list of lists, where each sublist contains the items that are equal to each other",
            "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"
        ],
        [
            "11336548-53",
            "If it doesn't exist, it returns an empty string",
            "request.POST.get('title', '')"
        ],
        [
            "20222485-17",
            "The final value of the running total is returned",
            "list(accumulate(list(range(10))))"
        ],
        [
            "16436133-47",
            "If it doesn't, it sets the value of mydata.json to an empty object",
            "json.loads(request.POST.get('mydata', '{}'))"
        ],
        [
            "31950612-15",
            "If no match is found, the code prints \"No match found.\" Otherwise, the code prints the largest index of the last occurrence of characters '({' in the string",
            "max(test_string.rfind(i) for i in '([{')"
        ],
        [
            "8247792-19",
            "The print statement then outputs the slice as a string",
            "\"\"\"foobar\"\"\"[:4]"
        ],
        [
            "8247792-29",
            "The split() method is used to split the input string into a list of substrings based on the delimiter",
            "s.rfind('&')"
        ],
        [
            "8247792-90",
            "The delimiter is specified as '&' in this example",
            "s[:s.rfind('&')]"
        ],
        [
            "35178812-30",
            "Finally, the index column is printed to the console",
            "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"
        ],
        [
            "10346336-28",
            "The resulting array is assigned to the variable my_array.",
            "numpy.array([[1, 2], [3, 4]])"
        ],
        [
            "2054416-71",
            "t = s[0]",
            "t = tuple(x[0] for x in s)"
        ],
        [
            "11205386-94",
            "soup.find('meta', {'name': 'City'}).get('content')\n\nExplanation: The code snippet uses the BeautifulSoup library to find the meta tag with the name attribute equal to 'City' and then retrieves the content associated with that tag",
            "soup.find('meta', {'name': 'City'})['content']"
        ],
        [
            "39353758-58",
            ":\n\ndf.pivot_table(index=['saleid'], columns=['upc'], values='value')\n\nThis code snippet will create a pivot table from the given dataframe df where the index column is based on the saleid column, the columns are based on the upc column, and the values are based on the value column",
            "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"
        ],
        [
            "16249440-75",
            "Finally, we can pass this bitmask as the second argument to os.chmod()",
            "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"
        ],
        [
            "13999850-72",
            ":\n\ndf.to_csv(filename, date_format='%Y%m%d')",
            "df.to_csv(filename, date_format='%Y%m%d')"
        ],
        [
            "1800187-72",
            "We can use this to replace the NaN values in a with zeros",
            "b = np.where(np.isnan(a), 0, a)"
        ],
        [
            "39277638-98",
            "The result is stored in the variable min_val.",
            "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"
        ],
        [
            "15509617-37",
            "The now() method is used to obtain the current date and time object",
            "datetime.datetime.now().strftime('%a')"
        ],
        [
            "8519599-86",
            ":\n\nname: John Doe, age: 30, city: New York",
            "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"
        ],
        [
            "17071871-46",
            "df[df['A'] == 'foo']",
            "print(df.loc[df['A'] == 'foo'])"
        ],
        [
            "17071871-76",
            "df[df['column_name']!= some_value]",
            "df.loc[df['column_name'] != some_value]"
        ],
        [
            "17071871-51",
            "df[~df['column_name'].isin(some_values)]",
            "df.loc[~df['column_name'].isin(some_values)]"
        ],
        [
            "17071871-83",
            "The df[df['column_name'] == some_value] syntax is used to achieve this",
            "df.loc[df['column_name'] == some_value]"
        ],
        [
            "17071871-79",
            "The result variable is then printed to the console",
            "print(df.loc[df['B'].isin(['one', 'three'])])"
        ],
        [
            "739993-25",
            ":\n\nimport sys\nimport os\nmodules = []\nfor item in os.listdir('site-packages'):\n    if os.path.isfile(os.path.join('site-packages', item)):\n        modules.append(item)\nprint(modules)",
            "help('modules')"
        ],
        [
            "12362542-44",
            "This allows multiple sockets to bind to the same address and port, which is necessary to fix the error \"only one usage of each socket address is normally permitted\"",
            "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"
        ],
        [
            "4116061-59",
            ":\n\nimport some.package",
            "globals().update(importlib.import_module('some.package').__dict__)"
        ],
        [
            "4588628-92",
            "In this case, there is only one such element, so the output is [array([0], dtype=int64)]",
            "numpy.where((x == 0))[0]"
        ],
        [
            "2428092-52",
            ":\n\n{\n  \"status\": \"success\",\n  \"message\": \"Data successfully created\",\n  \"data\": {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"email\": \"johndoe@example.com\"\n  }\n}",
            "return HttpResponse(json.dumps(response_data), content_type='application/json')"
        ],
        [
            "10824319-17",
            "Finally, it prints the hex_string.\n\nThe output of",
            "s.decode('hex')"
        ],
        [
            "10824319-49",
            "s
            "binascii.a2b_hex(s)"
        ],
        [
            "12655007-87",
            "list_of_tuples = zip(a, b, c)",
            "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"
        ],
        [
            "10472907-88",
            "If the dictionary contains non-string keys, the code snippet will need to be modified accordingly",
            "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"
        ],
        [
            "10472907-5",
            ":\n\n\n\nimport json\nimport base64\nimport hashlib\nimport hmac\nimport binascii\nimport zlib\nimport socket\nimport threading\nimport time\nimport traceback\nimport datetime\nimport logging\nimport re\nimport base64\nimport hashlib\nimport hmac\nimport binascii\nimport zlib\nimport socket\nimport threading\nimport time\nimport traceback\nimport datetime\nimport logging\nimport re",
            "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"
        ],
        [
            "34155829-56",
            "The resulting array is stored in variable y",
            "np.array(x._data).reshape(x.size[::-1]).T"
        ],
        [
            "17731822-88",
            ":\n\nwalls = [True, False, True, False]\nhex_string = hex(walls)\nprint(hex_string)",
            "hex(int(''.join([str(int(b)) for b in walls]), 2))"
        ],
        [
            "17731822-21",
            "The print() function is used to output the hexadecimal value",
            "hex(sum(b << i for i, b in enumerate(reversed(walls))))"
        ],
        [
            "1810743-81",
            ":\n\nos.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')",
            "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"
        ],
        [
            "1810743-84",
            ":\n\nos.chdir(path)",
            "os.chdir(path)"
        ],
        [
            "1949318-13",
            ":\n\nimport requests\nresponse = requests.get(\"http://www.stackoverflow.com\")\nif response.status_code == 200:\n    print(\"The website is up and running.\")\nelse:\n    print(\"The website is down or not responding.\")",
            "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"
        ],
        [
            "1949318-62",
            ":\n\nimport requests\nresponse = requests.get('https://www",
            "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"
        ],
        [
            "1949318-89",
            "not OK\")",
            "r = requests.head(url)\nreturn (r.status_code == 200)"
        ],
        [
            "1949318-26",
            "If the response status code is 200, which indicates a successful request, the code prints \"The website is up.\" Otherwise, it prints \"The website is down.\"",
            "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"
        ],
        [
            "19758364-39",
            ":\n\nimport pandas as pd\ndata['log(gdp)'] = data['gdp']\n\nThis code snippet renames the column 'gdp' in the dataframe data to 'log(gdp)'",
            "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"
        ],
        [
            "15271907-69",
            ":\n\ngit commit --amend --no-edit\n\nThis command will commit all the changes after executing a query in the terminal",
            "dbb.commit()"
        ],
        [
            "5352546-44",
            "If the name of the dictionary object is different, the code snippet should be modified accordingly",
            "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"
        ],
        [
            "5352546-80",
            ": [('l', 'value1'), ('m', 'value2'), ('n', 'value3')]",
            "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"
        ],
        [
            "5352546-22",
            "In this case, the output is {'l': 'hello','m': 'world', 'n': '123'}",
            "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"
        ],
        [
            "5352546-75",
            ":\n\nsubset = bigdict.viewkeys()['l','m', 'n']\n\nThis code snippet will extract the key value pairs for the keys 'l','m', and 'n' from the bigdict dictionary in python 3",
            "{k: bigdict[k] for k in ('l', 'm', 'n')}"
        ],
        [
            "2331943-5",
            ":\n\nimport json\nd = json.loads(u)\n\nThis code snippet will decode the JSON string u into a dictionary using the json.loads() method",
            "json.load(u)"
        ],
        [
            "4940032-13",
            "If the string is found, the code prints 'Found it!' and breaks out of the loop using the break statement",
            "if ('blabla' in open('example.txt').read()):\n    pass"
        ],
        [
            "4940032-15",
            ":\n\nwith open('example.txt', 'r') as file:\n    for line in file:\n        if 'blabla' in line:\n            print('Found it!')\n            break\n\n\nOutput:",
            "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"
        ],
        [
            "4940032-22",
            "If the string is found, the code will break out of the loop and print 'The string was found!' otherwise it will print 'The string was not found.'",
            "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"
        ],
        [
            "4476373-46",
            "If the response is not valid, the code may raise an exception",
            "r = requests.get(url)"
        ],
        [
            "4476373-22",
            "{\"message\":\"success\",\"data\":[]}",
            "r = requests.get(url, params=payload)"
        ],
        [
            "4476373-71",
            "If the API endpoint returns XML or other data format, the code snippet needs to be modified accordingly.",
            "r = requests.post(url, data=payload)"
        ],
        [
            "4476373-99",
            ":\n\nimport requests\nurl = \"https://api.example.com/post\"\ndata = {\"key1\": \"value1\", \"key2\": \"value2\"}\nresponse = requests.post(url, json=data)\nprint(response.status_code)\nprint(response.json())",
            "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"
        ],
        [
            "1476-16",
            "\"10101\"",
            "bin(173)"
        ],
        [
            "1476-88",

            "int('01010101111', 2)"
        ],
        [
            "1476-71",
            "The binary string '010101' is converted to the decimal integer 101 using this function.",
            "int('010101', 2)"
        ],
        [
            "1476-39",
            ": \nint binary_number = 0b0010101010;",
            "int('0b0010101010', 2)"
        ],
        [
            "1476-6",
            "\"0111\"",
            "bin(21)"
        ],
        [
            "1476-59",
            "The resulting integer value is then printed to the console",
            "int('11111111', 2)"
        ],
        [
            "41178532-76",
            "Finally, it divides the sum by the total number of rows in the trace_df dataframe to get the proportion of rows where the ratio value is greater than 0.",
            "(trace_df['ratio'] > 0).mean()"
        ],
        [
            "8249836-41",
            "The print statement will output each item in the list",
            "list(itertools.product(*a))"
        ],
        [
            "364519-94",
            "for key in sorted(d.keys()):\n    print(key)",
            "it = iter(sorted(d.items()))"
        ],
        [
            "364519-100",
            "for key in sorted(d.keys()):\n    print(key)",
            "for (key, value) in sorted(d.items()):\n    pass"
        ],
        [
            "364519-2",
            "for key in sorted(dict.keys()):\n    print(key)",
            "return sorted(dict.items())"
        ],
        [
            "364519-33",
            "for key in sorted(dict.keys()):\n    print(key)",
            "return iter(sorted(dict.items()))"
        ],
        [
            "364519-52",
            "for key in sorted(foo.keys()):\n    print(key)",
            "for (k, v) in sorted(foo.items()):\n    pass"
        ],
        [
            "364519-98",
            "for key in sorted(foo.keys()):\n    print(key)",
            "for k in sorted(foo.keys()):\n    pass"
        ],
        [
            "39414085-16",
            "The lower() method is then called on the string to convert it to lowercase.",
            "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"
        ],
        [
            "34097281-53",
            ":\n\n\n\n\nimport tensorflow as tf\ntensor = tf.constant([1,",
            "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"
        ],
        [
            "39816795-71",
            "The ['A', 'B', 'A1R', 'B2', 'AABB4'] list is used as the values for the series, and the pd.Series() function is called with these arguments to create the series object",
            "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"
        ],
        [
            "638360-2",
            ":\n\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 4, 'c': 5, 'd': 6}\nintersection = set(d1).intersection(d2)\nprint(intersection)\n\nThis code snippet will print the set intersection between the two dictionaries d1 and d2",
            "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"
        ],
        [
            "19961490-16",
            "\"The code snippet is correct.",
            "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
        ],
        [
            "18837262-55",
            "The code then converts the keys 'key1' and 'key2' to datetime format using the to_datetime() method and assigns the resulting datetime values to columns 'Date' and 'DateValue' in the dataframe",
            "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"
        ],
        [
            "4265988-26",
            "The probabilities are then printed along with the random number",
            "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
        ],
        [
            "35414625-11",
            "The resulting pivot table will show the sales data for each combination of year, month, and item",
            "df.set_index(['year', 'month', 'item']).unstack(level=-1)"
        ],
        [
            "35414625-17",
            ": df.pivot_table(index=['year','month'], values='value', aggfunc=sum)",
            "df.pivot_table(values='value', index=['year', 'month'], columns='item')"
        ],
        [
            "748028-31",
            ":\n\noutput = process1()\nprint(output)",
            "p1.communicate()[0]"
        ],
        [
            "748028-100",
            ":\n\nimport subprocess\nresult = subprocess.run(['python','script.py', 'exe'], stdout=subprocess.PIPE)\nprint(result.stdout.decode())",
            "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"
        ],
        [
            "10408927-95",
            ":\n\n\nimport xml.etree.ElementTree as ET\nroot = ET.fromstring('<root><a><b/><c/><d/></a></root>')\nfor child in root.findall('a'):\n    for subchild in child.findall",
            "[elem.tag for elem in a.iter()]"
        ],
        [
            "10408927-56",
            "This code snippet correctly gets all sub-elements of a excluding the root element",
            "[elem.tag for elem in a.iter() if elem is not a]"
        ],
        [
            "29471884-33",
            ": next_value = max(num_list) + 1",
            "min([x for x in num_list if x > 2])"
        ],
        [
            "2793324-81",
            "a.remove(\"b\")",
            "a.remove('b')"
        ],
        [
            "2793324-12",
            "a.remove(c)",
            "a.remove(c)"
        ],
        [
            "2793324-93",
            "a.remove(6)",
            "a.remove(6)"
        ],
        [
            "2793324-3",
            "a.remove(6)",
            "a.remove(6)"
        ],
        [
            "2793324-97",
            "a.remove(c)",
            "if (c in a):\n    a.remove(c)"
        ],
        [
            "2793324-5",
            "a.remove(c)",
            "try:\n    a.remove(c)\nexcept ValueError:\n    pass"
        ],
        [
            "5826427-6",
            "The subprocess.call() function is used to execute the command bash test.sh otherfunc in the system shell, which runs the script and calls the specified function",
            "subprocess.call('test.sh otherfunc')"
        ],
        [
            "5826427-73",
            "This code can be included in a Bash script to execute a Python function within the Bash script",
            "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"
        ],
        [
            "30605909-89",
            ":\n\ndf.to_csv('c:\\\\data\\\\t.csv', index=False)",
            "df.to_csv('c:\\\\data\\\\t.csv', index=False)"
        ],
        [
            "9891814-38",
            ": \n\nimport re\nstring = '3434.35353'\nmatch = re.match(r'(\\\\d+(\\\\.\\\\d+)?)', string)\nif match:\n    print(match.group(0))\nelse:\n    print('No match found.')\n\nOutput: No match found.",
            "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"
        ],
        [
            "4668619-32",
            "from django.db.models import Sum\nfrom datetime import datetime\nfrom django.db.models import F\nfrom django.db.models import Q\nfrom django.db.models import Max\nfrom datetime import datetime\nfrom datetime import timedelta\nfrom django.db.models import Min\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom",
            "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"
        ],
        [
            "4668619-26",
            "from django.db.models import Sum\nfrom datetime import datetime\nfrom django.db.models import F\nfrom django.db.models import Q\nfrom django.db.models import Count\nfrom datetime import datetime\nfrom django.db.models import Max\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime import datetime\nfrom datetime",
            "Sample.objects.filter(date__year='2011', date__month='01')"
        ],
        [
            "16387069-81",
            ":\n\nopen('picture.jpg')",
            "img = Image.open('picture.jpg')\nimg.show()"
        ],
        [
            "16387069-86",
            ": \n\nopen image \"picture.jpg\"",
            "img = Image.open('picture.jpg')\nImg.show"
        ],
        [
            "12426043-1",
            ":\n\nwith open('xxx.mp4', 'rb') as f:\n    with open('f', 'wb') as g:\n        g.write(f.read())\n\nThis code snippet reads the contents of the xxx.mp4 file in binary mode, writes it to a new file f in binary mode, and closes both files",
            "f.write(open('xxx.mp4', 'rb').read())"
        ],
        [
            "41572822-28",
            "The resulting dataframe will be sorted in descending order by the index column",
            "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"
        ],
        [
            "21558999-5",
            "The size() method counts the number of rows in each group, and the reset_index() method renames the resulting columns to 'count'",
            "df1.groupby(['key', 'year']).size().reset_index()"
        ],
        [
            "40963347-42",
            ":\n\ndf['col1'] = df['col1'] + df['col2'] + df['col3']\ndf['avg'] = df['col1'].mean()",
            "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
        ],
        [
            "7284952-22",
            "from django.shortcuts import redirect\nreturn redirect('Home.views.index')",
            "redirect('Home.views.index')"
        ],
        [
            "42352887-25",
            "This ensures that the keys are sorted in ascending order based on the value of 'weight'",
            "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"
        ],
        [
            "247770-78",
            "import os\npath = os.path.abspath(os.path.join(os.path.dirname(__file__), 'a_module'))\nprint(path)",
            "print(a_module.__file__)"
        ],
        [
            "247770-2",
            ":\nimport os\nos.path.abspath(os.path.join(os.path.dirname(__file__), '..'))",
            "print(os.getcwd())"
        ],
        [
            "247770-13",
            "import os\npath = os.path.abspath(os.path.join(os.path.dirname(__file__), 'amodule'))\nprint(path)",
            "path = os.path.abspath(amodule.__file__)"
        ],
        [
            "40660956-52",
            ":\n\ndf.sum(axis=1)",
            "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"
        ],
        [
            "5110352-21",
            ":\n\nimport time\nnow = time.strftime(\"%H:%M:%S\")\nprint(now)",
            "now = datetime.datetime.now().strftime('%H:%M:%S')"
        ],
        [
            "3283984-56",
            ":\n\n\nimport base64\nimport socket\nimport struct\n# hex string\nhex_string = '4a4b4c'\n# decode hex string to bytes\nhex_bytes = bytes.fromhex(hex_string)\n# encode bytes to UTF-8\nutf_8_bytes = hex_bytes.decode('utf-8')\n# decode UTF-8 bytes to string\nutf_8_string = utf_8_bytes.encode('",
            "bytes.fromhex('4a4b4c').decode('utf-8')"
        ],
        [
            "14971373-85",
            "The echo command is used to print the final output to the console",
            "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"
        ],
        [
            "18079563-10",
            "The resulting dataframe contains the intersection data between the two series",
            "pd.Series(list(set(s1).intersection(set(s2))))"
        ],
        [
            "26153795-98",
            "This can be used to extract only the date portion of the datetime string",
            "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"
        ],
        [
            "5123839-3",
            ": entry = Entry.objects.first()",
            "Entry.objects.filter()[:1].get()"
        ],
        [
            "29784889-2",
            "The code block inside the with_warnings function will be executed with warnings enabled",
            "warnings.simplefilter('always')"
        ],
        [
            "22676-23",
            "The open() function is used to write the content of the response to the file.",
            "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"
        ],
        [
            "22676-91",
            "It uses the requests library to make the HTTP request and the built-in open() function to write the response content to the file",
            "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"
        ],
        [
            "22676-14",
            "The response object can be used to access the response data, headers, and status code of the HTTP response",
            "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"
        ],
        [
            "22676-1",
            ":\n\nimport requests\nresponse = requests.get(url)\n\nThis code snippet imports the requests module and uses its get() method to download the specified file from the given URL over HTTP",
            "r = requests.get(url)"
        ],
        [
            "22676-64",
            ":\n\nimport requests\nresponse = requests.get(url)\nif response.status_code == 200:\n    with open(\"10MB\", \"wb\") as f:\n        f.write(response.content)\n\nThis code snippet downloads a file from the specified URL over HTTP and saves it to a file named \"10MB\" with a size of 10MB",
            "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"
        ],
        [
            "4490961-76",
            ":\n\n\n\nimport numpy as np\nP = np.array([[1, 2], [3, 4]])\nT = np.array([[5, 6], [",
            "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"
        ],
        [
            "1592158-5",
            ": float(hexstr('470FC614'))",
            "struct.unpack('!f', '470FC614'.decode('hex'))[0]"
        ],
        [
            "7286365-38",
            ":\n\n[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]",
            "list(reversed(list(range(10))))"
        ],
        [
            "20573459-83",
            "Finally, it prints the date in the desired format using the strftime() method",
            "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"
        ],
        [
            "23164058-67",
            ":\n\nimport base64\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded_string = base64.b64encode(binary_string).decode('utf-8')\n    return encoded_string\n\n\n\nimport hashlib\ndef encode_base64(binary_string):\n    binary_string = binary_string.encode('utf-8')\n    encoded",
            "base64.b64encode(bytes('your string', 'utf-8'))"
        ],
        [
            "11236006-9",
            "The output is the list of duplicate values",
            "[k for k, v in list(Counter(mylist).items()) if v > 1]"
        ],
        [
            "31247198-48",
            "In this case, we set the second argument to False to exclude the index column from the output",
            "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"
        ],
        [
            "31247198-21",
            "df.to_csv('c:\\\\data\\\\pandas.txt', index=False)",
            "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"
        ],
        [
            "15851568-6",
            "Finally, the code prints the contents of x_list",
            "print(x.rpartition('-')[0])"
        ],
        [
            "15851568-9",
            "The string[:-1] syntax is used to slice the string and return the last character before the '-' symbol",
            "print(x.rsplit('-', 1)[0])"
        ],
        [
            "4172131-18",
            ":\n\nimport random\n\nmy_list = random.sample(range(1, 100), 5)\n\nprint(my_list)\n\nThis code snippet will create a list of 5 random integers between 1 and 100",
            "[int(1000 * random.random()) for i in range(10000)]"
        ],
        [
            "6677332-3",
            "Finally, it prints the result to the console.",
            "datetime.datetime.now().strftime('%H:%M:%S.%f')"
        ],
        [
            "583557-14",
            ":\n\nprint('{:<10}{:<20}'.format('Column 1', 'Column 2'))\nfor row in tab:\n    print('{:<10}{:<20}'.format(row[0], row[1]))\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7      Row 8\nRow 9      Row 10\n\n\n\n\nOutput:\nColumn 1  Column 2\nRow 1      Row 2\nRow 3      Row 4\nRow 5      Row 6\nRow 7",
            "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"
        ],
        [
            "26053849-22",
            "The resulting DataFrame contains only the non-zero values in each column.\n\ndf[df.nonzero().sum(axis=1)]\n\nOutput:\n\n   A  B  C\n0  1  5  9\n1  2  6 10\n2  3  7 11\n3  4  8 12",
            "df.astype(bool).sum(axis=1)"
        ],
        [
            "30693804-5",
            "The filter() function is used to select only the characters that match the str.isalnum() regular expression, which matches any character that is both alphabetic and numeric",
            "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"
        ],
        [
            "30693804-72",
            "Finally, it prints the modified string",
            "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"
        ],
        [
            "14435268-66",
            "The text attribute of the resulting element will contain the text content of the matched tag",
            "print(soup.find('name').string)"
        ],
        [
            "2011048-15",
            ":\n\nwith open(filepath, 'r') as file:\n    count = len(file.read())\nprint(count)",
            "os.stat(filepath).st_size"
        ],
        [
            "2600191-99",
            ":\", count)",
            "l.count('a')"
        ],
        [
            "2600191-23",
            "items = ['apple', 'banana', 'cherry', 'date', 'elderberry']\ncount = 0\nfor item in items:\n    if item in l:\n        count += 1\nprint(count)",
            "Counter(l)"
        ],
        [
            "2600191-53",
            "count = 0\nfor item in l:\n    if item in l:\n        count += 1\nprint(count)",
            "[[x, l.count(x)] for x in set(l)]"
        ],
        [
            "2600191-55",
            "count = 0\nfor item in l:\n    if item in l:\n        count += 1\nprint(count)",
            "dict(((x, l.count(x)) for x in set(l)))"
        ],
        [
            "2600191-98",
            ":\", count)",
            "l.count('b')"
        ],
        [
            "12842997-15",
            "import os\nsrcfile ='srcfile'\ndstdir = 'dstdir'\nos.system(f\"cp {srcfile} {dstdir}\")",
            "shutil.copy(srcfile, dstdir)"
        ],
        [
            "38152389-84",
            ":\n\ndf['c'] = df['a'] + df['b']",
            "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"
        ],
        [
            "16296643-89",
            "t = [1, 2, 3]\nt = tuple(t)",
            "tuple(l)"
        ],
        [
            "16296643-20",
            "level1 = (1, 2, 3)\nlevel1_list = list(level1)",
            "level1 = map(list, level1)"
        ],
        [
            "3880399-74",
            ":\n\nwith open(logFile, 'w') as f:\n    pprint(dataobject, stream=f)",
            "pprint.pprint(dataobject, logFile)"
        ],
        [
            "21800169-34",
            "The resulting integer values represent the index of rows in the 'BoolCol' column that contain 'True'.",
            "df.loc[df['BoolCol']]"
        ],
        [
            "21800169-19",
            "df[df['BoolCol'] == True]['index']\n\n\ndf[df['BoolCol'] == True]['index']",
            "df.iloc[np.flatnonzero(df['BoolCol'])]"
        ],
        [
            "21800169-92",
            ":\n\ndf[df['BoolCol'].isin([True])]['index']",
            "df[df['BoolCol'] == True].index.tolist()"
        ],
        [
            "21800169-41",
            ":\n\ndf['BoolCol'].str.contains('True').astype(int)",
            "df[df['BoolCol']].index.tolist()"
        ],
        [
            "299446-100",
            "os.chdir('/path/to/owd')",
            "os.chdir(owd)"
        ],
        [
            "32063985-36",
            "If it does, it uses the decompose() method to remove the div",
            "soup.find('div', id='main-content').decompose()"
        ],
        [
            "17960441-40",
            "for i in range(len(a)): result.append((a[i], b[i]))",
            "np.array([zip(x, y) for x, y in zip(a, b)])"
        ],
        [
            "17960441-39",
            ":\n\na = [1, 2, 3, 4, 5]\nb = [6, 7, 8, 9, 10]\nc = zip(a, b)\nprint(c)",
            "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"
        ],
        [
            "26443308-74",
            "In this case, the specified value is }, and the code snippet returns the index of the last occurrence of } in the string",
            "'abcd}def}'.rfind('}')"
        ],
        [
            "20546419-7",
            "The resulting array is then printed to the console",
            "np.random.shuffle(np.transpose(r))"
        ],
        [
            "574236-63",
            ":\n\nimport os\ndrive_letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nfor letter in drive_letters:\n    if os.path.exists(letter):\n        print(letter)\n\nThis code snippet will print out all the letters on the computer's drives that have files",
            "os.statvfs('/').f_files - os.statvfs('/').f_ffree"
        ],
        [
            "7011291-98",
            "The result variable will contain the data from the first row of the result set",
            "cursor.fetchone()[0]"
        ],
        [
            "4454298-91",
            ":\n\nwith open('infile', 'r') as f:\n    contents = f.read()\n    contents = '#test firstline\\n' + contents\nwith open('outfile', 'w') as f:\n    f.write(contents)",
            "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"
        ],
        [
            "9012008-0",
            ":\n\n\n\n\nimport re\ndef contains_regex(string, regex):\n    return bool(re.search(regex, string))\ndef foobarrrr_contains_regex():\n    return contains_regex('foobarrrr', 'ba[rzd]')\nprint(foobarrrr_contains_regex())",
            "bool(re.search('ba[rzd]', 'foobarrrr'))"
        ],
        [
            "7961363-85",
            ": [1, 2, 3, 4, 5]",
            "list(set(t))"
        ],
        [
            "7961363-86",
            "It uses a set to keep track of the items that have already been seen, and appends each new item to the result list if it is not already in the set",
            "list(set(source_list))"
        ],
        [
            "7961363-7",
            "The resulting list is printed",
            "list(OrderedDict.fromkeys('abracadabra'))"
        ],
        [
            "5183533-81",
            ":\n\na = [1, 2, 3, 4, 5]\na_list = list(a)\nprint(a_list)",
            "numpy.array(a).reshape(-1).tolist()"
        ],
        [
            "5183533-11",
            "a[0]",
            "numpy.array(a)[0].tolist()"
        ],
        [
            "5999747-97",
            ": soup.find('td', text",
            "print(soup.find(text='Address:').findNext('td').contents[0])"
        ],
        [
            "8908287-54",
            "The b64encode() method is used to encode the string, and the decode() method is used to decode the resulting bytes back into a string",
            "encoded = base64.b64encode('data to be encoded')"
        ],
        [
            "8908287-40",
            "b'helloworld'",
            "encoded = 'data to be encoded'.encode('ascii')"
        ],
        [
            "9035479-73",
            "my_object.my_str",
            "getattr(my_object, my_str)"
        ],
        [
            "34945274-35",
            ":\n\nA = [0, 2, 3, 4, 0, 6, 7, 8, 0, 9]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3, 4] = set(A)\nA = [0 if x not in [1, 3, 4] else x for x in A]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3, 4] = set(A)\nA = [0 if x not in [1, 3, 4] else x for x in A]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3, 4] = set(A)\nA = [0 if x not in [1, 3, 4] else x for x in A]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3, 4] = set(A)\nA = [0 if x not in [1, 3, 4] else x for x in A]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3, 4] = set(A)\nA = [0 if x not in [1, 3, 4] else x for x in A]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3, 4] = set(A)\nA = [0 if x not in [1, 3, 4] else x for x in A]\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 3,",
            "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"
        ],
        [
            "15819980-52",
            "Finally, it prints the result to the console",
            "np.mean(a, axis=1)"
        ],
        [
            "15907200-35",
            "This will add the header to the CSV file",
            "writer.writeheader()"
        ],
        [
            "23359886-48",
            "The result is stored in the variable'result', which can be accessed later in the code",
            "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"
        ],
        [
            "26097916-29",
            ":\n\nimport pandas as pd\ndf = pd.DataFrame({'email': sf['email'], 'list': sf['list']})",
            "pd.DataFrame({'email': sf.index, 'list': sf.values})"
        ],
        [
            "1405602-48",
            ":\n\nfrom PIL import Image\nimage = Image.open('image.jpg')\nimage = image.resize((x, y), Image.ANTIALIAS)\n\nThis code snippet resizes the image image to a width and height of (x, y) with the filter of ANTIALIAS",
            "image = image.resize((x, y), Image.ANTIALIAS)"
        ],
        [
            "9323159-38",
            "Finally, it prints the differences list",
            "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"
        ],
        [
            "29877663-54",
            "The resulting elements are stored in a list, which can be accessed using square brackets.\n\nNote: The soup variable is assumed to be an instance of the BeautifulSoup class, which is a Python library for parsing HTML and XML documents",
            "soup.find_all('span', {'class': 'starGryB sp'})"
        ],
        [
            "16193578-72",
            "This lambda function is passed to the sort() method, which sorts the list based on the 'degrees' value of its elements",
            "sorted(list5, lambda x: (degree(x), x))"
        ],
        [
            "16193578-58",
            "The reverse argument is set to True to ensure that the list is sorted in descending order.\n\nmy_list = [3, 1, 5, 2, 4]\nmy_key = lambda x: x[1]\nsorted_list = sorted(my_list, key=my_key, reverse=True)\nprint(sorted_list)\n\nOutput:\n\n[1, 2, 3, 4, 5]",
            "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"
        ],
        [
            "7373219-3",
            "obj.attr",
            "getattr(obj, 'attr')"
        ],
        [
            "1960516-75",
            ":\nimport json\njson_string = json.dumps({'value': Decimal('3.9')})\nprint(json_string)\"",
            "json.dumps(Decimal('3.9'))"
        ],
        [
            "29836836-87",
            "The resulting boolean mask is then used to filter the DataFrame",
            "df.groupby('A').filter(lambda x: len(x) > 1)"
        ],
        [
            "35420052-72",
            "In this case, we want a horizontal color bar, so we set it to 'horizontal'",
            "plt.colorbar(mappable=mappable, cax=ax3)"
        ],
        [
            "29903025-37",
            ":\n\ndf['text'].value_counts().head(100).index.tolist()",
            "Counter(' '.join(df['text']).split()).most_common(100)"
        ],
        [
            "4530069-65",
            "The datetime object is then printed to the console",
            "datetime.now(pytz.utc)"
        ],
        [
            "9262278-9",
            "The resulting JSON response is then returned to the client",
            "return HttpResponse(data, mimetype='application/json')"
        ],
        [
            "3595685-42",
            ":\n\nos.system('background-process arguments &')",
            "subprocess.Popen(['background-process', 'arguments'])"
        ],
        [
            "30729735-74",
            "Finally, it prints the index",
            "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"
        ],
        [
            "22799300-26",
            "The tuples are passed as an argument to the DataFrame constructor, and the columns are specified as 'out-1' and 'out-2'",
            "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"
        ],
        [
            "3464359-19",
            "import matplotlib.pyplot as plt\nimport numpy as np\nplt.xticks(np.arctan2(np.sqrt(2), 1), ['label1', 'label2', 'label3'])\nplt.xticks(np.arctan2(np.sqrt(2), -1), ['label4', 'label5', 'label6'])\nplt.xticks(np.arctan2(np.sqrt(2), 0), ['label7', 'label8', 'label9'])\nplt.xticks(np.arctan2(np.sqrt(2), 1), ['label10', 'label11', 'label12'])\nplt.xticks(np.arctan2(np.sqrt(2), -1), ['label13', 'label14', 'label15'])\nplt.xticks(np.arctan2(np.sqrt(2), 0), ['label16', 'label17', 'label18'])\nplt.xticks(np.arctan2(np.sqrt(2), 1), ['label19', 'label20', 'label21'])\nplt.xticks(np.arctan2(np.sqrt(2), -1), ['label22', 'label23', 'label24'])\nplt.xticks(np.arctan2(np.sqrt(2), 0), ['label25', 'label26', 'label27'])\nplt.xticks(np.arctan2(np.sqrt(2), 1), ['label28', 'label29', 'label30'])\nplt.xticks(np.arctan2(np.sqrt(2), -1), ['label31', 'label32', 'label33'])\nplt.xticks(np.arctan2(np.sqrt(2), 0), ['label34', 'label35', 'label36'])\nplt.xticks(np.arctan2(np.sqrt(2), 1), ['label37', 'label38', 'label39'])\nplt.xticks(np.arctan2(np.sqrt(2), -1), ['label40', 'label41', 'label42'])\nplt.xticks(np.arctan2(np",
            "ax.set_xticklabels(labels, rotation=45)"
        ],
        [
            "2212433-44",
            ":\n\n\n\nyourdict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\nnum_keys = len(yourdict)\nprint(num_keys)\n\nThis code snippet will output the number of keys in the dictionary yourdict",
            "len(list(yourdict.keys()))"
        ],
        [
            "2212433-64",
            "3.",
            "len(set(open(yourdictfile).read().split()))"
        ],
        [
            "40924332-83",
            "It uses the apply() function to split the list and the get_dummies() function to create dummy variables for the split columns",
            "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"
        ],
        [
            "804995-74",
            ":\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])\n\n\nsubprocess.call(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', 'arg1', 'arg2'])",
            "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"
        ],
        [
            "26441253-42",
            ":\n\nq.reverse()\n\nThis code snippet will reverse the priority queue q in Python without using classes",
            "q.put((-n, n))"
        ],
        [
            "21887754-31",
            "The resulting array c is printed to the console",
            "print(concatenate((a, b), axis=0))"
        ],
        [
            "21887754-88",
            "The resulting array will have dimensions (M, N, K), where M and N are the dimensions of a and b, respectively, and K is the new dimension resulting from concatenation",
            "print(concatenate((a, b), axis=1))"
        ],
        [
            "21887754-21",
            ": \n\n\n\narray([[1, 2, 3],\n       [4, 5, 6]])",
            "c = np.r_[(a[None, :], b[None, :])]"
        ],
        [
            "21887754-64",
            ": \n\n\n\narray([[1, 2, 3],\n       [4, 5, 6]])",
            "np.array((a, b))"
        ],
        [
            "4356842-88",
            ":\n\nfrom django.http import HttpResponse\nresponse = HttpResponse(status=401)\nresponse['Content-Type'] = 'text/plain'\nresponse.write('Unauthorized')\nreturn response",
            "return HttpResponse('Unauthorized', status=401)"
        ],
        [
            "31793195-78",
            "The integer location of the key 'bob' in the data frame is the index of the corresponding row in the resulting integer array",
            "df.index.get_loc('bob')"
        ],
        [
            "18730044-52",
            "[[1, 4],\n [2, 5],\n [3, 6]]",
            "np.column_stack(([1, 2, 3], [4, 5, 6]))"
        ],
        [
            "22187233-98",
            ":\n\n\nstring = \"it is icy\"\nstring = string.replace(\"i\", \"\")\nprint(string)",
            "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"
        ],
        [
            "22187233-48",
            ":",
            "re.sub('i', '', 'it is icy')"
        ],
        [
            "22187233-75",
            ":\n\n\nstring = \"it is icy\"\nstring = string.replace(\"i\", \"\")\nprint(string)",
            "\"\"\"it is icy\"\"\".replace('i', '')"
        ],
        [
            "22187233-63",
            ":\n\nstring = \"hello world\"\nnew_string = string.replace(\"l\", \"\")\nprint(new_string)",
            "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"
        ],
        [
            "10351772-57",
            ":\n\nnums = []\nfor string in intstringlist:\n    nums.append(int(string))",
            "nums = [int(x) for x in intstringlist]"
        ],
        [
            "10351772-10",
            "This is a simple and efficient way to convert a list of strings into a list of integers",
            "map(int, eval(input('Enter the unfriendly numbers: ')))"
        ],
        [
            "3964681-43",
            "If a file is found with a \".txt\" extension, it is printed to the console",
            "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"
        ],
        [
            "3964681-18",
            "This code will work on any operating system that has an os.listdir() method",
            "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"
        ],
        [
            "3964681-62",
            "If it does, the file is printed to the console",
            "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"
        ],
        [
            "18979111-77",
            "The json.loads() method is used to convert the JSON string into a Python object",
            "json.loads(request.body)"
        ],
        [
            "36402748-46",
            ":\n\ndf.groupby('column_name').size().reset_index(name='counts')\n\nThis code snippet will group the DataFrame by the specified column, count the number of occurrences for each group, and return a new DataFrame with the group names as rows and the count as columns",
            "df.groupby('prots').sum().sort('scores', ascending=False)"
        ],
        [
            "7750557-47",
            "Finally, the JSON data is printed to the console",
            "json.load(urllib.request.urlopen('url'))"
        ],
        [
            "2984751-50",
            "Otherwise, the code inside the else block is executed",
            "Entry.objects.filter(pub_date__contains='08:00')"
        ],
        [
            "5944630-52",
            "The sorted_list is returned",
            "list.sort(key=lambda item: (item['points'], item['time']))"
        ],
        [
            "19546911-36",
            "If not, it assigns the value 0 to the variable number",
            "struct.unpack('H', struct.pack('h', number))"
        ],
        [
            "20107570-40",
            "df.to_csv('output.csv', index=False)",
            "df.to_csv(filename, index=False)"
        ],
        [
            "8740353-74",
            "Finally, it converts the dictionary to a json string using the json.dumps() method and assigns the result to the json_data variable",
            "json_data = json.loads(unescaped)"
        ],
        [
            "18367007-15",
            "The f.write(newFileBytes) statement writes the contents of newFileBytes to the file",
            "newFile.write(struct.pack('5B', *newFileBytes))"
        ],
        [
            "16125229-76",
            "last_key = dict.keys()[-1]",
            "list(dict.keys())[-1]"
        ],
        [
            "10668585-75",
            ":\n\n\n\nmax_email = AuthorizedEmail.objects.filter(field='added').values_list('id', flat=True).max()\n\n\nThis code snippet will return the maximum value associated with the added field in the AuthorizedEmail model",
            "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"
        ],
        [
            "10607688-46",
            ":\n\nimport datetime\nnow = datetime.datetime.now()\nprint(now)",
            "datetime.datetime.now()"
        ],
        [
            "17794266-82",
            ": 5\n\n\n\nThis is the correct output for the given code snippet, as it correctly prints the value 5 as the result of finding the highest element in absolute value in the given numpy matrix x",
            "max(x.min(), x.max(), key=abs)"
        ]
    ]
}